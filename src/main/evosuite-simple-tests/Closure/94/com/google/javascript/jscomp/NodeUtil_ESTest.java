/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:34:28 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("s7C=im$GY0Z");
        Node node1 = NodeUtil.newFunctionNode("jQN;gF0b)GE ke", stack0, node0, 98, 9);
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("s7C=im$GY0Z");
        Node node1 = NodeUtil.newFunctionNode("jQN;gF0b)GE ke", stack0, node0, 98, 9);
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        assertEquals(98, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("s7C=im$GY0Z");
        Node node1 = NodeUtil.newFunctionNode("jQN;gF0b)GE ke", stack0, node0, 98, 9);
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("s7C=im$GY0Z");
        Node node1 = NodeUtil.newFunctionNode("jQN;gF0b)GE ke", stack0, node0, 98, 9);
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        assertEquals(9, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        Node node0 = new Node(82, 82, 82);
        // Undeclared exception!
        try {
            NodeUtil.getPrototypePropertyName(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        Node node0 = Node.newString(37, "");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Y+&|@/7JZO6(", 98, 98);
        // Undeclared exception!
        try {
            NodeUtil.functionCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected CALL node, got NAME
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("EehOiod5xbOZ}:\"j)", 76, 76);
        // Undeclared exception!
        try {
            NodeUtil.isVarArgsFunction(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test00710() throws Throwable {
        Node node0 = Node.newString("]:E@S$qSTk");
        int int0 = NodeUtil.getNameReferenceCount(node0, "]:E@S$qSTk");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test00811() throws Throwable {
        Node node0 = Node.newNumber(32.0);
        Node node1 = NodeUtil.newQualifiedNameNode("V(eK9|L[kKbxvwS", node0, "V(eK9|L[kKbxvwS");
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test00912() throws Throwable {
        Node node0 = new Node(120);
        // Undeclared exception!
        try {
            NodeUtil.constructorCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected NEW node, got CATCH
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01013() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionBody(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01114() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeELSE 109
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01215() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        Node node0 = new Node(96);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        Node node0 = new Node(26);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        Node node0 = new Node(41);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        Node node0 = Node.newString(85, "8Y*|@f/7J6ZO6(");
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        Node node0 = new Node(86, 86, (-1410));
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        Node node0 = Node.newString(98, "(F:nction)");
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        Node node0 = Node.newString(101, "(F:nction)");
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test02024() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(47, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test02025() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(47, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test02126() throws Throwable {
        Node node0 = Node.newNumber((-243.18483891087));
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02227() throws Throwable {
        Node node0 = Node.newString("C~{B-',|/},`9A#rJ`", 49, 49);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02328() throws Throwable {
        Node node0 = Node.newString(43, "H~1Z%AS");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02429() throws Throwable {
        Node node0 = new Node(44);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02530() throws Throwable {
        Node node0 = Node.newString("8Y*|@f/7J6ZO6(");
        Node node1 = new Node(47, node0, node0);
        NodeUtil.getExpressionBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test02631() throws Throwable {
        Node node0 = new Node(63);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02732() throws Throwable {
        Node node0 = new Node(64);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        Node node0 = new Node(122);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        Node node0 = new Node(67);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        Node node0 = Node.newString("");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 149, 149);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(149, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test03238() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 149, 149);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(149, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03239() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 149, 149);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test03340() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(117, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test03341() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(113, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03342() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test03343() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        NodeUtil.getExpressionBooleanValue(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test03444() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")9u_S6", 47, 47);
        String string0 = NodeUtil.getStringValue(node0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03445() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")9u_S6", 47, 47);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals(47, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test03446() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")9u_S6", 47, 47);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals(47, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03547() throws Throwable {
        Node node0 = new Node(0, 0, 0);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test03648() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("1", string0);
    }

    @Test(timeout = 4000)
    public void test03749() throws Throwable {
        Node node0 = Node.newString("&=");
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("&=", string0);
    }

    @Test(timeout = 4000)
    public void test03850() throws Throwable {
        Node node0 = Node.newString(41, "7?w96");
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("null", string0);
    }

    @Test(timeout = 4000)
    public void test03951() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        Node node1 = new Node(44, node0, node0);
        String string0 = NodeUtil.getStringValue(node1);
        assertEquals("true", string0);
    }

    @Test(timeout = 4000)
    public void test04052() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test04053() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        assertEquals(1205, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test04054() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        assertEquals("undefined", string0);
    }

    @Test(timeout = 4000)
    public void test04155() throws Throwable {
        Node node0 = Node.newNumber((-128.057977177064));
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("-128.057977177064", string0);
    }

    @Test(timeout = 4000)
    public void test04256() throws Throwable {
        Node node0 = Node.newString("(f&OV", 101, 101);
        node0.addChildToFront(node0);
        String string0 = NodeUtil.getNearestFunctionName(node0);
        assertEquals("(f&OV", string0);
    }

    @Test(timeout = 4000)
    public void test04357() throws Throwable {
        Node node0 = new Node(29, (-39), (-1));
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test04458() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("EehOiod5xbOZ}:\"j)", 76, 76);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04459() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("EehOiod5xbOZ}:\"j)", 76, 76);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(76, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test04460() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("EehOiod5xbOZ}:\"j)", 76, 76);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(76, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04461() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("EehOiod5xbOZ}:\"j)", 76, 76);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04562() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToBack(node1);
        assertEquals(1205, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test04563() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToBack(node1);
        assertNotSame(node1, node0);
    }

    @Test(timeout = 4000)
    public void test04564() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToBack(node1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04665() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04766() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04867() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04968() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", (-406), (-406));
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04969() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", (-406), (-406));
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test05070() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertEquals(117, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test05071() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertEquals(113, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test05072() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test05073() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 117, 113);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05275() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05376() throws Throwable {
        Node node0 = new Node(105, 60, 105);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05477() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, true);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test05578() throws Throwable {
        Node node0 = Node.newString(9, "<9:g|`?_p[g");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test05679() throws Throwable {
        Node node0 = new Node(5);
        Node node1 = new Node(10, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05780() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(12, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05881() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node0 = Node.newString(13, "instanceof", 172, 23);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05982() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1435, 1435);
        Node node1 = new Node(14, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertEquals(1435, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test05983() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1435, 1435);
        Node node1 = new Node(14, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05984() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1435, 1435);
        Node node1 = new Node(14, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertEquals(1435, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test05985() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1435, 1435);
        Node node1 = new Node(14, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test06086() throws Throwable {
        Node node0 = Node.newString(15, "<9:g|`?_p[g");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06187() throws Throwable {
        Node node0 = Node.newString(79, "T1", 79, 79);
        Node node1 = new Node(16, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06288() throws Throwable {
        Node node0 = new Node(19);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06389() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(20, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06490() throws Throwable {
        Node node0 = new Node(21, (-1), 100);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Set<String> set0 = jSDocInfo0.getModifies();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06591() throws Throwable {
        Node node0 = new Node(35);
        Node node1 = new Node(22, node0, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06692() throws Throwable {
        Node node0 = new Node(23, 1, 30);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06793() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = new Node(25, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06894() throws Throwable {
        Node node0 = new Node(35);
        Node node1 = new Node(26, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06995() throws Throwable {
        Node node0 = new Node((-1463), (-1463), (-1463));
        Node node1 = new Node(27, node0, node0, node0, 2, 2);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07096() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(29, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07197() throws Throwable {
        Node node0 = new Node(1950, 81, 1950);
        Node node1 = new Node(30, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07298() throws Throwable {
        Node node0 = Node.newString(8202, "wAe<ycvT", 8202, 115);
        Node node1 = new Node(31, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07399() throws Throwable {
        Node node0 = Node.newString(32, "&=");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test074100() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("comgoogle.protobuf.DVscriptorsDescriptorPool", 37, 37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test074101() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("comgoogle.protobuf.DVscriptorsDescriptorPool", 37, 37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(37, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test074102() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("comgoogle.protobuf.DVscriptorsDescriptorPool", 37, 37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test074103() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("comgoogle.protobuf.DVscriptorsDescriptorPool", 37, 37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(2, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test074104() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("comgoogle.protobuf.DVscriptorsDescriptorPool", 37, 37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(37, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test075105() throws Throwable {
        Node node0 = new Node(63, (-2961), 12);
        Node node1 = new Node(34, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test076106() throws Throwable {
        Node node0 = new Node(86);
        Node node1 = new Node(36, node0, node0);
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.of("8G$3u", "8G$3u", "8G$3u");
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, immutableSortedSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test077107() throws Throwable {
        Node node0 = Node.newString(37, "");
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078108() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 75, 75);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test078109() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 75, 75);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078110() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 75, 75);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(75, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test078111() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 75, 75);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(75, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test079112() throws Throwable {
        Node node0 = Node.newString("===", 24, 24);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test080113() throws Throwable {
        Node node0 = Node.newString(41, "<09:g|`?_p[g");
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test081114() throws Throwable {
        Node node0 = Node.newString(42, "<9:g|`D_p[g");
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test082115() throws Throwable {
        Node node0 = new Node((-9), (-9), (-9));
        Node node1 = new Node(43, node0, node0, node0, node0, 8, 40);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test083116() throws Throwable {
        Node node0 = new Node((-1463));
        Node node1 = new Node(44, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test084117() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 75, 75);
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.add("acJyiG+${/");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test084118() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 75, 75);
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.add("acJyiG+${/");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(75, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test084119() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 75, 75);
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.add("acJyiG+${/");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertEquals(75, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test085120() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("<<=");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test086121() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test087122() throws Throwable {
        Node node0 = Node.newString(105, "j");
        Node node1 = new Node(9, node0, node0, 15, 1);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088123() throws Throwable {
        Node node0 = new Node(10, 37, 29);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test089124() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test090125() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test091126() throws Throwable {
        Node node0 = new Node(13, 1186, 2048);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test092127() throws Throwable {
        Node node0 = Node.newString("8Y*|@f/7J6ZO6(");
        Node node1 = new Node(14, node0, 31, 20);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test093128() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test094129() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test095130() throws Throwable {
        Node node0 = new Node(17, 40, 40);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test096131() throws Throwable {
        Node node0 = Node.newString(18, "({PWX-lW^q");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test097132() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test098133() throws Throwable {
        Node node0 = Node.newString(20, "H=RbWpITS");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099134() throws Throwable {
        Node node0 = Node.newString(21, "ni@?8");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100135() throws Throwable {
        Node node0 = Node.newString(22, "(5`o'-!1v6");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test101136() throws Throwable {
        Node node0 = new Node(23, 23, 23);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test102137() throws Throwable {
        Node node0 = new Node(24, 2026, 250);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(21);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test103138() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = new Node(25, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test104139() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        Node node1 = new Node(26, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test105140() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test106141() throws Throwable {
        Node node0 = Node.newString(28, "com.google.javascript.jscomp.CodeConsumer", (-984), Integer.MAX_VALUE);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107142() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(29, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108143() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109144() throws Throwable {
        Node node0 = Node.newString(31, "T1");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test110145() throws Throwable {
        Node node0 = new Node(32, 115, 115);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test111146() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test111147() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test111148() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertEquals(37, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test111149() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertEquals(37, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test111150() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test112151() throws Throwable {
        Node node0 = new Node(306, 25, 306);
        Node node1 = new Node(34, node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETPROP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test113152() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test114153() throws Throwable {
        Node node0 = new Node(36, 53, 53);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETELEM 53
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test115154() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test116155() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117156() throws Throwable {
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        Node node0 = Node.newNumber((double) 63, 63, 63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test118157() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119158() throws Throwable {
        Node node0 = new Node(46, 115, 1424);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120159() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test121160() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTHROW 49
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test122161() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test123162() throws Throwable {
        Node node0 = Node.newString(52, "?_S6");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124163() throws Throwable {
        Node node0 = Node.newString(53, "\"");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLOCAL_LOAD \"
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test125164() throws Throwable {
        Node node0 = Node.newString(54, "B5x'\"y");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test126165() throws Throwable {
        Node node0 = new Node(55, 21, 7);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETVAR 21
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test127166() throws Throwable {
        Node node0 = Node.newString(56, "argum9nts");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test128167() throws Throwable {
        Node node0 = Node.newString(57, "KM7", 57, 57);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test129168() throws Throwable {
        Node node0 = new Node(58, 58, 111);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test130169() throws Throwable {
        Node node0 = new Node(59);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_NEXT
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test131170() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132171() throws Throwable {
        Node node0 = new Node(61, 61, 61);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test133172() throws Throwable {
        Node node0 = Node.newString(62, "MIXIN");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134173() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test135174() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test136175() throws Throwable {
        Node node0 = new Node(66, 21, 7);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test137176() throws Throwable {
        Node node0 = Node.newString(67, "(5`o'-!1v6");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDEL_REF (5`o'-!1v6
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test138177() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_CALL 68
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test139178() throws Throwable {
        Node node0 = Node.newString(70, "");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140179() throws Throwable {
        Node node0 = new Node(71);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141180() throws Throwable {
        Node node0 = Node.newString(72, "8Y*/7JZO62", 72, 72);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeESCXMLTEXT 8Y*_/7JZO62 72
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test142181() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_MEMBER 73
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test143182() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144183() throws Throwable {
        Node node0 = Node.newString(75, "(5`o'-!1v6");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NAME (5`o'-!1v6
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test145184() throws Throwable {
        Node node0 = Node.newString(76, "EehOiod5xbOZ}:\"j)");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146185() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTRY 77
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test147186() throws Throwable {
        Node node0 = Node.newString(79, "ni@JK?8");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test148187() throws Throwable {
        Node node0 = Node.newString(80, "EehOiod5xbOZ}:\"j)");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRB EehOiod5xbOZ}:\"j)
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test149188() throws Throwable {
        Node node0 = Node.newString(81, "*)Dr*+", 47, (-374));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test150189() throws Throwable {
        Node node0 = new Node(82, 82, 82);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRC 82
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test151190() throws Throwable {
        Node node0 = new Node(83);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test152191() throws Throwable {
        Node node0 = Node.newString(84, "C~{B-',|/},`9A#rJ`");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRP C~{B-',|/},`9A#rJ`
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test153192() throws Throwable {
        Node node0 = Node.newString(85, "8Y*@f/7J6ZO6(");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test154193() throws Throwable {
        Node node0 = Node.newString(87, "namespace", 87, (-1674));
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test155194() throws Throwable {
        Node node0 = new Node(88);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test156195() throws Throwable {
        Node node0 = new Node(89, 97, 97);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test157196() throws Throwable {
        Node node0 = Node.newString(90, "ni@JK?8");
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test158197() throws Throwable {
        Node node0 = new Node(49, 49, (-236));
        Node node1 = new Node(91, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test159198() throws Throwable {
        Node node0 = new Node(92, 43, 112);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test160199() throws Throwable {
        Node node0 = new Node(93);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test161200() throws Throwable {
        Node node0 = new Node(94);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test162201() throws Throwable {
        Node node0 = new Node(95);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test163202() throws Throwable {
        Node node0 = Node.newString(96, "malformed 'for' statement ");
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test164203() throws Throwable {
        Node node0 = new Node(98, 0, 12);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test165204() throws Throwable {
        Node node0 = Node.newString(99, "tP{3pQvw\"G V739Y38_");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test166205() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test167206() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test168207() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test169208() throws Throwable {
        Node node0 = new Node(103, (-3272), 108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test170209() throws Throwable {
        Node node0 = new Node(104, 104, 149);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test171210() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test172211() throws Throwable {
        Node node0 = Node.newString(106, "HQTeZ");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test173212() throws Throwable {
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test174213() throws Throwable {
        Node node0 = new Node(108, 1003, 108);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeIF 1003
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test175214() throws Throwable {
        Node node0 = new Node(110);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSWITCH
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test176215() throws Throwable {
        Node node0 = new Node(114, 114, 21);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test177216() throws Throwable {
        Node node0 = new Node(117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test178217() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeVAR 118
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test179218() throws Throwable {
        Node node0 = Node.newString(120, "U'N");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test180219() throws Throwable {
        Node node0 = new Node(121, (-108), 49);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeFINALLY
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test181220() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test182221() throws Throwable {
        Node node0 = new Node(0);
        Node node1 = new Node(30, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test183222() throws Throwable {
        Node node0 = Node.newString(32, "?KB");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test184223() throws Throwable {
        Node node0 = new Node(34, 34, 1232);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test185224() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("VCE~oKr", "VCE~oKr");
        Node node1 = new Node(36, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test186225() throws Throwable {
        Node node0 = Node.newString(41, "<09:g|`?_p[g");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test187226() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test188227() throws Throwable {
        Node node0 = Node.newString(43, "Mv*lM|");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test189228() throws Throwable {
        Node node0 = new Node(51, 51, 104);
        Node node1 = new Node(44, node0, node0, node0);
        node0.addChildrenToBack(node1);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
        }
    }

    @Test(timeout = 4000)
    public void test190229() throws Throwable {
        Node node0 = new Node(45, 11, 1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test191230() throws Throwable {
        Node node0 = new Node(47, 37, 103);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test192231() throws Throwable {
        Node node0 = Node.newString(55, "C~{B-',|/},`9A#rJ`");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test193232() throws Throwable {
        Node node0 = Node.newString(64, "y_S6");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test194233() throws Throwable {
        Node node0 = new Node(67);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test195234() throws Throwable {
        Node node0 = new Node(68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test196235() throws Throwable {
        Node node0 = Node.newString(69, "'6ti01pBoz,");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test197236() throws Throwable {
        Node node0 = Node.newString(73, "ni@JK?8");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test198237() throws Throwable {
        Node node0 = Node.newString(75, "Infinity", 75, 75);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test199238() throws Throwable {
        Node node0 = Node.newString(77, "?_S6");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test200239() throws Throwable {
        Node node0 = new Node(82, 3002, 52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test201240() throws Throwable {
        Node node0 = Node.newString(83, "<9:g|`?_p[g");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test202241() throws Throwable {
        Node node0 = new Node(84);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test203242() throws Throwable {
        Node node0 = Node.newString(98, "8Y*|@f/7J6ZO6(");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test204243() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test205244() throws Throwable {
        Node node0 = Node.newString(101, "C~{B-',|/},`9A#rJ`");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test206245() throws Throwable {
        Node node0 = Node.newString(108, "Wbe'_^HQf");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test207246() throws Throwable {
        Node node0 = Node.newString(110, "argum9nts");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test208247() throws Throwable {
        Node node0 = new Node(111, 8, 0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test209248() throws Throwable {
        Node node0 = Node.newString(112, "9acJyiG+${/", 112, 112);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test210249() throws Throwable {
        Node node0 = new Node(113, 75, 1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test211250() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test212251() throws Throwable {
        Node node0 = Node.newString(119, "acJyiG+${/", 119, 119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test213252() throws Throwable {
        Node node0 = new Node(121, 86, 31);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test214253() throws Throwable {
        Node node0 = Node.newString(124, "qMB~vX!cxm");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test215254() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("64jaaO", "64jaaO");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test216255() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test216256() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(1, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test217257() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 1470, 1470);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test217258() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 1470, 1470);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test217259() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 1470, 1470);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertEquals(1470, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test217260() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 1470, 1470);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertEquals(1470, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test218261() throws Throwable {
        Node node0 = Node.newString(105, "qMB~vX!cxm");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test219262() throws Throwable {
        Node node0 = Node.newString(37, "");
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test220263() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(97, node0, node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test220264() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(97, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(1470, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test220265() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(97, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test220266() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(97, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(1470, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test221267() throws Throwable {
        Node node0 = new Node(103);
        // Undeclared exception!
        try {
            NodeUtil.callHasLocalResult(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test222268() throws Throwable {
        Node node0 = Node.newString(37, "");
        // Undeclared exception!
        try {
            NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test223269() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test224270() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", 38, 38);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertEquals(38, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test224271() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", 38, 38);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test224272() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", 38, 38);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertEquals(38, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test225273() throws Throwable {
        Node node0 = new Node((-681));
        Node node1 = new Node(49, node0, node0);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test226274() throws Throwable {
        Node node0 = new Node(103);
        MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.AliasKeywords$AliasSpecification");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test227275() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test227276() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test227277() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test227278() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test228279() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        Node node1 = new Node(30, node0, 2, 1);
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.of();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, immutableSortedSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test229280() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("com.google.protobuf.Descriptors$DescriptorPool");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test229281() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("com.google.protobuf.Descriptors$DescriptorPool");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test229282() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("com.google.protobuf.Descriptors$DescriptorPool");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test229283() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, (-2286));
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("com.google.protobuf.Descriptors$DescriptorPool");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test230284() throws Throwable {
        Node node0 = new Node(35);
        Charset charset0 = Charset.defaultCharset();
        Set<String> set0 = charset0.aliases();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, set0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231285() throws Throwable {
        Node node0 = new Node(105, (-1872), (-1872));
        // Undeclared exception!
        try {
            NodeUtil.canBeSideEffected(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test232286() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        String[] stringArray0 = new String[2];
        stringArray0[0] = ")_S6";
        stringArray0[1] = ")_S6";
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf(stringArray0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSortedSet0);
        assertEquals(47, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test232287() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        String[] stringArray0 = new String[2];
        stringArray0[0] = ")_S6";
        stringArray0[1] = ")_S6";
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf(stringArray0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSortedSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test232288() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        String[] stringArray0 = new String[2];
        stringArray0[0] = ")_S6";
        stringArray0[1] = ")_S6";
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf(stringArray0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSortedSet0);
        assertEquals(47, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test233289() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-l", (-3041), (-3041));
        Node node1 = NodeUtil.newExpr(node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripNameSuffixes);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test233290() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-l", (-3041), (-3041));
        Node node1 = NodeUtil.newExpr(node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripNameSuffixes);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test233291() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-l", (-3041), (-3041));
        Node node1 = NodeUtil.newExpr(node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripNameSuffixes);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test234292() throws Throwable {
        Node node0 = Node.newNumber(32.0);
        Node node1 = new Node(29, node0, node0, 45, 0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test235293() throws Throwable {
        int int0 = NodeUtil.precedence(4);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test236294() throws Throwable {
        int int0 = NodeUtil.precedence(97);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test237295() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(5);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for goto (type 5)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test238296() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(6);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifeq (type 6)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test239297() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(7);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifne (type 7)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test240298() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(8);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setname (type 8)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test241299() throws Throwable {
        int int0 = NodeUtil.precedence(9);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test242300() throws Throwable {
        int int0 = NodeUtil.precedence(10);
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test243301() throws Throwable {
        int int0 = NodeUtil.precedence(11);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test244302() throws Throwable {
        int int0 = NodeUtil.precedence(12);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test245303() throws Throwable {
        int int0 = NodeUtil.precedence(13);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test246304() throws Throwable {
        int int0 = NodeUtil.precedence(14);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test247305() throws Throwable {
        int int0 = NodeUtil.precedence(15);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test248306() throws Throwable {
        int int0 = NodeUtil.precedence(16);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test249307() throws Throwable {
        int int0 = NodeUtil.precedence(17);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test250308() throws Throwable {
        int int0 = NodeUtil.precedence(18);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test251309() throws Throwable {
        int int0 = NodeUtil.precedence(19);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test252310() throws Throwable {
        int int0 = NodeUtil.precedence(20);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test253311() throws Throwable {
        int int0 = NodeUtil.precedence(21);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test254312() throws Throwable {
        int int0 = NodeUtil.precedence(22);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test255313() throws Throwable {
        int int0 = NodeUtil.precedence(23);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test256314() throws Throwable {
        int int0 = NodeUtil.precedence(24);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test257315() throws Throwable {
        int int0 = NodeUtil.precedence(25);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test258316() throws Throwable {
        int int0 = NodeUtil.precedence(26);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test259317() throws Throwable {
        int int0 = NodeUtil.precedence(27);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test260318() throws Throwable {
        int int0 = NodeUtil.precedence(28);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test261319() throws Throwable {
        int int0 = NodeUtil.precedence(29);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test262320() throws Throwable {
        int int0 = NodeUtil.precedence(30);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test263321() throws Throwable {
        int int0 = NodeUtil.precedence(31);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test264322() throws Throwable {
        int int0 = NodeUtil.precedence(32);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test265323() throws Throwable {
        int int0 = NodeUtil.precedence(33);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test266324() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setprop (type 34)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test267325() throws Throwable {
        int int0 = NodeUtil.precedence(35);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test268326() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setelem (type 36)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test269327() throws Throwable {
        int int0 = NodeUtil.precedence(37);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test270328() throws Throwable {
        int int0 = NodeUtil.precedence(38);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test271329() throws Throwable {
        int int0 = NodeUtil.precedence(39);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test272330() throws Throwable {
        int int0 = NodeUtil.precedence(40);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test273331() throws Throwable {
        int int0 = NodeUtil.precedence(41);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test274332() throws Throwable {
        int int0 = NodeUtil.precedence(42);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test275333() throws Throwable {
        int int0 = NodeUtil.precedence(43);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test276334() throws Throwable {
        int int0 = NodeUtil.precedence(44);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test277335() throws Throwable {
        int int0 = NodeUtil.precedence(45);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test278336() throws Throwable {
        int int0 = NodeUtil.precedence(46);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test279337() throws Throwable {
        int int0 = NodeUtil.precedence(47);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test280338() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for bindname (type 48)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test281339() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for throw (type 49)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test282340() throws Throwable {
        int int0 = NodeUtil.precedence(52);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test283341() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(53);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=53> (type 53)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test284342() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(55);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setvar (type 55)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test285343() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(56);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=56> (type 56)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test286344() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=57> (type 57)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test287345() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(60);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=60> (type 60)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test288346() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(61);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for thisfn (type 61)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test289347() throws Throwable {
        int int0 = NodeUtil.precedence(63);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test290348() throws Throwable {
        int int0 = NodeUtil.precedence(64);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test291349() throws Throwable {
        int int0 = NodeUtil.precedence(65);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test292350() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=66> (type 66)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test293351() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(67);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=67> (type 67)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test294352() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(68);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=68> (type 68)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test295353() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ref_special (type 69)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test296354() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=70> (type 70)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test297355() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(71);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=71> (type 71)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test298356() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=73> (type 73)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test299357() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(74);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=74> (type 74)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test300358() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(75);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=75> (type 75)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test301359() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(76);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=76> (type 76)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test302360() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for try (type 77)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test303361() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for semi (type 78)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test304362() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lb (type 79)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test305363() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rb (type 80)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test306364() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lc (type 81)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test307365() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rc (type 82)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test308366() throws Throwable {
        int int0 = NodeUtil.precedence(83);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test309367() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rp (type 84)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test310368() throws Throwable {
        int int0 = NodeUtil.precedence(85);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test311369() throws Throwable {
        int int0 = NodeUtil.precedence(86);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test312370() throws Throwable {
        int int0 = NodeUtil.precedence(87);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test313371() throws Throwable {
        int int0 = NodeUtil.precedence(88);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test314372() throws Throwable {
        int int0 = NodeUtil.precedence(89);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test315373() throws Throwable {
        int int0 = NodeUtil.precedence(90);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test316374() throws Throwable {
        int int0 = NodeUtil.precedence(91);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test317375() throws Throwable {
        int int0 = NodeUtil.precedence(92);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test318376() throws Throwable {
        int int0 = NodeUtil.precedence(93);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test319377() throws Throwable {
        int int0 = NodeUtil.precedence(94);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test320378() throws Throwable {
        int int0 = NodeUtil.precedence(95);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test321379() throws Throwable {
        int int0 = NodeUtil.precedence(96);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test322380() throws Throwable {
        int int0 = NodeUtil.precedence(98);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test323381() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for colon (type 99)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test324382() throws Throwable {
        int int0 = NodeUtil.precedence(100);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test325383() throws Throwable {
        int int0 = NodeUtil.precedence(101);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test326384() throws Throwable {
        int int0 = NodeUtil.precedence(102);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test327385() throws Throwable {
        int int0 = NodeUtil.precedence(103);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test328386() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for dot (type 104)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test329387() throws Throwable {
        int int0 = NodeUtil.precedence(105);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test330388() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for export (type 106)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test331389() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for import (type 107)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test332390() throws Throwable {
        int int0 = NodeUtil.precedence(108);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test333391() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for else (type 109)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test334392() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(110);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for switch (type 110)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test335393() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for case (type 111)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test336394() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for default (type 112)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test337395() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for while (type 113)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test338396() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(114);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for do (type 114)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test339397() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(115);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for for (type 115)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test340398() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for break (type 116)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test341399() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(117);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for continue (type 117)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test342400() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for var (type 118)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test343401() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for with (type 119)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test344402() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for catch (type 120)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test345403() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test346404() throws Throwable {
        int int0 = NodeUtil.precedence(122);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test347405() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(123);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for reserved (type 123)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test348406() throws Throwable {
        int int0 = NodeUtil.precedence(124);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test349407() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(1);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for eol (type 1)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test350408() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test351409() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(105);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test352410() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test353411() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test354412() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test355413() throws Throwable {
        Node node0 = Node.newString(96, "ni@?8", 96, 96);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(24, int0);
    }

    @Test(timeout = 4000)
    public void test356414() throws Throwable {
        Node node0 = Node.newString(88, "Q%r(NLSheF/B+Wp");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test357415() throws Throwable {
        Node node0 = Node.newString(89, "ni@?8");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test358416() throws Throwable {
        Node node0 = Node.newString(91, "ni@?8");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(19, int0);
    }

    @Test(timeout = 4000)
    public void test359417() throws Throwable {
        Node node0 = new Node(93);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(21, int0);
    }

    @Test(timeout = 4000)
    public void test360418() throws Throwable {
        Node node0 = Node.newString(94, "'6ti01pBoz,");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(22, int0);
    }

    @Test(timeout = 4000)
    public void test361419() throws Throwable {
        Node node0 = new Node(95);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(23, int0);
    }

    @Test(timeout = 4000)
    public void test362420() throws Throwable {
        Node node0 = new Node(97);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(25, int0);
    }

    @Test(timeout = 4000)
    public void test363421() throws Throwable {
        Node node0 = new Node(17, 40, 40);
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test364422() throws Throwable {
        Node node0 = Node.newString(56, "argum9nts");
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test365423() throws Throwable {
        Node node0 = new Node(2534);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test366424() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1477, 1477);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test366425() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1477, 1477);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertEquals(1477, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test366426() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1477, 1477);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test366427() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1477, 1477);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertEquals(1477, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test366428() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1477, 1477);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test367429() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test368430() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test368431() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test368432() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test368433() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(37, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test368434() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.protobuf.Descriptors$DescriptorPool", 37, 37);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(37, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test369435() throws Throwable {
        Node node0 = Node.newString(30, "SqA'SP3WAIZ6@");
        boolean boolean0 = NodeUtil.isNew(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test370436() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("&=", 62, 62);
        Node node1 = new Node(1, node0, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(62, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test370437() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("&=", 62, 62);
        Node node1 = new Node(1, node0, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(62, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test371438() throws Throwable {
        Node node0 = Node.newString("msg.varargs.ctor", 112, 8233);
        Node node1 = NodeUtil.newVarNode("CXZeN)>uocI", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test371439() throws Throwable {
        Node node0 = Node.newString("msg.varargs.ctor", 112, 8233);
        Node node1 = NodeUtil.newVarNode("CXZeN)>uocI", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertEquals(4095, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test371440() throws Throwable {
        Node node0 = Node.newString("msg.varargs.ctor", 112, 8233);
        Node node1 = NodeUtil.newVarNode("CXZeN)>uocI", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test372441() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test372442() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test373443() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("!==", 3, 3);
        Node node1 = NodeUtil.newExpr(node0);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test373444() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("!==", 3, 3);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test373445() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("!==", 3, 3);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertEquals(3, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test373446() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("!==", 3, 3);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertEquals(3, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test374447() throws Throwable {
        Node node0 = Node.newString("(f&OV", 101, 101);
        Node node1 = new Node(101, node0, node0);
        boolean boolean0 = NodeUtil.isString(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test375448() throws Throwable {
        Node node0 = Node.newString("8Y*|@f/7J6ZO6(");
        boolean boolean0 = NodeUtil.isString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test376449() throws Throwable {
        Node node0 = Node.newString(105, "j");
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test377450() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test377451() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test378452() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        boolean boolean0 = NodeUtil.isAssign(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test379453() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("!==", 3, 3);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertEquals(3, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test379454() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("!==", 3, 3);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test379455() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("!==", 3, 3);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertEquals(3, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test380456() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-l", (-3041), (-3041));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test380457() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-l", (-3041), (-3041));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test380458() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-l", (-3041), (-3041));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test381459() throws Throwable {
        Node node0 = new Node(3114);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test382460() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test383461() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test384462() throws Throwable {
        Node node0 = new Node(114, 172, 2);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test385463() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test386464() throws Throwable {
        Node node0 = Node.newString(41, "<09:g|`?_p[g");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test387465() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test388466() throws Throwable {
        Node node0 = new Node(115);
        node0.addChildAfter(node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test389467() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1470, 1470);
        Node node1 = new Node(1606, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test389468() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1470, 1470);
        Node node1 = new Node(1606, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test389469() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1470, 1470);
        Node node1 = new Node(1606, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertEquals(1470, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test389470() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1470, 1470);
        Node node1 = new Node(1606, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test389471() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" Y!p.Wh#`v{?B}CM]r-", 1470, 1470);
        Node node1 = new Node(1606, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertEquals(1470, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test390472() throws Throwable {
        Node node0 = Node.newString(77, "S-Ki7", 77, 77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test391473() throws Throwable {
        Node node0 = Node.newString(56, "argum9nts");
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test392474() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test393475() throws Throwable {
        Node node0 = Node.newString(110, "argum9nts");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test394476() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test395477() throws Throwable {
        Node node0 = new Node(113, (-953), 1670);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test396478() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test397479() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test398480() throws Throwable {
        Node node0 = Node.newString(119, "acJyiG+${/", 119, 119);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test399481() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test400482() throws Throwable {
        Node node0 = Node.newString(77, "Ki7", 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test401483() throws Throwable {
        Node node0 = new Node(108, 1003, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test402484() throws Throwable {
        Node node0 = Node.newString(110, "argum9nts");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test403485() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(111, nodeArray0, 111, 127);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test404486() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test405487() throws Throwable {
        Node node0 = new Node(113, (-953), 1670);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test406488() throws Throwable {
        Node node0 = new Node(49);
        Node node1 = new Node(114, 172, 2);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test407489() throws Throwable {
        Node node0 = Node.newString(119, "acJyiG+${/", 119, 119);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test408490() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test409491() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test410492() throws Throwable {
        Node node0 = new Node(108, 1003, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test411493() throws Throwable {
        Node node0 = new Node(108, 1003, 108);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test412494() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node0 = new Node(114, 114, 21);
        // Undeclared exception!
        try {
            peepholeRemoveDeadCode0.tryFoldDo(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test413495() throws Throwable {
        Node node0 = Node.newString(109, "arguments");
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ELSE arguments does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test414496() throws Throwable {
        Node node0 = Node.newString(110, "WDdP!V", 56, 56);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // SWITCH WDdP!V 56 does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test415497() throws Throwable {
        Node node0 = Node.newString(111, "8Y*|@f/7J6ZO6(");
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test416498() throws Throwable {
        Node node0 = Node.newString(112, "9acJyiG+${/", 112, 112);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // DEFAULT 9acJyiG+${/ 112 does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test417499() throws Throwable {
        Node node0 = Node.newString(113, "QF8J-}*Ey7)L|'Y`[");
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test418500() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR 115
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test419501() throws Throwable {
        Node node0 = new Node(63);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ARRAYLIT does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test420502() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst(",@T \r *13=");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test421503() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: TARGET 127 of TARGET 127
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test422504() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("VCE~oKr", "VCE~oKr");
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test423505() throws Throwable {
        Node node0 = Node.newString(111, "com.google.protobuf.Descriptors$DescriptorPool");
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test424506() throws Throwable {
        Node node0 = new Node(112);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test425507() throws Throwable {
        Node node0 = Node.newString(77, "Ki7");
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test426508() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 98, 98);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(98, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test426509() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 98, 98);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test426510() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 98, 98);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(98, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test427511() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("MIN", (-1457), 7);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test427512() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("MIN", (-1457), 7);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test428513() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test429514() throws Throwable {
        Node node0 = new Node(34, 34, 1232);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test430515() throws Throwable {
        Node node0 = Node.newString(77, "Ki7", 77, 77);
        boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test431516() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test432517() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("<9:g|`?_p[g", "<9:g|`?_p[g");
        Node node1 = Node.newString(6, "<9:g|`?_p[g");
        NodeUtil.removeChild(node1, node0);
        assertEquals(8, Node.CODEOFFSET_PROP);
    }

    @Test(timeout = 4000)
    public void test433518() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: FOR 115 of FOR 115
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test434519() throws Throwable {
        Node node0 = Node.newString(98, "8Y*|@f/7J6ZO6(");
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test435520() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("ni@JK?8");
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test436521() throws Throwable {
        Node node0 = Node.newString(119, "acJyiG+${/", 119, 119);
        Node node1 = Node.newString("acJyiG+${/", 1, 24);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node1;
        Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isCall(node2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test436522() throws Throwable {
        Node node0 = Node.newString(119, "acJyiG+${/", 119, 119);
        Node node1 = Node.newString("acJyiG+${/", 1, 24);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node1;
        Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isCall(node2);
        assertEquals(2, node2.getChildCount());
    }

    @Test(timeout = 4000)
    public void test437523() throws Throwable {
        Node node0 = Node.newString(97, "com.google-javascript.rhino.jstype.SimpTeSl<t", 97, 96);
        boolean boolean0 = NodeUtil.isThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test438524() throws Throwable {
        Node node0 = Node.newString(76, "EehOiod5xbOZ}:\"j)");
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test439525() throws Throwable {
        Node node0 = Node.newString(132, "0Y)r0!/xM]X2");
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test440526() throws Throwable {
        Node node0 = Node.newString(105, "j");
        Node node1 = new Node(9, node0, node0, 15, 1);
        // Undeclared exception!
        try {
            NodeUtil.isEmptyFunctionExpression(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test441527() throws Throwable {
        Node node0 = Node.newString(75, "&=", 75, (-1041));
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test442528() throws Throwable {
        Node node0 = Node.newString(86, "ni@JK?8");
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test443529() throws Throwable {
        Node node0 = Node.newString((-3015), "neg");
        Node node1 = NodeUtil.newVarNode("neg", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test443530() throws Throwable {
        Node node0 = Node.newString((-3015), "neg");
        Node node1 = NodeUtil.newVarNode("neg", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test444531() throws Throwable {
        Node node0 = Node.newString("KM7");
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test445532() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertEquals("|", string0);
    }

    @Test(timeout = 4000)
    public void test445533() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test446534() throws Throwable {
        String string0 = NodeUtil.opToStr(119);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test447535() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
        assertEquals("^", string0);
    }

    @Test(timeout = 4000)
    public void test447536() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test448537() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(11);
        assertEquals("&", string0);
    }

    @Test(timeout = 4000)
    public void test449538() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(12);
        assertEquals("==", string0);
    }

    @Test(timeout = 4000)
    public void test450539() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
        assertEquals("!=", string0);
    }

    @Test(timeout = 4000)
    public void test451540() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
        assertEquals("<", string0);
    }

    @Test(timeout = 4000)
    public void test452541() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(15);
        assertEquals("<=", string0);
    }

    @Test(timeout = 4000)
    public void test453542() throws Throwable {
        String string0 = NodeUtil.opToStr(16);
        assertEquals(">", string0);
    }

    @Test(timeout = 4000)
    public void test454543() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
        assertEquals(">=", string0);
    }

    @Test(timeout = 4000)
    public void test455544() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(18);
        assertEquals("<<", string0);
    }

    @Test(timeout = 4000)
    public void test456545() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
        assertEquals(">>", string0);
    }

    @Test(timeout = 4000)
    public void test457546() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
        assertEquals(">>>", string0);
    }

    @Test(timeout = 4000)
    public void test458547() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test459548() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(22);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test460549() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
        assertEquals("*", string0);
    }

    @Test(timeout = 4000)
    public void test461550() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
        assertEquals("/", string0);
    }

    @Test(timeout = 4000)
    public void test462551() throws Throwable {
        String string0 = NodeUtil.opToStr(25);
        assertEquals("%", string0);
    }

    @Test(timeout = 4000)
    public void test463552() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
        assertEquals("!", string0);
    }

    @Test(timeout = 4000)
    public void test464553() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(27);
        assertEquals("~", string0);
    }

    @Test(timeout = 4000)
    public void test465554() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test466555() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test466556() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test467557() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test468558() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test469559() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
        assertEquals("typeof", string0);
    }

    @Test(timeout = 4000)
    public void test470560() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(33);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 33: GETPROP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test471561() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test472562() throws Throwable {
        String string0 = NodeUtil.opToStr(35);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test473563() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 36: SETELEM
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test474564() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test475565() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(38);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 38: NAME
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test476566() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test477567() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test478568() throws Throwable {
        String string0 = NodeUtil.opToStr(41);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test479569() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test480570() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test481571() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test482572() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertEquals("===", string0);
    }

    @Test(timeout = 4000)
    public void test483573() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
        assertEquals("!==", string0);
    }

    @Test(timeout = 4000)
    public void test484574() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test485575() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 48: BINDNAME
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test486576() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test487577() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
        assertEquals("in", string0);
    }

    @Test(timeout = 4000)
    public void test488578() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
        assertEquals("instanceof", string0);
    }

    @Test(timeout = 4000)
    public void test489579() throws Throwable {
        String string0 = NodeUtil.opToStr(53);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test490580() throws Throwable {
        String string0 = NodeUtil.opToStr(54);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test491581() throws Throwable {
        String string0 = NodeUtil.opToStr(55);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test492582() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test493583() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test494584() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(58);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 58: ENUM_INIT_VALUES
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test495585() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test496586() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test497587() throws Throwable {
        String string0 = NodeUtil.opToStr(61);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test498588() throws Throwable {
        String string0 = NodeUtil.opToStr(62);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test499589() throws Throwable {
        String string0 = NodeUtil.opToStr(63);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test500590() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(64);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 64: OBJECTLIT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test501591() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(65);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 65: GET_REF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test502592() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 66: SET_REF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test503593() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test504594() throws Throwable {
        String string0 = NodeUtil.opToStr(68);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test505595() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 69: REF_SPECIAL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test506596() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(71);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 71: ESCXMLATTR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test507597() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 72: ESCXMLTEXT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test508598() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test509599() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(74);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 74: REF_NS_MEMBER
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test510600() throws Throwable {
        String string0 = NodeUtil.opToStr(75);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test511601() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test512602() throws Throwable {
        String string0 = NodeUtil.opToStr(77);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test513603() throws Throwable {
        String string0 = NodeUtil.opToStr(79);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test514604() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 80: RB
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test515605() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 81: LC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test516606() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test517607() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test518608() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(85);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 85: COMMA
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test519609() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
        assertEquals("=", string0);
    }

    @Test(timeout = 4000)
    public void test520610() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
        assertEquals("|=", string0);
    }

    @Test(timeout = 4000)
    public void test521611() throws Throwable {
        String string0 = NodeUtil.opToStr(88);
        assertEquals("^=", string0);
    }

    @Test(timeout = 4000)
    public void test522612() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
        assertEquals("&=", string0);
    }

    @Test(timeout = 4000)
    public void test523613() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
        assertEquals("<<=", string0);
    }

    @Test(timeout = 4000)
    public void test524614() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
        assertEquals(">>=", string0);
    }

    @Test(timeout = 4000)
    public void test525615() throws Throwable {
        String string0 = NodeUtil.opToStr(92);
        assertEquals(">>>=", string0);
    }

    @Test(timeout = 4000)
    public void test526616() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
        assertEquals("+=", string0);
    }

    @Test(timeout = 4000)
    public void test527617() throws Throwable {
        String string0 = NodeUtil.opToStr(94);
        assertEquals("-=", string0);
    }

    @Test(timeout = 4000)
    public void test528618() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        assertEquals("*=", string0);
    }

    @Test(timeout = 4000)
    public void test529619() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(96);
        assertEquals("/=", string0);
    }

    @Test(timeout = 4000)
    public void test530620() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
        assertEquals("%=", string0);
    }

    @Test(timeout = 4000)
    public void test531621() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test532622() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test533623() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
        assertEquals("||", string0);
    }

    @Test(timeout = 4000)
    public void test534624() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
        assertEquals("&&", string0);
    }

    @Test(timeout = 4000)
    public void test535625() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test536626() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(103);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 103: DEC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test537627() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 104: DOT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test538628() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(105);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 105: FUNCTION
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test539629() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test540630() throws Throwable {
        String string0 = NodeUtil.opToStr(107);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test541631() throws Throwable {
        String string0 = NodeUtil.opToStr(108);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test542632() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test543633() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test544634() throws Throwable {
        String string0 = NodeUtil.opToStr(111);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test545635() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test546636() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test547637() throws Throwable {
        String string0 = NodeUtil.opToStr(114);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test548638() throws Throwable {
        String string0 = NodeUtil.opToStr(115);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test549639() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test550640() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(117);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 117: CONTINUE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test551641() throws Throwable {
        String string0 = NodeUtil.opToStr(118);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test552642() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test553643() throws Throwable {
        String string0 = NodeUtil.opToStr(121);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test554644() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(122);
        assertEquals("void", string0);
    }

    @Test(timeout = 4000)
    public void test555645() throws Throwable {
        String string0 = NodeUtil.opToStr(4);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test556646() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("<9:g|`?_p[g", 1470, 1470);
        Node node1 = NodeUtil.newVarNode("NaN", node0);
        // Undeclared exception!
        try {
            NodeUtil.redeclareVarsInsideBranch(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test557647() throws Throwable {
        Node node0 = Node.newString(37, "");
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals(19, Node.LABEL_PROP);
    }

    @Test(timeout = 4000)
    public void test558648() throws Throwable {
        Node node0 = Node.newString("m`m+8%Bb!/!]*5ds$h");
        ImmutableSet<Node> immutableSet0 = ImmutableSet.of(node0);
        ImmutableList<Node> immutableList0 = immutableSet0.asList();
        // Undeclared exception!
        try {
            NodeUtil.newFunctionNode("m`m+8%Bb!/!]*5ds$h", immutableList0, node0, 124, 26);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test559649() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google-javascript.rhino.jstype.SimpTeSl<t", 23, 23);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test559650() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google-javascript.rhino.jstype.SimpTeSl<t", 23, 23);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(23, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test559651() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google-javascript.rhino.jstype.SimpTeSl<t", 23, 23);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(23, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test559652() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google-javascript.rhino.jstype.SimpTeSl<t", 23, 23);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(23, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test559653() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google-javascript.rhino.jstype.SimpTeSl<t", 23, 23);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test559654() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google-javascript.rhino.jstype.SimpTeSl<t", 23, 23);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test560655() throws Throwable {
        Node node0 = Node.newString("(f&OV", 101, 101);
        // Undeclared exception!
        try {
            NodeUtil.getRootOfQualifiedName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test561656() throws Throwable {
        boolean boolean0 = NodeUtil.isLatin("\uFEFF\uFFF9\uFFFA\uFFFB");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test562657() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("8Y*|jf/7J6ZO6(");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test563658() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("rfuments");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test564659() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("in");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test565660() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(47, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test565661() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(47, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test566662() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", 38, 38);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(38, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test566663() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", 38, 38);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(38, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test566664() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", 38, 38);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test567665() throws Throwable {
        Node node0 = Node.newString(98, "(Function)");
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test568666() throws Throwable {
        Node node0 = Node.newString(2619, "BMHX.Xs,:O[w");
        Node node1 = NodeUtil.newName(".prototype.", node0, (String) null);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test569667() throws Throwable {
        Node node0 = NodeUtil.newVarNode("BJ[|W9d7w)|C _Es", (Node) null);
        assertEquals(118, node0.getType());
    }

    @Test(timeout = 4000)
    public void test569668() throws Throwable {
        Node node0 = NodeUtil.newVarNode("BJ[|W9d7w)|C _Es", (Node) null);
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test570669() throws Throwable {
        Node node0 = Node.newString(98, "8Y*|@f/7J6ZO6(");
        Node node1 = Node.newString(45, "8Y*|@f/7J6ZO6(", 1110, 26);
        Node node2 = new Node(43, node0, node1);
        // Undeclared exception!
        try {
            NodeUtil.newVarNode("acJyiG+${/", node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test571670() throws Throwable {
        Node node0 = Node.newString(9, "<9:g|`?_p[g");
        Node node1 = NodeUtil.newName("<9:g|`?_p[g", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "com.google-javascript.rhino.jstype.SimpTeSl<t");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test571671() throws Throwable {
        Node node0 = Node.newString(9, "<9:g|`?_p[g");
        Node node1 = NodeUtil.newName("<9:g|`?_p[g", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "com.google-javascript.rhino.jstype.SimpTeSl<t");
        assertTrue(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test572672() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.containsFunction(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test573673() throws Throwable {
        Node node0 = Node.newString(100, "s7C=im$GY0-Z", (-147), 105);
        Node node1 = new Node(105, node0, 2, 86);
        boolean boolean0 = NodeUtil.referencesThis(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test574674() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("<<=");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test575675() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test576676() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        Node node1 = NodeUtil.newExpr(node0);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test576677() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        Node node1 = NodeUtil.newExpr(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test577678() throws Throwable {
        Node node0 = new Node(148);
        Node node1 = new Node(25, node0, node0);
        boolean boolean0 = NodeUtil.containsType(node1, 19);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test578679() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "s7C=im$GY0Z");
        assertEquals(1470, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test578680() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "s7C=im$GY0Z");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test578681() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "s7C=im$GY0Z");
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test578682() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "s7C=im$GY0Z");
        assertEquals(1470, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test579683() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0);
        assertEquals(119, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test579684() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test579685() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("acJyiG+${/", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0);
        assertEquals(119, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test580686() throws Throwable {
        Node node0 = Node.newString("8Y*|@f/7J6ZO6(");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node1 = NodeUtil.newVarNode("FT-ht/XfA|uW+NU!Pj4", node0);
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 4095, nodeUtil_MatchDeclaration0);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test580687() throws Throwable {
        Node node0 = Node.newString("8Y*|@f/7J6ZO6(");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node1 = NodeUtil.newVarNode("FT-ht/XfA|uW+NU!Pj4", node0);
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 4095, nodeUtil_MatchDeclaration0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test580688() throws Throwable {
        Node node0 = Node.newString("8Y*|@f/7J6ZO6(");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node1 = NodeUtil.newVarNode("FT-ht/XfA|uW+NU!Pj4", node0);
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 4095, nodeUtil_MatchDeclaration0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test581689() throws Throwable {
        Node node0 = Node.newString(119, "", 2378, 2378);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-420));
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test582690() throws Throwable {
        Node node0 = new Node(35);
        Node node1 = new Node(647, node0, node0, node0, node0);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, sourceMap_DetailLevel0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test583691() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Object", "Object");
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test584692() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.hasFinally(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test585693() throws Throwable {
        Node node0 = new Node((-2030));
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test586694() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test587695() throws Throwable {
        Node node0 = Node.newString("8Y*|@f/7J6ZO6(");
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test588696() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("VCE~oKr", "VCE~oKr");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test589697() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test590698() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.common.base.CharMatcher$6");
        assertEquals(26, Node.DIRECTCALL_PROP);
    }

    @Test(timeout = 4000)
    public void test591699() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test592700() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        NodeUtil.getInfoForNameNode(node0);
        assertEquals(1470, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test592701() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        NodeUtil.getInfoForNameNode(node0);
        assertEquals(1470, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test593702() throws Throwable {
        Node node0 = Node.newString(77, "Ki7");
        node0.addSuppression("Ki7");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertFalse(jSDocInfo0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test594703() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(36, node0, node0, node0, node0);
        NodeUtil.getInfoForNameNode(node0);
        assertEquals(1470, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test594704() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(36, node0, node0, node0, node0);
        NodeUtil.getInfoForNameNode(node0);
        assertEquals(1470, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test595705() throws Throwable {
        Node node0 = new Node(103);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test596706() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst(",@T \r *13=");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        String string0 = NodeUtil.getSourceName(node0);
        assertEquals(",@T \r *13=", string0);
    }

    @Test(timeout = 4000)
    public void test597707() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        NodeUtil.getSourceName(node0);
        assertEquals(1470, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test597708() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        NodeUtil.getSourceName(node0);
        assertEquals(1470, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test598709() throws Throwable {
        Node node0 = Node.newString(30, "L\"&n,YS<lEe_;KA");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test599710() throws Throwable {
        Node node0 = Node.newString("({LO9JN9~v,", 109, (-648));
        Node node1 = new Node(31, node0, node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, compilerOptions0.sourceMapDetailLevel);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDELPROP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test600711() throws Throwable {
        Node node0 = Node.newString(42, "", 22, 38);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test601712() throws Throwable {
        Node node0 = Node.newString(45, "8Y*|@f/7J6ZO66(", 1110, 26);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test602713() throws Throwable {
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        Node node1 = new Node(46, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        assertEquals(47, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test602714() throws Throwable {
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        Node node0 = NodeUtil.newQualifiedNameNode(")_S6", 47, 47);
        Node node1 = new Node(46, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        assertEquals(47, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test603715() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test604716() throws Throwable {
        Node node0 = new Node(48, 0, (-1344));
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeBINDNAME
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test605717() throws Throwable {
        Node node0 = Node.newString(52, "(5`o'-!1v6");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test606718() throws Throwable {
        Node node0 = new Node(54, 4, 54);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeGETVAR 4
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test607719() throws Throwable {
        Node node0 = Node.newString(56, "ZTTJ?sl", 56, 64);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCATCH_SCOPE ZTTJ?sl 56
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test608720() throws Throwable {
        Node node0 = new Node(57);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_INIT_KEYS
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test609721() throws Throwable {
        Node node0 = new Node(60, (-1443), 13);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_ID
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test610722() throws Throwable {
        Node node0 = Node.newString(61, "");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTHISFN
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test611723() throws Throwable {
        Node node0 = Node.newString(62, "MIXIN");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRETURN_RESULT MIXIN
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test612724() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test613725() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test614726() throws Throwable {
        Node node0 = Node.newString(65, "Iy");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeGET_REF Iy
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test615727() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(102);
        Node node0 = Node.newString(66, "o?w9", 66, (-3564));
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSET_REF o?w9
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test616728() throws Throwable {
        Node node0 = Node.newString(70, "");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(108);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDEFAULTNAMESPACE
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test617729() throws Throwable {
        Node node0 = new Node(71);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeESCXMLATTR
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test618730() throws Throwable {
        Node node0 = Node.newString(74, ";mA");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_MEMBER ;mA
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test619731() throws Throwable {
        Node node0 = Node.newString(76, "EehOiod5xbOZ}:\"j)");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_NAME EehOiod5xbOZ}:\"j)
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test620732() throws Throwable {
        Node node0 = Node.newString("(f&OV", 78, 78);
        Node node1 = new Node(78, node0, node0);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1167);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSEMI
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test621733() throws Throwable {
        Node node0 = Node.newString(79, "T1", 79, 79);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLB T1 79
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test622734() throws Throwable {
        Node node0 = Node.newString(81, "*)Dr*+", 47, (-374));
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLC *)Dr*+
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test623735() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test624736() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test625737() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test626738() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test627739() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test628740() throws Throwable {
        Node node0 = new Node(93);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test629741() throws Throwable {
        Node node0 = new Node(94);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-11));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test630742() throws Throwable {
        Node node0 = new Node(95, 21, 7);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test631743() throws Throwable {
        Node node0 = Node.newString(96, "ni@?8", 96, 96);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(36);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test632744() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(97, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
        assertEquals(1470, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test632745() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("s7C=im$GY0Z", 1470, 1470);
        Node node1 = new Node(97, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
        assertEquals(1470, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test633746() throws Throwable {
        Node node0 = Node.newString(98, "8Y*|@f/7J6ZO6(");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test634747() throws Throwable {
        Node node0 = new Node(99);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCOLON
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test635748() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test636749() throws Throwable {
        Node node0 = Node.newString("(f&OV", 101, 101);
        Node node1 = new Node(101, node0, node0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test637750() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test638751() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test639752() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google-javascript.rhino.jstype.SimpTeSl<t", 1, 1);
        Node node1 = new Node(104, node0, node0, node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDOT
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test640753() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(124, "gR'Mup2vvwLl");
        Node node1 = NodeUtil.newFunctionNode("gR'Mup2vvwLl", linkedList0, node0, 12, (-3));
        assertEquals(105, node1.getType());
    }

    @Test(timeout = 4000)
    public void test640754() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(124, "gR'Mup2vvwLl");
        Node node1 = NodeUtil.newFunctionNode("gR'Mup2vvwLl", linkedList0, node0, 12, (-3));
        NodeUtil.evaluatesToLocalValue(node1);
        assertEquals((-1), node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test640755() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(124, "gR'Mup2vvwLl");
        Node node1 = NodeUtil.newFunctionNode("gR'Mup2vvwLl", linkedList0, node0, 12, (-3));
        NodeUtil.evaluatesToLocalValue(node1);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test640756() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(124, "gR'Mup2vvwLl");
        Node node1 = NodeUtil.newFunctionNode("gR'Mup2vvwLl", linkedList0, node0, 12, (-3));
        NodeUtil.evaluatesToLocalValue(node1);
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test641757() throws Throwable {
        Node node0 = new Node(86, 86, 1228);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToBack(node1);
        assertEquals(1228, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test641758() throws Throwable {
        Node node0 = new Node(86, 86, 1228);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToBack(node1);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test642759() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test643760() throws Throwable {
        Node node0 = new Node(86, 86, 1205);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        node0.addChildToBack(node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
        }
    }

    @Test(timeout = 4000)
    public void test644761() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 61, 61);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertEquals(61, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test644762() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 61, 61);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test644763() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 61, 61);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        assertEquals(61, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test645764() throws Throwable {
        Node node0 = Node.newString(37, "");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }
}
