/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 01:19:12 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.junit.runner.RunWith;

public class ProcessCommonJSModulesTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
        String string0 = processCommonJSModules0.guessCJSModuleName("ProcessCommonJSModules supports only one invocation per CompilerInput / script node");
        assertEquals("module$ProcessCommonJSModules supports only one invocation per CompilerInput $ script node", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "module");
        Node node0 = new Node(0);
        // Undeclared exception!
        try {
            processCommonJSModules0.process(node0, (Node) null);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/base/Predicate
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        // Undeclared exception!
        try {
            ProcessCommonJSModules.toModuleName((String) null, "module$Mp)fL_?Q");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        // Undeclared exception!
        try {
            ProcessCommonJSModules.toModuleName((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "", true);
        // Undeclared exception!
        try {
            processCommonJSModules0.guessCJSModuleName((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = null;
        try {
            processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, (String) null, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = null;
        try {
            processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("./");
        assertEquals("module$", string0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
        String string0 = processCommonJSModules0.guessCJSModuleName("/");
        assertEquals("module$", string0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("../GG=Md", "Ba");
        assertEquals("module$..$GG=Md", string0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        // Undeclared exception!
        try {
            ProcessCommonJSModules.toModuleName("./", "module$Bad dependency: {0} _> {1}. Modules must be listed in dependency order.");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.net.URISyntaxException: Illegal character in scheme name at index 6: module$Bad dependency: {0} _> {1}. Modules must be listed in dependency order.
        }
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
        String string0 = processCommonJSModules0.guessCJSModuleName(" of ");
        assertEquals("module$ of ", string0);
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("$%Gcs7HGf|3hlJ0iT", "Found duplicate modules");
        assertEquals("module$$%Gcs7HGf|3hlJ0iT", string0);
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
        JSModule jSModule0 = processCommonJSModules0.getModule();
        assertNull(jSModule0);
    }
}
