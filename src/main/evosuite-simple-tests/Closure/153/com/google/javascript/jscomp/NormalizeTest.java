/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:23:41 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.junit.runner.RunWith;

public class NormalizeTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("com.google.common.collect.Sets$3", "com.google.common.collect.Sets$3");
        Node node1 = new Node(23, node0, (-1), 3798);
        normalize0.process(node0, node0);
        assertEquals(2, Node.RIGHT);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "UH+B", "UH+B");
        assertEquals(4, Node.DESCENDANTS_FLAG);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            Normalize.parseAndNormalizeSyntheticCode(compiler0, "", "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("f");
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node1 = compiler0.parseSyntheticCode("f", "JSC_CATCH_LOCK_VAR_ERMOR");
        node0.addChildrenToFront(node1);
        normalize0.process(node1, node1);
        assertEquals(0, Node.BOTH);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 1249, 1249, 1249);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        // Undeclared exception!
        try {
            normalize_VerifyConstants0.process(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.common.collect.Sets$3", "com.google.common.collect.Sets$3");
        Node node1 = new Node(23, node0, (-1), 3798);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        // Undeclared exception!
        try {
            normalize_VerifyConstants0.process(node1, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_E5[$84", "_E5[$84");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        normalize_VerifyConstants0.visit(nodeTraversal0, node0, node0);
        assertEquals(29, Node.JSDOC_INFO_PROP);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        Node node1 = new Node(15, node0, node0, node0);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node1, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        Node node1 = new Node(15, node0, node0, node0);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        // Undeclared exception!
        try {
            normalize0.process(node1, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // Normalize constraints violated:
            // LABEL normalization
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        Node node0 = Node.newString(113, "");
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // The existing child node of the parent should not be null.
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("");
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node1 = compiler0.parseSyntheticCode("", "");
        node1.addChildrenToFront(node0);
        // Undeclared exception!
        try {
            normalize0.process(node0, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "U2U_FUNCTION_TYPE", "  parent:");
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("JSC_CATCH_BLOCK_VAR_ERROR");
        Normalize normalize0 = new Normalize(compiler0, true);
        Node node1 = compiler0.parseSyntheticCode("JSC_CATCH_BLOCK_VAR_ERROR", "JSC_CATCH_BLOCK_VAR_ERROR");
        node0.addChildrenToFront(node1);
        // Undeclared exception!
        try {
            normalize0.process(node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(105);
        node0.addChildrenToFront(node0);
        Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
        normalize_NormalizeStatements0.visit(nodeTraversal0, node0, node0);
        assertEquals(5, Node.FUNCTION_PROP);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(105);
        Node node1 = new Node(132, node0, node0, node0, node0);
        Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
        normalize_NormalizeStatements0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        node0.addChildrenToFront(node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.common.collect.Sets$3", "com.google.common.collect.Sets$3");
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node1 = new Node(115, node0, node0, node0);
        node0.addChildrenToFront(node1);
        // Undeclared exception!
        try {
            normalize0.process(node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(105);
        Normalize normalize0 = new Normalize(compiler0, true);
        node0.addChildrenToFront(node0);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(105);
        Node node1 = new Node(132, node0, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        node0.addChildrenToFront(node1);
        // Undeclared exception!
        try {
            normalize0.process(node0, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
        }
    }
}
