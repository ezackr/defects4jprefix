/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:06:10 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import org.junit.runner.RunWith;

public class LightweightMessageFormatterTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatLine("", (-629));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
        // Undeclared exception!
        try {
            lightweightMessageFormatter0.formatWarning((JSError) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Compiler compiler0 = new Compiler();
        JSError jSError0 = JSError.make(compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
        JSError jSError1 = JSError.make("Exceeded max number of optimization iterations: {0}", (-1), (-1), jSError0.level, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
        String string0 = lightweightMessageFormatter0.formatError(jSError1);
        assertEquals("Exceeded max number of optimization iterations: {0}: ERROR - Exceeded max number of code motion iterations: {0}\n", string0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Compiler compiler0 = new Compiler();
        JSError jSError0 = JSError.make(compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
        JSError jSError1 = JSError.make("Exceeded max number of optimization iterations: {0}", 200000, (-1), jSError0.level, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
        String string0 = lightweightMessageFormatter0.formatError(jSError1);
        assertEquals("Exceeded max number of optimization iterations: {0}:200000: ERROR - Exceeded max number of code motion iterations: {0}\n", string0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Compiler compiler0 = new Compiler();
        JSError jSError0 = JSError.make(compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
        String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
        assertEquals("WARNING - Exceeded max number of optimization iterations: {0}\n", string0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion((-1700), (-1700), "^\n");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion((-1700), (-1700), "^\n");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertEquals("  -1700| ^", string0);
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion((-288), (-288), "");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion(1, 1, "Q{S?=!KjIJWd");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test810() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion(1, 1, "Q{S?=!KjIJWd");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertEquals("  1| Q{S?=!KjIJWd", string0);
    }
}
