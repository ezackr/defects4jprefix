/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 01:45:05 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import org.junit.runner.RunWith;

public class PeepholeFoldConstantsTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        node0.setIsSyntheticBlock(true);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(6, Node.TEMP_PROP);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(0);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(8, Node.FLAG_NO_THROWS);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-2900));
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(45, Node.IS_NAMESPACE);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(778, 0, 778);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(778, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(96, "");
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(91, "M1O%@g211");
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(90, "", (-389), (-389));
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(85, "", (-389), (-389));
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(82, "", 92, (-757));
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(13, Node.CASES_PROP);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(81);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertFalse(node1.wasEmptyNode());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Node node0 = new Node(79);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(23, Node.VARIABLE_PROP);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(0, Node.LABEL_ID_PROP);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(72, "", (-388), (-388));
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(29, Node.VAR_ARGS_NAME);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(69);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertFalse(node1.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(67);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(44, Node.IS_VAR_ARGS_PARAM);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(59, "EpkdYF3]Jv0o.F,2v", 59, 59);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(4, Node.DESCENDANTS_FLAG);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(55, "vT;:L'Ux[66dqijIT", 55, 55);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(43, Node.IS_OPTIONAL_PARAM);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(54, "com.google.javascript.jscomp.LightweightMessageFormatter");
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(25, Node.ISNUMBER_PROP);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(51, "vT;:L'Ux[66dqijIT", 51, 3342);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(46, "vT;:L'Ux[66dqijIT", 46, 3342);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(10, Node.VARS_PROP);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Node node0 = Node.newString(45, "", (-389), (-389));
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(24, Node.LASTUSE_PROP);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("}< +%?1{", (-1623), (-1424));
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals((-2), Node.OBJECT_IDS_PROP);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2804.79425));
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(38);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(35, "vT;:L'Ux[66dqijIT", 35, 3342);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(3, Node.CONTINUE_PROP);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(33, nodeArray0);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(9, Node.FIXUPS_PROP);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(24);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(0, Node.LABEL_ID_PROP);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(20, "", (-388), (-388));
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(4095, Node.MAX_COLUMN_NUMBER);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(15);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(0, Node.LABEL_ID_PROP);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(13);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(43, Node.IS_OPTIONAL_PARAM);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(10, 4, 32);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(46, Node.IS_DISPATCHER);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(74);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(39, Node.ORIGINALNAME_PROP);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(32);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/base/Preconditions
        }
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(29, "", 29, 29);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/base/Preconditions
        }
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(28, (-3216), (-733));
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/base/Preconditions
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(27, nodeArray0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/base/Preconditions
        }
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(26, "vT;:L'Ux[66dqijIT", 26, 3342);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/base/Preconditions
        }
    }
}
