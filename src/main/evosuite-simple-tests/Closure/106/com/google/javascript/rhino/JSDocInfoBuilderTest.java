/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 03:29:42 GMT 2023
 */
package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSDocInfoBuilder;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedHashSet;
import org.junit.runner.RunWith;

public class JSDocInfoBuilderTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordBlockDescription("$return");
        jSDocInfoBuilder0.recordBlockDescription("/RX%Cm\"x9&W");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstancy();
        boolean boolean0 = jSDocInfoBuilder0.isPopulated();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        boolean boolean0 = jSDocInfoBuilder0.isInterfaceRecorded();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordConstructor();
        boolean boolean0 = jSDocInfoBuilder0.isConstructorRecorded();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordParameter("", (JSTypeExpression) null);
        boolean boolean0 = jSDocInfoBuilder0.hasParameter("");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordParameter("", (JSTypeExpression) null);
        boolean boolean0 = jSDocInfoBuilder0.hasParameter("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0059() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordPreserveTry();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordPreserveTry();
        jSDocInfoBuilder0.build("QPqJE/6zPbn# WPR|");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00611() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordOverride();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00612() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordOverride();
        jSDocInfoBuilder0.build("QPqJE/6zPbn# WPR|");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00713() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoTypeCheck();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00714() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoTypeCheck();
        jSDocInfoBuilder0.build("P0EfsI2.@<FMN),b");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00815() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordNoSideEffects();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00816() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordNoSideEffects();
        JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build("");
        assertTrue(jSDocInfo0.isNoSideEffects());
    }

    @Test(timeout = 4000)
    public void test00917() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoShadow();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test00918() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoShadow();
        jSDocInfoBuilder0.build("uses");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01019() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoAlias();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01020() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoAlias();
        JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build("QPqJE/6zPbn# WPR|");
        assertTrue(jSDocInfo0.isNoAlias());
    }

    @Test(timeout = 4000)
    public void test01121() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01122() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        jSDocInfoBuilder0.build("q'xY`");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01223() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordImplicitCast();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01224() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordImplicitCast();
        jSDocInfoBuilder0.build("");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01325() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordHiddenness();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01326() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordHiddenness();
        jSDocInfoBuilder0.build("QPqJE/6zPbn# WPR|");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01427() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordExport();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01428() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordExport();
        jSDocInfoBuilder0.build("q'xY`");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01529() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        assertTrue(jSDocInfoBuilder0.isConstructorRecorded());
    }

    @Test(timeout = 4000)
    public void test01530() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        jSDocInfoBuilder0.build("P0EfsI2.@<FMN),b");
        assertFalse(jSDocInfoBuilder0.isConstructorRecorded());
    }

    @Test(timeout = 4000)
    public void test01631() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01632() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        jSDocInfoBuilder0.build("");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01733() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node(0, 0, 0);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01734() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node(0, 0, 0);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build("");
        assertTrue(jSDocInfo0.isDefine());
    }

    @Test(timeout = 4000)
    public void test01835() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01836() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        jSDocInfoBuilder0.build((String) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01937() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test01938() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        jSDocInfoBuilder0.build(":I");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02039() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordFileOverview("");
        assertTrue(jSDocInfoBuilder0.isPopulatedWithFileOverview());
    }

    @Test(timeout = 4000)
    public void test02040() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordFileOverview("");
        jSDocInfoBuilder0.build("");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02141() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02142() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        jSDocInfoBuilder0.build("uses");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02243() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02244() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        jSDocInfoBuilder0.build("u?>t]k");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02345() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02346() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        jSDocInfoBuilder0.build((String) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test02447() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "/N=|`", (JSTypeRegistry) null);
        // Undeclared exception!
        try {
            jSDocInfoBuilder0.recordThrowDescription(jSTypeExpression0, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test02548() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        // Undeclared exception!
        try {
            jSDocInfoBuilder0.recordImplementedInterface(jSTypeExpression0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test02649() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        // Undeclared exception!
        try {
            jSDocInfoBuilder0.markAnnotation("otV", 0, 825);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test02750() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        // Undeclared exception!
        try {
            jSDocInfoBuilder0.addReference("8$$mPfM(>0*");
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test02851() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        // Undeclared exception!
        try {
            jSDocInfoBuilder0.addAuthor("");
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test02952() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.isPopulated();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03053() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03054() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03055() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03156() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03157() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "Boolean", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03158() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "Boolean", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03259() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03260() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03261() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03362() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03363() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03364() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03465() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        boolean boolean0 = jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isInterfaceRecorded());
    }

    @Test(timeout = 4000)
    public void test03466() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        boolean boolean0 = jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03567() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "z#x/HefLH=,8~}gg", (JSTypeRegistry) null);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isConstructorRecorded());
    }

    @Test(timeout = 4000)
    public void test03568() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "z#x/HefLH=,8~}gg", (JSTypeRegistry) null);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03669() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03670() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoSideEffects();
        boolean boolean0 = jSDocInfoBuilder0.recordNoSideEffects();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03671() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoSideEffects();
        boolean boolean0 = jSDocInfoBuilder0.recordNoSideEffects();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03772() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03773() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordImplicitCast();
        boolean boolean0 = jSDocInfoBuilder0.recordImplicitCast();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03774() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordImplicitCast();
        boolean boolean0 = jSDocInfoBuilder0.recordImplicitCast();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03875() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03876() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoShadow();
        boolean boolean0 = jSDocInfoBuilder0.recordNoShadow();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03877() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoShadow();
        boolean boolean0 = jSDocInfoBuilder0.recordNoShadow();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03978() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03979() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordExport();
        boolean boolean0 = jSDocInfoBuilder0.recordExport();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test03980() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordExport();
        boolean boolean0 = jSDocInfoBuilder0.recordExport();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04081() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        boolean boolean0 = jSDocInfoBuilder0.recordInterface();
        assertTrue(jSDocInfoBuilder0.isInterfaceRecorded());
    }

    @Test(timeout = 4000)
    public void test04082() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        boolean boolean0 = jSDocInfoBuilder0.recordInterface();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04183() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        boolean boolean0 = jSDocInfoBuilder0.recordInterface();
        assertTrue(jSDocInfoBuilder0.isConstructorRecorded());
    }

    @Test(timeout = 4000)
    public void test04184() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        boolean boolean0 = jSDocInfoBuilder0.recordInterface();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04285() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04286() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node((-2043), (-628), (-1927));
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "W$bBDPHg&NV&xb", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordInterface();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04287() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node((-2043), (-628), (-1927));
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "W$bBDPHg&NV&xb", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordInterface();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04388() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04389() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordDeprecated();
        boolean boolean0 = jSDocInfoBuilder0.recordDeprecated();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04390() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordDeprecated();
        boolean boolean0 = jSDocInfoBuilder0.recordDeprecated();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04491() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04492() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordNoAlias();
        boolean boolean0 = jSDocInfoBuilder0.recordNoAlias();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04493() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordNoAlias();
        boolean boolean0 = jSDocInfoBuilder0.recordNoAlias();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04594() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04595() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordOverride();
        boolean boolean0 = jSDocInfoBuilder0.recordOverride();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04596() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordOverride();
        boolean boolean0 = jSDocInfoBuilder0.recordOverride();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04697() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04698() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordPreserveTry();
        boolean boolean0 = jSDocInfoBuilder0.recordPreserveTry();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test04699() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordPreserveTry();
        boolean boolean0 = jSDocInfoBuilder0.recordPreserveTry();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test047100() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        boolean boolean0 = jSDocInfoBuilder0.recordConstructor();
        assertTrue(jSDocInfoBuilder0.isInterfaceRecorded());
    }

    @Test(timeout = 4000)
    public void test047101() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordInterface();
        boolean boolean0 = jSDocInfoBuilder0.recordConstructor();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test048102() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        boolean boolean0 = jSDocInfoBuilder0.recordConstructor();
        assertTrue(jSDocInfoBuilder0.isConstructorRecorded());
    }

    @Test(timeout = 4000)
    public void test048103() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstructor();
        boolean boolean0 = jSDocInfoBuilder0.recordConstructor();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test049104() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test049105() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordConstructor();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test049106() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordConstructor();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test050107() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test050108() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoTypeCheck();
        boolean boolean0 = jSDocInfoBuilder0.recordNoTypeCheck();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test050109() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordNoTypeCheck();
        boolean boolean0 = jSDocInfoBuilder0.recordNoTypeCheck();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test051110() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test051111() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordHiddenness();
        boolean boolean0 = jSDocInfoBuilder0.recordHiddenness();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test051112() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordHiddenness();
        boolean boolean0 = jSDocInfoBuilder0.recordHiddenness();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test052113() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordFileOverview("");
        boolean boolean0 = jSDocInfoBuilder0.recordFileOverview("7{.IgSB");
        assertTrue(jSDocInfoBuilder0.isPopulatedWithFileOverview());
    }

    @Test(timeout = 4000)
    public void test052114() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordFileOverview("");
        boolean boolean0 = jSDocInfoBuilder0.recordFileOverview("7{.IgSB");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test053115() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordDescription("Gvyp^");
        boolean boolean0 = jSDocInfoBuilder0.recordDescription("");
        assertTrue(jSDocInfoBuilder0.isDescriptionRecorded());
    }

    @Test(timeout = 4000)
    public void test053116() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordDescription("Gvyp^");
        boolean boolean0 = jSDocInfoBuilder0.recordDescription("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test054117() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordDescription((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test054118() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordDescription((String) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test055119() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test055120() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstancy();
        boolean boolean0 = jSDocInfoBuilder0.recordConstancy();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test055121() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordConstancy();
        boolean boolean0 = jSDocInfoBuilder0.recordConstancy();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test056122() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test056123() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node((-2043), (-628), (-1927));
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "W$bBDPHg&NV&xb", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test056124() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node((-2043), (-628), (-1927));
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "W$bBDPHg&NV&xb", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test057125() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test057126() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test057127() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test058128() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordBaseType((JSTypeExpression) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test058129() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordBaseType((JSTypeExpression) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test059130() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test059131() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test059132() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "YJ$R", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test060133() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test060134() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test060135() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test061136() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordThisType((JSTypeExpression) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test061137() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordThisType((JSTypeExpression) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test062138() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType((JSTypeExpression) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test062139() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordEnumParameterType((JSTypeExpression) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test063140() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test063141() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test063142() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test064143() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test064144() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        Node node0 = new Node(1, 2, 2);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordConstancy();
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test064145() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        Node node0 = new Node(1, 2, 2);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordConstancy();
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test065146() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType((JSTypeExpression) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test065147() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.recordDefineType((JSTypeExpression) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test066148() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test066149() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordReturnDescription("com.google.javascript.rhino.JSDocInfoBuilder");
        boolean boolean0 = jSDocInfoBuilder0.recordReturnDescription((String) null);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test066150() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordReturnDescription("com.google.javascript.rhino.JSDocInfoBuilder");
        boolean boolean0 = jSDocInfoBuilder0.recordReturnDescription((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test067151() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test067152() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node(965);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "5f*#-yuX5NDX0O/z", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test067153() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        Node node0 = new Node(965);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "5f*#-yuX5NDX0O/z", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test068154() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test068155() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "z#x/HefLH=,8~}gg", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test068156() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "z#x/HefLH=,8~}gg", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test069157() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordReturnType((JSTypeExpression) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test069158() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordReturnType((JSTypeExpression) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test070159() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordTypedef((JSTypeExpression) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test070160() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordTypedef((JSTypeExpression) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test071161() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test071162() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test071163() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test072164() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordType((JSTypeExpression) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test072165() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.recordType((JSTypeExpression) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test073166() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test073167() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        jSDocInfoBuilder0.recordSuppressions(linkedHashSet0);
        boolean boolean0 = jSDocInfoBuilder0.recordSuppressions(linkedHashSet0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test073168() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        jSDocInfoBuilder0.recordSuppressions(linkedHashSet0);
        boolean boolean0 = jSDocInfoBuilder0.recordSuppressions(linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test074169() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test074170() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordDeprecationReason("YJ$R");
        boolean boolean0 = jSDocInfoBuilder0.recordDeprecationReason("YJ$R");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test074171() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordDeprecationReason("YJ$R");
        boolean boolean0 = jSDocInfoBuilder0.recordDeprecationReason("YJ$R");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test075172() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test075173() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordVersion("assign");
        boolean boolean0 = jSDocInfoBuilder0.recordVersion("com.google.javascript.rhino.JSDocInfoBuilder");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test075174() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordVersion("assign");
        boolean boolean0 = jSDocInfoBuilder0.recordVersion("com.google.javascript.rhino.JSDocInfoBuilder");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test076175() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test076176() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.addReference("");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test076177() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.addReference("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test077178() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test077179() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.addAuthor((String) null);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test077180() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.addAuthor((String) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test078181() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test078182() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordThrowDescription((JSTypeExpression) null, (String) null);
        boolean boolean0 = jSDocInfoBuilder0.recordThrowDescription((JSTypeExpression) null, "QFCKR8iXM");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test078183() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordThrowDescription((JSTypeExpression) null, (String) null);
        boolean boolean0 = jSDocInfoBuilder0.recordThrowDescription((JSTypeExpression) null, "QFCKR8iXM");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test079184() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        // Undeclared exception!
        try {
            jSDocInfoBuilder0.recordThrowType((JSTypeExpression) null);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test080185() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test080186() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordThrowType(jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test080187() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordThrowType(jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test081188() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test081189() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordTemplateTypeName("");
        boolean boolean0 = jSDocInfoBuilder0.recordTemplateTypeName("");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test081190() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordTemplateTypeName("");
        boolean boolean0 = jSDocInfoBuilder0.recordTemplateTypeName("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test082191() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test082192() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordParameterDescription("catch", "");
        boolean boolean0 = jSDocInfoBuilder0.recordParameterDescription("catch", "catch");
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test082193() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordParameterDescription("catch", "");
        boolean boolean0 = jSDocInfoBuilder0.recordParameterDescription("catch", "catch");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test083194() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test083195() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test083196() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, (String) null, (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordParameter((String) null, jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test084197() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test084198() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordParameter("", jSTypeExpression0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test084199() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "", (JSTypeRegistry) null);
        jSDocInfoBuilder0.recordType(jSTypeExpression0);
        boolean boolean0 = jSDocInfoBuilder0.recordParameter("", jSTypeExpression0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test085200() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test085201() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
        jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
        boolean boolean0 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test085202() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
        jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
        boolean boolean0 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test086203() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordBlockDescription("zMF70F}+2:4*ZT1f");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test087204() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.markName("", 1992, 1992);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test088205() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.markTypeNode((Node) null, (-8), (-5354), (-5354), false);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test089206() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.markText("com.google.javascript.rhino.JSDocInfoBuilder", 1, 2, 9, 1);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test090207() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.markAnnotation("", Integer.MIN_VALUE, (-2384));
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test091208() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
        jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test091209() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
        jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
        jSDocInfoBuilder0.build("");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test092210() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordDeprecated();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test092211() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordDeprecated();
        jSDocInfoBuilder0.build("");
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test093212() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build("q'xY`");
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test094213() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.recordDescription("'`Ngj.d=EE<i&m");
        boolean boolean0 = jSDocInfoBuilder0.isDescriptionRecorded();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test095214() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.isDescriptionRecorded();
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test095215() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        boolean boolean0 = jSDocInfoBuilder0.isDescriptionRecorded();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test096216() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordFileOverview("getvar");
        boolean boolean0 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test097217() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test097218() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordBlockDescription("getvar");
        boolean boolean0 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
        assertTrue(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test097219() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.recordBlockDescription("getvar");
        boolean boolean0 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test098220() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test098221() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        boolean boolean0 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099222() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(false);
        jSDocInfoBuilder0.isInterfaceRecorded();
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test100223() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.hasParameter((String) null);
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }

    @Test(timeout = 4000)
    public void test101224() throws Throwable {
        JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(true);
        jSDocInfoBuilder0.isConstructorRecorded();
        assertFalse(jSDocInfoBuilder0.isPopulated());
    }
}
