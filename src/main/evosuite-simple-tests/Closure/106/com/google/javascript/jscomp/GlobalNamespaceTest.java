/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 05:08:15 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import org.junit.runner.RunWith;

public class GlobalNamespaceTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("edAj.Z=pL7o|-_IG8");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition");
        Scope scope0 = new Scope(node0, compiler0);
        TreeSet<Node> treeSet0 = new TreeSet<Node>();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        globalNamespace0.scanNewNodes(scope0, treeSet0);
        assertEquals(0, scope0.getVarCount());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = null;
        try {
            globalNamespace_Ref0 = new GlobalNamespace.Ref((NodeTraversal) null, (Node) null, globalNamespace_Ref_Type0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.getTwin();
        assertNull(globalNamespace_Ref1);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Node node0 = Node.newString("M}G5");
        Compiler compiler0 = new Compiler();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        globalNamespace0.getNameForest();
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        globalNamespace0.getNameForest();
        Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
        assertEquals(0, map0.size());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 0L);
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
        assertEquals(0, map0.size());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Node node0 = Node.newString("");
        Compiler compiler0 = new Compiler();
        Node node1 = new Node(42, 12, (-9));
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node1, node0);
        Scope scope0 = new Scope(node1, compiler0);
        TreeSet<Node> treeSet0 = new TreeSet<Node>();
        globalNamespace0.scanNewNodes(scope0, treeSet0);
        assertTrue(scope0.isGlobal());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Node node0 = Node.newString("!n&3N29H?/\r':Th");
        Compiler compiler0 = new Compiler();
        Node node1 = new Node(38, node0, node0, node0, node0, 0, 2);
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node1);
        // Undeclared exception!
        try {
            globalNamespace0.getNameForest();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("dalQ=m");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        Node node0 = Node.newString("!qNr:G&^i;(`d'n\"1#U9");
        Compiler compiler0 = new Compiler();
        Node node1 = new Node(33, node0, node0, node0, node0, 2, 3893);
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node1);
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("xU", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("xU", false);
        GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name0.addProperty("xU", false);
        assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("xU", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("xU", false);
        GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name0.addProperty("xU", false);
        assertNotNull(globalNamespace_Name2);
    }

    @Test(timeout = 4000)
    public void test2213() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.canEliminate();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2314() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2415() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2516() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.setIsClassOrEnum();
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2617() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("\u001B[39m", false);
        assertNotNull(globalNamespace_Name1);
    }

    @Test(timeout = 4000)
    public void test2618() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("\u001B[39m", false);
        boolean boolean0 = globalNamespace_Name1.canCollapse();
        assertNotSame(globalNamespace_Name1, globalNamespace_Name0);
    }

    @Test(timeout = 4000)
    public void test2619() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("\u001B[39m", false);
        boolean boolean0 = globalNamespace_Name1.canCollapse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2720() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("xU", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.globalSets = 510;
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2821() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("importPackage", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.localSets = 28;
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2922() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition", (GlobalNamespace.Name) null, true);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        boolean boolean0 = globalNamespace_Name0.needsToBeStubbed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3023() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.needsToBeStubbed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3124() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.localSets = 2;
        boolean boolean0 = globalNamespace_Name0.needsToBeStubbed();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3225() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("\u001B[39m", false);
        globalNamespace_Name1.setIsClassOrEnum();
        boolean boolean0 = globalNamespace_Name0.isNamespace();
        assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
    }

    @Test(timeout = 4000)
    public void test3226() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("\u001B[39m", false);
        globalNamespace_Name1.setIsClassOrEnum();
        boolean boolean0 = globalNamespace_Name0.isNamespace();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3327() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.isNamespace();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3428() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("\u001B[39m", false);
        boolean boolean0 = globalNamespace_Name1.isSimpleName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3529() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        boolean boolean0 = globalNamespace_Name0.isSimpleName();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3630() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\u001B[39m", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("\u001B[39m", false);
        String string0 = globalNamespace_Name1.toString();
        assertEquals("\u001B[39m.\u001B[39m (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string0);
    }

    @Test(timeout = 4000)
    public void test3931() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        boolean boolean0 = globalNamespace_Ref0.isSet();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4032() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        boolean boolean0 = globalNamespace_Ref0.isSet();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4133() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        boolean boolean0 = globalNamespace_Ref0.isSet();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4234() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        // Undeclared exception!
        try {
            GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test4335() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
        assertFalse(globalNamespace_Ref0.equals((Object) globalNamespace_Ref1));
    }

    @Test(timeout = 4000)
    public void test4436() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
        // Undeclared exception!
        try {
            GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test4537() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref1);
        assertFalse(globalNamespace_Ref0.equals((Object) globalNamespace_Ref1));
    }

    @Test(timeout = 4000)
    public void test4638() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref1);
        assertFalse(globalNamespace_Ref1.equals((Object) globalNamespace_Ref0));
    }

    @Test(timeout = 4000)
    public void test4739() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref1);
        assertFalse(globalNamespace_Ref1.equals((Object) globalNamespace_Ref0));
    }
}
