/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:01:19 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.junit.runner.RunWith;

public class CodeGeneratorTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = new Node(85);
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = new Node((-1709), (-1709), (-1709));
        int[] intArray0 = new int[1];
        intArray0[0] = 13;
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, intArray0);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-1709> (type -1709)
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("W-^->7z^-");
        assertEquals("/W-^->7z^-/", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("WrP]]>o,o");
        assertEquals("\"WrP]]\\>o,o\"", string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.addCaseBody((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Node node0 = new Node(36);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.addAllSiblings(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        Node node0 = Node.newNumber(0.0);
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, true, codeGenerator_Context0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Node node0 = new Node(52, 52, 52);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Node node0 = new Node(51);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, false, codeGenerator_Context0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = new Node((-2923));
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, (int[]) null);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-2923> (type -2923)
        }
    }

    @Test(timeout = 4000)
    public void test1410() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = new Node((-1709), (-1709), (-1709));
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, intArray0);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-1709> (type -1709)
        }
    }

    @Test(timeout = 4000)
    public void test1511() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = new Node((-1709));
        int[] intArray0 = new int[1];
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, intArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1712() throws Throwable {
        String string0 = CodeGenerator.jsString("e'9D:yQ.d;=o", (CharsetEncoder) null);
        assertEquals("\"e'9D:yQ.d;=o\"", string0);
    }

    @Test(timeout = 4000)
    public void test1813() throws Throwable {
        String string0 = CodeGenerator.jsString("\"", (CharsetEncoder) null);
        assertEquals("'\"'", string0);
    }

    @Test(timeout = 4000)
    public void test1914() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("\n\nSubtree2: ");
        assertEquals("\"\\n\\nSubtree2: \"", string0);
    }

    @Test(timeout = 4000)
    public void test2015() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("}2<V/`L'(*]$@J/@i(v");
        assertEquals("/}2<V/`L'(*]$@J/@i(v/", string0);
    }

    @Test(timeout = 4000)
    public void test2116() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("u2%</scripta");
        assertEquals("/u2%<\\/scripta/", string0);
    }

    @Test(timeout = 4000)
    public void test2217() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("]>$\"");
        assertEquals("/]>$\"/", string0);
    }

    @Test(timeout = 4000)
    public void test2318() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("-->7z^-");
        assertEquals("\"--\\>7z^-\"", string0);
    }

    @Test(timeout = 4000)
    public void test2419() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("L]>Ww");
        assertEquals("\"L]>Ww\"", string0);
    }

    @Test(timeout = 4000)
    public void test2520() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        String string0 = CodeGenerator.regexpEscape("L]e(y^RI+KJ", charsetEncoder0);
        assertEquals("/L]e(y^RI+KJ/", string0);
    }

    @Test(timeout = 4000)
    public void test2621() throws Throwable {
        String string0 = CodeGenerator.identifierEscape("continue");
        assertEquals("continue", string0);
    }
}
