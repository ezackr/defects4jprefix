/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 03:27:45 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.LinkedHashSet;
import java.util.Set;
import org.junit.runner.RunWith;

public class UnionTypeTest {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, (Set<JSType>) null);
        Iterable<JSType> iterable0 = unionType0.getAlternates();
        assertNull(iterable0);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.restrictByNotNullOrUndefined();
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, (Set<JSType>) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        // Undeclared exception!
        try {
            unionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/ImmutableSet
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        // Undeclared exception!
        try {
            unionType0.meet(allType0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, (Set<JSType>) null);
        // Undeclared exception!
        try {
            unionType0.matchesObjectContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, (Set<JSType>) null);
        // Undeclared exception!
        try {
            unionType0.matchesNumberContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.getTypesUnderShallowInequality((JSType) null);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.getTypesUnderInequality((JSType) null);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.getTypesUnderEquality((JSType) null);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.getRestrictedUnion(unionType0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.getRestrictedTypeGivenToBooleanOutcome(false);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/google/common/collect/Lists
        }
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, (Set<JSType>) null);
        // Undeclared exception!
        try {
            unionType0.getPossibleToBooleanOutcomes();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = unionType0.isSubtype(booleanType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.isUnknownType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        linkedHashSet0.add(unknownType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.matchesNumberContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1615() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        Iterable<JSType> iterable0 = unionType0.getAlternates();
        assertNotNull(iterable0);
    }

    @Test(timeout = 4000)
    public void test1716() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        AllType allType0 = new AllType((JSTypeRegistry) null);
        linkedHashSet0.add(allType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
        assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
    }

    @Test(timeout = 4000)
    public void test1817() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
        assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        String string0 = unionType0.toString();
        assertEquals("()", string0);
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = unionType0.contains(booleanType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.isObject();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        EmptyScope emptyScope0 = new EmptyScope();
        boolean boolean0 = unionType0.equals(emptyScope0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2322() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        linkedHashSet0.add(voidType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        JSType jSType0 = unionType0.getLeastSupertype(voidType0);
        assertFalse(jSType0.isStringValueType());
    }

    @Test(timeout = 4000)
    public void test2423() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.getLeastSupertype(voidType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        // Undeclared exception!
        try {
            unionType0.getLeastSupertype(unknownType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2625() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        linkedHashSet0.add(unknownType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        JSType jSType0 = unionType0.getGreatestSubtype(unionType0);
        assertFalse(jSType0.isNumberValueType());
    }

    @Test(timeout = 4000)
    public void test2726() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.isNullable();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2927() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        linkedHashSet0.add(voidType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.canBeCalled();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3028() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.canBeCalled();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3129() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        AllType allType0 = new AllType((JSTypeRegistry) null);
        linkedHashSet0.add(allType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        // Undeclared exception!
        try {
            unionType0.canAssignTo((JSType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3230() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.canAssignTo((JSType) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3331() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        linkedHashSet0.add(unknownType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        JSType jSType0 = unionType0.findPropertyType("");
        assertFalse(jSType0.isEnumElementType());
    }

    @Test(timeout = 4000)
    public void test3432() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        linkedHashSet0.add(voidType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.matchesObjectContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3533() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.matchesStringContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3634() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.matchesNumberContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3735() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        linkedHashSet0.add(voidType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        unionType0.forgiveUnknownNames();
        assertFalse(unionType0.isVoidType());
    }

    @Test(timeout = 4000)
    public void test3836() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        linkedHashSet0.add(unionType0);
        String string0 = unionType0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3937() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        JSType jSType0 = unionType0.findPropertyType("");
        assertNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test4038() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        boolean boolean0 = unionType0.isUnionType();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4139() throws Throwable {
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        Visitor<NoType> visitor0 = (Visitor<NoType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(visitor0).caseUnionType(any(com.google.javascript.rhino.jstype.UnionType.class));
        NoType noType0 = unionType0.visit(visitor0);
        assertNull(noType0);
    }
}
