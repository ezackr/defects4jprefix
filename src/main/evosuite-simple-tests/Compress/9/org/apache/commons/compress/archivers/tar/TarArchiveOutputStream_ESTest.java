/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 07:43:32 GMT 2023
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        byteArrayOutputStream0.writeTo(tarArchiveOutputStream0);
        assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        PrintStream printStream0 = mockPrintStream0.append('W');
        DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(dataOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry) tarArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        assertEquals("elliottzackrone", tarArchiveEntry0.getUserName());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes)", false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("", 63L);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(arArchiveEntry0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.compress.archivers.ar.ArArchiveEntry cannot be cast to org.apache.commons.compress.archivers.tar.TarArchiveEntry
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MockFile mockFile0 = new MockFile("'@", "D(i:WAj-XQ83E8");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 54);
        ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.flush();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.FilterOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.finish();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.utils.CountingOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MockFile mockFile0 = new MockFile("G?Gx", "G?Gx");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(tarArchiveOutputStream0, false);
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(mockPrintStream0, 2);
        // Undeclared exception!
        try {
            tarArchiveOutputStream1.finish();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P7");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.createArchiveEntry((File) null, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0, 10240, 10240);
        // Undeclared exception!
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 0, 1);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.close();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.utils.CountingOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        File file0 = MockFile.createTempFile("Z6N!L8e6!=J?(JzYNZQ", "Z6N!L8e6!=J?(JzYNZQ");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 55, 5567);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.close();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MockFile mockFile0 = new MockFile(",", ",");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 4665, 4665);
        FileSystemHandling.shouldAllThrowIOExceptions();
        try {
            tarArchiveOutputStream0.close();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Simulated IOException
            //
            verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' bytes for entry '");
        TarArchiveOutputStream tarArchiveOutputStream0 = null;
        try {
            tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, (-4869), (-1));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Unknown header type");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
        TarArchiveOutputStream tarArchiveOutputStream1 = null;
        try {
            tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 512, 0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // / by zero
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = null;
        try {
            tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, (-374));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xfe!*`l@X1");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
        tarArchiveOutputStream0.close();
        MockFile mockFile0 = new MockFile("' bytes specified in the header were written", "iuKQ=,{jc2|fvlSo_j");
        try {
            tarArchiveOutputStream0.createArchiveEntry(mockFile0, "");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes)", false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        byte[] byteArray0 = new byte[2];
        try {
            tarArchiveOutputStream0.write(byteArray0, (int) (byte) (-39), (int) (byte) 100);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // request to write '100' bytes exceeds size in header of '0' bytes for entry 'null'
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes)", false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        byte[] byteArray0 = new byte[2];
        tarArchiveOutputStream0.write(byteArray0, (int) (byte) (-39), (int) (byte) (-124));
        assertEquals((-124L), tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(10240);
        pipedOutputStream0.connect(pipedInputStream0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0);
        tarArchiveOutputStream0.close();
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes)", false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No current entry to close
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes)", false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        MockFile mockFile0 = new MockFile(" bytes)", "S");
        ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, "~X\"GRO_L&04gj6OR|G");
        tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        tarArchiveOutputStream0.closeArchiveEntry();
        assertEquals(0, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        MockFile mockFile0 = new MockFile("b&WezVn38K");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 553);
        tarArchiveOutputStream0.finish();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GZb,`{Y\rtz&,y", (byte) (-53));
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xfe!*`l@X1");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.close();
        assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(dataOutputStream0, 10240);
        MockFile mockFile0 = new MockFile("");
        ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        try {
            tarArchiveOutputStream0.finish();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // This archives contains unclosed entries.
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" but is ");
        DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
        tarArchiveOutputStream0.close();
        try {
            tarArchiveOutputStream0.finish();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // This archive has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xfe!*`l@X1");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
        tarArchiveOutputStream0.setLongFileMode((-653));
        assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        MockFile mockFile0 = new MockFile("'@", "D(i:WAj-XQ83E8");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 54);
        int int0 = tarArchiveOutputStream0.getRecordSize();
        assertEquals(512, int0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        MockFile mockFile0 = new MockFile("!", "!");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        tarArchiveOutputStream0.flush();
        assertEquals(0, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 10240, 10240);
        MockFile mockFile0 = new MockFile("");
        ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        // Undeclared exception!
        tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
    }
}
