/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 03:28:26 GMT 2023
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.junit.runner.RunWith;

public class Base64Test {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        assertArrayEquals(new byte[] { (byte) (-128), (byte) 0, (byte) 0, (byte) 56, (byte) 0, (byte) 0, (byte) 0, (byte) 57 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        assertEquals(8, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
        assertEquals(4, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Base64 base64_0 = new Base64(997);
        byte[] byteArray0 = base64_0.decode("j@xi_AAjO/6{DeM");
        assertArrayEquals(new byte[] { (byte) (-113), (byte) 24, (byte) (-65), (byte) 0, (byte) 8, (byte) (-50), (byte) (-1), (byte) (-96), (byte) (-34) }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Base64 base64_0 = new Base64(997);
        byte[] byteArray0 = base64_0.decode("j@xi_AAjO/6{DeM");
        assertEquals(9, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
        assertArrayEquals(new byte[] { (byte) 65, (byte) 65, (byte) 65 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Base64 base64_0 = new Base64(1371);
        byte[] byteArray0 = new byte[0];
        base64_0.setInitialBuffer(byteArray0, (-6880), 26);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Base64 base64_0 = new Base64(true);
        byte[] byteArray0 = base64_0.decode("]");
        String string0 = base64_0.encodeToString(byteArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        String string0 = Base64.encodeBase64URLSafeString(byteArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Base64 base64_0 = new Base64(true);
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = base64_0.decode(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
        assertEquals(0, byteArray2.length);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        String string0 = Base64.encodeBase64String((byte[]) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        String string0 = Base64.encodeBase64String(byteArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("");
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("");
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[3] = (byte) 43;
        byteArray0[5] = (byte) 65;
        byteArray0[7] = (byte) 106;
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        assertEquals((short) (-2040), bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) 88;
        byteArray0[4] = (byte) 74;
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        assertEquals((byte) 92, bigInteger0.byteValue());
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 105;
        byteArray0[2] = (byte) 73;
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        assertEquals((short) 136, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        byte[] byteArray1 = Base64.decodeBase64(byteArray0);
        assertEquals(4, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        byte[] byteArray1 = Base64.decodeBase64(byteArray0);
        assertArrayEquals(new byte[] { (byte) 67, (byte) 103, (byte) 61, (byte) 61 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        byte[] byteArray1 = Base64.decodeBase64(byteArray0);
        assertArrayEquals(new byte[] { (byte) 10 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64((String) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("");
        byte[] byteArray1 = Base64.encodeBase64(byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        Base64 base64_0 = new Base64(121);
        base64_0.decode((String) null);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        // Undeclared exception!
        try {
            Base64.toIntegerBytes((BigInteger) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        Base64 base64_0 = new Base64(40, (byte[]) null);
        byte[] byteArray0 = new byte[7];
        base64_0.encode(byteArray0);
        // Undeclared exception!
        try {
            base64_0.readResults((byte[]) null, 98, 40);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        Base64 base64_0 = new Base64(false);
        byte[] byteArray0 = new byte[6];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
        base64_0.encodeToString(byteArray1);
        // Undeclared exception!
        try {
            base64_0.readResults(byteArray0, (byte) 0, (byte) 77);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        // Undeclared exception!
        try {
            Base64.isArrayByteBase64((byte[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2934() throws Throwable {
        Base64 base64_0 = new Base64(true);
        // Undeclared exception!
        try {
            base64_0.encode((byte[]) null, 108, 108);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3035() throws Throwable {
        // Undeclared exception!
        try {
            Base64.discardWhitespace((byte[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3136() throws Throwable {
        // Undeclared exception!
        try {
            Base64.decodeInteger((byte[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3237() throws Throwable {
        Base64 base64_0 = new Base64(395, (byte[]) null);
        // Undeclared exception!
        try {
            base64_0.decode((byte[]) null, 395, 3364);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3338() throws Throwable {
        Base64 base64_0 = new Base64(true);
        byte[] byteArray0 = new byte[7];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        assertEquals(12, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test3439() throws Throwable {
        Base64 base64_0 = new Base64(1023, (byte[]) null, true);
        byte[] byteArray0 = base64_0.encode((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        Base64 base64_0 = new Base64(1023, (byte[]) null, true);
        byte[] byteArray0 = base64_0.encode((byte[]) null);
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        String string0 = "?\\u<`Dj5PR}SO`";
        byte[] byteArray0 = Base64.decodeBase64(string0);
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 10);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        String string0 = "?\\u<`Dj5PR}SO`";
        byte[] byteArray0 = Base64.decodeBase64(string0);
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 10);
        assertEquals(8, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test3543() throws Throwable {
        String string0 = "?\\u<`Dj5PR}SO`";
        byte[] byteArray0 = Base64.decodeBase64(string0);
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 10);
        assertArrayEquals(new byte[] { (byte) (-72), (byte) 56, (byte) (-7), (byte) 61, (byte) 20, (byte) (-114) }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 15);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test3845() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, 5);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3946() throws Throwable {
        Base64 base64_0 = new Base64(1023, (byte[]) null, true);
        byte[] byteArray0 = base64_0.decode((byte[]) null);
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test3947() throws Throwable {
        Base64 base64_0 = new Base64(1023, (byte[]) null, true);
        byte[] byteArray0 = base64_0.decode((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test4048() throws Throwable {
        Base64 base64_0 = new Base64();
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        byte[] byteArray1 = base64_0.decode(byteArray0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test4049() throws Throwable {
        Base64 base64_0 = new Base64();
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        byte[] byteArray1 = base64_0.decode(byteArray0);
        assertSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test4150() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 110);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4251() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 19);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4352() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) (-100));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4453() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 126);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4554() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 61);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4655() throws Throwable {
        Base64 base64_0 = new Base64(121);
        base64_0.decode((byte[]) null, 0, 0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test4756() throws Throwable {
        byte[] byteArray0 = new byte[9];
        Base64 base64_0 = new Base64();
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
        // Undeclared exception!
        try {
            base64_0.decode(byteArray1, 6, 793);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 12
        }
    }

    @Test(timeout = 4000)
    public void test4857() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) (-1);
        Base64 base64_0 = new Base64(246, byteArray0);
        // Undeclared exception!
        try {
            base64_0.decode(byteArray0, 0, 26);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 7
        }
    }

    @Test(timeout = 4000)
    public void test4958() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 61;
        Base64 base64_0 = new Base64(false);
        base64_0.decode(byteArray0, 0, 76);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5059() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
        base64_0.decode(byteArray1, 0, (-1));
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5060() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
        base64_0.decode(byteArray1, 0, (-1));
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test5161() throws Throwable {
        Base64 base64_0 = new Base64(997);
        byte[] byteArray0 = base64_0.decode("q7)/6");
        assertArrayEquals(new byte[] { (byte) (-85), (byte) (-65), (byte) (-6) }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test5162() throws Throwable {
        Base64 base64_0 = new Base64(997);
        byte[] byteArray0 = base64_0.decode("q7)/6");
        base64_0.decode((byte[]) null, 943, 4191);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5263() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64((byte) 43, byteArray0, true);
        // Undeclared exception!
        try {
            base64_0.encode(byteArray0, 1, (int) (byte) 126);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 6
        }
    }

    @Test(timeout = 4000)
    public void test5364() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[8];
        byteArray0[4] = (byte) (-90);
        // Undeclared exception!
        try {
            base64_0.encode(byteArray0, 0, (int) (byte) 30);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 8
        }
    }

    @Test(timeout = 4000)
    public void test5465() throws Throwable {
        Base64 base64_0 = new Base64(1371);
        byte[] byteArray0 = new byte[0];
        base64_0.setInitialBuffer(byteArray0, (-1), 0);
        // Undeclared exception!
        try {
            base64_0.encode(byteArray0, (-1414), 1371);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1414
        }
    }

    @Test(timeout = 4000)
    public void test5566() throws Throwable {
        Base64 base64_0 = new Base64(false);
        byte[] byteArray0 = new byte[9];
        base64_0.encode(byteArray0, 162, 0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5667() throws Throwable {
        Base64 base64_0 = new Base64(true);
        boolean boolean0 = base64_0.isUrlSafe();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5768() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64(0, byteArray0, false);
        boolean boolean0 = base64_0.isUrlSafe();
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test5769() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64(0, byteArray0, false);
        boolean boolean0 = base64_0.isUrlSafe();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5870() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 55;
        Base64 base64_0 = null;
        try {
            base64_0 = new Base64(43, byteArray0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // lineSeperator must not contain base64 characters: [\u00007\u0000\u0000]
        }
    }

    @Test(timeout = 4000)
    public void test5971() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
        assertArrayEquals(new byte[] { (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 61 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test5972() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
        assertEquals(8, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test6073() throws Throwable {
        byte[] byteArray0 = new byte[2];
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test6174() throws Throwable {
        // Undeclared exception!
        try {
            Base64.encodeInteger((BigInteger) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // encodeInteger called with null parameter
        }
    }

    @Test(timeout = 4000)
    public void test6275() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        Base64 base64_0 = new Base64(0);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        assertArrayEquals(new byte[] { (byte) 81, (byte) 50, (byte) 99, (byte) 57, (byte) 80, (byte) 81, (byte) 61, (byte) 61 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test6276() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        Base64 base64_0 = new Base64(0);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        int int0 = base64_0.avail();
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test6377() throws Throwable {
        Base64 base64_0 = new Base64();
        String string0 = base64_0.encodeToString((byte[]) null);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test6378() throws Throwable {
        Base64 base64_0 = new Base64();
        String string0 = base64_0.encodeToString((byte[]) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test6479() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(6, byteArray0, true);
        BigInteger bigInteger0 = BigInteger.ONE;
        try {
            base64_0.encode((Object) bigInteger0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Parameter supplied to Base64 encode is not a byte[]
        }
    }

    @Test(timeout = 4000)
    public void test6580() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertEquals(5, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test6581() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 32, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test6582() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test6783() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[4] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test6784() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[4] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test6785() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[4] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertEquals(5, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test6886() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("\u0000Upq>l?a");
        // Undeclared exception!
        try {
            Base64.encodeBase64(byteArray0, false, false, (-1334));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Input array too big, the output array would be bigger (6) than the specified maxium size of -1334
        }
    }

    @Test(timeout = 4000)
    public void test6987() throws Throwable {
        Base64 base64_0 = new Base64(2);
        byte[] byteArray0 = base64_0.decode("");
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test6988() throws Throwable {
        Base64 base64_0 = new Base64(2);
        byte[] byteArray0 = base64_0.decode("");
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test7089() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7190() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7291() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64();
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        try {
            base64_0.decode((Object) bigInteger0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Parameter supplied to Base64 decode is not a byte[] or a String
        }
    }

    @Test(timeout = 4000)
    public void test7392() throws Throwable {
        Base64 base64_0 = new Base64(false);
        Object object0 = base64_0.decode((Object) "");
        Object object1 = base64_0.decode(object0);
        assertSame(object1, object0);
    }

    @Test(timeout = 4000)
    public void test7393() throws Throwable {
        Base64 base64_0 = new Base64(false);
        Object object0 = base64_0.decode((Object) "");
        Object object1 = base64_0.decode(object0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test7494() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 123;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7595() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 57;
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        assertEquals((short) 0, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test7696() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[5] = (byte) (-81);
        byte[] byteArray1 = Base64.decodeBase64(byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test7797() throws Throwable {
        Base64 base64_0 = new Base64(2);
        Object object0 = base64_0.decode((Object) "ALq6AAA=\r\n");
        Object object1 = base64_0.encode(object0);
        assertNotSame(object1, object0);
    }

    @Test(timeout = 4000)
    public void test7898() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64(true);
        base64_0.encode(byteArray0, (-30), (-1972));
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test7999() throws Throwable {
        byte[] byteArray0 = new byte[7];
        String string0 = Base64.encodeBase64URLSafeString(byteArray0);
        assertEquals("AAAAAAAAAA", string0);
    }

    @Test(timeout = 4000)
    public void test80100() throws Throwable {
        byte[] byteArray0 = new byte[2];
        Base64 base64_0 = new Base64(true);
        base64_0.decode((Object) "jPc~z!u*g%EWQWD");
        base64_0.encode(byteArray0, (int) (byte) 123, 844);
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test81101() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("\u0000Upq>l?a");
        base64_0.setInitialBuffer(byteArray0, 1841, 0);
        assertArrayEquals(new byte[] { (byte) 82, (byte) (-102), (byte) (-91) }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test81102() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("\u0000Upq>l?a");
        base64_0.setInitialBuffer(byteArray0, 1841, 0);
        assertEquals(3, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test82103() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("[}=rvj9:K$BRGS(u1");
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test82104() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("[}=rvj9:K$BRGS(u1");
        int int0 = base64_0.readResults((byte[]) null, (byte) 52, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test82105() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("[}=rvj9:K$BRGS(u1");
        int int0 = base64_0.readResults((byte[]) null, (byte) 52, 0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test83106() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(6, byteArray0, true);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        assertArrayEquals(new byte[] { (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test83107() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(6, byteArray0, true);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        int int0 = base64_0.avail();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test83108() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(6, byteArray0, true);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        int int0 = base64_0.avail();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test84109() throws Throwable {
        Base64 base64_0 = new Base64();
        int int0 = base64_0.readResults((byte[]) null, (byte) 52, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test84110() throws Throwable {
        Base64 base64_0 = new Base64();
        int int0 = base64_0.readResults((byte[]) null, (byte) 52, 0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test85111() throws Throwable {
        Base64 base64_0 = new Base64();
        int int0 = base64_0.avail();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test85112() throws Throwable {
        Base64 base64_0 = new Base64();
        int int0 = base64_0.avail();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test86113() throws Throwable {
        Base64 base64_0 = new Base64((-1));
        byte[] byteArray0 = new byte[6];
        base64_0.encode(byteArray0, (int) (byte) 0, (-4491));
        boolean boolean0 = base64_0.hasData();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test86114() throws Throwable {
        Base64 base64_0 = new Base64((-1));
        byte[] byteArray0 = new byte[6];
        base64_0.encode(byteArray0, (int) (byte) 0, (-4491));
        boolean boolean0 = base64_0.hasData();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test87115() throws Throwable {
        Base64 base64_0 = new Base64(false);
        boolean boolean0 = base64_0.hasData();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test87116() throws Throwable {
        Base64 base64_0 = new Base64(false);
        boolean boolean0 = base64_0.hasData();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test88117() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("Paameter suppled to Base64 encode is not a byte[]");
        Base64 base64_0 = null;
        try {
            base64_0 = new Base64((-489), byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // lineSeperator must not contain base64 characters: [=\uFFFD\uFFFDz\u05EB\uFFFD\uFFFDi\uFFFD\uFFFDm\uFFFD\u0016\uFFFD{\uFFFD\u001E\uFFFD\uFFFD\u001Dz+'\uFFFD\u059B\uFFFD\uFFFD]
        }
    }

    @Test(timeout = 4000)
    public void test89118() throws Throwable {
        Base64 base64_0 = new Base64(0, (byte[]) null);
        base64_0.setInitialBuffer((byte[]) null, 0, 0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test90119() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
        boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
        assertEquals(10, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test90120() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
        boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test91121() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        Base64 base64_0 = new Base64(true);
        byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
        byte[] byteArray2 = base64_0.encode(byteArray1);
        assertSame(byteArray2, byteArray1);
    }

    @Test(timeout = 4000)
    public void test92122() throws Throwable {
        byte[] byteArray0 = new byte[5];
        String string0 = Base64.encodeBase64String(byteArray0);
        assertEquals("AAAAAAA=\r\n", string0);
    }

    @Test(timeout = 4000)
    public void test93123() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("\u0000Upq>l?a");
        byte[] byteArray1 = Base64.encodeBase64(byteArray0);
        assertEquals(4, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test93124() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("\u0000Upq>l?a");
        byte[] byteArray1 = Base64.encodeBase64(byteArray0);
        assertArrayEquals(new byte[] { (byte) 85, (byte) 112, (byte) 113, (byte) 108 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test93125() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = base64_0.decode("\u0000Upq>l?a");
        byte[] byteArray1 = Base64.encodeBase64(byteArray0);
        assertFalse(base64_0.isUrlSafe());
    }
}
