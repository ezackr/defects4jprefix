/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 16:34:36 GMT 2023
 */
package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.junit.runner.RunWith;

public class TypeAdaptersTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Gson gson0 = new Gson();
        Class<Object> class0 = Object.class;
        TypeToken<Object> typeToken0 = TypeToken.get(class0);
        TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
        TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter0, class0);
        Class<Calendar> class1 = Calendar.class;
        Class<MockCalendar> class2 = MockCalendar.class;
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Calendar>) class2, (TypeAdapter<? super Calendar>) typeAdapterRuntimeTypeWrapper0);
        assertNotNull(typeAdapterFactory0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Gson gson0 = new Gson();
        Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
        try {
            gson0.fromJson("U:cd7t{f`~HSIl-iUJ", class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Gson gson0 = new Gson();
        Class<URI> class0 = URI.class;
        // Undeclared exception!
        try {
            gson0.fromJson("FT4", class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.net.URISyntaxException: Illegal character in path at index 0: FT4
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Double> class0 = Double.class;
        Gson gson0 = new Gson();
        TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
        TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
        StringReader stringReader0 = new StringReader("");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 1 path $
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Character> class0 = Character.class;
        Gson gson0 = new Gson();
        TypeAdapter<Character> typeAdapter0 = TypeAdapters.CHARACTER;
        TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, typeAdapter0, class0);
        StringReader stringReader0 = new StringReader("A6gNLx$Uc^fz}?z!]");
        JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
        try {
            typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<Character> class0 = Character.class;
        Gson gson0 = new Gson();
        TypeToken<Character> typeToken0 = TypeToken.get(class0);
        TypeAdapter<Character> typeAdapter0 = gson0.getAdapter(typeToken0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
        assertNotNull(typeAdapterFactory0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Byte> class0 = Byte.class;
        JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        Gson gson0 = new Gson();
        Class<Object> class1 = Object.class;
        TypeToken<Object> typeToken0 = TypeToken.get(class1);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ENUM_FACTORY;
        TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
        TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Byte>) treeTypeAdapter0);
        assertFalse(typeAdapterFactory1.equals((Object) typeAdapterFactory0));
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        // Undeclared exception!
        try {
            jsonArray0.getAsJsonObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Not a JSON Object: []
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Gson gson0 = new Gson();
        Boolean boolean0 = Boolean.TRUE;
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
        String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
        assertEquals("true", string0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Gson gson0 = new Gson();
        Character character0 = Character.valueOf('s');
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
        String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
        assertEquals("\"s\"", string0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Gson gson0 = new Gson();
        JsonObject jsonObject0 = new JsonObject();
        Byte byte0 = new Byte((byte) 84);
        jsonObject0.addProperty("T26e", (Number) byte0);
        String string0 = gson0.toJson((JsonElement) jsonObject0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Double> class0 = Double.class;
        Gson gson0 = new Gson();
        TypeToken<Double> typeToken0 = TypeToken.get(class0);
        TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
        Class<Character> class1 = Character.class;
        JsonSerializer<Character> jsonSerializer0 = (JsonSerializer<Character>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((JsonElement) null).when(jsonSerializer0).serialize(anyChar(), any(java.lang.reflect.Type.class), any(com.google.gson.JsonSerializationContext.class));
        JsonDeserializer<Character> jsonDeserializer0 = (JsonDeserializer<Character>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        TypeToken<Character> typeToken1 = TypeToken.get(class1);
        TreeTypeAdapter<Character> treeTypeAdapter0 = new TreeTypeAdapter<Character>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
        Character character0 = Character.valueOf(']');
        JsonElement jsonElement0 = treeTypeAdapter0.toJsonTree(character0);
        assertFalse(jsonElement0.isJsonArray());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Gson gson0 = new Gson();
        Class<JsonArray> class0 = JsonArray.class;
        try {
            gson0.fromJson("3% G9;6\"!3KA$j", class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Gson gson0 = new Gson();
        ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
        Locale locale0 = Locale.FRENCH;
        objectTypeAdapter0.toJson((Writer) mockPrintWriter0, (Object) locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<Locale> class0 = Locale.class;
        Gson gson0 = new Gson();
        try {
            gson0.fromJson("f1?dV6#bN?N5!d4", (Type) class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 8 path $
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Gson gson0 = new Gson();
        Class<Calendar> class0 = Calendar.class;
        try {
            gson0.fromJson("bJ&g%s:dSe", class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Gson gson0 = new Gson();
        UUID uUID0 = MockUUID.fromString("END_OBJECT");
        JsonElement jsonElement0 = gson0.toJsonTree((Object) uUID0);
        assertFalse(jsonElement0.isJsonArray());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Gson gson0 = new Gson();
        URL uRL0 = MockURL.getFtpExample();
        char[] charArray0 = new char[8];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        // Undeclared exception!
        try {
            gson0.toJson((Object) uRL0, (Appendable) charBuffer0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<StringBuffer> class0 = StringBuffer.class;
        Gson gson0 = new Gson();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
        assertTrue(jsonElement0.isJsonNull());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<StringBuffer> class0 = StringBuffer.class;
        Gson gson0 = new Gson();
        TypeAdapter<StringBuffer> typeAdapter0 = TypeAdapters.STRING_BUFFER;
        TypeAdapterRuntimeTypeWrapper<StringBuffer> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<StringBuffer>(gson0, typeAdapter0, class0);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        String string0 = typeAdapterRuntimeTypeWrapper0.toJson(stringBuffer0);
        assertEquals("\"\"", string0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<StringBuffer> class0 = StringBuffer.class;
        Gson gson0 = new Gson();
        try {
            gson0.fromJson("o-EE1x4}U%:l>LEazq", (Type) class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 9 path $
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Gson gson0 = new Gson();
        Character character0 = Character.valueOf('z');
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) character0);
        assertFalse(jsonPrimitive0.isNumber());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Gson gson0 = new Gson();
        StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$25");
        JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
        try {
            gson0.fromJson(jsonReader0, (Type) class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$25\"
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<Byte> class0 = Byte.class;
        Gson gson0 = new Gson();
        try {
            gson0.fromJson("b", (Type) class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NumberFormatException: For input string: \"b\"
        }
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<URI> class0 = URI.class;
        ObjectConstructor<URI> objectConstructor0 = (ObjectConstructor<URI>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
        HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
        ReflectiveTypeAdapterFactory.Adapter<URI> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<URI>(objectConstructor0, hashMap0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<URI>) reflectiveTypeAdapterFactory_Adapter0);
        Class<BitSet> class1 = BitSet.class;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.google.gson.internal.Excluder$1");
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
        TypeToken<BitSet> typeToken0 = TypeToken.get(class1);
        Gson gson0 = new Gson();
        JsonDeserializer<BitSet> jsonDeserializer0 = (JsonDeserializer<BitSet>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        TreeTypeAdapter<BitSet> treeTypeAdapter0 = new TreeTypeAdapter<BitSet>((JsonSerializer<BitSet>) null, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
        Class<Float> class2 = Float.TYPE;
        TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, treeTypeAdapter0, class2);
        BitSet bitSet0 = new BitSet();
        typeAdapterRuntimeTypeWrapper0.toJson((Writer) bufferedWriter0, bitSet0);
        assertEquals(0, bitSet0.cardinality());
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Gson gson0 = new Gson();
        StringReader stringReader0 = new StringReader("aQ");
        Class<BitSet> class0 = BitSet.class;
        try {
            gson0.fromJson((Reader) stringReader0, class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
        }
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<Short> class0 = Short.class;
        Gson gson0 = new Gson();
        // Undeclared exception!
        try {
            gson0.toJsonTree((Object) class0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Attempted to serialize java.lang.Class: java.lang.Short. Forgot to register a type adapter?
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Class<Currency> class0 = Currency.class;
        Gson gson0 = new Gson();
        StringReader stringReader0 = new StringReader("%JiV9Sg10(.tl1p4JX");
        // Undeclared exception!
        try {
            gson0.fromJson((Reader) stringReader0, (Type) class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Class<JsonArray> class0 = JsonArray.class;
        Gson gson0 = new Gson();
        Object object0 = new Object();
        // Undeclared exception!
        try {
            gson0.toJsonTree(object0, (Type) class0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Object cannot be cast to com.google.gson.JsonElement
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Gson gson0 = new Gson();
        Class<Object> class0 = Object.class;
        AtomicBoolean atomicBoolean0 = new AtomicBoolean();
        StringBuilder stringBuilder0 = new StringBuilder("4HUYM=i^");
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
        // Undeclared exception!
        try {
            gson0.toJson((Object) atomicBoolean0, (Type) class0, (Appendable) charBuffer0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Gson gson0 = new Gson();
        Class<AtomicBoolean> class0 = AtomicBoolean.class;
        StringReader stringReader0 = new StringReader("{3(Y4u");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            gson0.fromJson(jsonReader0, (Type) class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
        }
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Class<Short> class0 = Short.class;
        Gson gson0 = new Gson();
        Double double0 = new Double((-860.8));
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) double0, (Type) class0);
        assertTrue(jsonPrimitive0.isNumber());
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Class<URL> class0 = URL.class;
        TypeToken<URL> typeToken0 = TypeToken.get(class0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<URL>) null);
        assertNotNull(typeAdapterFactory0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Gson gson0 = new Gson();
        String string0 = gson0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Gson gson0 = new Gson();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(349, 11, 3813);
        gson0.toJsonTree((Object) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=349,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3813,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
    }
}
