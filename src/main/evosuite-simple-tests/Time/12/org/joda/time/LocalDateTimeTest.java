/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 12:16:32 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

public class LocalDateTimeTest {

    @Test(timeout = 4000)
    public void test0130() throws Throwable {
        int int0 = 0;
        LocalDateTime localDateTime0 = new LocalDateTime(0, 12, 0, 12, 12, 64);
        localDateTime0.withYearOfEra(int0);
        // Undeclared exception!
        try {
            localDateTime0.toLocalDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 64 for secondOfMinute must be in the range [0,59]
        }
    }

    @Test(timeout = 4000)
    public void test0231() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek((-3077));
        // Undeclared exception!
        try {
            localDateTime1.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -3077 for dayOfWeek must be in the range [1,7]
        }
    }

    @Test(timeout = 4000)
    public void test0242() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withMonthOfYear(255);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 255 for monthOfYear must be in the range [1,12]
        }
    }

    @Test(timeout = 4000)
    public void test0263() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDateTime0.compareTo((ReadablePartial) localDate0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // ReadablePartial objects must have matching field types
        }
    }

    @Test(timeout = 4000)
    public void test0284() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfMonth(736);
        // Undeclared exception!
        try {
            DateTimeFieldType.halfdayOfDay();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 736 for dayOfMonth must be in the range [1,28]
        }
    }

    @Test(timeout = 4000)
    public void test0325() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusYears((-2147483598));
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The calculation caused an overflow: 2014 + 2147483598
        }
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDateTime localDateTime0 = null;
        try {
            localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No partial converter found for type: org.joda.time.tz.FixedDateTimeZone
        }
    }

    @Test(timeout = 4000)
    public void test0477() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withTime(23034375, 23034375, 23034375, 23034375);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 23034375 for hourOfDay must be in the range [0,23]
        }
    }

    @Test(timeout = 4000)
    public void test0488() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getFieldType(883);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Invalid index: 883
        }
    }

    @Test(timeout = 4000)
    public void test0539() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Locale locale0 = Locale.CHINESE;
        localDateTime0.toString("|Er", locale0);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
        }
    }

    @Test(timeout = 4000)
    public void test06110() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withEra(23118750);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 23118750 for era must be in the range [0,1]
        }
    }

    @Test(timeout = 4000)
    public void test06211() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getValue(153);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Invalid index: 153
        }
    }

    @Test(timeout = 4000)
    public void test06812() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(2390);
        // Undeclared exception!
        try {
            localDateTime1.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 2390 for weekOfWeekyear must be in the range [1,52]
        }
    }

    @Test(timeout = 4000)
    public void test08013() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.setCopy("{gmi");
        // Undeclared exception!
        try {
            localDateTime_Property0.getLeapAmount();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value \"{gmi\" for year is not supported
        }
    }

    @Test(timeout = 4000)
    public void test09514() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The calendar must not be null
        }
    }

    @Test(timeout = 4000)
    public void test10215() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.addToCopy(1392389541320L);
        // Undeclared exception!
        try {
            localDateTime_Property0.roundCeilingCopy();
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Value cannot fit in an int: 1392389541320
        }
    }

    @Test(timeout = 4000)
    public void test10716() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfYear(23118774);
        // Undeclared exception!
        try {
            localDateTime0.toDate();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 23118774 for dayOfYear must be in the range [1,365]
        }
    }

    @Test(timeout = 4000)
    public void test11517() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.get((DateTimeFieldType) null);
        // Undeclared exception!
        try {
            localDateTime0.getMillisOfDay();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The DateTimeFieldType must not be null
        }
    }

    @Test(timeout = 4000)
    public void test12618() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withFieldAdded((DurationFieldType) null, 0);
        long long0 = 60000L;
        // Undeclared exception!
        try {
            System.setCurrentTimeMillis(long0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Field must not be null
        }
    }
}
