/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 12:32:17 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

public class DateTimeZoneTest {

    @Test(timeout = 4000)
    public void test390() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("-[C!,</~4gjti");
        // Undeclared exception!
        try {
            DateTimeZone.setDefault(dateTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"-[C!,</~4gjti\" is malformed at \"[C!,</~4gjti\"
        }
    }

    @Test(timeout = 4000)
    public void test411() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+Ri");
        // Undeclared exception!
        try {
            DateTimeZone.setDefault(dateTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"+Ri\" is malformed at \"Ri\"
        }
    }

    @Test(timeout = 4000)
    public void test492() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        // Undeclared exception!
        try {
            DateTimeZone.setDefault(dateTimeZone0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
