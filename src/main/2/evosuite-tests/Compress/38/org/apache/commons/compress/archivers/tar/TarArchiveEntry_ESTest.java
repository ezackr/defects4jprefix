/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:25:35 GMT 2024
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Date;
import java.util.HashMap;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte)0, false);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("r$z5YcO{Qh!-zLrhAvr", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("|`?_p[g", "|`?_p[g");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals("var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/|`?_p[g0|`?_p[g", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.name");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      int int0 = tarArchiveEntry0.getMode();
      assertEquals("user.name", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(33188, int0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/-Z/c7g[0X//");
      tarArchiveEntry0.setIds(33188, 33188);
      assertEquals(33188, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals("8O.V[[UG", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]?tc7g3[X/C5/");
      tarArchiveEntry0.setLinkName("/>]?tc7g3[X/C5/");
      assertEquals("/>]?tc7g3[X/C5/", tarArchiveEntry0.getLinkName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[XX&J/");
      tarArchiveEntry0.setNames("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/");
      assertEquals("/Z]/c7g3[XX&J/", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
      tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      Date date0 = tarArchiveEntry0.getLastModifiedDate();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals("B]", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, int0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$");
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G#ddH");
      tarArchiveEntry0.isCheckSumOK();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("G#ddH", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte)48);
      tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("JoWmo E;9F@*T5KMzp", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, int0);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("O]Zx#2^G}Sp<Pk");
      tarArchiveEntry0.isExtended();
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("O]Zx#2^G}Sp<Pk", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W2kvM`gi}5(gPbyz");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("W2kvM`gi}5(gPbyz", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
      String string0 = tarArchiveEntry0.getLinkName();
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", string0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Jhy'cJ$/");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/Z]tc`g3rX/&5/", "/Z]tc`g3rX/&5/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("Z]tc`g3rX/&5/Z]tc`g3rX/&5", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte)76);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertTrue(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, int0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals("AK`", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, int0);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte)3, true);
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("AK`", tarArchiveEntry0.getName());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("~");
      tarArchiveEntry0.setMode(1000);
      assertEquals(1000, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n{5+j5EMT~D^j[g");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
      long long0 = tarArchiveEntry0.getLongUserId();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("GNU.sparse.size", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/");
      tarArchiveEntry0.setModTime((long) (byte) (-18));
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(">]tc7g3[X/C5/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n%9o7\"V}6QX{Y<7Mv!C");
      tarArchiveEntry0.getFile();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("n%9o7\"V}6QX{Y<7Mv!C", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/", "/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/");
      TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
      assertEquals(2, tarArchiveEntryArray0.length);
      assertEquals("/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
      MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
      assertEquals("Z]/c7g3[XX&J/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isFIFO());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("z", false);
      boolean boolean0 = tarArchiveEntry0.equals((Object) null);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("z", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Value ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Value ", "Value ");
      boolean boolean0 = hashMap0.remove((Object) tarArchiveEntry0, (Object) "Value ");
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
      tarArchiveEntry0.setSize(33188);
      assertEquals(33188L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((-1833L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -1833
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n{5+j5EMT~D^j[g");
      tarArchiveEntry0.setDevMajor(31);
      assertEquals(31, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0\u0000");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -1
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      tarArchiveEntry0.setDevMinor(31);
      assertEquals(31, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/-Z]/c7g3[XX&J//");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((-1095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -1095
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertFalse(boolean0);
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7F[cyl#-1sU", (byte)75, true);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("7F[cyl#-1sU", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals("Users/elliottzackrone/IdeaProjects/defects4jprefix/>lH|6/>lH|6", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte)76);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/", (byte)120, true);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertTrue(boolean0);
      assertEquals("/>]tc7g3[X/C5/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Cp850", (byte)88);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("Cp850", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFile());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-1B", (byte)103, false);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(boolean0);
      assertEquals("UTF-1B", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("&x_=}6-0:{Ciok", tarArchiveEntry0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">lH|6");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(">lH|6", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isGNUSparse());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte)76);
      tarArchiveEntry0.isFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(tarArchiveEntry0.isGNULongNameEntry());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.isFile();
      assertEquals("Users/elliottzackrone/IdeaProjects/defects4jprefix/>lH|6/>lH|6", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte)0, true);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("R", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("3)ljNb", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z", (byte)50);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Z", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte)49);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("ustar ", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mphaQh", (byte)51, false);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("mphaQh", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3$[X/&5/", (byte)52, true);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/Z]/c7g3$[X/&5/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("oV3P,oU%C<Lq", (byte)54, true);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("oV3P,oU%C<Lq", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$", (byte)83, true);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(boolean0);
      assertEquals("}0WZE/s:D?v/Q$", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
      assertFalse(tarArchiveEntry0.isSparse());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      tarArchiveEntry0.isSparse();
      assertEquals("8O.V[[UG", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("cp4C7", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/Z]/c7g3[X/&5/", "/Z]/c7g3[X/&5/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals("Z]/c7g3[X/&5/Z]/c7g3[X/&5", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("SCHILY.realsize", "SCHILY.realsize");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SCHILY.realsize\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
