/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 04:32:29 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document(":only-of-type");
      Elements elements0 = document0.getElementsMatchingText(":only-of-type");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("2rhhvf=p9rrwqsa*");
      // Undeclared exception!
      try { 
        document0.child(62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("vDale");
      Element element0 = document0.addClass("vDale");
      assertEquals("vDale", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("i");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("tfoot");
      // Undeclared exception!
      try { 
        document0.html("tfoot");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("var");
      Elements elements0 = document0.getElementsByAttributeValue("var", "lg]}wt");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("#comment");
      Elements elements0 = document0.getElementsByAttributeValueStarting("#comment", "#comment");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("ln'r");
      Elements elements0 = document0.getElementsMatchingOwnText("ln'r");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("3yr");
      Elements elements0 = document0.getElementsByIndexLessThan((-2285));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("var");
      Elements elements0 = document0.getElementsByAttributeStarting("var");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("var");
      Elements elements0 = document0.getElementsByIndexEquals(1032);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("var");
      // Undeclared exception!
      try { 
        document0.wrap("var");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000007");
      Element element0 = document0.appendElement("java.lang.string@0000000007");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("]");
      Elements elements0 = document0.getElementsByAttributeValueMatching("]", "]");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("var");
      Elements elements0 = document0.getElementsByAttributeValueEnding("var", "var");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("':$]p'");
      Elements elements0 = document0.getElementsByClass("':$]p'");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("v?r");
      Elements elements0 = document0.getElementsContainingText("v?r");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("':$]p'");
      Elements elements0 = document0.getElementsByAttributeValueContaining("':$]p'", "':$]p'");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("2a");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("39n=?\"dz%uBDxs,r]9");
      Elements elements0 = document0.getElementsByAttributeValueNot("39n=?\"dz%uBDxs,r]9", "39n=?\"dz%uBDxs,r]9");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("?D");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("#=<D-'=p0MJ#^");
      Elements elements0 = document0.getElementsByAttribute("#=<D-'=p0MJ#^");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("value");
      // Undeclared exception!
      try { 
        document0.before("value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("8o.[b.=t+");
      Element element0 = document0.removeClass("8o.[b.=t+");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("var");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("var");
      // Undeclared exception!
      try { 
        document0.title("var");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("value");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("var");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after("var");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("var");
      Element element0 = document0.tagName("var");
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        document0.after("var");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("r");
      document0.prependText("r");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("var");
      Element element0 = document0.prependText("var");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("var");
      document0.prependElement("var");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("jf,g$?c2");
      DataNode dataNode0 = new DataNode("W[W|NcF'I:L", "");
      document0.appendChild(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document(".");
      document0.prependElement(".");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000007");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      Element element0 = document0.insertChildren(0, linkedHashSet0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("vDalue");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-78), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("v");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(316, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document(".");
      Element element0 = document0.toggleClass(".");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("<)r");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("value", "value");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("value");
      FormElement formElement0 = new FormElement(tag0, "value", attributes0);
      FormElement formElement1 = new FormElement(tag0, "value", attributes0);
      formElement1.prependChild(formElement0);
      String string0 = formElement0.cssSelector();
      assertEquals("value > value", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("var");
      Element element0 = document0.prependElement("br");
      Elements elements0 = element0.siblingElements();
      assertEquals("br", element0.nodeName());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("#comment");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("entities-base.properties");
      document0.reparentChild(document0);
      document0.prependElement("entities-base.properties");
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("type");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("r");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.prependElement("br");
      Element element1 = element0.nextElementSibling();
      assertEquals("br", element0.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("entities-base.properties");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("var");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("entities-base.properties");
      Element element0 = document0.prependElement("entities-base.properties");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("var");
      Element element0 = document0.appendChild(document0);
      element0.prependElement("var");
      Element element1 = document0.previousElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("type");
      document0.reparentChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("var");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.prependElement("HDo)&C'-e~> ");
      Element element0 = document0.firstElementSibling();
      assertEquals("hdo)&c'-e~>", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("jf,g$?c2");
      Element element0 = document0.prependElement("jf,g$?c2");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("entities-base.properties");
      document0.reparentChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("type");
      document0.appendChild(document0);
      document0.prependElement("#");
      Element element0 = document0.lastElementSibling();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("value", "value");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("value");
      FormElement formElement0 = new FormElement(tag0, "value", attributes0);
      Element element0 = formElement0.getElementById("value > value");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("id");
      Comment comment0 = new Comment("frame", "frame");
      document0.appendChild(comment0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("N1``?2*tA");
      Element element0 = document0.prependText("N1``?2*tA");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.prependElement("frame");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("Z");
      Element element0 = document0.prependText("Z");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.addChildren(nodeArray0);
      element0.tagName("br");
      document0.prependElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("2rhhvf=p9rrwqsa*");
      Element element0 = document0.prependText("2rhhvf=p9rrwqsa*");
      Elements elements0 = element0.getElementsContainingOwnText("2rhhvf=p9rrwqsa*");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document(":only-child");
      document0.prependElement("br");
      Elements elements0 = document0.getElementsContainingOwnText(":only-child");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document(":only-child");
      Element element0 = document0.prependElement("br");
      Comment comment0 = new Comment(":only-child", "br");
      element0.replaceWith(comment0);
      Elements elements0 = document0.getElementsContainingOwnText(":only-child");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("_h ");
      document0.prependElement("_h ");
      Elements elements0 = document0.getElementsContainingOwnText("_h ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("R!hKH;", "w[h.8k|p-3x?");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "<)r", attributes0);
      boolean boolean0 = Element.preserveWhitespace(formElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("jf,g$?c2");
      document0.prependElement("jf,g$?c2");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("var");
      document0.prependText((String) null);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("jf,g$?c2");
      DataNode dataNode0 = new DataNode("W[W|NcF'I:L", "");
      document0.appendChild(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("jf,g$?c2");
      Element element0 = document0.prependElement("jf,g$?c2");
      element0.appendText("jf,g$?c2");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("<)r");
      document0.prependText("<)r");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("<)r");
      DataNode dataNode0 = DataNode.createFromEncoded("<)r", "type");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("<)r", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("<)r");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("]");
      Element element0 = document0.toggleClass("]");
      boolean boolean0 = element0.hasClass("5Z?6 B&g8n.R=hN|=S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("entities-bse.properties");
      document0.toggleClass("java.lang.string@0000000020");
      boolean boolean0 = document0.hasClass("attributeSingleValueCharsSorted");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("var");
      Element element0 = document0.prependText("java.lang.string@0000000008");
      document0.tagName("bn]n");
      document0.dataset();
      element0.toggleClass("bn]n");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000008");
      assertEquals("bn]n", document0.tagName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("hevj1pjvou:m6v:`");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "N1``?2*tA", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "<)r", attributes0);
      formElement0.val("rtE");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeWithValueStarting");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(19710);
      document0.outerHtml(stringBuilder1);
      assertEquals("19710<#root></#root>", stringBuilder1.toString());
      assertEquals("19710<#root></#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("Z");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.prependElement("br");
      // Undeclared exception!
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextNode textNode0 = new TextNode("i", "i");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("i");
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      FormElement formElement1 = new FormElement(tag0, "i", attributes0);
      formElement0.prependChild(formElement1);
      formElement0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Q", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(stringBuilder0, 160, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("Z");
      document0.prependElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("var");
      document0.prependElement("var");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Q", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement0.appendChild(formElement0);
      formElement0.outerHtmlTail(stringBuilder0, 160, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Q", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder("Q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Element element0 = formElement0.appendText("Q");
      element0.prepend("Q");
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail(stringBuilder0, (-24), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Q", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder("Q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.appendText("Q");
      formElement0.outerHtmlTail(stringBuilder0, (-24), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("value");
      document0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("value", "value");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("value");
      FormElement formElement0 = new FormElement(tag0, "value", attributes0);
      FormElement formElement1 = new FormElement(tag0, "value", attributes0);
      formElement0.equals(formElement1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("entities-bse.properties");
      Document document1 = document0.clone();
      document1.val("!?");
      document1.equals(document0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.hashCode();
  }
}
