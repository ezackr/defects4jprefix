/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:17:07 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("hfr");
      Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
      document_OutputSettings0.escapeMode();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("Larr");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("Larr");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Larr
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("|3Hk<G^l\u0002&}j>4?");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document_OutputSettings0.charset();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("pf");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      
      document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("{y&N4#[?>F1M/!A");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("Rcaron");
      Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("pf");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document_OutputSettings0.encoder();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("%@d81ZQ>,{");
      document0.title("Bo<6S]{_} ~c");
      String string0 = document0.title();
      assertEquals("Bo<6S]{_} ~c", string0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("pf");
      Document document1 = document0.normalise();
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("%@d81ZQ>,{");
      Element element0 = document0.text(";C~?YV<9@5nW");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("{y&N4#[?>F1M/!A");
      Element element0 = document0.createElement("{y&N4#[?>F1M/!A");
      assertEquals("{y&n4#[?>f1m/!a", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("W xtWpkw");
      document0.title("sr={?R/p wjTv/A*$l");
      document0.title("");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("z*9f.PFI7z-");
      TextNode textNode0 = new TextNode("z*9f.PFI7z-", "z*9f.PFI7z-");
      document0.appendChild(textNode0);
      Document document1 = document0.normalise();
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("z*9f.PFI7z-");
      TextNode textNode0 = new TextNode("xbw", "z*9f.PFI7z-");
      TextNode textNode1 = textNode0.text("");
      document0.appendChild(textNode1);
      Document document1 = document0.normalise();
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("O^90");
      Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-2303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("RDb0KDf<fn1Z[");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document_OutputSettings0.indentAmount(1577);
      assertEquals(1577, document_OutputSettings0.indentAmount());
  }
}
