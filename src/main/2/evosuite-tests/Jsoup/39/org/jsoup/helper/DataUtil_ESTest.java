/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 04:03:39 GMT 2024
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Parser.xmlParser();
      Parser.xmlParser();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-728), 4);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      Document document0 = DataUtil.load((InputStream) pushbackInputStream0, "", "&mY9");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.quirksMode(document_QuirksMode0);
      String string0 = "e}X+816xVTj;# ";
      String string1 = "*t";
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataUtil.readToByteBuffer((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = (byte)67;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)67);
      DataUtil.load((InputStream) byteArrayInputStream0, "Tw]q^", "Tw]q^", (Parser) null);
      DataUtil.readToByteBuffer(byteArrayInputStream0, byte0);
      int int0 = (-1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataUtil.readToByteBuffer(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataUtil.getCharsetFromContentType("J");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1367, 1367);
      byteArrayInputStream0.mark(0);
      DataUtil.readToByteBuffer(byteArrayInputStream0, 1367);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("charset=", "charset=");
      DataUtil.load(file0, "charset=", "charset=");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("y", "y");
      DataUtil.load((File) mockFile0, "y", "y");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataUtil.getCharsetFromContentType("");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataUtil.getCharsetFromContentType((String) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("charset=", "charset=");
      DataUtil.load(file0, (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataUtil.readToByteBuffer(pipedInputStream0, (-270));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0, 3);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      DataUtil.readToByteBuffer(pushbackInputStream0, 3);
      Parser parser0 = Parser.htmlParser();
      parser0.setTrackErrors(3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0, 3);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      DataUtil.readToByteBuffer(pushbackInputStream0, 2736);
      Parser parser0 = Parser.htmlParser();
      parser0.setTrackErrors(3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("charset=", "charset=");
      DataUtil.load(file0, (String) null, "charset=");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataUtil.getCharsetFromContentType("charset=");
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1549);
      Parser parser0 = Parser.htmlParser();
      DataUtil.parseByteData(byteBuffer0, (String) null, "charset=", parser0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)3;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataUtil.readToByteBuffer(byteArrayInputStream0, (byte)3);
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile("K*.<%|%cvwg", "K*.<%|%cvwg");
      DataUtil.load(file0, "UTF-8", (String) null);
  }
}
