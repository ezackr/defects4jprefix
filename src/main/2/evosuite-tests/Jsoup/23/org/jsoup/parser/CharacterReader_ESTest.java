/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 02:01:27 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      characterReader0.rewindToMark();
      assertEquals("'-vzzmc{,/A}*yW,KUm", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("'-vzzmc{,/A}*yW,KUm");
      assertEquals("", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      characterReader0.mark();
      assertEquals("'-vzzmc{,/A}*yW,KUm", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      characterReader0.advance();
      assertEquals("?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      boolean boolean0 = characterReader0.matchConsume("f");
      assertFalse(boolean0);
      assertEquals("'-vzzmc{,/A}*yW,KUm", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      characterReader0.unconsume();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      String string0 = characterReader0.toString();
      assertEquals("'-vzzmc{,/A}*yW,KUm", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      characterReader0.consumeAsString();
      characterReader0.consume();
      characterReader0.consumeLetterSequence();
      characterReader0.consume();
      characterReader0.consumeHexSequence();
      assertEquals(",/A}*yW,KUm", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E");
      String string0 = characterReader0.consumeTo('k');
      assertEquals("", characterReader0.toString());
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nQ8rkOpQq9Nq)C/*");
      int int0 = characterReader0.pos();
      assertEquals("nQ8rkOpQq9Nq)C/*", characterReader0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", characterReader0.toString());
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      char char0 = characterReader0.current();
      assertEquals('\n', char0);
      assertEquals("\n?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      characterReader0.consumeAsString();
      characterReader0.consumeAsString();
      char char0 = characterReader0.current();
      assertEquals("", characterReader0.toString());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      String string0 = characterReader0.consumeTo('?');
      assertEquals("?", characterReader0.toString());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("H:jREtd{lj,");
      characterReader0.consumeToEnd();
      String string0 = characterReader0.consumeTo("H:jREtd{lj,");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      characterReader0.consumeTo("");
      assertEquals("\n?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nQ8rkOpQq9Nq)C/*");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      characterReader0.consumeToAny(charArray0);
      assertEquals("9Nq)C/*", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("MhFw]fUdY$V{;");
      assertEquals("MhFw]fUdY$V{;", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nQ8rkOpQq9Nq)C/*");
      characterReader0.consumeLetterSequence();
      assertEquals("8rkOpQq9Nq)C/*", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4;*g7VZ+41P/");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("4", string0);
      assertEquals(";*g7VZ+41P/", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("f~=oob3,LZlB8");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("f", string0);
      assertEquals("~=oob3,LZlB8", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E");
      assertEquals("E", characterReader0.toString());
      
      characterReader0.consumeAsString();
      characterReader0.consumeDigitSequence();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      characterReader0.consumeDigitSequence();
      assertEquals("\n?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nQ8rkOpQq9Nq)C/*");
      characterReader0.consume();
      characterReader0.consume();
      characterReader0.consumeDigitSequence();
      assertEquals("rkOpQq9Nq)C/*", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      characterReader0.consumeAsString();
      characterReader0.consumeAsString();
      boolean boolean0 = characterReader0.matches(' ');
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      boolean boolean0 = characterReader0.matches('4');
      assertFalse(boolean0);
      assertEquals("\n?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("MhFw]fUdY$V{;");
      boolean boolean0 = characterReader0.matches('M');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nQ8rkOpQq9Nq)C/*");
      char[] charArray0 = new char[6];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals("nQ8rkOpQq9Nq)C/*", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("MhFw]fUdY$V{;");
      assertEquals("MhFw]fUdY$V{;", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      char[] charArray0 = new char[8];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nQ8rkOpQq9Nq)C/*");
      characterReader0.consumeAsString();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals("Q8rkOpQq9Nq)C/*", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals("'-vzzmc{,/A}*yW,KUm", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("MhFw]fUdY$V{;");
      assertEquals("MhFw]fUdY$V{;", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      characterReader0.consumeAsString();
      characterReader0.consume();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("vzzmc{,/A}*yW,KUm", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("MhFw]fUdY$V{;");
      characterReader0.consume();
      characterReader0.consume();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("Fw]fUdY$V{;", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'-vzzmc{,/A}*yW,KUm");
      characterReader0.consumeAsString();
      characterReader0.consume();
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("{,/A}*yW,KUm", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals("\n?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      characterReader0.consumeAsString();
      characterReader0.consumeAsString();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      characterReader0.consumeAsString();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("?", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("6[WCjY3mZ!-QI\n?");
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      boolean boolean0 = characterReader0.matchConsume("");
      assertTrue(boolean0);
      assertEquals("\n?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("\r\n?");
      assertEquals("\n?", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E");
      boolean boolean0 = characterReader0.containsIgnoreCase("");
      assertEquals("E", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";BcExK(rM$L=uZQ");
      boolean boolean0 = characterReader0.containsIgnoreCase("J_~x");
      assertFalse(boolean0);
      assertEquals(";BcExK(rM$L=uZQ", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E");
      boolean boolean0 = characterReader0.containsIgnoreCase("E");
      assertEquals("E", characterReader0.toString());
      assertTrue(boolean0);
  }
}
