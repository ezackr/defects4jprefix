/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 07:18:48 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("KI5]");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.getElementById("KI5]");
      assertEquals("KI5]", document0.baseUri());
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("Xp9HIIiB5s#-8+b|n");
      Elements elements0 = document0.getElementsMatchingText("Xp9HIIiB5s#-8+b|n");
      assertEquals("Xp9HIIiB5s#-8+b|n", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell(" Z}1");
      DataNode dataNode0 = new DataNode(" Z}1", " Z}1");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("*d");
      document0.html("Yizz {n}pon*h0!!");
      document0.appendElement("br");
      document0.text();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Bk");
      // Undeclared exception!
      try { 
        document0.child(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("AkNXaE[O^JS%Ivp");
      document0.prependText("Tag name must not be empty.");
      document0.getElementsByIndexEquals(60);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.tagName("id");
      assertEquals("id", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("readonly", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell(".rKCd");
      Element element0 = document0.addClass(".rKCd");
      assertEquals(".rKCd", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("}");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell(":nth-last-of-type(");
      Element element0 = document0.attr(":nth-last-of-type(", true);
      assertEquals(1, element0.childNodeSize());
      assertEquals(":nth-last-of-type(", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
      document0.getElementsByAttributeValue("JI5bh{g2 qB+kn.7H", "JI5bh{g2 qB+kn.7H");
      assertEquals(1, document0.childNodeSize());
      assertEquals("JI5bh{g2 qB+kn.7H", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.TokenQueue");
      document0.getElementsByAttributeValueStarting("org.jsoup.parser.TokenQueue", "org.jsoup.parser.TokenQueue");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("org.jsoup.parser.TokenQueue", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("SsfsH-");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
      assertEquals("SsfsH-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("AkNXa[O^JS%Ivp");
      document0.prepend("AkNXa[O^JS%Ivp");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Element element0 = new Element("readonly");
      // Undeclared exception!
      try { 
        element0.after("readonly");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("9SmuSD,(");
      document0.getElementsByIndexLessThan(62);
      assertEquals("9SmuSD,(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.getElementsByAttributeStarting("Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("8");
      document0.getElementsByAttributeValueMatching("8", "8");
      assertEquals("8", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document(".");
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      document0.is((Evaluator) evaluator_IsLastOfType0);
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell(":+A\"");
      document0.getElementsByAttributeValueEnding(":+A\"", ":+A\"");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":+A\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("AfterHead");
      Elements elements0 = document0.getElementsByClass("AfterHead");
      assertEquals("AfterHead", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      Elements elements0 = document0.getElementsContainingText("readonly");
      assertEquals(1, document0.childNodeSize());
      assertEquals("readonly", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("#ro`o");
      document0.getElementsByAttributeValueContaining("\"v<tMt)h0.WN.f1o", "#ro`o");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#ro`o", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("invalid named referenece '%s'");
      document0.title("invalid named referenece '%s'");
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <title>invalid named referenece '%s'</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("invalid named referenece '%s'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      document0.doSetBaseUri("readonly");
      assertEquals("readonly", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals("readonly", document1.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("#ro`o");
      document0.appendTo(document0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("id");
      document0.getElementsByAttributeValueNot("id", "id");
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("id");
      document0.getElementsByAttribute("id");
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("+A\"");
      Element element0 = document0.removeClass("+A\"");
      assertEquals("+A\"", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("AkNXa[O^JS%Ivp");
      document0.getAllElements();
      assertEquals("AkNXa[O^JS%Ivp", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("aA\"");
      // Undeclared exception!
      try { 
        document0.is("aA\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'aA\"': unexpected token at '\"'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      document0.selectFirst("readonly");
      assertEquals(1, document0.childNodeSize());
      assertEquals("readonly", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("(2_|ZuNkGTISe}i4v");
      Element element0 = document0.head();
      Element element1 = element0.wrap("(2_|ZuNkGTISe}i4v");
      assertNotNull(element1);
      assertEquals("(2_|ZuNkGTISe}i4v", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("(2_|ZuNkGTISe}i4vZ");
      Element element0 = document0.head();
      Elements elements0 = element0.parents();
      assertEquals(1, elements0.size());
      assertEquals("(2_|ZuNkGTISe}i4vZ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("#ro`o");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-432));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#ro`o", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("invalid named referenec4 '%s'");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("invalid named referenec4 '%s'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.html("#root");
      document0.textNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>(1492);
      // Undeclared exception!
      try { 
        document0.insertChildren(1492, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("SsfsH-");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1329), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000011 insert position out |s bounds.");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("invalid named referenece '%s'");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(840, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3441), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.attr("id", "id");
      String string0 = element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("id", element0.baseUri());
      assertEquals("#id", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("$;]1");
      Element element0 = document0.toggleClass("textarea");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("$;]1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("JI5bh{g2 qB+kn.7H", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
      Element element0 = document0.head();
      assertEquals(0, element0.siblingIndex());
      
      element0.before("JI5bh{g2 qB+kn.7H");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("(2_|ZuNkGTISe}i4v");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("(2_|ZuNkGTISe}i4v", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
      document0.siblingElements();
      assertEquals("org.jsoup-helper.StringUtil", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("+A\"");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertEquals("+A\"", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("(_RD+cXu]7");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("(_RD+cXu]7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("+A*\"");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertEquals("+A*\"", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("'sfsz7");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals("'sfsz7", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("+A\"");
      document0.previousElementSibling();
      assertEquals("+A\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("=og}c|d5");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertEquals("=og}c|d5", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("+A\"");
      Element element0 = document0.shallowClone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element1 = element0.insertChildren((-1), nodeArray0);
      assertEquals("+A\"", element1.baseUri());
      
      Element element2 = document0.firstElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("vpwmd0'gw*g.Nejf,");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertEquals("vpwmd0'gw*g.Nejf,", element1.baseUri());
      assertNotNull(element1);
      assertEquals("head", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("+]TtyGe f=xju");
      Element element0 = document0.appendElement("+]TtyGe f=xju");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
      assertEquals("+]TtyGe f=xju", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      assertEquals("readonly", element1.baseUri());
      assertNotNull(element1);
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("$;]1");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.getElementsByIndexEquals((-1026));
      assertEquals("$;]1", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.attr("id", "id");
      Element element0 = document0.getElementById("id");
      assertNotNull(element0);
      assertEquals("id", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("emr/_;");
      DocumentType documentType0 = new DocumentType("emr/_;", "`T+}+l'%;H.CzmK9t;V", "emr/_;");
      document0.prependChild(documentType0);
      document0.text();
      assertEquals("emr/_;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.title("#root");
      document0.appendElement("#root");
      String string0 = document0.text();
      assertEquals("#root", string0);
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("A> ");
      document0.title("A> ");
      String string0 = document0.text();
      assertEquals("A>", string0);
      assertEquals("A> ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.text("id");
      Elements elements0 = document0.getElementsContainingOwnText("id");
      assertEquals("id", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("RawtextEndTagOpen");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("</", "9`{fT5;]mW;#lS", false);
      document0.appendChild(xmlDeclaration0);
      Elements elements0 = document0.getElementsMatchingOwnText("</");
      assertTrue(elements0.isEmpty());
      assertEquals("RawtextEndTagOpen", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DataNode dataNode0 = new DataNode("elass");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("  ");
      document0.appendText("An\"LuE[#1'g<G1F");
      boolean boolean0 = document0.hasText();
      assertEquals("  ", document0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("ruby");
      document0.text("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("ruby", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("f7^UIA6{k");
      Comment comment0 = new Comment("f7^UIA6{k", "f7^UIA6{k");
      document0.appendChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("f7^UIA6{k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("+A\"");
      Element element0 = document0.text("+A\"");
      boolean boolean0 = element0.hasText();
      assertEquals("+A\"", element0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("+A\"");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode("+A\"");
      nodeArray0[0] = (Node) dataNode0;
      document0.insertChildren((-1), nodeArray0);
      String string0 = document0.data();
      assertEquals("+A\"", document0.baseUri());
      assertEquals("+A\"", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("+A\"");
      document0.html("[}]5S`H3j0.<!}IB<{]");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
      document0.toggleClass("org.jsoup-helper.StringUtil");
      boolean boolean0 = document0.hasClass("org.jsoup-helper.StringUtil");
      assertEquals("org.jsoup-helper.StringUtil", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("$;]1");
      document0.toggleClass("textarea");
      boolean boolean0 = document0.hasClass("#root.java.lang.String@0000000011");
      assertFalse(boolean0);
      assertEquals("$;]1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
      document0.toggleClass("org.jsoup-helper.StringUtil");
      document0.toggleClass("org.jsoup-helper.StringUtil");
      boolean boolean0 = document0.hasClass("org.jsoup-helper.StringUtil");
      assertTrue(boolean0);
      assertEquals("org.jsoup-helper.StringUtil", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("i^a]_t2(*");
      document0.toggleClass("i^a]_t2(*");
      document0.toggleClass(" />");
      document0.hasClass("@");
      assertEquals("i^a]_t2(*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("=og}c|d5");
      Element element0 = document0.toggleClass("</");
      document0.toggleClass("java.lang.string@0000000011 insert position out |s bounds.");
      boolean boolean0 = element0.hasClass("|s");
      assertTrue(boolean0);
      assertEquals("=og}c|d5", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("SsfsH");
      document0.toggleClass("SsfsH");
      document0.toggleClass("");
      document0.hasClass("|s");
      assertEquals("SsfsH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("i^a]_t2(*");
      Element element0 = document0.toggleClass("i^a]_t2(*");
      element0.toggleClass("i^a]_t2(*");
      Element element1 = element0.toggleClass("i^a]_t2(*");
      assertEquals("i^a]_t2(*", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Element element0 = new Element("readonly");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("  ");
      Element element0 = document0.val("ScriptDataDoubleEscaped");
      assertEquals("  ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("emZ/;");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document0 = Document.createShell("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.toString();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("KI5]");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
      assertEquals(45, charArrayWriter0.size());
      assertEquals("\n<html>\n <head></head>\n <body></body>\n</html>", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell("SsfsH-");
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.toString();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\" />\n </head>\n <body></body>\n</html>", string0);
      assertEquals("SsfsH-", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document0 = Document.createShell("invalid named referenece '%s'");
      document0.outputSettings(document_OutputSettings0);
      document0.title("invalid named referenece '%s'");
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <title>invalid named referenece '%s'</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("invalid named referenece '%s'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Element element0 = new Element("readonly");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }
}
