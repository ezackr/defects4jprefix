/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 02:26:05 GMT 2024
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("#comment");
      cleaner0.clean(document0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.clean((Document) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("#comment");
      cleaner0.isValid(document0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Document document0 = Document.createShell("{dM*`Ehmt");
      Document document1 = (Document)document0.text("{dM*`Ehmt");
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValid(document1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("legend");
      Element element0 = document0.body();
      element0.prependChild(document0);
      cleaner0.isValid(document0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Document document0 = Document.createShell("value");
      Element element0 = document0.body();
      element0.prependElement("value");
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValid(document0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Document document0 = Document.createShell("limitedQuirks");
      Element element0 = document0.body();
      Comment comment0 = new Comment("limitedQuirks", "limitedQuirks");
      element0.prependChild(comment0);
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValid(document0);
  }
}
