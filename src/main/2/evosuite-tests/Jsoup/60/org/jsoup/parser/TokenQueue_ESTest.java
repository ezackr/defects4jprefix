/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 06:17:20 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s7,]zDXFG>2m^qc'&5");
      tokenQueue0.chompTo("s7,]zDXFG>2m^qc'&5");
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s{#*:,Z:]9ZM");
      boolean boolean0 = tokenQueue0.matchesCS("s{#*:,Z:]9ZM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("uShym");
      String string0 = tokenQueue0.toString();
      assertEquals("uShym", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      assertEquals("'", tokenQueue0.toString());
      
      tokenQueue0.chompBalanced('\'', '\'');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s7,]zDXFG>2m^qc'&5");
      tokenQueue0.consumeTagName();
      assertEquals(",]zDXFG>2m^qc'&5", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompTo("s7,]zDXFG>2m^qc'&5");
      assertEquals(",]zDXFG>2m^qc'&5", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      char char0 = tokenQueue0.peek();
      assertEquals('-', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*UAcd7t{f`~HSIl");
      tokenQueue0.chompToIgnoreCase("*UAcd7t{f`~HSIl");
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ppuhwm-|=");
      tokenQueue0.consumeElementSelector();
      assertEquals("=", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      
      char[] charArray0 = new char[8];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("89_L2");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s{*:,Z:]9ZM");
      tokenQueue0.consume("s{*:,Z:]9ZM");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=l\"mZJ!");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=l\"mZJ!");
      Character character0 = Character.valueOf('<');
      tokenQueue0.addFirst(character0);
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("<=l\"mZJ!", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=l\"mZJ!");
      tokenQueue0.consume();
      Character character0 = Character.valueOf('<');
      tokenQueue0.addFirst(character0);
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("        ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s{*:,Z:]9ZM");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertEquals('s', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("q3J");
      tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("i)%i(o_.#R~/vV14");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("3XNo'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[!FL: uwK}Z\"&(T:");
      tokenQueue0.consumeToIgnoreCase("(/s_?sw;tsS");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s7,]zDXFG>2mpqc'&5");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompToIgnoreCase("s7,]zDXFG>2mpqc'&5");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("width must be > 0");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" :");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " :";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals(' ', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("c(>}.+(s'\"");
      tokenQueue0.chompBalanced('S', '(');
      tokenQueue0.chompBalanced('(', 'S');
      assertFalse(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s_:,z-:]bz");
      tokenQueue0.chompBalanced('e', 's');
      assertEquals('_', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = TokenQueue.unescape("\\d6h`Nk^Z/Gzq(");
      assertEquals("d6h`Nk^Z/Gzq(", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("onK");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("i");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ppuhwm-|=");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("|=", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s_:,z-:]bz");
      tokenQueue0.consumeAttributeKey();
      assertEquals(',', tokenQueue0.peek());
  }
}
