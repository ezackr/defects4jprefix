/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 05:16:21 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("&+Bk.?#7b");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("MUt%MU7e d_.H#_^:,~");
      document0.setBaseUri("MUt%MU7e d_.H#_^:,~");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("h3");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("(T3F8(+lwLLz");
      Element element0 = document0.body();
      Node node0 = element0.unwrap();
      assertEquals(1, element0.siblingIndex());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("'6r0AKZYgG!E7DI.`", "'6r0AKZYgG!E7DI.`", "'6r0AKZYgG!E7DI.`", "'6r0AKZYgG!E7DI.`");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE '6r0AKZYgG!E7DI.` PUBLIC \"'6r0AKZYgG!E7DI.`\" \"'6r0AKZYgG!E7DI.`\">", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("b)=");
      // Undeclared exception!
      try { 
        document0.before("b)=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(" PUBLIC \"", " PUBLIC \"");
      textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("aU8*wN9L|W@l1Z={");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("(T3F8(+lwLLz");
      // Undeclared exception!
      try { 
        document0.wrap("(T3F8(+lwLLz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("3");
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
      textNode0.attr("Ajo'{YRo|^]#qK");
      Node node0 = textNode0.clone();
      boolean boolean0 = textNode0.equals(node0);
      assertEquals(0, node0.siblingIndex());
      assertTrue(boolean0);
      assertNotSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("Q#Ci>(n?qQK:FR roS");
      String string0 = document0.attr("abs:abs:MarkupDeclarationOpen");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("abs:class");
      document0.toggleClass("abs:class");
      String string0 = document0.absUrl("abs:class");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("=A6eD:s<TZ9z");
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("&g.L`<a?1r");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("&g.L`<a?1r", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&g.L`<a?1r", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setParentNode(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("&g.L`<a?1r", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&g.L`<a?1r", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.after("&g.L`<a?1r");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("&g.L`<a?1r", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&g.L`<a?1r", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("&g.L`<a?1r", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("&g.L`<a?1r", document1.location());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("(T3F8(+lwLLz");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("(T3F8(+lwLLz", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("(T3F8(+lwLLz", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("(T3F8(+lwLLz", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("(T3F8(+lwLLz", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("(T3F8(+lwLLz", element0.baseUri());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.wrap("(T3F8(+lwLLz");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("(T3F8(+lwLLz", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("(T3F8(+lwLLz", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("(T3F8(+lwLLz", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("(T3F8(+lwLLz", element1.baseUri());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("</^# `]f6");
      assertNotNull(document0);
      assertEquals("</^# `]f6", document0.baseUri());
      assertEquals("</^# `]f6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Node node0 = document0.wrap("</^# `]f6");
      assertNull(node0);
      assertEquals("</^# `]f6", document0.baseUri());
      assertEquals("</^# `]f6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document(")a.$!45T8R=>");
      assertNotNull(document0);
      assertEquals(")a.$!45T8R=>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")a.$!45T8R=>", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(")a.$!45T8R=>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")a.$!45T8R=>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(")a.$!45T8R=>", document1.baseUri());
      assertEquals(")a.$!45T8R=>", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document0.unwrap();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(")a.$!45T8R=>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")a.$!45T8R=>", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(")a.$!45T8R=>", document2.location());
      assertEquals(")a.$!45T8R=>", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
      assertNotNull(document0);
      assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.location());
      
      document0.parentNode = (Node) document0;
      assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.location());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertEquals(0, document0.parentNode.childNodeSize());
      assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.parentNode.baseUri());
      
      // Undeclared exception!
      try { 
        document0.setParentNode(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("=A6eD:s<TZ9z");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=A6eD:s<TZ9z", document0.location());
      assertEquals("=A6eD:s<TZ9z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("org.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      
      element0.replaceWith(document0);
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document(";EZsQV");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";EZsQV", document0.baseUri());
      assertEquals(";EZsQV", document0.location());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("abs:Crg.Xyoup|nodes.node", document0.baseUri());
      assertEquals("abs:Crg.Xyoup|nodes.node", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setParentNode(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("abs:Crg.Xyoup|nodes.node", document0.baseUri());
      assertEquals("abs:Crg.Xyoup|nodes.node", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<Node> list0 = document0.siblingNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("abs:Crg.Xyoup|nodes.node", document0.baseUri());
      assertEquals("abs:Crg.Xyoup|nodes.node", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document(" vB~.s:Q^V}x");
      assertNotNull(document0);
      assertEquals("vB~.s:Q^V}x", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" vB~.s:Q^V}x", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      List<Node> list0 = document0.siblingNodes();
      assertNotNull(list0);
      assertEquals("vB~.s:Q^V}x", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" vB~.s:Q^V}x", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(";EZsQV");
      assertNotNull(document0);
      assertEquals(";EZsQV", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(";EZsQV", document0.baseUri());
      
      Element element0 = document0.appendElement("9\"O23$3+=,");
      assertNotNull(element0);
      assertEquals(";EZsQV", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";EZsQV", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(";EZsQV", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      List<Node> list0 = element0.siblingNodes();
      assertNotNull(list0);
      assertEquals(";EZsQV", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";EZsQV", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(";EZsQV", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      
      Element element0 = (Element)document0.previousSibling();
      assertSame(document0, document1);
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell(")a.$!45T8R=>");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")a.$!45T8R=>", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")a.$!45T8R=>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Node node0 = document0.previousSibling();
      assertNull(node0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")a.$!45T8R=>", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")a.$!45T8R=>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("&+Bk.?#7b");
      assertNotNull(document0);
      assertEquals("&+Bk.?#7b", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&+Bk.?#7b", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("&+Bk.?#7b", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&+Bk.?#7b", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("&+Bk.?#7b", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("&+Bk.?#7b", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      Node node0 = document0.previousSibling();
      assertSame(document0, document1);
      assertNull(node0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("&+Bk.?#7b", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&+Bk.?#7b", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
      assertNotNull(dataNode0);
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("", dataNode0.baseUri());
      
      boolean boolean0 = dataNode0.equals("\n");
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("", dataNode0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Ajo'{YRo|^]#qK", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      Node node0 = textNode0.clone();
      assertNotSame(textNode0, node0);
      assertNotSame(node0, textNode0);
      assertNotNull(node0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Ajo'{YRo|^]#qK", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("Ajo'{YRo|^]#qK", node0.baseUri());
      assertTrue(node0.equals((Object)textNode0));
      
      boolean boolean0 = textNode0.equals(node0);
      assertNotSame(textNode0, node0);
      assertNotSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Ajo'{YRo|^]#qK", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("Ajo'{YRo|^]#qK", node0.baseUri());
      assertTrue(boolean0);
      assertTrue(textNode0.equals((Object)node0));
      assertTrue(node0.equals((Object)textNode0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:abs:#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      
      textNode0.childNodes = null;
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:abs:#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      
      TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
      assertNotNull(textNode1);
      assertEquals("abs:abs:#text", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(textNode1.equals((Object)textNode0));
      
      boolean boolean0 = textNode0.equals(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:abs:#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("abs:abs:#text", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(boolean0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("bs:s#texE", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      
      textNode0.childNodes = null;
      assertEquals("#text", textNode0.nodeName());
      assertEquals("bs:s#texE", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      
      TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
      assertNotNull(textNode1);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("bs:s#texE", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(textNode1.equals((Object)textNode0));
      
      boolean boolean0 = textNode1.equals(textNode0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("bs:s#texE", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("bs:s#texE", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(boolean0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
      assertNotNull(textNode0);
      assertEquals("u<[%9?r#Pbs", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      
      textNode0.childNodes = null;
      assertEquals("u<[%9?r#Pbs", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("u<[%9?r#Pbs", textNode1.baseUri());
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode1.childNodes = null;
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("u<[%9?r#Pbs", textNode1.baseUri());
      
      boolean boolean0 = textNode0.equals(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("u<[%9?r#Pbs", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("u<[%9?r#Pbs", textNode1.baseUri());
      assertTrue(boolean0);
      assertTrue(textNode0.equals((Object)textNode1));
      assertTrue(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("3", "3");
      assertNotNull(textNode0);
      assertEquals("3", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      
      TextNode textNode1 = TextNode.createFromEncoded("3", "3");
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertEquals("#text", textNode1.nodeName());
      assertEquals("3", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertTrue(textNode1.equals((Object)textNode0));
      
      Node node0 = textNode0.attr("3", "3");
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(node0, textNode1);
      assertSame(node0, textNode0);
      assertNotNull(node0);
      assertEquals("3", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("3", node0.baseUri());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(node0.equals((Object)textNode1));
      
      boolean boolean0 = textNode0.equals(textNode1);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(textNode1, node0);
      assertNotSame(textNode1, textNode0);
      assertEquals("3", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("3", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(boolean0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)node0));
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode("3", "3");
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("3", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      TextNode textNode1 = TextNode.createFromEncoded("3", "3");
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("3", textNode1.baseUri());
      assertTrue(textNode1.equals((Object)textNode0));
      
      Node node0 = textNode1.removeAttr("3");
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertSame(node0, textNode1);
      assertNotSame(node0, textNode0);
      assertNotNull(node0);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("3", textNode1.baseUri());
      assertEquals("3", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode0));
      
      boolean boolean0 = textNode0.equals(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("3", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("3", textNode1.baseUri());
      assertFalse(boolean0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
      assertNotNull(textNode0);
      assertEquals("U:lU6|E6,<* /'i-s", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      
      textNode0.childNodes = null;
      assertEquals("U:lU6|E6,<* /'i-s", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      textNode0.hashCode();
      assertEquals("U:lU6|E6,<* /'i-s", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("s(IWS;Lt");
      assertNotNull(document0);
      assertEquals("s(IWS;Lt", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("s(IWS;Lt", document0.location());
      
      document0.hashCode();
      assertEquals("s(IWS;Lt", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("s(IWS;Lt", document0.location());
  }
}
