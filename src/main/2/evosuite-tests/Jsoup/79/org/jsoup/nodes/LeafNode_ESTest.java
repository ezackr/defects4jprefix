/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 07:57:39 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("J", "J", "J");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("J");
      String string0 = cDataNode0.toString();
      assertEquals("<![CDATA[J]]>", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(":containsOwn(%s)");
      Node node0 = cDataNode0.removeAttr(":containsOwn(%s)");
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("J");
      // Undeclared exception!
      try { 
        cDataNode0.ensureChildNodes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comment comment0 = new Comment("Leaf Nodes do not have child nodes.", "r55=Tq>J<Z)HU");
      String string0 = comment0.absUrl("s");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("FYGb0TDj", "LOu<");
      DataNode dataNode1 = dataNode0.setWholeData("FYGb0TDj");
      assertEquals("#data", dataNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("oFk_`e`B'cqq", false);
      xmlDeclaration0.doSetBaseUri("oFk_`e`B'cqq");
      assertEquals("#declaration", xmlDeclaration0.nodeName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("FYGb0TDj", "LOu<");
      String string0 = dataNode0.attr("FYGb0TDj");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("J");
      String string0 = cDataNode0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("J");
      Document document0 = Document.createShell("^]vWyxe#5#!");
      cDataNode0.parentNode = (Node) document0;
      String string0 = cDataNode0.baseUri();
      assertEquals("^]vWyxe#5#!", string0);
  }
}
