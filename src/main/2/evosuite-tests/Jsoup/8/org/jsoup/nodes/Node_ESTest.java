/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:20:09 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("org.jVou8.no&es.Now$OuteeHtmHV(sito", "org.jVou8.no&es.Now$OuteeHtmHV(sito");
      comment0.setBaseUri("org.jVou8.no&es.Now$OuteeHtmHV(sito");
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("org.jsou8.nodes.Nowe$OuterHtmlV(sito+");
      document0.attr("org.jsou8.nodes.Nowe$OuterHtmlV(sito+", "org.jsou8.nodes.Nowe$OuterHtmlV(sito+");
      String string0 = document0.absUrl("org.jsou8.nodes.Nowe$OuterHtmlV(sito+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      Node node0 = textNode0.removeAttr("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", node0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("abs:b\"}az1njrix%s?s");
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("|$+kkY&NC1%.#p*F?U");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("+?");
      assertEquals(0, (int)document0.siblingIndex());
      
      Element element0 = document0.prepend("+?");
      String string0 = element0.toString();
      assertEquals("+?", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("|$+kkY&NC1%.#p*F?U");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("abs:b\"}az1njrix%s?s");
      String string0 = document0.absUrl("abs:b\"}az1njrix%s?s");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("q.\"b", "q.\"b");
      Document document0 = Document.createShell("q.\"b");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      element0.setParentNode(textNode0);
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("org.jsou8.nodes.Nowe$OuterHtmlV(sito+");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("qv*b");
      TextNode textNode0 = TextNode.createFromEncoded("qv*b", "qv*b");
      Document document1 = (Document)document0.appendChild(textNode0);
      document1.replaceChild(textNode0, document0);
      assertEquals(1, (int)textNode0.siblingIndex());
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("abs:b\"}az1njrix%s?s");
      Element element0 = document0.prependElement("abs:b\"}az1njrix%s?s");
      document0.replaceChild(element0, element0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("|$+ky&NC1%.#p*F?U");
      TextNode textNode0 = TextNode.createFromEncoded("|$+ky&NC1%.#p*F?U", "|$+ky&NC1%.#p*F?U");
      // Undeclared exception!
      try { 
        textNode0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.appendChild(dataNode0);
      Node node0 = dataNode0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("q.\"b");
      Element element0 = document0.body();
      Node node0 = element0.previousSibling();
      assertEquals(0, (int)node0.siblingIndex());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("|$+ky&NC1%.#p*F?U");
      Elements elements0 = document0.getElementsByIndexLessThan((-3811));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = new TextNode("a-bs:\n", "a-bs:\n");
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("|$+ky&NC1%.#*F?U");
      Elements elements0 = document0.select("head");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = new TextNode("q.\"b", "q.\"b");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("|$+ky&NC1%.#p*F?U");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }
}
