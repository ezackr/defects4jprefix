/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 02:01:17 GMT 2024
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        elements0.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.remove(61);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals((-510));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = elements0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.add(1, (Element) document0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w");
      Element element0 = new Element(tag0, "div");
      Elements elements0 = element0.getAllElements();
      UnaryOperator<Element> unaryOperator0 = UnaryOperator.identity();
      boolean boolean0 = elements0.equals(unaryOperator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("n4lT/^x");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.listIterator((-2302));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2302
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.remove((Object) document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.parents();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.clear();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      int int0 = elements0.indexOf(document0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      int int0 = elements0.lastIndexOf("0G-A!x@ol");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Elements elements0 = document0.getElementsByAttributeValue("r2XR!Z;Hi~d<1vDg?0?", "`/KB`");
      Elements elements1 = elements0.not("`/KB`");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(3);
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.addAll(0, (Collection<? extends Element>) elements0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3{z");
      Elements elements0 = document0.getElementsByIndexEquals((-1615));
      ListIterator<Element> listIterator0 = elements0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      List<Element> list0 = elements0.subList(0, 0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.addAll((Collection<? extends Element>) elements0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w");
      Element element0 = new Element(tag0, "div");
      Elements elements0 = element0.getAllElements();
      boolean boolean0 = elements0.is("w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexLessThan(923);
      // Undeclared exception!
      try { 
        elements0.set(923, (Element) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 923, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w");
      Element element0 = new Element(tag0, "div");
      Elements elements0 = element0.getAllElements();
      boolean boolean0 = elements0.retainAll(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.attr("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      document0.attr("T]bUjnNE,o[*.xh3", "Rp!\"hV(`sa ");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.attr("T]bUjnNE,o[*.xh3");
      assertEquals("Rp!\"hV(`sa ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("N");
      document0.attr("N", "N");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasAttr("N");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("w");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.attr("w", "boxHd");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeAttr("w");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("n4lT/^x");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.addClass("n4lT/^x");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.removeClass("k^R{f*!ws4rlD");
      assertEquals(3, elements1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w");
      Element element0 = new Element(tag0, "div");
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.toggleClass("div");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasClass("0G-A!x@ol");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnDNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("w");
      Elements elements0 = document0.getElementsByClass("div");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.val("'DgO6![}VK]5#a-w:_");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.append("T]bUjnNE,o[*.xh3");
      String string0 = elements1.text();
      assertEquals("T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.html("@0umsm_P");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.tagName("'DgO6![}VK]5#a-w:_");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("N");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.prepend("4OGvEnqCUS19|hlSy7");
      assertEquals(3, elements1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.before("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.before("T]bUjnNE,o[*.xh3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsMatchingText("G]s49A7");
      Elements elements1 = elements0.after("T]bUjnNE,o[*.xh3");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("-g0+epi,;G,");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.after("-g0+epi,;G,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("T]bUnE,o[*.xh");
      Elements elements0 = document0.getElementsContainingText("precapprox");
      Elements elements1 = elements0.wrap("T]bUnE,o[*.xh");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.wrap("T]bUjnNE,o[*.xh3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsMatchingText("\n");
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.empty();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.remove();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("w");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsContainingText("T]bUjnNE,o[*.xh3");
      Elements elements1 = elements0.eq(1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.eq(0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsMatchingText("\n");
      boolean boolean0 = elements0.is("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("h$G@H!&{`(r");
      Elements elements0 = document0.getElementsByAttributeValueContaining("'I\"Bbb]/YzOf9", "'I\"Bbb]/YzOf9");
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("0G-A!x@ol");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Element element0 = elements0.last();
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(878);
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("T]bUjnNE,o[*.xh3");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w");
      Element element0 = new Element(tag0, "div");
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.clone();
      boolean boolean0 = elements1.retainAll(elements0);
      assertTrue(boolean0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("[Euail03_c535m!");
      Elements elements0 = document0.getAllElements();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-2785));
      linkedHashSet0.add(integer0);
      boolean boolean0 = elements0.containsAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w");
      Element element0 = new Element(tag0, "div");
      Elements elements0 = element0.getAllElements();
      boolean boolean0 = elements0.containsAll(elements0);
      assertTrue(boolean0);
  }
}
