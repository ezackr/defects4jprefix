/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:57:56 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependText("</");
      String string0 = document0.ownText();
      assertEquals("</", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("-cddb1V");
      // Undeclared exception!
      try { 
        document0.child(9287);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9287, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      document0.appendChild(element0);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(";z8*88ed;^1M");
      // Undeclared exception!
      try { 
        document0.html(";z8*88ed;^1M");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("7$7]");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("f\".FuHw:f<F>&");
      Elements elements0 = document0.getElementsContainingOwnText("f\".FuHw:f<F>&");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("ct8p_Rft5~,");
      Element element0 = document0.addClass("ct8p_Rft5~,");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("fZ.uwf<F>&");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("Gu{=U");
      Elements elements0 = document0.getElementsByAttributeValue("Gu{=U", "Gu{=U");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("-ddb1V");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("-ddb1V");
      Elements elements0 = document0.getElementsByAttributeValueStarting("-ddb1V", "-ddb1V");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.select("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("lesdot");
      Element element0 = document0.prepend("lesdot");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("toea");
      // Undeclared exception!
      try { 
        document0.after("toea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("-ddub1V");
      Elements elements0 = document0.getElementsByIndexLessThan(994);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("oup");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("zf7urM<F>I");
      Element element0 = document0.prependElement("zf7urM<F>I");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeStarting("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.wrap("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("br");
      document0.attr("id", "id");
      Element element0 = document0.getElementById("id");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("-ddub1V");
      Elements elements0 = document0.getElementsByAttributeValueMatching("-ddub1V", "-ddub1V");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("R>PJR;P*");
      Elements elements0 = document0.getElementsByAttributeValueEnding("R>PJR;P*", "R>PJR;P*");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("-ddub1V");
      Elements elements0 = document0.getElementsByClass("-ddub1V");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("NWji*#e{QM1p");
      Elements elements0 = document0.getElementsContainingText("NWji*#e{QM1p");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueContaining("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("Ms#;:$&m{KyY)*p");
      Element element0 = new Element(tag0, "Ms#;:$&m{KyY)*p", attributes0);
      Element element1 = element0.text("Ms#;:$&m{KyY)*p");
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("-ddb1V");
      Elements elements0 = document0.getElementsByAttributeValueNot("-ddb1V", "-ddb1V");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document(" y1{");
      Elements elements0 = document0.getElementsByAttribute(" y1{");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("f\"7uH\f<F>&");
      // Undeclared exception!
      try { 
        document0.before("f\"7uH\f<F>&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.createElement("br");
      String string0 = element0.toString();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.removeClass("br");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("M'q01P");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("br");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("oup");
      Elements elements0 = document0.getElementsByIndexGreaterThan(120069);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.getElementById("id");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("Ms#;:$&m{KyY)*p");
      document0.prependChild(document0);
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("oup");
      Element element0 = document0.tagName("oup");
      document0.prependChild(element0);
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("f\".FuHw:f<F>&");
      document0.appendChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("f\".FuHw:f<F>&");
      Element element0 = document0.append("f\".FuHw:f<F>&");
      document0.appendChild(element0);
      Element element1 = element0.lastElementSibling();
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("f\"7uH\f<F>&");
      Element element0 = document0.append("f\"7uH\f<F>&");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = DataNode.createFromEncoded("br", "br");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("oup");
      document0.prependChild(document0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("blacktriangledown");
      Element element0 = document0.appendElement("blacktriangledown");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("Ms#F;:$&mKyyY)*op");
      Document document1 = new Document("Ms#F;:$&mKyyY)*op");
      Element element0 = document1.prependChild(document0);
      document0.after((Node) element0);
      Element element1 = document0.nextElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("oup");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("Ms#F;:$&m{KyyY)*op");
      Document document1 = document0.clone();
      document1.prependChild(document0);
      document1.appendChild(document1);
      document1.previousElementSibling();
      assertEquals(1, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("-ddb1V");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("-ddb1V");
      Element element0 = document0.createElement("-ddb1V");
      Element element1 = element0.appendChild(document0);
      element1.prependChild(element0);
      Element element2 = document0.firstElementSibling();
      assertEquals("-ddb1v", element2.nodeName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("fZ.uwf<F>&");
      document0.append("fZ.uwf<F>&");
      Elements elements0 = document0.getElementsByIndexEquals((-2070787801));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("fZ.uwf<F>&");
      Element element0 = document0.append("fZ.uwf<F>&");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-2070787801));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IndexEquals", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("f.uwf<?&");
      document0.append("f.uwf<?&");
      Elements elements0 = document0.getElementsMatchingText("f.uwf<?&");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("<e#7^f.E8/T>qM");
      document0.append("<e#7^f.E8/T>qM");
      Elements elements0 = document0.getElementsMatchingText("<e#7^f.E8/T>qM");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("div");
      document0.appendElement("div");
      Element element0 = document0.prependText("div");
      Elements elements0 = element0.getElementsMatchingText("G!j\"");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("div");
      document0.appendElement("div");
      document0.prependText(" ");
      Elements elements0 = document0.getElementsMatchingText("Tag name must not be empty.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("<!--");
      Element element0 = document0.append("<!--");
      Elements elements0 = element0.getElementsMatchingOwnText("<!--");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      document0.append("br");
      Elements elements0 = element0.getElementsMatchingText("br");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      element0.appendElement("br");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("<e#7^f.E8/T>qM");
      document0.append("<e#7^f.E8/T>qM");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("</");
      Element element0 = document0.appendText((String) null);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("47p'mPq~zSK9wD'Jp");
      Comment comment0 = new Comment("47p'mPq~zSK9wD'Jp", "47p'mPq~zSK9wD'Jp");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("^ddb1V");
      Element element0 = document0.createElement("^ddb1V");
      Element element1 = element0.appendChild(document0);
      boolean boolean0 = element1.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("%wAHIpbnllgMo");
      document0.append("%wAHIpbnllgMo");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("%wAHIpbnllgMo");
      DataNode dataNode0 = new DataNode("%wAHIpbnllgMo", "%wAHIpbnllgMo");
      Element element0 = document0.prependChild(dataNode0);
      String string0 = element0.data();
      assertEquals("%wAHIpbnllgMo", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("oup");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      boolean boolean0 = element0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.toggleClass("br");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("O%SN'_7");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("-cddb1V");
      document0.tagName("textarea");
      document0.val();
      assertEquals("textarea", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("sRc5nsim");
      Element element0 = document0.val("sRc5nsim");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document(" y1w{");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("</");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((-3507.566966928));
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-955), document_OutputSettings0);
      assertEquals("-3507.566966928<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = (Document)document0.tagName("br");
      StringBuilder stringBuilder0 = new StringBuilder("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outerHtmlHead(stringBuilder0, 94, document_OutputSettings0);
      assertEquals("br<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.appendChild(document0);
      // Undeclared exception!
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.createElement("br");
      element0.appendChild(document0);
      String string0 = element0.toString();
      assertEquals("<br>\n <#root></#root></br>", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("f.u<F>&");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "f.u<F>&");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 1645, document_OutputSettings1);
      assertEquals("f.u<F>&</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("-ddub1V");
      Element element0 = document0.createElement("-ddub1V");
      Element element1 = element0.appendChild(document0);
      String string0 = element1.toString();
      assertEquals("<-ddub1v>\n <#root></#root>\n</-ddub1v>", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("br");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("br");
      document0.hashCode();
  }
}
