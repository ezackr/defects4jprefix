/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 07:01:55 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.MissingFormatArgumentException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("xV");
      // Undeclared exception!
      try { 
        document0.wrap("xV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell(",gYG\"X6ZFAHmwTd>");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText(",gYG\"X6ZFAHmwTd>");
      assertEquals(1, document0.childNodeSize());
      assertEquals(",gYG\"X6ZFAHmwTd>", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      element0.before("br");
      document0.getElementsContainingText("tb%aD7'W");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell(":sVMae");
      // Undeclared exception!
      try { 
        document0.child(34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000t00027");
      document0.prependText("java.lang.string@0000t00027");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000027 za:q!");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.addClass("");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("ava.lansring@000000007");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDaRaDoubleEscapedDash");
      Element element0 = document0.attr("ScriptDaRaDoubleEscapedDash", false);
      assertEquals("ScriptDaRaDoubleEscapedDash", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("V2^%8e");
      document0.getElementsByAttributeValue("V2^%8e", "V2^%8e");
      assertEquals("V2^%8e", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      document0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("head", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("Z'Lb4 7~VRuBP;(.zt");
      document0.prepend("Z'Lb4 7~VRuBP;(.zt");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Elements elements0 = document0.getElementsMatchingOwnText("Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("za:q!");
      // Undeclared exception!
      try { 
        document0.after("za:q!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapeyExdTa6Open");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapeyExdTa6Open", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("u9denFUZP.I");
      document0.getElementsByAttributeStarting("u9denFUZP.I");
      assertEquals("u9denFUZP.I", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.ParseSettings");
      Element element0 = document0.val("org.jsoup.parser.ParseSettings");
      assertEquals("org.jsoup.parser.ParseSettings", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      document0.getElementsByAttributeValueMatching(":has", ":has");
      assertEquals(":has", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.is("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("area");
      document0.getElementsByAttributeValueEnding("rG*a", "area");
      assertEquals("area", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("H ");
      Elements elements0 = document0.getElementsByClass("H ");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("H ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("br", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("raB");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("raB");
      document0.setBaseUri("raB");
      assertEquals(1, document0.childNodeSize());
      assertEquals("raB", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("BeforeAttributeName");
      document0.appendTo(document0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("aOZe");
      document0.getElementsByAttributeValueNot("aOZe", "aOZe");
      assertEquals("aOZe", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals(" ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("EndTagOpen");
      document0.getElementsByAttribute("EndTagOpen");
      assertEquals("EndTagOpen", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("java.langstring@5000000014");
      Element element0 = document0.removeClass("java.langstring@5000000014");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("Dl[=F/GpF}w%G[y' k");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Dl[=F/GpF}w%G[y' k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("Dl[=F/GpF}w%G[y' k");
      // Undeclared exception!
      try { 
        document0.selectFirst("Dl[=F/GpF}w%G[y' k");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%G'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("5v{}<_p'NzRat^<zE");
      Elements elements0 = document0.getElementsByIndexGreaterThan(16);
      assertEquals(1, document0.childNodeSize());
      assertEquals("5v{}<_p'NzRat^<zE", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("F");
      Element element0 = document0.body();
      element0.append("F");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsByIndexEquals((-45));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      Element element0 = document0.html(":has");
      Elements elements0 = element0.children();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals(":has", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("<FQJj ,0\"A$HC>UxF");
      List<TextNode> list0 = document0.textNodes();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals("<FQJj ,0\"A$HC>UxF", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      document0.appendText(":has");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("");
      DataNode dataNode0 = DataNode.createFromEncoded("", "");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("T");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1064), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("big");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(31, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(169, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("u9denVFUZP.I");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-872), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("p w");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000027 za:q!");
      Element element0 = document0.toggleClass("java.lang.string@0000000027 za:q!");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      element0.tagName("head");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(2)", string0);
      assertEquals("head", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("g<}'eu\"0KB");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("g<}'eu\"0KB", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Tag tag0 = Tag.valueOf("'?");
      Element element0 = new Element(tag0, "'?");
      element0.siblingElements();
      assertEquals("'?", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertEquals("Mr@xn[XwRFWr!*BxD", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("canas");
      document0.nextElementSibling();
      assertEquals("canas", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("canvas");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertEquals("canvas", element0.baseUri());
      assertNull(element1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("5xHq^?Gz<) :\"k.X");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("5xHq^?Gz<) :\"k.X", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("jeva.la6g.string@0000000027 5v{<_1nrsat^<e");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("xHq^?Gz<) :\"k.X");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals("xHq^?Gz<) :\"k.X", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.firstElementSibling();
      assertEquals("br", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("Mr@xn[XwRFWr!*BxD", element1.baseUri());
      assertEquals("head", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("BeforeAttributeName");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals("BeforeAttributeName", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell(":sVMae");
      Element element0 = document0.doClone(document0);
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(":sVMae", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("n~p0a_I-I[`Gzx9");
      DocumentType documentType0 = new DocumentType("7g@", "7g@", "java.lang.string@0000000014", "java.lang.string@0000000014", "n~p0a_I-I[`Gzx9");
      document0.appendChild(documentType0);
      document0.getElementsContainingText("n~p0a_I-I[`Gzx9");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.title("br");
      document0.appendElement("3");
      document0.getElementsContainingText("3");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.title("Pattern syntax error: ");
      Elements elements0 = document0.getElementsContainingText("Pattern syntax error: ");
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.title("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("br");
      DataNode dataNode0 = DataNode.createFromEncoded("br", "meta");
      document0.prependChild(dataNode0);
      document0.getElementsContainingOwnText("br");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("KmTN9hgq{jG:<oYN");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comment comment0 = new Comment("JY-bV");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(boolean0);
      assertEquals("head", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      document0.title(":has");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
      assertEquals(":has", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell(";Vb@");
      document0.title("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals(";Vb@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("canvas");
      DocumentType documentType0 = new DocumentType("canvas", "canvas", "canvas", "sP");
      document0.prependChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("0smQ_5u/yQl}p2]H");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      DataNode dataNode0 = new DataNode("0smQ_5u/yQl}p2]H");
      nodeArray0[7] = (Node) dataNode0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.data();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("Dl[=F/Gp-}w%G[y' k");
      Comment comment0 = new Comment("Dl[=F/Gp-}w%G[y' k");
      document0.prependChild(comment0);
      String string0 = document0.data();
      assertEquals("Dl[=F/Gp-}w%G[y' k", string0);
      assertEquals("Dl[=F/Gp-}w%G[y' k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("*");
      document0.toggleClass("*");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
      assertFalse(boolean0);
      assertEquals("*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000027 za:q!");
      document0.toggleClass("java.lang.string@0000000027 za:q!");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000027 za:q!");
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("*");
      Element element0 = document0.toggleClass("*");
      element0.toggleClass("java.lang.string@0000000007");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      document0.toggleClass("link");
      document0.toggleClass(" > ");
      document0.hasClass("link");
      assertEquals(":has", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("*");
      Element element0 = document0.toggleClass("*");
      document0.childNodesAsArray();
      element0.toggleClass("java.lang.string@0000000007");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      document0.toggleClass(":has");
      document0.toggleClass(":has");
      document0.hasClass("java.lang.string@0000000027");
      assertEquals(":has", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("*");
      document0.toggleClass("*");
      Element element0 = document0.toggleClass("*");
      Element element1 = element0.toggleClass("*");
      assertEquals("*", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Comment comment0 = new Comment("value");
      Attributes attributes0 = comment0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "Invalid character reference: %s", attributes0);
      element0.val();
      assertEquals("Invalid character reference: %s", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Comment comment0 = new Comment("value");
      Attributes attributes0 = comment0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "Invalid character reference: %s", attributes0);
      element0.val(".lBDmd9~Q(");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("&&>UN*p!(Wh");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("&&>UN*p!(Wh", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.appendElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Element element0 = document0.prependElement("br");
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      element0.appendElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Element element0 = new Element("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 904, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("B");
      Element element0 = document0.getElementById("B");
      assertNull(element0);
      
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("B", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals(2, document0.childNodeSize());
      assertEquals("<br />\n<html>\n <head></head>\n <body></body>\n</html>\n<br />\n<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.title("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>br</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("[@:N}OHP~*3");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "[@:N}OHP~*3");
      document0.html(charBuffer0);
      assertEquals("[@:N}OHP~*3", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("[@:N}OHP~*3");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "[@:N}OHP~*3");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = Document.createShell(":has");
      Document document1 = (Document)document0.toggleClass(":has");
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(":has", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(1, document1.childNodeSize());
  }
}
