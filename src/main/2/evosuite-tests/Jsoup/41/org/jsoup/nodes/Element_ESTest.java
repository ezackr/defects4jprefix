/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 04:09:03 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("fMrq");
      Element element0 = document0.prependElement("fMrq");
      element0.text("fMrq");
      String string0 = element0.outerHtml();
      assertEquals("<fmrq>\n fMrq\n</fmrq>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("ts~b@m&`3u");
      document0.appendText("$JEP");
      String string0 = document0.ownText();
      assertEquals("$JEP", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("#root");
      Pattern pattern0 = Pattern.compile("#root");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("8B-!{\"$Ca`&q6fK'");
      // Undeclared exception!
      try { 
        document0.child((-663));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document(">.<*(kI$@G|w");
      Element element0 = document0.prependText(">.<*(kI$@G|w");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("0B- !{\"$Ca`&C;HYfK'");
      Element element0 = document0.tagName("0B- !{\"$Ca`&C;HYfK'");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("8B-!{\"$Ca`&q6fK'");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("\"NQ#0<XS");
      Elements elements0 = document0.getElementsContainingOwnText("\"NQ#0<XS");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`&CHYYK'");
      Element element0 = document0.addClass("0B !{S1Ca`&CHYYK'");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("{");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("Insert positionout of bounds.");
      Elements elements0 = document0.getElementsByAttributeValue("q9BR:bch%ol{a46", "q9BR:bch%ol{a46");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("POST");
      Elements elements0 = document0.getElementsByAttributeValueStarting("POST", "POST");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document(")mv7noh!=]kvm");
      Element element0 = document0.createElement(")mv7noh!=]kvm");
      document0.parentNode = (Node) element0;
      String string0 = document0.cssSelector();
      assertEquals(")mv7noh!=]kvm > #root", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document(".");
      Elements elements0 = document0.getElementsMatchingOwnText(".");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("rkhove0c%{wlb5?`t_kf");
      // Undeclared exception!
      try { 
        document0.after("rkhove0c%{wlb5?`t_kf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document(":e6b/>");
      Elements elements0 = document0.getElementsByIndexLessThan(5749);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`&CHYYK'");
      Elements elements0 = document0.getElementsByAttributeStarting("0B !{S1Ca`&CHYYK'");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`&CHYYK'");
      Elements elements0 = document0.getElementsByIndexEquals(65536);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("CIJl [%?L'7>b%9=u");
      // Undeclared exception!
      try { 
        document0.wrap("CIJl [%?L'7>b%9=u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("sghpy;3l{`ovko$3*");
      Element element0 = document0.appendElement("sghpy;3l{`ovko$3*");
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = new Document("sghpy;3l{`ovko$3*");
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Elements elements0 = document0.getElementsByAttributeValueMatching("0B- !{\"$Ca`&C;HYfK'", "org.jsoup.nodes.Element$1");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("RKhOve0C%{Wh`t_kf");
      Elements elements0 = document0.getElementsByAttributeValueEnding("RKhOve0C%{Wh`t_kf", "RKhOve0C%{Wh`t_kf");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document(".");
      Elements elements0 = document0.getElementsContainingText(".");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Elements elements0 = document0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$1", "<");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("sghpy;3l{`ovko$3*");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("RKhOve0C%{Wh`t_kf");
      Document document1 = document0.clone();
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(".");
      FormElement formElement0 = new FormElement(tag0, ".", attributes0);
      String string0 = formElement0.toString();
      assertEquals("<.></.>", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("rkhove0c%{wlb5?`t_kf");
      Elements elements0 = document0.getElementsByAttribute("rkhove0c%{wlb5?`t_kf");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`&CHYYK'");
      // Undeclared exception!
      try { 
        document0.before("0B !{S1Ca`&CHYYK'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Element element0 = document0.removeClass("org.jsoup.nodes.Element$1");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`&CHYYK'");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`&CHYYK'");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("0B !{S1Ca`&CHYYK'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 0B !{S1Ca`&CHYYK'
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document(")mv7noh!=]kvm");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("\"NQ#0<XS");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-4109));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A", attributes0);
      Element element0 = new Element(tag0, "\"|", attributes0);
      formElement0.setParentNode(element0);
      Element element1 = formElement0.prepend("A");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("o");
      Element element0 = document0.prependElement("o");
      // Undeclared exception!
      try { 
        element0.html("o");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("</");
      Element element0 = document0.append("</");
      element0.prependChild(document0);
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`uCHYYK'");
      Element element0 = document0.prependChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document(".");
      Element element0 = document0.appendText(".");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.prependElement("org.jsoup.nodes.Element$1");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("");
      DataNode dataNode0 = new DataNode("nWK-05uU*Q$an:V", "");
      Element element0 = document0.appendChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("y>");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(11, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("o");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1937236171), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("0B !>S1Ca`&CHYYK'");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(0, linkedList0);
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("replacementStr");
      document0.toggleClass("replacementStr");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`uCHYYK'");
      Element element0 = document0.prependChild(document0);
      String string0 = element0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("A");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("A");
      Element element0 = document0.prependElement("8;?ac");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      element0.addChildren(nodeArray0);
      assertEquals("8;?ac", element0.tagName());
      
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("0B !{a1Ma`&CHYYK'");
      document0.prependElement("Header value must not be null");
      document0.prependChild(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("0B- !{S1Ca`&CPHYYK'");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("0B- !{\"$Ca`&C;HYfK'");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("0B- !{S1Ca`&CPHYYK'");
      Element element0 = document0.prependChild(document0);
      document0.prependElement(":matches(%s");
      element0.previousElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("0B- !{S\"$Ca`&C;HYYK'");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("A");
      Element element0 = document0.prependElement("8;?ac");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.firstElementSibling();
      assertEquals("8;?ac", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("o");
      Element element0 = document0.prependElement("o");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("0B !{S1Ca`&CHYYK'");
      Element element0 = document0.prependElement("0B !{S1Ca`&CHYYK'");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("0B- !{S1Ca`&CPHYYK'");
      document0.prependChild(document0);
      Element element0 = document0.prependElement(":matches(%s");
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(":matches(%s", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("0B- !{\"$Ca`&C;HYfK'");
      Element element0 = document0.prependChild(document0);
      element0.empty();
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("rkhove0c%{wlb5?`t_kf");
      Element element0 = document0.getElementById("rkhove0c%{wlb5?`t_kf");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("2b");
      Element element0 = document0.appendText("2b");
      String string0 = element0.text();
      assertEquals("2b", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("jB%J7(O]");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("rkhve0c%{w?`t_kf", "ar", true);
      document0.appendChild(xmlDeclaration0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("RKhOve0C%{Wh`t_kf");
      document0.prependElement("Qjz3~jp<t=rBp}V!!x7");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("RKhOve0C%{W+?`t_kf");
      DataNode dataNode0 = new DataNode("br", "'w");
      document0.appendChild(dataNode0);
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("RKhOve0C%{W+?`t_kf");
      document0.prependElement("br");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comment comment0 = new Comment("i#(TY@&[j,", "i#(TY@&[j,");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Element element0 = new Element(tag0, "title");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("fMrq");
      document0.prependElement("fMrq");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("fMrq");
      Element element0 = document0.prependElement("fMrq");
      element0.text("fMrq");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("sZfnd<-{");
      document0.append("\r\n");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Element$1", "Jj$/w]M", "org.jsoup.nodes.Element$1", "@{!R");
      document0.appendChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("o");
      document0.prependElement("o");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("f$Bv6N+)l73");
      DataNode dataNode0 = new DataNode("0B- !{\"$Ca`&C;HYfK'", "{xh<yk");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("0B- !{\"$Ca`&C;HYfK'", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("</");
      document0.append("</");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "{xH<yK", attributes0);
      formElement0.toggleClass("{xH<yK");
      Elements elements0 = formElement0.getElementsByClass("java.lang.String@0000000027");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "{xH<yK", attributes0);
      Element element0 = formElement0.prepend("A");
      element0.toggleClass("{xH<yK");
      Elements elements0 = formElement0.getElementsByClass("java.lang.String@0000000027");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("Y07in9/&SqaL");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextNode textNode0 = new TextNode("/f>6A@a", "/f>6A@a");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document(".");
      Element element0 = document0.val(".");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "P$1EB/;/", attributes0);
      formElement0.val("v057a=biz*i\"|3<sq3");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("RKhOve0C%{Wh`t_kf");
      StringBuilder stringBuilder0 = new StringBuilder("");
      Locale locale0 = Locale.CHINESE;
      stringBuilder0.append((Object) locale0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-904), document_OutputSettings0);
      assertEquals("zh<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("0B !>S1Ca`&CHYYK'");
      Element element0 = document0.prependElement("br");
      element0.prependChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      String string0 = formElement0.toString();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("ts~b@m&`3u");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "$JEP");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-1), document_OutputSettings0);
      assertEquals("$JEP</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A", attributes0);
      formElement0.prepend("A");
      // Undeclared exception!
      try { 
        formElement0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document(")mv7noh!=]kvm");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document(".");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("0B- !{\"$Ca`&C;HYfK'");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document("sghpy;3l{`ovko$3*");
      Document document1 = new Document("sghpy;3l{`ovko$3*");
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.hashCode();
  }
}
