/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 03:43:32 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document.createShell("J@J");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("s");
      document0.before((Node) null);
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("id");
      document0.toggleClass("id");
      document0.getElementById("id");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("Act%H\"BQ");
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("id");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      document0.insertChildren(417, linkedHashSet0);
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document(" ");
      document0.getElementsByIndexGreaterThan((-2802));
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("id");
      document0.addClass("id");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("id");
      document0.getElementsByAttributeValueMatching("id", "textarea");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("id");
      document0.siblingElements();
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("id");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("k^dj*[_,@*Q");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      document0.insertChildren(0, linkedHashSet0);
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("class");
      document0.getElementsByTag("class");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("String input must not be null");
      document0.val("String input must not be null");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("(a");
      Element element0 = document0.prependElement("(a");
      element0.getElementsByAttributeValueContaining("(a", "(a");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("k@0#");
      document0.prepend("k@0#");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.wrap("org.jsoup.nodes.Node$OuterHtmlVisitor");
      // Undeclared exception!
      try { 
        document0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = new Document("i0w");
      Element element0 = document0.prependElement("i0w");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document("String input must not be null");
      document0.normalise();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("2,cA2B9zjX0BUoiT");
      document0.getElementsByAttributeValueNot("2,cA2B9zjX0BUoiT", "2,cA2B9zjX0BUoiT");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("k8");
      Element element0 = document0.appendText("k8");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("(a");
      document0.after((Node) document0);
      // Undeclared exception!
      try { 
        document0.hashCode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      document0.prependChild(element0);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("nullCcaL");
      Document document1 = document0.clone();
      document1.getElementsContainingText("nullCcaL");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = new Document("</");
      document0.getElementsByIndexLessThan(3055);
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("xd");
      document0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("xd");
      document0.prependElement("xd");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("id");
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("String input must not be null");
      document0.getElementsMatchingOwnText("String input must not be null");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("2,cA2B9zjX0BUoiT");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("Act\"BQ");
      document0.val();
      document0.getElementsContainingText("Act\"BQ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("id");
      document0.prependElement("id");
      document0.getElementsByAttributeValue("id", "id");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("q_Yvc'iz\"^jb[c/#\"");
      document0.getElementById("q_Yvc'iz\"^jb[c/#\"");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      element0.getElementsByAttributeStarting("id");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("k@0#");
      document0.getElementsByAttributeValueEnding("k@0#", "k@0#");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("String input must not be null");
      document0.getElementsByClass("</");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("2,;A2B9zjX0BUoiT");
      Element element0 = document0.createElement("2,;A2B9zjX0BUoiT");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h{.Z~U<UGFTVM xv");
      Element element0 = new Element(tag0, "h{.Z~U<UGFTVM xv");
      element0.text("h{.Z~U<UGFTVM xv");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("2,;A2B9zjX0BUoiT");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("textaj&Bxrea");
      document0.prependElement("textaj&Bxrea");
      document0.data();
      document0.getElementsByAttribute("textaj&Bxrea");
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("k^dj*[_,@*Q");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      document0.insertChildren((-22), linkedHashSet0);
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("x e9i");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      document0.insertChildren((-1), linkedHashSet0);
      document0.getElementById("x e9i");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document("String input must not be null");
      document0.select("String input must not be null");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("/u>G,P-");
      document0.getElementsMatchingText("/u>G,P-");
      document0.getElementById("/u>G,P-");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("id");
      document0.appendText("id");
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("id");
      document0.prependElement("id");
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("7");
      document0.previousElementSibling();
      document0.getElementById("7");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependElement("A;5RAXQ:kwu6ymZE");
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("");
      document0.toggleClass("");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("id");
      document0.getElementsContainingText("id");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("2,cA2B9zjX0BUoiT");
      document0.getElementsByAttribute("2,cA2B9zjX0BUoiT");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document("z}RMT6}MpX'");
      document0.removeClass("z}RMT6}MpX'");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      element0.previousElementSibling();
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.tagName("s");
      Element element1 = document0.prependChild(element0);
      element1.getElementsByClass("s");
      // Undeclared exception!
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("id");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("Yk80");
      document0.dataset();
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("s");
      document0.before("s");
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("`gh2q|/\"D<,Dch");
      document0.prependText("br");
      document0.getElementById("`gh2q|/\"D<,Dch");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("Ywah6\u0005miVQp=aY-");
      document0.getElementsByAttributeValueStarting("Ywah6\u0005miVQp=aY-", "Ywah6\u0005miVQp=aY-");
      document0.getElementsContainingText("Ywah6\u0005miVQp=aY-");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      element0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("xd");
      Element element0 = document0.appendText("xd");
      element0.children();
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "+q\"?mK7&";
      Document document0 = new Document("+q\"?mK7&");
      // Undeclared exception!
      try { 
        document0.after("+q\"?mK7&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("Ywah6\u0005miVQp=aY-");
      document0.textNodes();
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("nullCcaL");
      Element element0 = document0.appendText("nullCcaL");
      element0.textNodes();
      element0.getElementsContainingText("nullCcaL");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("i0w");
      Element element0 = document0.prependElement("i0w");
      document0.textNodes();
      Element.preserveWhitespace(element0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document("String input must not be null");
      document0.dataNodes();
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("nullChar");
      Element element0 = document0.appendText("nullChar");
      element0.dataNodes();
      element0.getElementsContainingText("nullChar");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.lement$1");
      Element element0 = document0.appendText("org.jsoup.nodes.lement$1");
      element0.data();
      document0.getElementsContainingOwnText("org.jsoup.nodes.lement$1");
      element0.id();
      document0.getElementById("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("dat:f4is1");
      Tag.valueOf("dat:f4is1");
      TextNode textNode0 = new TextNode("h3", "h3");
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      attributes1.put("58Z/gY{cI%+c\"YR) j", "_A:6A$5}%sq");
      Document document1 = new Document("'R`s>h@");
      DataNode dataNode0 = DataNode.createFromEncoded("", "G");
      document1.appendChild(dataNode0);
      document0.data();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document1.tagName("Pattern syntax error: ");
      document1.dataNodes();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("id");
      document0.prependElement("id");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("id");
      document0.appendText("id");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("id");
      document0.prependElement("id");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Tokeniser");
      document0.val("org.jsoup.parser.Tokeniser");
      Tag.valueOf("org.jsoup.parser.Tokeniser");
      DataNode dataNode0 = DataNode.createFromEncoded("em", "em");
      document0.appendChild(dataNode0);
      document0.data();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      document_OutputSettings0.outline(false);
      Document document1 = new Document("org.jsoup.parser.Tokeniser");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("id");
      DataNode dataNode0 = DataNode.createFromEncoded("id", "");
      document0.appendChild(dataNode0);
      document0.prependElement("id");
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("InHeadNoscript");
      Element element0 = document0.prependElement("InHeadNoscript");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("xd");
      document0.appendText("xd");
      document0.getElementsContainingText("xd");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("class");
      document0.append("class");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("i0w");
      Element element0 = document0.prependElement("i0w");
      Element element1 = element0.append("i0w");
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("s");
      document0.html("s");
      // Undeclared exception!
      try { 
        document0.hashCode();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.prependChild(document0);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("2,cA2B9zjX0BUoiT");
      Element element0 = document0.createElement("2,cA2B9zjX0BUoiT");
      element0.prependChild(document0);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element", attributes0);
      Element element0 = document0.appendChild(formElement0);
      formElement0.prepend("org.jsoup.nodes.Element");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("58z/gy{`i%+c\"yr) j");
      Element element0 = document0.createElement("58z/gy{`i%+c\"yr) j");
      document0.parentNode = (Node) element0;
      document0.equals(element0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("2,cA2B9zjX0BUoiT");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("i^");
      document0.getAllElements();
      document0.getElementsContainingText("i^");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("class");
      document0.child(1867);
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      element0.elementSiblingIndex();
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("2,cA2B9zjX0BUoiT");
      document0.getElementsByIndexEquals(594);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      element0.firstElementSibling();
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("2,cA2B9zjX0BUoiT");
      document0.previousSibling();
      document0.id();
      Element element0 = document0.createElement("2,cA2B9zjX0BUoiT");
      element0.setParentNode(document0);
      document0.hashCode();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("tag name must not be empty.");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextNode textNode0 = new TextNode("form", "form");
      Element.preserveWhitespace(textNode0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.appendElement("s");
      Element element1 = document0.appendText("s");
      document0.appendChild(element1);
      element0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.prependElement("class");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element", attributes0);
      Element element0 = document0.appendChild(formElement0);
      formElement0.before((Node) element0);
      formElement0.nextElementSibling();
      element0.hashCode();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("hidden");
      FormElement formElement0 = new FormElement(tag0, ".%s", attributes0);
      document0.appendChild(formElement0);
      document0.data();
      document0.getElementsByAttributeValueNot("6.^e~+cg3[c*:]fz", ".%s");
      element0.firstElementSibling();
      Element element1 = element0.val("m[)~yrdvvqm-%1o");
      element1.parentNode = (Node) document0;
      element1.parents();
      formElement0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("id");
      document0.prependElement("id");
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      document0.toString();
      Tag.valueOf("id");
      Attributes attributes1 = new Attributes();
      attributes1.get("<id></id>");
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.val();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.prependElement("id");
      Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("hidden");
      FormElement formElement0 = new FormElement(tag0, ".%s", attributes0);
      Tag.valueOf("textarea");
      Element element1 = document0.appendChild(formElement0);
      document0.data();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      formElement0.traverse(nodeVisitor0);
      element1.toString();
      element0.firstElementSibling();
      formElement0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("kFJE_rCQ");
      Element element0 = document0.prependElement("kFJE_rCQ");
      Element.preserveWhitespace(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlTail((StringBuilder) null, 6412, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("dat:f4is1");
      Tag.valueOf("dat:f4is1");
      TextNode textNode0 = new TextNode("dat:f4is1", "dat:f4is1");
      Attributes attributes0 = textNode0.attributes();
      attributes0.put("58Z/gY{cI%+c\"YR) j", "dat:f4is1");
      Attributes attributes1 = new Attributes();
      Tag.valueOf("-jM%'");
      Tag.valueOf("58Z/gY{cI%+c\"YR) j");
      Comment comment0 = new Comment("hidden", "-jM%'");
      Element element0 = document0.appendChild(comment0);
      document0.data();
      document0.getElementsContainingOwnText("CY )AlG ^");
      document0.siblingElements();
      element0.hasText();
      element0.id();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("InHeadNoscript");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.appendText("");
      Document document2 = document1.clone();
      document2.getElementsContainingOwnText("InHeadNoscript");
      document1.hasText();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("id");
      Comment comment0 = new Comment("id", "id");
      document0.appendChild(comment0);
      document0.getElementsContainingText("id");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "nullChar";
      Document document0 = new Document("nullChar");
      document0.tagName("nullChar");
      Element element0 = document0.prependElement("nullChar");
      // Undeclared exception!
      try { 
        element0.append("nullChar");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.prependElement("s");
      Element element1 = element0.prependChild(document0);
      element1.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.createElement("s");
      element0.prependChild(document0);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = new Document("s");
      document0.prependElement("s");
      Document document1 = document0.clone();
      Element element0 = document1.prependChild(document0);
      element0.toString();
      Element.preserveWhitespace(element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("'Tr$,^?=2Ayx^:Av4+Z");
      Element element0 = document0.appendText("'Tr$,^?=2Ayx^:Av4+Z");
      element0.appendChild(document0);
      element0.getElementsContainingText("'Tr$,^?=2Ayx^:Av4+Z");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "s");
      element0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("s");
      document0.appendElement("s");
      Element element0 = document0.appendText("s");
      document0.appendChild(element0);
      element0.getElementsContainingText("s");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.appendElement("s");
      Document document1 = (Document)document0.appendText("s");
      document1.appendChild(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(778);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document document2 = document1.outputSettings(document_OutputSettings3);
      document2.toString();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("Y3SGn");
      Element element0 = document0.appendElement("br");
      document0.appendText("s+");
      Element element1 = document0.appendChild(element0);
      element1.getElementsContainingText("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.prependElement("s");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.prependChild(document0);
      Element element1 = element0.appendText("KRO^4$&");
      Document document3 = document2.clone();
      Pattern pattern0 = Pattern.compile("j?j4h;ke4%ib>'s6", 9375);
      document3.getElementsMatchingText(pattern0);
      element0.clone();
      document3.hasAttr("KRO^4$&");
      document3.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) "<#root>\n <s>KRO^4$&amp;</s>\n</#root>\n<s></s>");
      element1.appendText("<#root>\n <s>KRO^4$&amp;</s>\n</#root>\n<s></s>");
      document0.appendChild(document1);
      document2.appendChild(document1);
      document1.getElementsContainingText("ScriptDataEscaped");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      Element element0 = document0.tagName("br");
      document0.prependChild(element0);
      element0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.createElement("s");
      Document document1 = document0.clone();
      Element element1 = document1.prependChild(document0);
      document1.toString();
      StringBuilder stringBuilder0 = new StringBuilder("<#root></#root>");
      element0.outerHtml(stringBuilder0);
      Document document2 = new Document("<#root></#root>");
      element1.hashCode();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.tagName("s");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.hashCode();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1353);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      document0.outputSettings(document_OutputSettings4);
      document0.prependChild(element0);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.createElement("s");
      Element element1 = element0.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element1.outerHtmlTail((StringBuilder) null, 9481, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("s");
      Element element0 = document0.createElement("s");
      Element element1 = element0.prependChild(document0);
      element0.text("s");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlTail((StringBuilder) null, (-4), document_OutputSettings0);
      Element.preserveWhitespace(element1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "s";
      Document document0 = new Document("s");
      Element element0 = document0.createElement("s");
      element0.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.after("6@n(`");
      document_OutputSettings0.outline(true);
      element0.outerHtmlTail((StringBuilder) null, (-4), document_OutputSettings0);
      document0.getElementsContainingOwnText(string0);
  }
}
