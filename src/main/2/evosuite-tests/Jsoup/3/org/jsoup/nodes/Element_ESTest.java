/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:02:58 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("textarea");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("mM0V7i]N");
      // Undeclared exception!
      try { 
        document0.html("mM0V7i]N");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("Dq>se,A");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Dq>se,A", "Dq>se,A");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("K%I}>gZ4I)A");
      Elements elements0 = document0.getElementsByClass("K%I}>gZ4I)A");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Avs<LKyzxFx+[s-");
      // Undeclared exception!
      try { 
        document0.child((-1952257860));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("[");
      Elements elements0 = document0.getElementsByAttributeValueContaining("[", "[");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.val("textarea");
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("mM0V7i]N");
      Elements elements0 = document0.getElementsByAttributeValueNot("mM0V7i]N", "mM0V7i]N");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("4p");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("-#kMwJ;TB<x;W");
      Elements elements0 = document0.getElementsByAttribute("-#kMwJ;TB<x;W");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "\\u00";
      Document document0 = new Document(string0);
      Element element0 = document0.addClass(string0);
      boolean boolean0 = element0.hasClass(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("4p");
      Elements elements0 = document0.getElementsByAttributeValue("4p", "4p");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document(" />");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("id");
      Elements elements0 = document0.getElementsByAttributeValueStarting("id", "id");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4p");
      Element element0 = new Element(tag0, "4p");
      String string0 = element0.nodeName();
      assertEquals("4p", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("4p");
      Element element0 = document0.removeClass("4p");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("W");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("L");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("?");
      Elements elements0 = document0.getElementsByIndexLessThan(3706);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("value");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("$");
      Elements elements0 = document0.getElementsByIndexEquals(612);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4p");
      Element element0 = new Element(tag0, "4p");
      Element element1 = element0.prependElement("4p");
      Elements elements0 = element1.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("982");
      Element element0 = document0.prependElement("982");
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("-#kMwJl[;B<xW");
      document0.prependText("-#kMwJl[;B<xW");
      Element element0 = document0.getElementById("-#kMwJl[;B<xW");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("rZ0i%F3BM");
      Element element0 = document0.prependElement("rZ0i%F3BM");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("8o.A");
      document0.appendChild(document0);
      Element element0 = document0.prependElement("8o.A");
      Element element1 = element0.nextElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("$");
      Element element0 = document0.prependElement("$");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("\"hhbpvpmxs~&vec6");
      Element element0 = document0.prependChild(document0);
      document0.prependElement("\"hhbpvpmxs~&vec6");
      Element element1 = element0.previousElementSibling();
      assertEquals("\"hhbpvpmxs~&vec6", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("982");
      Element element0 = document0.prependElement("982");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4p");
      Element element0 = new Element(tag0, "4p");
      Element element1 = element0.appendChild(element0);
      Element element2 = element1.appendElement("4p");
      Element element3 = element2.firstElementSibling();
      assertNotSame(element3, element2);
      assertNotNull(element3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("L");
      Element element0 = document0.prependElement("L");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("$");
      Element element0 = document0.prependElement("$");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("\"hhbpvpmxs~&vec6");
      document0.prependChild(document0);
      document0.prependElement("\"hhbpvpmxs~&vec6");
      Element element0 = document0.lastElementSibling();
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("script");
      Element element0 = document0.prependElement("script");
      element0.appendChild(document0);
      Element element1 = document0.prependText("script");
      element1.text();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("script");
      document0.prependElement("script");
      Element element0 = document0.prependText("script");
      element0.appendText("script");
      String string0 = element0.text();
      assertEquals("script script", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("#dcunt");
      DataNode dataNode0 = DataNode.createFromEncoded("#dcunt", "#dcunt");
      document0.appendChild(dataNode0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.prependElement("textarea");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("script");
      document0.prependElement("script");
      document0.prependText(" ");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("L");
      Element element0 = document0.prependElement("L");
      boolean boolean0 = element0.preserveWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("#comment");
      DataNode dataNode0 = new DataNode("#comment", "#comment");
      Element element0 = document0.prependChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("O)@ofCBU");
      Element element0 = document0.prependElement("O)@ofCBU");
      element0.text("O)@ofCBU");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("O)@ofCBU");
      document0.prependElement("O)@ofCBU");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("gyq8@~ithvx;");
      DataNode dataNode0 = new DataNode("gyq8@~ithvx;", "gyq8@~ithvx;");
      document0.addChild(dataNode0);
      String string0 = document0.data();
      assertEquals("gyq8@~ithvx;", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("$>");
      document0.prependElement("$>");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("W");
      Element element0 = document0.appendText("W");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("$W");
      document0.toggleClass("$W");
      String string0 = document0.className();
      assertEquals(" $W", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("W");
      Element element0 = document0.val("W");
      assertEquals("W", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("`<M?qK%e4");
      Element element0 = document0.createElement("COL");
      Element element1 = element0.text("`<M?qK%e4");
      Element element2 = element1.prependChild(document0);
      StringBuilder stringBuilder0 = new StringBuilder();
      element2.outerHtml(stringBuilder0);
      assertEquals("\n<col><#root>\n</#root>`&lt;M?qK%e4</col>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("?");
      StringBuilder stringBuilder0 = new StringBuilder("?");
      document0.outerHtml(stringBuilder0);
      assertEquals("?<#root>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("e[");
      document0.prependElement("e[");
      Element element0 = document0.prependText("e[");
      String string0 = element0.outerHtml();
      assertEquals("e[<e[>\n</e[>", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("INPUT");
      Element element0 = document0.prependElement("INPUT");
      String string0 = element0.outerHtml();
      assertEquals("\n<input />", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("#comment");
      boolean boolean0 = document0.equals("#comment");
      assertFalse(boolean0);
  }
}
