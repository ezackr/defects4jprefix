/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 08:36:27 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OV_5", "./OV_5");
      document0.getElementById("./OV_5");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parse("JLteVyx#NM#t", "JLteVyx#NM#t");
      // Undeclared exception!
      try { 
        document0.wrap("JLteVyx#NM#t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("JC)I.=md76flZ*1", "JC)I.=md76flZ*1");
      document0.appendText("JC)I.=md76flZ*1");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'2B9$Ok^G^IGc1fE/", "'2B9$Ok^G^IGc1fE/");
      Elements elements0 = document0.getElementsMatchingText("'2B9$Ok^G^IGc1fE/");
      assertEquals("'2B9$Ok^G^IGc1fE/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      DataNode dataNode0 = new DataNode("ScriptDataEscapedEndTagOpen", "org.jsoup.nodes.Element$NodeList");
      document0.prependChild(dataNode0);
      document0.text();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xr0JMp;AP#I\"nusO[@P", "xr0JMp;AP#I\"nusO[@P");
      document0.previousElementSiblings();
      assertEquals("xr0JMp;AP#I\"nusO[@P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("'2B9$Ok^G^IGc1fE/");
      // Undeclared exception!
      try { 
        document0.child((-2792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.prependText("./OVEv");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OV_5", "./OV_5");
      Element element0 = document0.tagName("./OV_5");
      assertEquals(1, element0.childNodeSize());
      assertEquals("./OV_5", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xr0Jp;AP#I\"nusO[@P", "xr0Jp;AP#I\"nusO[@P");
      document0.title("xr0Jp;AP#I\"nusO[@P");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>xr0Jp;AP#I\"nusO[@P</title>\n </head>\n <body>\n  xr0Jp;AP#I\"nusO[@P\n </body>\n</html>", string0);
      assertEquals("xr0Jp;AP#I\"nusO[@P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":has", ":has");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals(":has", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L{X@}h)CfE2|35>?", "L{X@}h)CfE2|35>?");
      document0.addClass("L{X@}h)CfE2|35>?");
      document0.cssSelector();
      assertEquals("L{X@}h)CfE2|35>?", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Element element0 = new Element("pubSysKey");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.wholeText();
      assertEquals("./OVEv", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6eS'al&y#{gkR\"a<", "6eS'al&y#{gkR\"a<");
      Element element0 = document0.html("6eS'al&y#{gkR\"a<");
      assertEquals(1, document0.childNodeSize());
      assertEquals("6eS'al&y#{gkR\"a<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xr0Jp;AP#I\"nusO[@P", "xr0Jp;AP#I\"nusO[@P");
      Element element0 = document0.attr("xr0Jp;AP#I\"nusO[@P", true);
      assertEquals("xr0Jp;AP#I\"nusO[@P", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.getElementsByAttributeValue("./OVEv", "./OVEv");
      assertEquals("./OVEv", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OV_5", "./OV_5");
      document0.getElementsByAttributeValueStarting("./OV_5", "./OV_5");
      assertEquals("./OV_5", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".OVEv", ".OVEv");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      String string0 = document0.html();
      assertEquals(".OVEv", document0.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body>\n  .OVEv\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.prepend("./OVEv");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Elements elements0 = document0.getElementsMatchingOwnText("id");
      assertEquals("id", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.after("caption");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      Elements elements0 = document0.getElementsByIndexLessThan(60);
      assertEquals("./OVEv", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("&:_1hQ=s\"wXj][Vj0F");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.getElementsByAttributeStarting("./OVEv");
      assertEquals(1, document0.childNodeSize());
      assertEquals("./OVEv", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("./OVEv", "./OVEv");
      Elements elements0 = document0.getElementsByIndexEquals(2147483645);
      assertEquals("./OVEv", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ae1=4$P]]", "Ae1=4$P]]");
      document0.getElementsByAttributeValueMatching("Ae1=4$P]]", "Ae1=4$P]]");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ae1=4$P]]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Buf6", "Buf6");
      document0.is("Buf6");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Buf6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UbbzB0w%", "UbbzB0w%");
      document0.getElementsByAttributeValueEnding("UbbzB0w%", "UbbzB0w%");
      assertEquals("UbbzB0w%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Parser.parse("Hr6Bui,", "Hr6Bui,");
      Elements elements0 = document0.getElementsByClass("Hr6Bui,");
      assertEquals("Hr6Bui,", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Parser.parse("./OVEv", "./OVEv");
      Elements elements0 = document0.getElementsContainingText("./OVEv");
      assertEquals("./OVEv", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".OVEv", ".OVEv");
      document0.getElementsByAttributeValueContaining(".OVEv", ".OVEv");
      assertEquals(".OVEv", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".OVEv", ".OVEv");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("./OVEv", "./OVEv");
      document0.setBaseUri("./OVEv");
      assertEquals("./OVEv", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".OVEv", ".OVEv");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
      assertEquals(".OVEv", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UbbzB0w%", "UbbzB0w%");
      Element element0 = document0.shallowClone();
      assertEquals("UbbzB0w%", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("5j_AJ");
      document0.getElementsByAttributeValueNot("5j_AJ", "5j_AJ");
      assertEquals("5j_AJ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("JC).=md76flZ1", "JC).=md76flZ1");
      document0.getElementsByAttribute("JC).=md76flZ1");
      assertEquals("JC).=md76flZ1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document0.removeClass("org.jsoup.select.CombiningEvaluator$And");
      assertEquals("org.jsoup.select.CombiningEvaluator$And", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".OVEv", ".OVEv");
      document0.getAllElements();
      assertEquals(".OVEv", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ae1=4$P]]", "Ae1=4$P]]");
      // Undeclared exception!
      try { 
        document0.selectFirst("Ae1=4$P]]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Ae1=4$P]]': unexpected token at '=4$P]]'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".OVEv", ".OVEv");
      Element element0 = document0.appendText(".OVEv");
      Elements elements0 = element0.getElementsByIndexGreaterThan(86);
      assertEquals(".OVEv", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Parser.parse("JC)I.=md76flZ*1", "JC)I.=md76flZ*1");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("JC)I.=md76flZ*1", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Parser.parse("mZV#b5}\"ja", "mZV#b5}\"ja");
      DataNode dataNode0 = new DataNode("");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals(1, list0.size());
      assertEquals("mZV#b5}\"ja", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("jtnop1");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(670, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JC)I.=md76flZ*1", "JC)I.=md76flZ*1");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2994), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TnPj5|&@}p:8NI(,1", "I-q:uyAYH|qWVAAl");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) linkedHashSet0);
      assertEquals("I-q:uyAYH|qWVAAl", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OV_5", "./OV_5");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(22, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("./OVEv", "./OVEv");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-243), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">E61bVTGlePDXS", ">E61bVTGlePDXS");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s)N4P:R", "s)N4P:R");
      Element element0 = document0.body();
      element0.before("html");
      element0.reparentChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("html > body:nth-child(4) > #root", string0);
      assertEquals("s)N4P:R", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8|O-n", "8|O-n");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("8|O-n", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Parser.parse("Tnj5|&@}p:8NI(,1", "Tnj5|&@}p:8NI(,1");
      document0.siblingElements();
      assertEquals("Tnj5|&@}p:8NI(,1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("'2B9$Ok^G^IGc1fE/");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("'2B9$Ok^G^IGc1fE/", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xr0JMp;AP#I\"nusO[@P", "xr0JMp;AP#I\"nusO[@P");
      Element element0 = document0.head();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Parser.parse("BeforeHead", "Tnj5|&@}p:8NI(,1");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", ",6mbsaR#");
      Element element0 = document0.createElement(",6mbsaR#");
      Element element1 = document0.appendTo(element0);
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s)N4P:R", "s)N4P:R");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mv(a&dT[5.S6}[x~", "mv(a&dT[5.S6}[x~");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("'2B9$Ok^G^IGc1fE/");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("WLD$y9d6bi4,");
      document0.parentNode = (Node) document0;
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body>\n  .OVEv\n </body>\n</html>", "Children collection to be inserted must not be null.");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":has", ":has");
      document0.appendElement(":has");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":has", ":has");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e4Y|j!eJ_3mIsBRQ", "e4Y|j!eJ_3mIsBRQ");
      document0.title("e4Y|j!eJ_3mIsBRQ");
      document0.getElementsContainingOwnText("e4Y|j!eJ_3mIsBRQ");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DataNode dataNode0 = new DataNode("head");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".OVEv", ".OVEv");
      Element element0 = document0.appendText(".OVEv");
      element0.parentNode = (Node) document0;
      element0.text();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body>\n  ScriptDataDoubleEscapedDash\n </body>\n</html>", "ScriptDataDoubleEscapedDash");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!", "#root");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ScriptDataDoubleEscapedDash", "./OVEv");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("5j_AJ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("91E7iT3Ku");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "/qu|p", attributes0);
      pseudoTextElement0.toggleClass(":lt(");
      pseudoTextElement0.hasClass("org.jsoup.select.Evaluator$IndexLessThan");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("/R.SNK>%A[", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("/R.SNK>%A[");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Tag name must not be empty.", attributes0);
      pseudoTextElement0.toggleClass("org.jsoup.select.Collector");
      pseudoTextElement0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/Qu|P");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "/Qu|P", (Attributes) null);
      pseudoTextElement0.toggleClass(" > ");
      pseudoTextElement0.toggleClass("1QJ8oi[iisFv25");
      pseudoTextElement0.hasClass("#root");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("!c=W/_M}", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("J&=Bnig{3z");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vZ@;T=VB", attributes0);
      pseudoTextElement0.toggleClass("16NNe P");
      pseudoTextElement0.toggleClass(" > ");
      pseudoTextElement0.hasClass("$qn9Eaw#2j[m'8d");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " > ", (Attributes) null);
      pseudoTextElement0.toggleClass("L{}h)CfE2|35>?");
      pseudoTextElement0.toggleClass("id");
      pseudoTextElement0.toggleClass("#");
      pseudoTextElement0.hasClass("id");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " > ", (Attributes) null);
      pseudoTextElement0.toggleClass("L{}h)CfE2|35>?");
      pseudoTextElement0.toggleClass("org.jsoup.parser.ParseError");
      pseudoTextElement0.hasClass("org.jsoup.parser.ParseError");
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("+.)", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "+.)", (Attributes) null);
      pseudoTextElement0.toggleClass("+.)");
      pseudoTextElement0.toggleClass(".xOrv");
      pseudoTextElement0.toggleClass(".xOrv");
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(" ;");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " ;", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("./OVEv", "./OVEv");
      document0.val("./OVEv");
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(" ;");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " ;", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("./OVEv", "./OVEv");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Parser.parse("_B%whd^43{`/g|pN", "_B%whd^43{`/g|pN");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xr0Jp;AP#I\"nusO[@P", "xr0Jp;AP#I\"nusO[@P");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings1);
      document0.title("xr0Jp;AP#I\"nusO[@P");
      document0.html();
  }
}
