/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 22:12:59 GMT 2024
 */

package org.apache.commons.math.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair;
import org.apache.commons.math.random.MersenneTwister;
import org.apache.commons.math.random.RandomAdaptor;
import org.apache.commons.math.random.Well19937a;
import org.apache.commons.math.random.Well44497a;
import org.apache.commons.math.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiStartUnivariateRealOptimizer_ESTest extends MultiStartUnivariateRealOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2012, well44497b0);
      multiStartUnivariateRealOptimizer0.getConvergenceChecker();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(4097);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 183, well44497b0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1197;
      doubleArray0[1] = (double) 183;
      doubleArray0[2] = 1196.47101957833;
      doubleArray0[3] = (double) 183;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1197, (double) 1197, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well19937a well19937a0 = new Well19937a();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 636, well19937a0);
      multiStartUnivariateRealOptimizer0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well44497a well44497a0 = new Well44497a();
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, well44497a0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(multiStartUnivariateRealOptimizer0, 152, well44497a0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 152;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 0, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well44497b well44497b0 = new Well44497b(191);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 677, randomAdaptor0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 677;
      doubleArray0[1] = (double) 191;
      doubleArray0[2] = (double) 677;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, 0.0, (-1776.8516333980303));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-1146), well19937a0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1146);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-1146.0), 921.28536222);
      multiStartUnivariateRealOptimizer0.getOptima();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well44497a well44497a0 = new Well44497a((-1090L));
      MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2381, well44497a0);
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = null;
      multiStartUnivariateRealOptimizer0.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), well44497a0);
      multiStartUnivariateRealOptimizer1.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
      multiStartUnivariateRealOptimizer1.setMaxEvaluations(2381);
      well44497a0.setSeed((-1));
      multiStartUnivariateRealOptimizer0.getOptima();
      multiStartUnivariateRealOptimizer1.setConvergenceChecker(convergenceChecker0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-1146), well19937a0);
      multiStartUnivariateRealOptimizer0.getOptima();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well19937a well19937a0 = new Well19937a(0);
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well19937a0);
      multiStartUnivariateRealOptimizer0.setMaxEvaluations(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      MersenneTwister mersenneTwister0 = new MersenneTwister((-138L));
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1429, mersenneTwister0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1429;
      doubleArray0[1] = (double) 1429;
      doubleArray0[2] = 0.0875862700108075;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(multiStartUnivariateRealOptimizer0, 639, mersenneTwister0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer1.optimize(polynomialFunction0, goalType0, (-2853.5593232853553), 0.0875862700108075, (double) (-138L));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(3904.5, 0.0);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(4097, 4097, 4097, 4097, 4097).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn((-483), (-3154), 4097, 1197, 1393).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well44497b well44497b0 = new Well44497b(191);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1197, randomAdaptor0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-483);
      doubleArray0[2] = (double) 4097;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1393, (-1776.8516333980303));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(3904.5, 0.0);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(4097, 4097, 4097, 4097, 4097).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn((-483), (-3154), 4097, 1197, 1393).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well44497b well44497b0 = new Well44497b(191);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1197, randomAdaptor0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-483);
      doubleArray0[1] = (double) 191;
      doubleArray0[2] = (double) 4097;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-849.0879688917), (-1263.948045));
      System.setCurrentTimeMillis(4097);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(3904.5, 0.0);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(4097, 4097, 4097, 4097, 4097).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn((-478), (-3154), 4097, 1197, 1393).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well44497b well44497b0 = new Well44497b(191);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1197;
      doubleArray0[1] = (double) (-3154);
      doubleArray0[2] = (double) 677;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 4097;
      doubleArray0[5] = (double) 1197;
      doubleArray0[6] = (double) 1197;
      doubleArray0[7] = 0.0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 191, well44497b0);
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 191, 0.0, 1.2599210498948732);
      multiStartUnivariateRealOptimizer0.getOptima();
  }
}
