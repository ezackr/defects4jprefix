/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:19:43 GMT 2024
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      pegasusSolver0.solve(3674, (UnivariateRealFunction) tanh0, (-157.1255908232), (double) 3674, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3120.6807), (-3120.6807), (-3120.6807));
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-157.2433553213), (-157.2433553213));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(33, (UnivariateRealFunction) tanh0, (-157.2433553213), (double) 33, allowedSolution0);
      assertEquals((-157.2433553213), pegasusSolver0.getMin(), 0.01);
      assertEquals(4.4841550858394146E-44, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      double double0 = regulaFalsiSolver0.solve(135, (UnivariateRealFunction) sinc0, 41.183052225, (double) 135, (double) 135);
      assertEquals(135.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(100.53096491487369, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(132, (UnivariateRealFunction) sinc0, (double) 132, 1536.97, allowedSolution0);
      assertEquals(834.485, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1536.238807604386, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2707, (UnivariateRealFunction) expm1_0, 0.0, (double) 2707, (double) 2707);
      assertEquals(2707.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2733, (UnivariateRealFunction) expm1_0, (double) 2733, 0.0, (double) 2733);
      assertEquals(2733.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3071.91448505));
      Tanh tanh0 = new Tanh();
      illinoisSolver0.setup(1042635549, tanh0, (-3071.91448505), 1042635549, 1042635549);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(276, (UnivariateRealFunction) expm1_0, (-2208.13686987242), (double) 276, (-2208.13686987242));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (276) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      double double0 = regulaFalsiSolver0.solve(2733, (UnivariateRealFunction) sinc0, 13.07, (double) 2733, (double) 2733);
      assertEquals(2733.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2730.0440159695304, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(27, (UnivariateRealFunction) tanh0, (-157.1255908232), (double) 27, allowedSolution0);
      assertEquals((-65.0627954116), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-6.405885213012392E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-168.0204158686056));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(33, (UnivariateRealFunction) tanh0, (-168.0204158686056), (double) 33, allowedSolution0);
      assertEquals((-67.5102079343028), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.6122627611852306E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-168.0204158686056), (-168.0204158686056));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(33, (UnivariateRealFunction) tanh0, (-168.0204158686056), (double) 33, allowedSolution0);
      assertEquals((-67.5102079343028), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.4791141972893971E-31, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-157.1255908232), (-157.1255908232));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(33, (UnivariateRealFunction) tanh0, (-157.1255908232), (double) 33, allowedSolution0);
      assertEquals((-62.06279541160001), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-7.494178599599612E-29), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(33, (UnivariateRealFunction) tanh0, (-194.26774033690054), (double) 33, allowedSolution0);
      assertEquals((-80.63387016845027), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.660295701594837E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(26, (UnivariateRealFunction) tanh0, (-157.1255908232), (double) 26, allowedSolution0);
      assertEquals((-65.5627954116), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.8738155528203656E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(33, (UnivariateRealFunction) tanh0, (-157.1255908232), (double) 33, allowedSolution0);
      assertEquals((-62.06279541160001), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.0615752261743164E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(26, (UnivariateRealFunction) tanh0, (-157.1255908232), (double) 26, allowedSolution0);
      assertEquals((-65.5627954116), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.8738155528203656E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(33, (UnivariateRealFunction) tanh0, (-157.2433553213), (double) 33, allowedSolution0);
      assertEquals((-62.12167766064999), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(4.817307293392451E-15, double0, 0.01);
  }
}
