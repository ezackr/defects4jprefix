/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:07:50 GMT 2024
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2835, 2835);
      openMapRealMatrix0.addToEntry(0, 0, 2835);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(2835, openMapRealMatrix1.getColumnDimension());
      assertEquals(2835, openMapRealMatrix0.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(2835, openMapRealMatrix0.getColumnDimension());
      assertEquals(2835, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1197, 1197);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      assertEquals(1197, openMapRealMatrix1.getRowDimension());
      assertEquals(1197, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2823, 2823);
      openMapRealMatrix0.setEntry(8, 8, 2823);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(2823, openMapRealMatrix0.getColumnDimension());
      assertEquals(2823, openMapRealMatrix1.getColumnDimension());
      assertEquals(2823, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2846, 2846);
      // Undeclared exception!
      openMapRealMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2794, 2794);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertEquals(2794, openMapRealMatrix1.getColumnDimension());
      assertEquals(2794, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2794, 2794);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(2794, openMapRealMatrix1.getColumnDimension());
      assertEquals(2794, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2823, 2823);
      openMapRealMatrix0.setEntry(2805, 2805, 2805);
      assertEquals(2823, openMapRealMatrix0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(2823, 2574);
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix0);
      assertEquals(2823, openMapRealMatrix0.getRowDimension());
      assertEquals(2823, realMatrix0.getRowDimension());
      assertEquals(2574, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2835, 2835);
      openMapRealMatrix0.addToEntry(0, 0, 2835);
      assertEquals(2835, openMapRealMatrix0.getRowDimension());
      
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) openMapRealMatrix0);
      assertEquals(2835, realMatrix0.getRowDimension());
      assertEquals(2835, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2835, 2835);
      openMapRealMatrix0.addToEntry(0, 0, 0);
      assertEquals(2835, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2835, 2835);
      openMapRealMatrix0.setEntry(269, 269, 2835);
      openMapRealMatrix0.multiplyEntry(269, 269, 2835);
      assertEquals(2835, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2815, 2815);
      openMapRealMatrix0.multiplyEntry(0, 0, 0);
      assertEquals(2815, openMapRealMatrix0.getRowDimension());
  }
}
