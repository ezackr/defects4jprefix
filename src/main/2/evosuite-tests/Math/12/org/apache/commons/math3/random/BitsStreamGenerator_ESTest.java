/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 17:47:28 GMT 2024
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      long long0 = well1024a0.nextLong();
      assertEquals(5614179097095692510L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(142L);
      float float0 = mersenneTwister0.nextFloat();
      assertEquals(0.36685395F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3952090531849364496L);
      mersenneTwister0.setSeed(0L);
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = 3471;
      intArray0[3] = (-863);
      Well512a well512a0 = new Well512a(intArray0);
      double double0 = well512a0.nextGaussian();
      assertEquals(0.15057520376694233, double0, 0.01);
      
      boolean boolean0 = well512a0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-1832L));
      byte[] byteArray0 = new byte[6];
      iSAACRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)6, (byte)100, (byte) (-47), (byte) (-20), (byte)57}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well19937a well19937a0 = new Well19937a(intArray0);
      double double0 = well19937a0.nextGaussian();
      assertEquals((-1.323166334019188), double0, 0.01);
      
      double double1 = well19937a0.nextGaussian();
      assertEquals((-0.8740676169373817), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 857);
      try { 
        mersenneTwister0.nextInt((-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,356 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well19937a well19937a0 = new Well19937a(intArray0);
      int int0 = well19937a0.nextInt(2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-300L));
      iSAACRandom0.nextInt();
      int int0 = iSAACRandom0.nextInt();
      assertEquals((-2127444915), int0);
      
      int int1 = iSAACRandom0.nextInt(667978905);
      assertEquals(547577953, int1);
  }
}
