/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:16:25 GMT 2024
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      regulaFalsiSolver0.solve(465, (UnivariateRealFunction) asinh0, (-1.29625), (double) 465, (-1.29625));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2004, (UnivariateRealFunction) asinh0, (-32.530895632346954), (double) 2004, allowedSolution0);
      assertEquals(2004.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.5307848989022958E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2, (UnivariateRealFunction) expm1_0, 0.0, 0.0, 0.0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(515, (UnivariateRealFunction) expm1_0, (double) 515, 0.0, (double) 515);
      assertEquals(515.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      double double0 = regulaFalsiSolver0.solve(168, (UnivariateRealFunction) asinh0, (-4.9E-324), (double) 168, (double) 168);
      assertEquals(168.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-0.03383838596985781));
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1083, (UnivariateRealFunction) inverse0, (-0.03383838596985781), 1441.938, 1441.938, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,083) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      pegasusSolver0.setup(289, expm1_0, (-617.2750756), 289, (-617.2750756));
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (289) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) asinh0, (-937.956396), (double) 479, allowedSolution0);
      assertEquals(479.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-4.2814159097626526E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) asinh0, (-937.956396), (double) 479, allowedSolution0);
      assertEquals((-229.47819800000002), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.662469547892863E-18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(324, 324, 324);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(324, (UnivariateRealFunction) expm1_0, (-226.4299281864421), (double) 324, allowedSolution0);
      assertEquals(48.785035906778944, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(324.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(473, (UnivariateRealFunction) asinh0, (-937.956396), (double) 473, allowedSolution0);
      assertEquals(473.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-3.19227092960113E-22), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(490, (-813.7580953), 490);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(490, (UnivariateRealFunction) expm1_0, (-813.7580953), (double) 490, (double) 490, allowedSolution0);
      assertEquals(490.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(490.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(465, (UnivariateRealFunction) asinh0, (-952.6839553623781), (double) 465, allowedSolution0);
      assertEquals(465.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.4652039449075931E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(465, (UnivariateRealFunction) asinh0, (-951.6935332574071), (double) 465, allowedSolution0);
      assertEquals((-243.34676662870356), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.074704180731261E-27, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(475, 475);
      double double0 = regulaFalsiSolver0.solve(475, (UnivariateRealFunction) expm1_0, (-813.7580953), (double) 475, (double) 475);
      assertEquals(475.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-813.7580953000002), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(465, (UnivariateRealFunction) asinh0, (-937.956396), (double) 465, allowedSolution0);
      assertEquals(465.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2.4148661767606378E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(465, (UnivariateRealFunction) asinh0, (-9.637262094938971E-15), (double) 465, allowedSolution0);
      assertEquals(232.5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(6.252776074688882E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(465, 465);
      Asinh asinh0 = new Asinh();
      double double0 = regulaFalsiSolver0.solve(465, (UnivariateRealFunction) asinh0, (-937.956396), (double) 465, allowedSolution0);
      assertEquals(465.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-202.23094130789457), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(456, (UnivariateRealFunction) asinh0, (-951.6935332574071), (double) 456, allowedSolution0);
      assertEquals(456.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.6268349677790278E-13, double0, 0.01);
  }
}
