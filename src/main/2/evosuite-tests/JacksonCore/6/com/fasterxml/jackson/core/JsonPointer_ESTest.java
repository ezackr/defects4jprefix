/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 16:39:01 GMT 2024
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("PhK[02");
      jsonPointer0.hashCode();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("hK[02", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("PhK[02", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      String string0 = jsonPointer0.getMatchingProperty();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.toString();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("Gm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"Gm\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/k`_cxBzi3DE,l`");
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("/k`_cxBzi3DE,l`", jsonPointer0.toString());
      assertEquals("k`_cxBzi3DE,l`", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
      boolean boolean0 = jsonPointer0.matches();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("\"", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("21731");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals(1731, jsonPointer0.getMatchingIndex());
      assertTrue(boolean0);
      assertEquals("1731", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchProperty("8?Ffx");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
      assertTrue(jsonPointer0.mayMatchProperty());
      
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
      assertNotNull(jsonPointer1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("\"", jsonPointer0.toString());
      assertEquals("", jsonPointer1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail(" E;");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty(" E;");
      assertEquals("E;", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals(" E;", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(1734);
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("30");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(0);
      assertNotNull(jsonPointer1);
      assertEquals("0", jsonPointer0.getMatchingProperty());
      assertEquals("30", jsonPointer0.toString());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement((-1));
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2/22738585072012e-308", 0);
      Object object0 = new Object();
      boolean boolean0 = jsonPointer0.equals(object0);
      assertFalse(boolean0);
      assertEquals("~2", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.mayMatchElement());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("G*(");
      assertFalse(jsonPointer0.matches());
      assertEquals("*(", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("G*(", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("22115797731");
      assertEquals("2115797731", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchElement());
      assertEquals("22115797731", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer("2215797731", "2215797731", jsonPointer0);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertFalse(jsonPointer1.matches());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("D8SA/dH^(\"7,)Y*e`");
      assertFalse(jsonPointer0.matches());
      assertEquals("D8SA/dH^(\"7,)Y*e`", jsonPointer0.toString());
      assertEquals("8SA", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("62z~i/Xjq2");
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("2z~i", jsonPointer0.getMatchingProperty());
      assertEquals("62z~i/Xjq2", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("mN$}!tZmIy~");
      assertEquals("mN$}!tZmIy~", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("N$}!tZmIy~", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("5~1IxO.~:rb[Ps+]^D");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("/IxO.~:rb[Ps+]^D", jsonPointer0.getMatchingProperty());
      assertEquals("5~1IxO.~:rb[Ps+]^D", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("mN$}!tZmIy~", 0);
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("mN$}!tZmIy~", jsonPointer0.toString());
      assertEquals("~mN$}!tZmIy~", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2.2250738585072012e-308", 12);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals(".225073858~72012e-308", jsonPointer0.getMatchingProperty());
      assertEquals("2.2250738585072012e-308", jsonPointer0.toString());
  }
}
