/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 16:36:23 GMT 2024
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.hashCode();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("mc$,q3r8hc");
      String string0 = jsonPointer0.getMatchingProperty();
      assertNotNull(string0);
      assertFalse(jsonPointer0.matches());
      assertEquals("mc$,q3r8hc", jsonPointer0.toString());
      assertEquals("c$,q3r8hc", string0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      String string0 = jsonPointer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("");
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      assertTrue(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/{E$:@<Di:#(1^xN'");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("/{E$:@<Di:#(1^xN'", jsonPointer0.toString());
      assertEquals("{E$:@<Di:#(1^xN'", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        JsonPointer.compile("E/VaJV~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"E/VaJV~\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("tfVvS{,k6");
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("fVvS{,k6", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
      assertEquals("tfVvS{,k6", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("05");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertTrue(boolean0);
      assertEquals("5", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("05", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchProperty("i`LC4r3\u0001");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("i`LC4r3\u0001");
      assertTrue(jsonPointer0.mayMatchProperty());
      
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("i`LC4r3\u0001");
      assertEquals("`LC4r3\u0001", jsonPointer0.getMatchingProperty());
      assertNull(jsonPointer1);
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("E/VaJV~");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
      assertNotNull(jsonPointer1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("VaJV~", jsonPointer1.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement(48);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("e2");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(2);
      assertEquals("e2", jsonPointer0.toString());
      assertEquals("2", jsonPointer0.getMatchingProperty());
      assertNotNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("tfVvSk6");
      JsonPointer jsonPointer1 = JsonPointer._parseTail("tfVvSk6");
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertFalse(jsonPointer1.matches());
      assertTrue(boolean0);
      assertEquals("tfVvSk6", jsonPointer1.toString());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("fVvSk6", jsonPointer1.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("tfVvSk6");
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
      assertEquals("fVvSk6", jsonPointer0.getMatchingProperty());
      assertEquals("tfVvSk6", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertFalse(jsonPointer0.mayMatchElement());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("3`;[0HHTlcE");
      boolean boolean0 = jsonPointer0.equals("3`;[0HHTlcE");
      assertEquals("`;[0HHTlcE", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
      assertEquals("3`;[0HHTlcE", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("(o37x/q0e~v/ @7<P");
      assertEquals("(o37x/q0e~v/ @7<P", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("o37x", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("u5a9s5\u00E6M");
      assertEquals("5a9s5\u00E6M", jsonPointer0.getMatchingProperty());
      assertEquals("u5a9s5\u00E6M", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("O~1zkKH}b");
      assertEquals("O~1zkKH}b", jsonPointer0.toString());
      assertEquals("/zkKH}b", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("z@KAk%~+F~");
      assertEquals("@KAk%~+F~", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("ua%.5y~.(gH[~j+N`bd");
      assertEquals("a%.5y~.(gH[~j+N`bd", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertFalse(jsonPointer0.mayMatchElement());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("<)~0%8");
      assertEquals("<)~0%8", jsonPointer0.toString());
      assertEquals(")~%8", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }
}
