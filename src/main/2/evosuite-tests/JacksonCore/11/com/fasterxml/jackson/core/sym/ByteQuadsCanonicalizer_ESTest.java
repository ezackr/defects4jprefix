/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 16:56:59 GMT 2024
 */

package com.fasterxml.jackson.core.sym;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteQuadsCanonicalizer_ESTest extends ByteQuadsCanonicalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      byteQuadsCanonicalizer1.findName(16, (-1), 16);
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
      int int0 = byteQuadsCanonicalizer0.hashSeed();
      assertEquals(0, int0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = byteQuadsCanonicalizer0.bucketCount();
      assertEquals(0, int0);
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(65613);
      byteQuadsCanonicalizer1.addName("~4e_y*", 65613, 65614, 65613);
      byteQuadsCanonicalizer1.release();
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1391));
      byteQuadsCanonicalizer1.release();
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
      byteQuadsCanonicalizer1._count = (-1);
      byteQuadsCanonicalizer1.addName("", (-1), 0, (-1));
      byteQuadsCanonicalizer1.release();
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(65613);
      byteQuadsCanonicalizer1._count = 65613;
      byteQuadsCanonicalizer1.addName("~4e_y*", 65613, 65614, 65613);
      byteQuadsCanonicalizer1.release();
      assertEquals(65614, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1867);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1867);
      int int0 = byteQuadsCanonicalizer1.size();
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(1867, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, int0);
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1867);
      int int0 = byteQuadsCanonicalizer0.size();
      assertEquals(1867, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1396));
      byteQuadsCanonicalizer1.addName("USE_THRAD_LOCAL_FO_BUFFER_RECYCLING", (-1396), (-1396));
      byteQuadsCanonicalizer1.addName("USE_THRAD_LOCAL_FO_BUFFER_RECYCLING", (-1396), (-1396));
      byteQuadsCanonicalizer1.toString();
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[12];
      byteQuadsCanonicalizer0._hashSize = 1;
      intArray0[3] = 1;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.toString();
      assertEquals((-2), byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4);
      int[] intArray0 = new int[5];
      byteQuadsCanonicalizer0._hashArea = intArray0;
      assertEquals(4, byteQuadsCanonicalizer0.hashSeed());
      
      byteQuadsCanonicalizer0.findName(4);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[8];
      byteQuadsCanonicalizer0._hashSize = 1;
      intArray0[3] = 1;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.findName(1);
      assertEquals((-2), byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1396));
      byteQuadsCanonicalizer1.addName("feQ)o@_", (-1396));
      byteQuadsCanonicalizer1.findName((-1396));
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byteQuadsCanonicalizer1.addName(") does noS override copy(); it has to", 350, 350);
      byteQuadsCanonicalizer1.addName(") does noS override copy(); it has to", 350);
      byteQuadsCanonicalizer1.findName(350);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3781);
      byteQuadsCanonicalizer1.addName("='", 3781);
      byteQuadsCanonicalizer1.findName(392);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4);
      int[] intArray0 = new int[6];
      byteQuadsCanonicalizer0._hashSize = 4;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.findName(4, 4);
      assertEquals(4, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(2);
      int[] intArray0 = new int[12];
      byteQuadsCanonicalizer0._hashSize = 2;
      intArray0[3] = 2;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.findName(2, 2);
      assertEquals((-4), byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1396));
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.JsonFactory$Feature", (-1396), (-1396));
      byteQuadsCanonicalizer1.findName((-1396), (-1396));
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byteQuadsCanonicalizer1.addName("f,", 350);
      byteQuadsCanonicalizer1.addName("f,", 350, 350);
      byteQuadsCanonicalizer1.findName(350, 350);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1396));
      byteQuadsCanonicalizer1.addName("com.fasterxml.jacus$n.cqre.JsonFactot$Feature", (-1396), (-1396));
      byteQuadsCanonicalizer1.findName((-1396), 1408);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(3);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[3] = 3;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(byteQuadsCanonicalizer0._hashArea, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(3);
      int[] intArray0 = new int[8];
      intArray0[3] = 3;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      assertEquals(3, byteQuadsCanonicalizer0.hashSeed());
      
      int[] intArray1 = new int[10];
      intArray1[0] = 3;
      byteQuadsCanonicalizer0.findName(intArray1, 3);
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(3);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      byteQuadsCanonicalizer0._hashSize = 3;
      intArray0[3] = 3;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.findName(3, 10, 3);
      assertEquals((-6), byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[28];
      byteQuadsCanonicalizer1.addName("com.fasterxml.jacks&E.cor!.JsonFactory", intArray0, 8);
      byteQuadsCanonicalizer1.findName(16, (-1), 16);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(11);
      int[] intArray0 = new int[18];
      byteQuadsCanonicalizer0._hashSize = 1;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.findName(intArray0, 11);
      assertEquals(11, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[28];
      byteQuadsCanonicalizer1.addName("com.fasterxml.jacks&E.cor!.JsonFactory", intArray0, 8);
      byteQuadsCanonicalizer1.findName(intArray0, 8);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[28];
      byteQuadsCanonicalizer1.addName("com.fasterxml.jacks&E.cor!.JsonFactory", intArray0, 8);
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 21);
      byteQuadsCanonicalizer1.findName(intArray0, 16);
      assertEquals(2, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1376));
      int[] intArray0 = new int[38];
      byteQuadsCanonicalizer1.addName("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", 2368, 420);
      byteQuadsCanonicalizer1.addName("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", intArray0, 20);
      byteQuadsCanonicalizer1.findName(intArray0, 20);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byteQuadsCanonicalizer1.addName("?n+b+cBvC6!", 350, 350);
      byteQuadsCanonicalizer1.addName(") does not override copy(); it has to", 350, 350);
      byteQuadsCanonicalizer1.addName("?n+b+cBvC6!", 350);
      byteQuadsCanonicalizer1.findName(350);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byteQuadsCanonicalizer1.addName("Failed copy(): ", 350, 350);
      byteQuadsCanonicalizer1.addName("Failed copy(): ", 350, 350);
      byteQuadsCanonicalizer1.findName(350);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4);
      byteQuadsCanonicalizer0._spilloverEnd = 4;
      int[] intArray0 = new int[21];
      String[] stringArray0 = new String[4];
      byteQuadsCanonicalizer0._names = stringArray0;
      intArray0[3] = 4;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.addName(", copyCount=", 4);
      byteQuadsCanonicalizer0.findName(4);
      assertEquals(2, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(22);
      int[] intArray0 = new int[21];
      intArray0[0] = 22;
      intArray0[3] = 22;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._spilloverEnd = 22;
      byteQuadsCanonicalizer0.findName(22);
      assertEquals(5, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byteQuadsCanonicalizer1.addName("f,", 350);
      byteQuadsCanonicalizer1.addName("f,", 350);
      byteQuadsCanonicalizer1.addName("f,", 350, 350);
      byteQuadsCanonicalizer1.findName(350, 350);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byteQuadsCanonicalizer1.addName("f,", 350);
      byteQuadsCanonicalizer1.addName("f,", 350, 0);
      byteQuadsCanonicalizer1.findName(350, 350);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(6);
      int[] intArray0 = new int[17];
      intArray0[0] = 6;
      intArray0[3] = 6;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._spilloverEnd = 6;
      byteQuadsCanonicalizer0.findName(intArray0, 2);
      assertEquals(1, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byteQuadsCanonicalizer1.addName("f,le", 350);
      byteQuadsCanonicalizer1.addName("f,le", 350);
      byteQuadsCanonicalizer1.addName("f,le", 350);
      byteQuadsCanonicalizer1.addName("f,le", 350);
      byteQuadsCanonicalizer1.addName("f,le", 350);
      byteQuadsCanonicalizer1.addName("f,le", 350);
      byteQuadsCanonicalizer1.addName("f,le", 350);
      byteQuadsCanonicalizer1.findName(350, 350);
      assertEquals(7, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1365));
      byteQuadsCanonicalizer1.addName("cfasterxml.jacks$n.cqre.JsonFactoy$Feature", (-1365), (-1365));
      byteQuadsCanonicalizer1.addName("cfasterxml.jacks$n.cqre.JsonFactoy$Feature", (-1365), (-1365));
      byteQuadsCanonicalizer1.findName(12, 12, (-1365));
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
      int[] intArray0 = new int[16];
      byteQuadsCanonicalizer0._spilloverEnd = 7;
      intArray0[0] = 7;
      intArray0[3] = 7;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      String string0 = byteQuadsCanonicalizer0.findName(intArray0, 3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      int[] intArray0 = new int[14];
      intArray0[0] = 1;
      intArray0[3] = 1;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._spilloverEnd = 1;
      String string0 = byteQuadsCanonicalizer0.findName(1, 1, 33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(3);
      byteQuadsCanonicalizer0._spilloverEnd = 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      int[] intArray1 = new int[7];
      intArray1[0] = 3;
      String string0 = byteQuadsCanonicalizer0.findName(intArray1, 3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(10);
      int[] intArray0 = new int[46];
      intArray0[0] = 10;
      int[] intArray1 = new int[5];
      intArray1[3] = 10;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      String string0 = byteQuadsCanonicalizer0.findName(intArray0, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[28];
      byteQuadsCanonicalizer1.addName("com.fasterxml.jacks&E.cor!.JsonFactory", intArray0, 8);
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 21);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jacks&E.cor!.JsonFactory", intArray0, 16);
      byteQuadsCanonicalizer1.findName(intArray0, 16);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4);
      int[] intArray0 = new int[5];
      byteQuadsCanonicalizer0._spilloverEnd = 4;
      intArray0[0] = 4;
      int[] intArray1 = new int[21];
      intArray1[3] = 4;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      byteQuadsCanonicalizer0.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4);
      int[] intArray0 = new int[5];
      byteQuadsCanonicalizer0._spilloverEnd = 4;
      intArray0[0] = 4;
      int[] intArray1 = new int[21];
      String[] stringArray0 = new String[4];
      byteQuadsCanonicalizer0._names = stringArray0;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      byteQuadsCanonicalizer0.addName(", copyCount=", 4);
      byteQuadsCanonicalizer0.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      int[] intArray0 = new int[13];
      byteQuadsCanonicalizer0._spilloverEnd = 9;
      intArray0[0] = 9;
      int[] intArray1 = new int[9];
      intArray1[3] = 9;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(5);
      int[] intArray0 = new int[46];
      intArray0[0] = 5;
      int[] intArray1 = new int[6];
      intArray1[3] = 5;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      String string0 = byteQuadsCanonicalizer0.findName(intArray0, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(6);
      int[] intArray0 = new int[46];
      intArray0[0] = 6;
      int[] intArray1 = new int[6];
      intArray1[3] = 6;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      assertEquals(6, byteQuadsCanonicalizer0.hashSeed());
      
      byteQuadsCanonicalizer0.findName(intArray0, 6);
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      int[] intArray1 = new int[9];
      intArray1[3] = 7;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      byteQuadsCanonicalizer0.findName(intArray0, 7);
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(8);
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      int[] intArray1 = new int[19];
      intArray1[3] = 8;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      byteQuadsCanonicalizer0.findName(intArray0, 8);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(2757);
      String[] stringArray0 = new String[3];
      byteQuadsCanonicalizer0._names = stringArray0;
      int[] intArray0 = new int[5];
      intArray0[3] = 2757;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.addName("_}^ur:ao)-U%&A|", 2757);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("'R\"&q4k[;B!k-?BJTI#", 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 95143
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(34);
      byteQuadsCanonicalizer1._count = 34;
      byteQuadsCanonicalizer1.addName("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", 34, 34);
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("~", intArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(65536);
      byteQuadsCanonicalizer1._count = 65536;
      byteQuadsCanonicalizer1.addName("", 65536, 65536, 65536);
      byteQuadsCanonicalizer1._hashSize = 65537;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("", 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262147
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4);
      int[] intArray0 = new int[5];
      byteQuadsCanonicalizer0._spilloverEnd = 4;
      int[] intArray1 = new int[21];
      String[] stringArray0 = new String[4];
      byteQuadsCanonicalizer0._names = stringArray0;
      intArray1[3] = 4;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      byteQuadsCanonicalizer0.addName(", copyCount=", 4);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("6qrDoSo47_pU7", intArray0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(53);
      byteQuadsCanonicalizer1._secondaryStart = 53;
      byteQuadsCanonicalizer1.addName("v?Ckp&?", 53, 53, 53);
      byteQuadsCanonicalizer1.addName("v?Ckp&?", 53, 53, 53);
      byteQuadsCanonicalizer1._count = 53;
      byteQuadsCanonicalizer1.addName("v?Ckp&?", 53, 53);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("v?Ckp&?", 5, 53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed rehash(): old count=54, copyCount=3
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0._hashSize = 1560;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0._reportTooManyCollisions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spill-over slots in symbol table with 0 entries, hash area of 1560 slots is now full (all 195 slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(4096);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(407);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(65599);
      assertEquals(7, int0);
  }
}
