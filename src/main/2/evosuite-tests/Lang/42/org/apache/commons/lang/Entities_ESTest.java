/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:36:46 GMT 2024
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("Nq@+@&lt;E{eZ&quot; A#&amp;`0'");
      assertEquals("Nq@+@<E{eZ\" A#&`0'", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.escape("Nq@+@<E{eZ\" A#&`0'");
      assertEquals("Nq@+@&lt;E{eZ&quot; A#&amp;`0'", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("g!maf", 127);
      int int0 = entities_BinaryEntityMap0.value("g!maf");
      assertEquals(127, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("Nq@+@<E{eZ\" A#&`0'", 1833);
      int int0 = entities_TreeEntityMap0.value("Nq@+@<E{eZ\" A#&`0'");
      assertEquals(1833, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities_TreeEntityMap0.name(128);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "oLc(`&$;-v");
      assertEquals("oLc(`&$;-v", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      int int0 = entities_TreeEntityMap0.value("Nq@+@<E{eZ\" A#&`0'");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.HTML40.entityName(647);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities0.map = (Entities.EntityMap) entities_ArrayEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      StringWriter stringWriter0 = new StringWriter();
      entities0.escape((Writer) stringWriter0, "2#8Kn+&EM-!?L.");
      assertEquals("2#8Kn+&amp;EM-!?L.", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.add("$8SNzBVYP9~.I$~", 247);
      int int0 = entities_ArrayEntityMap0.value("QGNI:>qN7Jhe)V");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(115);
      entities_BinaryEntityMap0.add((String) null, (-1773));
      entities_BinaryEntityMap0.add("org.apache.commons.lang.IntHashMap$Entry", 115);
      entities_BinaryEntityMap0.add("org.apache.commons.lang.IntHashMap$Entry", 115);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("sigmaf", 127);
      String string0 = entities_BinaryEntityMap0.name(127);
      assertEquals("sigmaf", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      String string0 = entities_BinaryEntityMap0.name(124);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("+ SW AWAwllz>");
      assertEquals("+ SW AWAwllz>", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.HTML40.unescape((Writer) stringWriter0, "DDb\"N+yvh");
      assertEquals("DDb\"N+yvh", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("1`>(R&!7;\"&v");
      assertEquals("1`>(R&!7;\"&v", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("o&1NLg`&!;\"5-v");
      assertEquals("o&1NLg`&!;\"5-v", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("o1N,g`&;\"5-v");
      assertEquals("o1N,g`&;\"5-v", string0);
  }
}
