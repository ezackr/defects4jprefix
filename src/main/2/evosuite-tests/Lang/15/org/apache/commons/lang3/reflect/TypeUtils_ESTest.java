/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 12:25:24 GMT 2024
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.util.Map;
import org.apache.commons.lang3.reflect.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(parameterizedType0).getRawType();
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments(parameterizedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wait... What!? Type of rawType: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(parameterizedType0).getRawType();
      Class<String> class1 = String.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) parameterizedType0, (Class<?>) class1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) parameterizedType0;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(wildcardType0).getLowerBounds();
      doReturn(typeArray0).when(wildcardType0).getUpperBounds();
      WildcardType wildcardType1 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(wildcardType1).getLowerBounds();
      doReturn(typeArray0).when(wildcardType1).getUpperBounds();
      boolean boolean0 = TypeUtils.isAssignable(wildcardType1, wildcardType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("|u)iq<,*").when(type0).toString();
      // Undeclared exception!
      try { 
        TypeUtils.isInstance(type0, type0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // found an unhandled type: |u)iq<,*
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(wildcardType0).getUpperBounds();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // found an unhandled type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(parameterizedType0).getRawType();
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      typeArray0[7] = type0;
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(wildcardType0).getUpperBounds();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // found an unhandled type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(parameterizedType0).getRawType();
      boolean boolean0 = TypeUtils.isInstance(class0, parameterizedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) wildcardType0;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isAssignable(wildcardType0, wildcardType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(wildcardType0).getLowerBounds();
      doReturn(typeArray0).when(wildcardType0).getUpperBounds();
      boolean boolean0 = TypeUtils.isInstance(wildcardType0, wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
      doReturn(class0).when(parameterizedType0).getOwnerType();
      doReturn(class0, class0).when(parameterizedType0).getRawType();
      Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class0, parameterizedType0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      Class<?> class2 = TypeUtils.getRawType(class1, typeArray0[1]);
      typeArray0[2] = (Type) class2;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();
      doReturn(class2).when(parameterizedType0).getOwnerType();
      doReturn(class1, typeArray0[2], typeArray0[0]).when(parameterizedType0).getRawType();
      Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class0, parameterizedType0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(parameterizedType0).getRawType();
      Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class1, parameterizedType0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = TypeUtils.isInstance((Object) null, (Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isInstance((Object) null, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isInstance((Object) null, parameterizedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      assertNotNull(map0);
      
      boolean boolean0 = TypeUtils.typesSatisfyVariables(map0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      Class<?> class0 = TypeUtils.getRawType(wildcardType0, (Type) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(parameterizedType0).getRawType();
      // Undeclared exception!
      try { 
        TypeUtils.getRawType(parameterizedType0, parameterizedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wait... What!? Type of rawType: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawType((Type) null, (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isArrayType(wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isArrayType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      Type type0 = TypeUtils.getArrayComponentType(wildcardType0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = TypeUtils.getArrayComponentType(class0);
      assertNull(type0);
  }
}
