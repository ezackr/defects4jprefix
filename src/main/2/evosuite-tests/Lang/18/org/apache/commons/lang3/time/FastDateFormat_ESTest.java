/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 12:31:33 GMT 2024
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "MMM d, yyyy", 1, 2, 2, 3, 2, 1, 0, 0, 1);
      Locale locale0 = Locale.ROOT;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((long) 1);
      assertEquals("12:00:00 AM GMT+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 1, 3, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals(42, stringBuffer0.length());
      assertEquals("Wednesday, February 1, 0002 3:00:00 AM GMT", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      assertEquals(15, attributedCharacterIterator0.getEndIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HA(9i:v<0;=[m3PeJLN");
      Locale locale0 = new Locale("HA(9i:v<0;=[m3PeJLN");
      FastDateFormat.getInstance("HA(9i:v<0;=[m3PeJLN", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      assertEquals("M/d/yy h:mm a", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2130), timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2130
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      try { 
        fastDateFormat0.parseObject("MMMM d, yyyy h:mm a");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = fastDateFormat0.getLocale();
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3);
      assertEquals("h:mm a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
      String string0 = fastDateFormat0.format((long) 3);
      assertEquals("01/01/70", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3051, 1, 3, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals("Sunday, April 1, 0255", stringBuffer0.toString());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1958), (-1958), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1958
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZone();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
      assertEquals("M/d/yy", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1386), (TimeZone) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1386
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      assertEquals("2/14/14 8:21 PM", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1405), "[Z(y=KG");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[Z(y=KG", (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format((long) (-1405));
      assertEquals("[-0000(69=11AD", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Long long0 = new Long(3);
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
      assertEquals(15, attributedCharacterIterator0.getEndIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat.getInstance("]ZZzASg%,:yjb:B3P");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat.getInstance("%+#mW<^aBks");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat.getInstance("C`J>#[|NkNI|?WZwiN");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat.getInstance("`$DkVE^A0dy'_A;7c");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat.getInstance("-EE1x4}U%:l>LEazq[{");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat.getInstance("FastDateFormat[");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat.getInstance("GbO5@ c$Xu");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat.getInstance("Illegal pattern component: ");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat.getInstance("}J:U/']%");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat.getInstance("/L`F]]ql$S8>;GJMQ(");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat.getInstance("No date tixe pattrn fo6 local3 ");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastDateFormat.getInstance("MMM d, yyyy h:Om:ss a");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat.getInstance("Z:P[Q");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat.getInstance("?5SQ%V~9'[^?");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat.getInstance("Rv/K`JUJO5)q");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastDateFormat.getInstance("The validated collection contaiKs null element at >ndex: %d", (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat.getInstance("U\u0007 /E1XlQ.*=&{O");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat.getInstance("X");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat.getInstance("YC=t'IT!:4qU]");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat.getInstance("cI(%Gno~!%8l!O'=(@");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat.getInstance("whe validated array index is invalid: %d");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat.getInstance("#fbp~3DZrPI-BR]");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastDateFormat.getInstance("gKuU[\u0000IVo/=(]EOR");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat.getInstance("i5Xcxbyz{");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastDateFormat.getInstance("jvKUKcABjq");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastDateFormat.getInstance("6|l9+SLk>G*hc{OVC6F");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat.getInstance("nTzLDl|DCtDwM");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$1");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat.getInstance("p6.0{WmH['M\"ul");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat.getInstance("2`7q?ucU2:");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat.getInstance("M1r\"");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat.getInstance("uT");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat.getInstance("svN?!");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("*");
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("*", locale0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      assertEquals("2/14/14 8:21 PM", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      boolean boolean0 = fastDateFormat0.equals(":P[Q");
      assertFalse(boolean0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(boolean0);
      assertEquals(32, fastDateFormat1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "v5B-jGcu%VNC'['jqfv");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, (TimeZone) simpleTimeZone0);
      fastDateFormat1.equals(fastDateFormat0);
      assertEquals(38, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Dyd><^");
      String string0 = fastDateFormat0.format((-11L));
      assertEquals("3656931><^", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format((-5696L));
      assertEquals("12/31/69 11:59 PM", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      String string0 = fastDateFormat0.format((long) 0);
      assertEquals("Thursday, January 1, 1970 12:00:00 AM GMT", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[Z(H/kG");
      String string0 = fastDateFormat0.format((-2546L));
      assertEquals("[+0000(23/23AD", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[Z(H/kG");
      String string0 = fastDateFormat0.format((long) 2);
      assertEquals("[+0000(0/24AD", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "n~M", 3, 1, 0, 0, 0, 0, 2, 2, 0, 2, 1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((long) 2);
      assertEquals("00:00 Uhr GMT+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("ZZ(y=K");
      String string0 = fastDateFormat0.format((long) 0);
      assertEquals("+00:00(70=0", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat.getTimeZoneDisplay(timeZone0, false, 111, locale0);
  }
}
