/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 12:59:28 GMT 2024
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.apache.commons.lang3.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1001, 5, 6, 3);
      Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      dateUtils_DateIterator0.hasNext();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.addMilliseconds((Date) null, 1410);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2);
      long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 5);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5, 5, 2);
      Date date0 = DateUtils.setHours(mockDate0, 1001);
      assertEquals("Fri Jun 02 00:00:00 GMT 1905", date0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, (-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -15 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds((Date) null, 1001);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtils.setMonths(mockDate0, 5);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5, 1, 0, 3, 5);
      Date date0 = DateUtils.addMinutes(mockDate0, 4);
      assertEquals("Tue Jan 31 03:09:00 GMT 1905", date0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2);
      long long0 = DateUtils.getFragmentInSeconds((Date) mockDate0, 1);
      assertEquals(86400L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, (-1021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -1021 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, 2, 1001, 2, 6);
      Calendar calendar0 = DateUtils.toCalendar(mockDate0);
      Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
      boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135769600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2);
      Date date0 = DateUtils.setMinutes(mockDate0, 5);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 8 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4, 1, 5);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Date) mockDate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 0 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 1001);
      Date date1 = DateUtils.addMonths(date0, 1001);
      assertEquals("Sun Feb 16 00:00:00 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.addYears((Date) null, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Date) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 5, 5, 1, 1, 1);
      Date date0 = DateUtils.addWeeks(mockDate0, 1);
      assertEquals("Tue Jun 12 01:01:01 GMT 1906", date0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtils.setDays(mockDate0, 8);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6);
      Date date0 = DateUtils.addDays(mockDate0, 2);
      assertEquals("Sat Jan 03 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtils.addSeconds(mockDate0, 2136);
      boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, date0);
      assertEquals("Fri Feb 14 20:56:57 GMT 2014", date0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Calendar calendar0 = MockCalendar.getInstance(dateUtils0.UTC_TIME_ZONE);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes(calendar0, 1001);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 1001 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.truncatedEquals((Calendar) null, (Calendar) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.setSeconds((Date) null, 1001);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 6, 2, 1001, 5);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 4 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 12);
      boolean boolean0 = DateUtils.truncatedEquals(date0, date0, 12);
      assertTrue(boolean0);
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.setMilliseconds((Date) null, 1001);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtils.setYears(mockDate0, 2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Date) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      boolean boolean0 = DateUtils.isSameDay(date0, date0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, 280000000, 280000000);
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Date) mockDate0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-22), (-22), (-22), (-22), (-22));
      Calendar calendar0 = DateUtils.toCalendar(mockDate0);
      boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(5, 5, 5);
      boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 2);
      boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1393632000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=60,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Date) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Date) mockDate0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
      boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(1, 6, 6);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(5, 1, 0, 0, 1, 2);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1001, 1001, 4, 1001, 0, 0);
      Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 2);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-27941958000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1084,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=197,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 5);
      Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
      boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135769600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-22), (-22), (-22), (-22), (-22));
      Calendar calendar0 = DateUtils.toCalendar(mockDate0);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.parseDate((String) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        DateUtils.parseDate("^bnJ?tr}'sQb)5", stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: ^bnJ?tr}'sQb)5
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Date date0 = DateUtils.parseDate("", stringArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SZZZZ";
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("SZZZZ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("I 3,-G1xC-%", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      Date date0 = DateUtils.round((Object) mockDate0, 1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.round((Date) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.round((Calendar) null, 1975);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.round((Object) null, (-863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      // Undeclared exception!
      try { 
        DateUtils.round((Object) dateUtils0, 5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not round org.apache.commons.lang3.time.DateUtils@1
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.truncatedEquals((Date) null, (Date) null, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      // Undeclared exception!
      try { 
        DateUtils.truncate((Object) dateUtils0, 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not truncate org.apache.commons.lang3.time.DateUtils@1
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.truncate((Object) null, 2874);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtils.truncate((Object) mockDate0, 1617);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 1617 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 14);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 1, 4, 0, 1001);
      Date date0 = DateUtils.ceiling((Date) mockDate0, 0);
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Date) null, (-826));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Calendar) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 9, 9, 9);
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 9);
      Date date1 = DateUtils.ceiling((Object) date0, 9);
      assertEquals("Thu Oct 10 00:00:00 GMT 9", date1.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        DateUtils.ceiling(object0, 1001);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not find ceiling of for type: class java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockGregorianCalendar0, 1901);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 1901 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000037, 280000037, 280000037, 280000037, 280000037);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Date) mockDate0, 280000037);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4418));
      // Undeclared exception!
      try { 
        DateUtils.round((Date) mockDate0, (-4418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -4418 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 13);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 1001);
      Date date1 = DateUtils.ceiling((Object) date0, 1001);
      assertEquals("Sat Feb 01 00:00:00 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Date) null, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Calendar) null, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, 2, 1001, 2, 6);
      Iterator<?> iterator0 = DateUtils.iterator((Object) mockDate0, 1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2, 3, 6, 4, 2);
      Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 2);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 5);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2, 3, 6, 4, 2);
      Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 6);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 9, 9, 9);
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 9);
      // Undeclared exception!
      try { 
        DateUtils.iterator(date0, (-1412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style -1412 is not valid.
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, 2, 1);
      Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 3);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) calendar0, 1594);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style 1594 is not valid.
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) dateUtils0, 2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not iterate based on org.apache.commons.lang3.time.DateUtils@1
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Calendar) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 2);
      assertEquals(356L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 3 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 6);
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 7 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 9 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 10 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 11);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 12);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 13);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 14);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      boolean boolean0 = DateUtils.truncatedEquals((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1, 1);
      assertFalse(boolean0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      boolean boolean0 = DateUtils.truncatedEquals(calendar0, calendar0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = DateUtils.addHours(date0, (-1));
      boolean boolean0 = DateUtils.truncatedEquals(date0, date1, 2);
      assertEquals("Thu Oct 04 23:00:00 GMT 1582", date1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(4, 4, 4);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar1, mockGregorianCalendar0);
      dateUtils_DateIterator0.next();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62030448000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=125,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }
}
