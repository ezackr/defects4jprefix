/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 13:38:46 GMT 2024
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot clone Cloneable typD", (String) null, 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(",E{,,C7(O:");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = StringUtils.length("TimeToLive of ");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cannot p/d a negative amouBt: ");
      StringUtils.replaceEach("Cannot p/d a negative amouBt: ", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "H*`sE$Es");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" in !an arF4rayX of ");
      assertNotNull(stringArray0);
      
      StringUtils.replaceEach(" in !an arF4rayX of ", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("a", "a");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.leftPad("11", 4110, '\u0148');
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, 4110);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("3mZ!-QI y}(rk", "3mZ!-QI y}(rk");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.center("E{+H>t", 1);
      assertEquals("E{+H>t", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("8MIgP4Djl1b?H<5", "P%PlI*>\"Px8", (String) null);
      assertEquals("8MIgP4Djl1b?H<5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1.5", '5');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.leftPad("7UeHgw", 16);
      assertEquals("          7UeHgw", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.strip(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("hG=dDh7i", "hG=dDh7i", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Wsx not be ull", "Wsx not be ull", 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("|%&ZNXnX:vA:(TEnOy", "|%&ZNXnX:vA:(TEnOy");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("@:,:IKA2ek]6w8", 'A');
      assertEquals("2ek]6w8A@:,:IK", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("rEr", (String) null, 29);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("MA/I", "MA/I");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("^>(H5", "^>(H5");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("java.vm.vendor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.trimToNull("bTimToLive of ");
      assertNotNull(string0);
      assertEquals("bTimToLive of", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("<}?=v7}\"z,");
      assertEquals("<}?=v7}\"z,", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripToNull("5M/}");
      assertNotNull(string0);
      assertEquals("5M/}", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("(5<qzYSJQnMo2_");
      assertEquals("(5<qzYSJQnMo2_", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.strip("H*`sE$Es", "mK.#%7");
      assertEquals("H*`sE$Es", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripStart("f*T", "");
      assertEquals("f*T", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripStart("LnZZ`#", "LnZZ`#");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, " ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.stripEnd("_v)4=PYT2~C,z9]A}H", "");
      assertEquals("_v)4=PYT2~C,z9]A}H", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = StringUtils.stripEnd("gdxSFj'q8h2I|ZKZ]", "gdxSFj'q8h2I|ZKZ]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "bb", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "->lf?z1% ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("B+e(#4.3O]", "B+e(#4.3O]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, " a ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("Mac OS X", '=');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '7');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.spec'&U|s|:{ibd/Tr*aIllegalAccessException occurred during 1.6 backompat codefile.separatorIllegalAccessException occurred during 1.6 backompat codefile.separatorIllegalAccessException occurred during 1.6 backompat codefile.separatorIllegalAccessException occurred during 1.6 backompat codefile.separatorfile.separatorjava.spec'&U|s|:{ibd/Tr*aIllegalAccessException occurred during 1.6 backompat codefile.separatorIllegalAccessException occurred during 1.6 backompat codefile.separatorIllegalAccessException occurred during 1.6 backompat codefile.separatorIllegalAccessException occurred during 1.6 backompat codefile.separatorfile.separator", '#', 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 'p', (-3020));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "#");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOf("The stripAccents(String) method is not supported until Java 1.6", "The stripAccents(String) method is not supported until Java 1.6");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf("[<S.oh$G@H", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "causeo a securityexception reading the system property '", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf("#o#m\"j", "#o#m\"j", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOf("7UeHgw", (String) null, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 3382);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("s=Hwp)", "s=Hwp)", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 1521);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3907);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "o)wc", 3907);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("8k>", "8k>", 3436);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, "LSXCg;JY>zej", 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("ile.separator", (String) null, (-3108));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("q<1O~zR@n/!c6[UIzF", "q<1O~zR@n/!c6[UIzF", (-58));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("q<1O~zR@n/!c6[UIzF", "q<1O~zR@n/!c6[UIzF", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(";qX\"-", "HP-UX", (-1194));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("Yn09OiU1>s", 'Z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 't');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(".", '^', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '$', 1342);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "ces5");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("`2i>.~&", "`2i>.~&");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("C;o~|W.V'qlW*S6@ruG", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "file.separator", 148);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("U", "\"tL26PgAY!dSpn", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null, (-1885));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "|8xL");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase(" ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Bw<'O?", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("7UeHgw", (String) null, 65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase(" vs ", "9,?tPYkbWt_IH22");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 4133, 'A');
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(string0, "h5l)KJ", 4133);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("7UeHgw", 'w');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, '_');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("file.hp-uxator", ':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "ps=Bc '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("3mZ!-QI}(rk", "|8xL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("SecurityException occurred during 1.6 backcompat code", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(";+NGq", ";+NGq");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.leftPad("1.", 4096, '\u011C');
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, "1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Mac OS X", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("8", "\u0093\u00938");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "1.2", "Da=]M!bLK0%16U");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "7UeHgw", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = StringUtils.indexOfAny((CharSequence) "Vh=", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "NFD");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "gj", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "1.5", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "cjava.lang.Object@27d9f439cIne0n]:cjava.lang.Object@27d9f439cIne0n]:c", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", " ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "+'Hzp.uJ6:)UP", "V}1&2lW,Kv<:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "8", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[4];
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) stringArray0[1], charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "1.5", "1.5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "<#[OOjOz", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "HP-UX", "file.separator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("B+e(#4.3O]", "B+e(#4.3O]");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Array and element cannot both be nullArray and element cannot both be null", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("java.vm.specification.name", "5M/}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "P1VKxA(&=A='<@]7\"", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Cannot pad a negative amount: ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "SecurityException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("SecurityException occurred during 1.6 backcompat code", "SecurityException occurred during 1.6 backcompat code");
      String string0 = StringUtils.join((Object[]) stringArray0, "SecurityException occurred during 1.6 backcompat code");
      assertNotNull(string0);
      
      StringUtils.containsOnly((CharSequence) string0, (String) null);
      assertEquals(54, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "O r2 ol=r|Uso'Kj", "t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "7Do/sM- /4W$";
      boolean boolean0 = StringUtils.containsNone((CharSequence) stringArray0[1], (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is 7", "S|L\"KGyhKo9Ly{f3/uX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "IllegalAccessException]ocaurred during 1|6 backcompat code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "O r2 ol=r|Uso'Kj", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[ve", ".");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("Vh=", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "}B[";
      int int0 = StringUtils.indexOfAny("<#[Ojz", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<#[Ojz";
      stringArray0[1] = "<#[Ojz";
      int int0 = StringUtils.indexOfAny("<#[Ojz", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.lastIndexOfAny(stringArray0[2], stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("ull");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("io", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("8hcP(D+g@DEZXAX|F", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Z";
      int int0 = StringUtils.lastIndexOfAny("Z", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring(" ", 2);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-2094));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring("R", (-6));
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substring("8", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1, 2147483645);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substring("H", 127, 127);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substring("y;nV'DgO6![}VK", (-832), (-832));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.left(" is less than 0: ", 'm');
      assertNotNull(string0);
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.left("5M/}", (-2072));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.left("asw*+h6 i0q/kw", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.right("a]B7phor.^ZHry!gEc.", 20);
      assertEquals("a]B7phor.^ZHry!gEc.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-2848));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.right("SecuritException occurred durng[1.6 backcompat code", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.right("p`6Rt~Z}oAx0ceg", 3);
      assertNotNull(string0);
      assertEquals("ceg", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.mid("+L ", '\u0087', (-3145));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 21, 48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.mid("Search and Replace array lengths don't match: ", (-1192), 55296);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.mid("Index: ", 801, 801);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.mid("\u00908", 3, 3);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.mid("ldh# \"UcwYoF'lp=+", 1, 4);
      assertEquals("dh# ", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", "<s-iiC");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBefore("j*e Fi*<w^Q;XYng!Ja", (String) null);
      assertEquals("j*e Fi*<w^Q;XYng!Ja", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBefore("W@V", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBefore("(P", "(P");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringAfter("S", "S");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfter("-$<M0~@&p>R:+&+<`D\"2n:>EmZ|ACN4", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringAfter("<#[OOjOz<#[OHjOz:}hb~", "^>(H5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Index#: ", "NFD");
      assertEquals("Index#: ", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("5M/}", "");
      assertEquals("5M/}", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("$Uh~8h", "$Uh~8h");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" fo eviLoTemiT", "TimeToLive of ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("java.class.version", "io");
      assertEquals("n", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("'6~bu+%:NM-", "'6~bu+%:NM-");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$4+1PGU;", (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.substringBetween("9i.h@?7tA<5GG%", ".gs!", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" :n an arra0y o% ", "argumentexcep", " :n an arra0y o% ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.substringBetween("java.io.tmpdir", "java.io.tmpdir", "java.io.tmpdir");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "#", "KwSqxcVW$");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("w$_!d7@1H", (String) null, "}");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("?!sdiW;o.~<", "QQ", "w$_!d7@1H");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("KwSqxcVW$", "IllegalAccessExcept", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "` 0bCNbZr 0),E.aG", "` 0bCNbZr 0),E.aG");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("ZQMZQM", "ZQM", "ZQMZQM");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" in an arraSy of ", " ", " ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "H*`sE$Es");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("k6[I\"!`R!2;~Y6Kx^", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", '", " ");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '5');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", ' ');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("5", '5');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("5M/}", '5');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" OMo[8");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("InvocationTargetExcetion occurred duing 1.6 backcompat code", " ");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("|", "|");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("yO^-RtC'O", "org.apache.commons.lang3.StringUtils");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("(u$qK^RYxf#O/g!WU");
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("'|ekQsH");
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '~');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '~', (-3300), 127);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = StringUtils.join(objectArray0, 'c');
      assertEquals("ccccc", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "e^P4uXv^", 91, 91);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'J');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      ListIterator<Object> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, 'Q');
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      stack0.add((Object) null);
      ListIterator<Object> listIterator0 = stack0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Q');
      assertTrue(listIterator0.hasPrevious());
      assertEquals("Q", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, 'H');
      assertEquals("AUTOSELECT_FILTERINGHEXTENDED_FILTERINGHIGNORE_EXTENDED_RANGESHMAP_EXTENDED_RANGESHREJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "=M:'`.UJ@K#-U~A");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      ListIterator<Object> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, "HP-UX");
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      stack0.add((Object) null);
      ListIterator<Object> listIterator0 = stack0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "HP-UX");
      assertTrue(listIterator0.hasPrevious());
      assertEquals("HP-UX", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("AUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(stack0);
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, '>');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '\\');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedHashSet0);
      String string0 = StringUtils.join((Iterable<?>) treeSet0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, " in an array of ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("TimeToLive of ");
      assertEquals("TimeToLiveof", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeStart("#JLVgh)U;G*-0", (String) null);
      assertNotNull(string0);
      assertEquals("#JLVgh)U;G*-0", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeStart("1ZJ:o`02", "1ZJ:o`02");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeStart("java.vm.vendor", "hb )\"l}~hb )\"l}~");
      assertEquals("java.vm.vendor", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("5M/}", (String) null);
      assertNotNull(string0);
      assertEquals("5M/}", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("t", "D}as@O<!FQMkVTV*$_");
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeEnd(" im a~rray of  inWan~rray of ", "H=;");
      assertEquals(" im a~rray of  inWan~rray of ", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.removeEnd("hb )\"l}~", "");
      assertEquals("hb )\"l}~", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.repeat("o)77Q,", "o)77Q,", (int) 'l');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(".)tXzKdn ", (String) null);
      assertEquals(".)tXzKdn ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("t", "KZwA@dFg3%ons<");
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove("s", "s");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.remove("S", (String) null);
      assertNotNull(string0);
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("", '(');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.remove("H{|)IRh`yd(!\"t&+ygS", '0');
      assertEquals("H{|)IRh`yd(!\"t&+ygS", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.remove("b2", 'b');
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replace(" <t", (String) null, (String) null, (-1));
      assertNotNull(string0);
      assertEquals(" <t", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replace("7uvwi_", "7uvwi_", "7uvwi_", 0);
      assertEquals("7uvwi_", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replace("5zu", "The character must not be null", "normalizerityException occurred during 1.6 backcompat code", 9);
      assertEquals("5zu", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replace("F", "F", "F", (int) 'S');
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7UeHgw", "7UeHgw", "7UeHgw");
      assertEquals("7UeHgw", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("bf?vcs", (String[]) null, (String[]) null);
      assertEquals("bf?vcs", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("java.text.Normalizer", stringArray0, stringArray0);
      assertEquals("java.text.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Index: ");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("Index: ", stringArray0, (String[]) null);
      assertEquals(2, stringArray0.length);
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+");
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEach("+", stringArray0, stringArray1);
      assertEquals("+", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "9";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("k,'>j8L$k,'>j8L$");
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("The Character must not be null", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("java.vm.vendor");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("TimeToLive of ", stringArray0, stringArray0);
      assertEquals("TimeToLive of ", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.replaceEach("^swmg0}", stringArray0, stringArray0);
      assertEquals("^swmg0}", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" in !an arF4rayX of ");
      String[] stringArray1 = new String[4];
      stringArray1[0] = " in !an arF4rayX of ";
      String string0 = StringUtils.replaceEach(" in !an arF4rayX of ", stringArray0, stringArray1);
      assertEquals("  in !an arF4rayX of  !an arF4rayX of ", string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars("ii", '\u0080', '\u0080');
      assertNotNull(string0);
      assertEquals("ii", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '@', '@');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.replaceChars("1.5", "7UeHgw", "1.5");
      assertEquals("1.5", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.replaceChars("O r2 ol=r|Uso'Kj", "", (String) null);
      assertNotNull(string0);
      assertEquals("O r2 ol=r|Uso'Kj", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.replaceChars("O r2 ol=r|Uso'Kj", "rEtr", (String) null);
      assertEquals("O 2 ol=|Uso'Kj", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.replaceChars(",E{,,C7(O:", "InvocationTargetException occurred during 1.6 backcompat codeInvocationTargetException occurred during 1.6 backcompat code", "InvocationTargetException occurred during 1.6 backcompat codeInvocationTargetException occurred during 1.6 backcompat code");
      assertEquals(",E{,,C7(O:", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.overlay("SecurityException occurred during 1.6 backcompat code", "normalize", 4, (-3108));
      assertEquals("normalizerityException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 4, 4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.overlay("", (String) null, 4, (-2026));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.overlay("`2i>.~&", "`2i>.~&", (-56), (-56));
      assertEquals("`2i>.~&`2i>.~&", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.center("t", 2921, (String) null);
      String string1 = StringUtils.overlay("rEtr", string0, 2921, 2921);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chomp("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.chomp("QYx(", (String) null);
      assertNotNull(string0);
      assertEquals("QYx(", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.chomp("!#", "A{sf1Sk0K<ztPnC-3");
      assertEquals("!#", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chomp(" Length: ", " Length: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.chop("QQ");
      assertEquals("Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.repeat("java.compiler", "w.asw*+h6 i0ql/kw!", (-1967));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.repeat("G", 1);
      assertEquals("G", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.repeat("", 90);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.repeat("G", 2661);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.repeat("S", 8198);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.repeat("'}", 16);
      assertEquals("'}'}'}'}'}'}'}'}'}'}'}'}'}'}'}'}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "I", 3057);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.repeat("&X[5C", (String) null, 59);
      assertEquals("&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C&X[5C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, Integer.MAX_VALUE, '\'');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad("file.encoding", 2, 'h');
      assertEquals("file.encoding", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad("n", 8205);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 45, "evy");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.rightPad("WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$", (int) '7', "WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$");
      assertEquals("WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$WS< tUJNf}&-[{IIO0$", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.center("7Do/sM- /4W$+,4;8]HT\"X+,4;8]HT\"X", 45, "7UeHgw");
      assertNotNull(string0);
      assertEquals("7UeHg7Do/sM- /4W$+,4;8]HT\"X+,4;8]HT\"X7UeHgw", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.rightPad("fOT`axg4eYfOT`axg4eY", (int) '(', "fOT`axg4eYfOT`axg4eY");
      assertEquals("fOT`axg4eYfOT`axg4eYfOT`axg4eYfOT`ax", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 3, 'C');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.leftPad("The Character must not be null", (-1), 'C');
      assertEquals("The Character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad("dSg7ea(", 56319, 'W');
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 48, "TimeToLivedt of ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.leftPad(" 2!-`y>A_BTK", 4, " 2!-`y>A_BTK");
      assertEquals(" 2!-`y>A_BTK", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.leftPad("D\"y\"}@Y^]+FWUXi", 18, "...");
      assertEquals("...D\"y\"}@Y^]+FWUXi", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.leftPad("I6p`0@;1ttD8XX9?", 1560, "I6p`0@;1ttD8XX9?");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "I6p`0@;1ttD8XX9?";
      stringArray0[1] = "I6p`0@;1ttD8XX9?";
      stringArray0[2] = string0;
      stringArray0[3] = "I6p`0@;1ttD8XX9?";
      stringArray0[4] = "I6p`0@;1ttD8XX9?";
      stringArray0[5] = "I6p`0@;1ttD8XX9?";
      stringArray0[6] = "I6p`0@;1ttD8XX9?";
      stringArray0[7] = "I6p`0@;1ttD8XX9?";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("I6p`0@;1ttD8XX9?", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 20);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.center("os.arch", (-3125));
      assertEquals("os.arch", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.center("Sm]7Q9", 32);
      assertEquals("             Sm]7Q9             ", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-474), "PCW97:GC");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.center("7Do/sM- /4W$+,4;8]HT\"X+,4;8]HT\"X", 0, "char");
      assertEquals("7Do/sM- /4W$+,4;8]HT\"X+,4;8]HT\"X", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.center("a]B7phor.^ZHry!gEc.", 3, "a]B7phor.^ZHry!gEc.");
      assertEquals("a]B7phor.^ZHry!gEc.", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.upperCase(".d/hI5U");
      assertEquals(".D/HI5U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = StringUtils.upperCase("Minimum abbreviation width with offset is 7", locale0);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS 7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.lowerCase(".");
      assertEquals(".", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      String string0 = StringUtils.lowerCase("mfpz`6", locale0);
      assertEquals("mfpz`6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.capitalize("A{sf1Sk0K<ztPnC-3");
      assertNotNull(string0);
      assertEquals("A{sf1Sk0K<ztPnC-3", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("TimeToLive of ");
      assertEquals("timeToLive of ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.uncapitalize(stringArray0[0]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.swapCase("2ek]6w8A@:,:IK");
      assertEquals("2EK]6W8a@:,:ik", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = StringUtils.countMatches("7UeHgw", "7UeHgw");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = StringUtils.countMatches("b", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("user.dir");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("java.endorsed.dirs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("TimeToLive of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("9,?tPYkbWt_IH22");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("7UeHgw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("SecurityException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.center("t", 2921, (String) null);
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("5M/}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("5zu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("7UeHgw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" in an array of ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" LK5!EMEwYBe%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("DUp^n`W:D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("dh# ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.defaultString("5RUb{X=5^");
      assertEquals("5RUb{X=5^", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.defaultString("java.vm.vend<r", "gs must not be ");
      assertEquals("java.vm.vend<r", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 1298, '-');
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) string0, (CharSequence) string0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.reverse("TimeToLive of ");
      assertNotNull(string0);
      assertEquals(" fo eviLoTemiT", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '@');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not be null", 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("-ih[N}p'4", (int) '|', (-1472));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.abbreviate("7UeHgw", 16, 16);
      assertEquals("7UeHgw", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.abbreviate("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1.5", Integer.MAX_VALUE, 13);
      assertEquals("...HHHHHHH1.5", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Strings must not be null", 13, 13);
      assertEquals("...not be ...", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("a]B7phor.^ZHry!gEc.", "a]B7phor.^ZHry!gEc.", 20);
      assertEquals("a]B7phor.^ZHry!gEc.", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("<#[OOjOz", "", 0);
      assertEquals("<#[OOjOz", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.leftPad("1", 4110, '\u013F');
      String string1 = StringUtils.abbreviateMiddle(string0, string0, '\u013F');
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("illegalfile.shp-uxtorn occurred during 1.6 bac>1kft7hqzode", " vs ", 8);
      assertEquals("il vs de", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.difference("BH", (String) null);
      assertNotNull(string0);
      assertEquals("BH", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.difference("w", "w");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.difference("SecurityException occurred during 1.6 backcompat code", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "b");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "^4&V", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", 2005, "g<$<4v!-u|8xLm");
      int int0 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) string0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "laccessexcepti", (CharSequence) "    ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "I6p`0@;1ttD8XX9?";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SecurityException occurred during 1.6 backcompat code", "SecurityException occurred during 1.6 backcompat code");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = StringUtils.stripAccents("I6p`0@;1ttD8XX9?");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "I6p`0@;1ttD8XX9?";
      stringArray0[1] = "I6p`0@;1ttD8XX9?";
      stringArray0[2] = string0;
      stringArray0[3] = "I6p`0@;1ttD8XX9?";
      stringArray0[4] = "I6p`0@;1ttD8XX9?";
      stringArray0[5] = "I6p`0@;1ttD8XX9?";
      stringArray0[6] = "I6p`0@;1ttD8XX9?";
      stringArray0[7] = "I6p`0@;1ttD8XX9?";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("I6p`0@;1ttD8XX9?", string1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The stripAccents(String) method is not supported until Java 1.6");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("SecurityException occurred during 1.6 backcompat code", "normalizerityException occurred during 1.6 backcompat code");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", " vs ");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("SecurityException occurred during 1.6 backcompat code", "");
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("java.vm.vend<rjava.vm.vend<r", "java.vm.vend<r");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("Bw<'O?", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "$nQ8rk\"pQq9Nq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("SecurityException occurred during 1.6 backcompat code", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7UeHgw";
      boolean boolean0 = StringUtils.startsWithAny("7UeHgw", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("U^3]){,Ljz, @KigPJ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }
}
