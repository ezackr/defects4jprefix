/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 21:49:21 GMT 2024
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Null 'paint' argument.";
      stringArray0[1] = "Null 'paint' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'paint' argument.", stringArray0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(422.472F, 59, 0.8F, 59);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(500);
      // Undeclared exception!
      try { 
        symbolAxis0.draw(graphics2D0, 500, rectangle2D_Float0, rectangle2D_Float0, rectangleEdge0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelURL("z#^jy>Mo&d");
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis1.isAxisLineVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isVisible());
      assertFalse(boolean0);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setAxisLineVisible(false);
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertFalse(dateAxis0.isAxisLineVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertNotSame(dateAxis1, dateAxis0);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getLabelURL();
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("z");
      dateAxis0.getLabelToolTip();
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isVisible());
      
      dateAxis0.setVisible(true);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel("Q@7");
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'end' argument.");
      logarithmicAxis0.setLabel("34ob$|u*");
      assertEquals("34ob$|u*", logarithmicAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
      cyclicNumberAxis0.setLabel("X Value");
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel((String) null);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Color color0 = Color.YELLOW;
      dateAxis0.setLabelPaint(color0);
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isTickMarksVisible());
      assertFalse(boolean0);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertTrue(dateAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ST,E,ZpBy%y");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      dateAxis0.setLabelInsets(rectangleInsets0);
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertFalse(boolean0);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertTrue(dateAxis1.isAxisLineVisible());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertFalse(boolean0);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(true);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.isTickMarksVisible());
      
      numberAxis0.setTickMarksVisible(true);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BasicStroke basicStroke0 = (BasicStroke)PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
      dateAxis0.setTickMarkStroke(basicStroke0);
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis1.isAxisLineVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      // Undeclared exception!
      try { 
        numberAxis3D0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CompassPlot compassPlot0 = new CompassPlot();
      dateAxis0.removeChangeListener(compassPlot0);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
      assertTrue(boolean0);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(87, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("u_R|{d");
      JFreeChart jFreeChart0 = new JFreeChart("u_R|{d", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeCategoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(15);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      AxisSpace axisSpace0 = new AxisSpace();
      subCategoryAxis0.reserveSpace(graphics2D0, combinedRangeCategoryPlot0, rectangle0, rectangleEdge0, axisSpace0);
      assertEquals(24.1328125, axisSpace0.getRight(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(0, bufferedImage0.getMinX());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      NumberAxis numberAxis0 = new NumberAxis("");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      float[] floatArray0 = new float[7];
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(490.153487838, axisState0.getCursor(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-35.91015624), axisState0.getCursor(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis(")");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
      JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 0.0F, 500, 500);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 500.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SFdE:LLhr");
      Rectangle rectangle0 = new Rectangle(0, (-1789569704));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(54);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 999, rectangle0, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(0);
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 0.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 0.0F, rectangle2D_Double0, rectangle2D_Double0, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isVisible());
      assertTrue(boolean0);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      dateAxis1.setVisible(false);
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertFalse(dateAxis1.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertFalse(boolean0);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      
      dateAxis1.setLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      dateAxis1.setLabelAngle(0.05);
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertEquals(0.05, dateAxis1.getLabelAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(boolean0);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      
      dateAxis1.setAxisLinePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      dateAxis1.setTickLabelsVisible(false);
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertFalse(dateAxis1.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Font font0 = Font.decode("$~?KeX;");
      dateAxis0.setTickLabelFont(font0);
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      
      dateAxis1.setTickLabelPaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      
      dateAxis1.setTickLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarksVisible(false);
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertFalse(dateAxis0.isTickMarksVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      dateAxis1.setTickMarkInsideLength(500.0F);
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertEquals(500.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      dateAxis1.setTickMarkOutsideLength(0.8F);
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertEquals(0.8F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      
      dateAxis1.setTickMarkPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      dateAxis1.setFixedDimension((-425.9));
      boolean boolean0 = dateAxis1.equals(dateAxis0);
      assertEquals((-425.9), dateAxis1.getFixedDimension(), 0.01);
      assertFalse(boolean0);
  }
}
