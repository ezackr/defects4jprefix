/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 22:15:44 GMT 2024
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("orj.apache.commons.cli2.va,idation.FileValidator", "orj.apache.commons.cli2.va,idation.FileValidator", 2, 2, '3', '3', (Validator) null, "orj.apache.commons.cli2.va,idation.FileValidator", linkedList0, 2);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals('3', argumentImpl0.getSubsequentSeparator());
      assertEquals('3', argumentImpl0.getInitialSeparator());
      assertEquals("orj.apache.commons.cli2.va,idation.FileValidator", argumentImpl0.getConsumeRemaining());
      assertEquals(2, argumentImpl0.getMaximum());
      assertEquals("orj.apache.commons.cli2.va,idation.FileValidator", argumentImpl0.getPreferredName());
      assertEquals(2, argumentImpl0.getMinimum());
      assertEquals("orj.apache.commons.cli2.va,idation.FileValidator", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'A', ';', dateValidator0, "", (List) null, (-3157));
      char char0 = argumentImpl0.getInitialSeparator();
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals(';', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals(0, argumentImpl0.getMaximum());
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals('A', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("+", "org.apache.commons.cli2.validation.UrlValidator", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, "org.apache.commons.cli2.validation.UrlValidator", (List) null, Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, argumentImpl0.getMinimum());
      assertEquals(Integer.MAX_VALUE, argumentImpl0.getMaximum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
      boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "@'r--d,B;");
      assertTrue(boolean0);
      assertEquals("+", argumentImpl0.getPreferredName());
      assertEquals('Q', argumentImpl0.getInitialSeparator());
      assertEquals('Q', argumentImpl0.getSubsequentSeparator());
      assertEquals(Integer.MAX_VALUE, sourceDestArgument0.getMinimum());
      assertEquals(Integer.MAX_VALUE, sourceDestArgument0.getMaximum());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("org.apache.commons.cli2.validation.UrlValidator", argumentImpl0.getDescription());
      assertEquals("org.apache.commons.cli2.validation.UrlValidator", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "Command.preferredName.too.short", 247, 247, 'Y', '6', dateValidator0, "", (List) null, 91);
      assertEquals(247, argumentImpl0.getMaximum());
      assertEquals(247, argumentImpl0.getMinimum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', "-", (List) null);
      char char0 = sourceDestArgument0.getSubsequentSeparator();
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("-", sourceDestArgument0.getConsumeRemaining());
      assertEquals("Command.preferredName.too.short", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('Y', sourceDestArgument0.getInitialSeparator());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-", "-", (-1145), (-1145), 'Z', 'Q', numberValidator0, "-", linkedList0, 'Z');
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      sourceDestArgument0.helpLines((-1145), linkedHashSet0, (Comparator) null);
      assertEquals("-", argumentImpl0.getDescription());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('Q', argumentImpl0.getSubsequentSeparator());
      assertEquals('Z', argumentImpl0.getInitialSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("-", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("VO;h9!Ubi*B", "DISPLAY_GROUP_EXPANDED", (-1442), (-1442), 'N', '(', (Validator) null, "UB", linkedList0, (-1442));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1442
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "Command.preferredName.too.short", 247, 247, 'Y', '6', dateValidator0, "", (List) null, 91);
      String string0 = argumentImpl0.getConsumeRemaining();
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("", string0);
      assertEquals("Command.preferredName.too.short", argumentImpl0.getDescription());
      assertEquals('Y', argumentImpl0.getInitialSeparator());
      assertEquals('6', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("NumberValidator.number.OutOfRange", "qM3", 679, 679, 'T', 'U', urlValidator0, "`a`KsY!8?_uN:{94>", list0, 679);
      argumentImpl0.getValidator();
      assertEquals("`a`KsY!8?_uN:{94>", argumentImpl0.getConsumeRemaining());
      assertEquals('U', argumentImpl0.getSubsequentSeparator());
      assertEquals("qM3", argumentImpl0.getDescription());
      assertEquals("NumberValidator.number.OutOfRange", argumentImpl0.getPreferredName());
      assertEquals('T', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      NumberValidator numberValidator0 = new NumberValidator(numberFormat0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("\"d^(k#", "\"d^(k#", 0, (-2219), 'Z', 'Z', numberValidator0, "Vh=", linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("arg", "arg", (-2449), (-1), 's', 'e', dateValidator0, "DateValidator.date.OutOfRange", linkedList0, (-2449));
      Object object0 = new Object();
      linkedList0.addFirst(object0);
      SourceDestArgument sourceDestArgument0 = null;
      try {
        sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'e', 's', "--", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "f{LO[+G`'|");
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl((String) null, (String) null, 1405, 1405, '%', '>', fileValidator0, (String) null, linkedList0, 1405);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("--", "}O", (-2148), 761, '_', '\u0000', fileValidator0, "Switch.no.disabledPrefix", linkedList0, 0);
      assertEquals("}O", argumentImpl0.getDescription());
      assertEquals((-2148), argumentImpl0.getMinimum());
      assertEquals(761, argumentImpl0.getMaximum());
      assertEquals('\u0000', argumentImpl0.getSubsequentSeparator());
      assertEquals("Switch.no.disabledPrefix", argumentImpl0.getConsumeRemaining());
      assertEquals('_', argumentImpl0.getInitialSeparator());
      assertEquals("--", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "G", 2, 2, 'Y', '^', (Validator) null, "orj.apache.commons.cli2.va,idation.FileValidator", linkedList0, 2);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("orj.apache.commons.cli2.va,idation.FileValidator");
      linkedList1.add("DL+5~ M!IKE`?o");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals('^', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "G", 2, 2, 'Y', '^', (Validator) null, "orj.apache.commons.cli2.va,idation.FileValidator", linkedList0, 2);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("mb#J+u");
      linkedList1.add("orj.apache.commons.cli2.va,idation.FileValidator");
      linkedList1.add("DL+5~ M!IKE`?o");
      linkedList1.add("'f5mwy]/<yZu");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertTrue(linkedList1.contains("mb#J+u"));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.validation.FileValidator", "Argument.too.few.defaults", 5974, 5974, '3', '-', (Validator) null, "Argument.too.few.defaults", linkedList0, 0);
      List list0 = argumentImpl0.getDefaultValues();
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '_', '9', "org.apache.commons.cli2.resource.ResourceHelper", list0);
      GroupImpl groupImpl0 = new GroupImpl(list0, "w'(5:(qN@dI+t#", "--", (-1303), 3);
      Boolean boolean0 = Boolean.FALSE;
      Switch switch0 = new Switch("org.apache.commons.cli2.validation.FileValidator", "Argument.too.few.defaults", "org.apache.commons.cli2.resource.ResourceHelper", set0, "\b", true, sourceDestArgument0, groupImpl0, 0, boolean0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("org.apache.commons.cli2.validation.FileValidator");
      ListIterator<String> listIterator0 = linkedList2.listIterator();
      sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("org.apache.commons.cli2.resource.ResourceHelper", sourceDestArgument0.getConsumeRemaining());
      assertEquals('9', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("Argument.too.few.defaults", argumentImpl0.getDescription());
      assertTrue(listIterator0.hasNext());
      assertEquals('_', sourceDestArgument0.getInitialSeparator());
      assertEquals("org.apache.commons.cli2.validation.FileValidator", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.validation.FileValidator", "org.apache.commons.cli2.validation.FileValidator", '0', '0', '0', '3', (Validator) null, "org.apache.commons.cli2.validation.FileValidator", linkedList0, '0');
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("org.apache.commons.cli2.validation.FileValidator");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      sourceDestArgument0.processValues(writeableCommandLineImpl0, listIterator0, argumentImpl0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "orj.apache.commons.cli2.va,idation.FileValidator", 2, 2, '3', '3', (Validator) null, "orj.apache.commons.cli2.va,idation.FileValidator", linkedList0, 2);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("--");
      linkedList1.add("1C4WEiu]J3zT");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      try { 
        argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected value \"zT\" found while processing   
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "]J}30hW3fB5Mo2>}jzY", 1038, 1038, 'w', 'w', (Validator) null, "]J}30hW3fB5Mo2>}jzY", linkedList0, 1038);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '8', '\u0000', "", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) sourceDestArgument0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("%&C<hpXS-e/ExQLDe0=", "%&C<hpXS-e/ExQLDe0=", 0, 0, 'E', 'E', (Validator) null, "%&C<hpXS-e/ExQLDe0=", list0, 93);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals("%&C<hpXS-e/ExQLDe0=", argumentImpl0.getDescription());
      assertEquals("%&C<hpXS-e/ExQLDe0=", argumentImpl0.getConsumeRemaining());
      assertEquals("%&C<hpXS-e/ExQLDe0=", argumentImpl0.getPreferredName());
      assertEquals('E', argumentImpl0.getSubsequentSeparator());
      assertEquals('E', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("F+UGzQGr]f3", "F+UGzQGr]f3", 0, 0, 'j', 'i', fileValidator0, "F+UGzQGr]f3", linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("F+UGzQGr]f3", argumentImpl0.getDescription());
      assertEquals("F+UGzQGr]f3", argumentImpl0.getConsumeRemaining());
      assertEquals('j', argumentImpl0.getInitialSeparator());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('i', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"a!U<\"#|o*(7LY", "", Integer.MAX_VALUE, Integer.MAX_VALUE, '9', '-', (Validator) null, "", list0, 41);
      String string0 = argumentImpl0.toString();
      assertEquals('9', argumentImpl0.getInitialSeparator());
      assertEquals('-', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("<\"a!U<\"#|o*(7LY1> <\"a!U<\"#|o*(7LY2> ...", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("VO;h9!Ubi*B", "DISPLAY_GROUP_EXPANDED", (-1442), (-1442), 'N', '(', (Validator) null, "UB", linkedList0, (-1442));
      String string0 = argumentImpl0.toString();
      assertEquals("DISPLAY_GROUP_EXPANDED", argumentImpl0.getDescription());
      assertEquals('N', argumentImpl0.getInitialSeparator());
      assertEquals("VO;h9!Ubi*B", argumentImpl0.getPreferredName());
      assertEquals("UB", argumentImpl0.getConsumeRemaining());
      assertEquals('(', argumentImpl0.getSubsequentSeparator());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.validation.FileValidator", "org.apache.commons.cli2.validation.FileValidator", '3', 5974, '3', '9', (Validator) null, "org.apache.commons.cli2.validation.FileValidator", linkedList0, '3');
      argumentImpl0.toString();
      assertEquals('9', argumentImpl0.getSubsequentSeparator());
      assertEquals('3', argumentImpl0.getInitialSeparator());
      assertEquals("org.apache.commons.cli2.validation.FileValidator", argumentImpl0.getPreferredName());
      assertEquals("org.apache.commons.cli2.validation.FileValidator", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("F+UGzGr]f3", "F+UGzGr]f3", 0, 85, 'i', 'i', fileValidator0, "DISPLAY_PROPERTY_OPTION", linkedList0, (-1543));
      StringBuffer stringBuffer0 = new StringBuffer(0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      argumentImpl0.appendUsage(stringBuffer0, linkedHashSet0, (Comparator) null);
      assertEquals(1102, stringBuffer0.length());
      assertEquals("F+UGzGr]f3", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.validation.FileValidator", "org.apache.commons.cli2.validation.FileValidator", 5941, 5941, '9', '#', (Validator) null, "$GMuQluqoa[9", linkedList0, 5941);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      String string0 = sourceDestArgument0.stripBoundaryQuotes("\"a\"");
      assertEquals('#', argumentImpl0.getSubsequentSeparator());
      assertEquals("org.apache.commons.cli2.validation.FileValidator", argumentImpl0.getDescription());
      assertEquals('9', argumentImpl0.getInitialSeparator());
      assertEquals("a", string0);
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("$GMuQluqoa[9", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("F+UGzGr]f3", "F+UGzGr]f3", 0, 0, 'j', 'i', fileValidator0, "F+UGzGr]f3", linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      String string0 = sourceDestArgument0.stripBoundaryQuotes("\"}O");
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("\"}O", string0);
      assertEquals("F+UGzGr]f3", argumentImpl0.getDescription());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals("F+UGzGr]f3", argumentImpl0.getConsumeRemaining());
      assertEquals('i', argumentImpl0.getSubsequentSeparator());
      assertEquals('j', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("a!U<\"#|o*(7LY", "a!U<\"#|o*(7LY", 0, 0, '5', '5', numberValidator0, "", linkedList0, 0);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals("a!U<\"#|o*(7LY", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("a!U<\"#|o*(7LY", argumentImpl0.getDescription());
      assertEquals('5', argumentImpl0.getInitialSeparator());
      assertEquals('5', argumentImpl0.getSubsequentSeparator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"}O", "", 19, 19, 'P', 'b', numberValidator0, "", linkedList0, 19);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals('b', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertTrue(boolean0);
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("\"}O", argumentImpl0.getPreferredName());
      assertEquals('P', argumentImpl0.getInitialSeparator());
  }
}
