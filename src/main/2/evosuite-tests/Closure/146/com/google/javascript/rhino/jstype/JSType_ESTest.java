/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:04:09 GMT 2024
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEmptyType());
      
      nullType0.getTypesUnderShallowEquality(nullType0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      boolean boolean0 = unionType0.isResolved();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.isStringValueType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isBooleanObjectType();
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ObjectType objectType0 = nullType0.dereference();
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
      assertTrue(objectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      nullType0.getJSDocInfo();
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      String string0 = nullType0.toDebugHashCodeString();
      assertFalse(nullType0.isResolved());
      assertEquals("{1}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isRegexpType();
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        nullType0.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isDateType();
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 1, 0);
      JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderEquality(nullType0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(jSType_TypePair0.typeB);
      JSType.TypePair jSType_TypePair1 = nullType0.getTypesUnderShallowInequality(jSType0);
      jSType0.getTypesUnderShallowInequality(jSType_TypePair1.typeB);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isStringObjectType();
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.matchesObjectContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isNumberObjectType();
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>(0, 1);
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertFalse(recordType0.isUnionType());
      
      nullType0.getTypesUnderShallowEquality(recordType0);
      assertFalse(recordType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.matchesStringContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = recordType0.getLeastSupertype(nullType0);
      assertFalse(jSType0.isEnumElementType());
      
      boolean boolean0 = nullType0.canTestForEqualityWith(jSType0);
      assertTrue(boolean0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      nullType0.unboxesTo();
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "EOL");
      boolean boolean0 = templateType0.isConstructor();
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isArrayType();
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isBooleanValueType();
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      boolean boolean0 = nullType0.isNumber();
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.isTemplateType();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      boolean boolean0 = indexedType0.isOrdinaryFunction();
      assertFalse(boolean0);
      assertFalse(indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      boolean boolean0 = nullType0.isNamedType();
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      nullType0.matchesInt32Context();
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Unknown class name", 1, 0);
      boolean boolean0 = namedType0.isInterface();
      assertFalse(namedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isInstanceType();
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      boolean boolean0 = indexedType0.isCheckedUnknownType();
      assertFalse(indexedType0.isResolved());
      assertFalse(boolean0);
      assertTrue(objectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(nullType0.isResolved());
      
      nullType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isTheObjectType();
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      assertFalse(parameterizedType0.isFunctionType());
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) parameterizedType0);
      assertTrue(jSType0.isEmptyType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.matchesUint32Context();
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = templateType0.isEnumType();
      assertFalse(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isNumberValueType();
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      nullType0.forgiveUnknownNames();
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      nullType0.clearResolved();
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "%/aj#?s[SJTD");
      boolean boolean0 = templateType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
      ((UnionType) jSType0).toString();
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      NoObjectType noObjectType1 = (NoObjectType)JSType.getGreatestSubtype((JSType) noObjectType0, (JSType) noObjectType0);
      assertFalse(noObjectType1.hasCachedValues());
      assertFalse(noObjectType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 1, 0);
      boolean boolean0 = JSType.isEquivalent(nullType0, namedType0);
      assertFalse(boolean0);
      assertFalse(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = JSType.isEquivalent(nullType0, (JSType) null);
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderInequality(nullType0);
      boolean boolean0 = JSType.isEquivalent((JSType) null, jSType_TypePair0.typeB);
      assertTrue(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      nullType0.equals(booleanType0);
      assertFalse(booleanType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      nullType0.findPropertyType("Not declared as a type name");
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "");
      enumElementType0.findPropertyType("Unknown class name");
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.canAssignTo(voidType0);
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.canAssignTo(allType0);
      assertTrue(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ObjectType objectType0 = booleanType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      AllType allType0 = new AllType((JSTypeRegistry) null);
      nullType0.getTypesUnderInequality(allType0);
      assertFalse(allType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(nullType0, "Not declared as a type name");
      nullType0.getTypesUnderInequality(noType0);
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
      nullType0.getTypesUnderInequality(namedType0);
      assertFalse(namedType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Named type with empty name component");
      nullType0.getTypesUnderEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(stringType0);
      stringType0.testForEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
      boolean boolean0 = nullType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(boolean0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Named type with empty name component");
      boolean boolean0 = nullType0.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      NullType nullType1 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType1.canTestForShallowEqualityWith(nullType0);
      assertFalse(boolean0);
      assertFalse(nullType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = recordType0.getLeastSupertype(unionType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = recordType0.getLeastSupertype(noType0);
      assertTrue(noType0.isEmptyType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      AllType allType0 = new AllType((JSTypeRegistry) null);
      JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      AllType allType0 = new AllType((JSTypeRegistry) null);
      nullType0.getTypesUnderShallowEquality(allType0);
      assertFalse(allType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 0);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) namedType0, (JSType) namedType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 1, 0);
      JSType jSType0 = nullType0.getGreatestSubtype(namedType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Unknown class name");
      nullType0.getGreatestSubtype(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, (JSType) null);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(arrowType0);
      JSType jSType1 = JSType.getGreatestSubtype(jSType0, (JSType) arrowType0);
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      JSType jSType1 = JSType.getGreatestSubtype((JSType) errorFunctionType0, jSType0);
      assertTrue(jSType1.isEmptyType());
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      NullType nullType1 = new NullType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        nullType1.getGreatestSubtype(nullType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        nullType0.getRestrictedTypeGivenToBooleanOutcome(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(nullType0);
      nullType0.getTypesUnderEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      nullType0.getTypesUnderEquality(numberType0);
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isVoidType());
      assertFalse(nullType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
      nullType0.getTypesUnderInequality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
      boolean boolean0 = namedType0.differsFrom(nullType0);
      assertTrue(boolean0);
      assertFalse(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.differsFrom(nullType0);
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Unknown class name", 1, 0);
      JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderEquality(nullType0);
      boolean boolean0 = nullType0.differsFrom(jSType_TypePair0.typeA);
      assertFalse(namedType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.differsFrom(voidType0);
      assertFalse(voidType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 0, 0);
      boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) namedType0);
      assertTrue(boolean0);
      assertFalse(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertFalse(errorFunctionType0.isResolved());
      
      EmptyScope emptyScope0 = new EmptyScope();
      errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      assertTrue(errorFunctionType0.isResolved());
  }
}
