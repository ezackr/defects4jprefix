/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:04:32 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.RenamePrototypes;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenamePrototypes_ESTest extends RenamePrototypes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(64);
      nodeArray0[0] = node0;
      Node node1 = new Node(64, nodeArray0);
      Normalize.parseAndNormalizeTestCode(compiler0, "RenamePrototypes$1", "RenamePrototypes$1");
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
      // Undeclared exception!
      try { 
        renamePrototypes0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.SyntacticScopeCreator$1", "com.google.javascript.jscomp.SyntacticScopeCreator$1");
      renamePrototypes0.process(node0, node0);
      assertFalse(node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "om.oogle.javscp3.jscomp.Syntatic.cope8uato$1", "om.oogle.javscp3.jscomp.Syntatic.cope8uato$1");
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
      renamePrototypes0.process(node0, node0);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node node0 = new Node(35);
      // Undeclared exception!
      try { 
        renamePrototypes0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node node0 = new Node(64, 64, 64);
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
      SyntheticAst syntheticAst0 = new SyntheticAst("prototype");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(33, node0, node1, node1);
      renamePrototypes0.process(node2, node1);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, variableMap0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "yfxP5v?X'", "yfxP5v?X'");
      Node node1 = new Node(35, node0);
      // Undeclared exception!
      try { 
        renamePrototypes0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node node0 = new Node(64, 64, 64);
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
      SyntheticAst syntheticAst0 = new SyntheticAst("prototype");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(33, node0, node1, node1);
      renamePrototypes0.process(node0, node2);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, variableMap0);
      Node node0 = Node.newNumber((double) 64, 27, 64);
      Node node1 = new Node(64, node0, node0, 8, 0);
      renamePrototypes0.process(node1, node1);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      VariableMap variableMap0 = VariableMap.fromMap(treeMap0);
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, variableMap0);
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.SyntacticScopeCreator$1", "com.google.javascript.jscomp.SyntacticScopeCreator$1");
      Node node1 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.SyntacticScopeCreator$1");
      node1.addChildToBack(node0);
      renamePrototypes0.process(node1, node1);
      assertEquals(39, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
      VariableMap variableMap0 = renamePrototypes0.getPropertyMap();
      assertNotNull(variableMap0);
  }
}
