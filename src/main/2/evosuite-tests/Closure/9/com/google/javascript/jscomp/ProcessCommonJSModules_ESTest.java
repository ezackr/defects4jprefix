/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:56:16 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module.exports");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module.exports", "module.exports");
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "f,W8ZN/2l");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ".`Fc:3/aKaO9/");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "./", ".`Fc:3/aKaO9/");
      node0.setSourceFileForTesting(".`Fc:3/aKaO9/");
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isAssignAdd());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName("./F%c:73/aKO9/", "./F%c:73/aKO9/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Malformed escape pair at index 3: ./F%c:73/aKO9/
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../", "../");
      assertEquals("module$..$..$", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("F%c:73/aKO9/", "F%c:73/aKO9/");
      assertEquals("module$F%c:73$aKO9$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "HkKc^$d2>X_");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "./");
      Node node1 = new Node(37, node0, node0, node0, 32, 4);
      processCommonJSModules0.process(node1, node1);
      assertFalse(node1.isTrue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "compiler.date");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT): [testcode]:1:0
         // [source unknown]
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "compiler.date");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "compiler.date", false);
      processCommonJSModules0.process(node0, node0);
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ".`Fc:3/aKaO9/");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "exports", "./");
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "HkKc^$d2>X_");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "./");
      processCommonJSModules0.process(node0, node0);
      node0.setSourceFileForTesting("compiler.date");
      processCommonJSModules0.process(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }
}
