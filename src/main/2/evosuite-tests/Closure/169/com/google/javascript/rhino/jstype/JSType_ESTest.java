/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:05:08 GMT 2024
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      jSType0.getTypesUnderShallowEquality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "Not declared as a type name", 0, (-92));
      JSType.safeResolve(jSType0, simpleErrorReporter0, noResolvedType0);
      assertFalse(noResolvedType0.isResolved());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      boolean boolean0 = errorFunctionType0.isStringValueType();
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.unboxesTo();
      assertFalse(noResolvedType0.isAllType());
      assertNull(jSType0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.getJSDocInfo();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      String string0 = parameterizedType0.toDebugHashCodeString();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
      assertEquals("{proxy:function (this:me, {10}): me}", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isRegexpType();
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType0 = unknownType0.collapseUnion();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isString();
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.isDateType();
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.toAnnotationString();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
      boolean boolean0 = enumElementType0.matchesObjectContext();
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      errorFunctionType0.getTypesUnderEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isNullable();
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      boolean boolean0 = instanceObjectType0.isNominalConstructor();
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isArrayType();
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      // Undeclared exception!
      try { 
        instanceObjectType0.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      boolean boolean0 = nullType0.isBooleanValueType();
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoType());
      assertFalse(boolean0);
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      boolean boolean0 = jSType0.canBeCalled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      jSType0.getDisplayName();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isNumber();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, errorFunctionType0);
      boolean boolean0 = parameterizedType0.isOrdinaryFunction();
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = errorFunctionType0.isNamedType();
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      jSType0.matchConstraint(noResolvedType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.matchesInt32Context();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
      boolean boolean0 = jSType0.hasProperty("Not declared as a constructor");
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isInstanceType();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isTheObjectType();
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.matchesUint32Context();
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isEnumType();
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isInvariant(numberType0);
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
      boolean boolean0 = jSType0.isNumberValueType();
      assertFalse(boolean0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(nullType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      instanceObjectType0.forceResolve(simpleErrorReporter0, noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.clearResolved();
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isFunctionPrototypeType();
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      String string0 = unionType0.toStringHelper(true);
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertEquals("(?|null)", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.hasDisplayName();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, noResolvedType0);
      boolean boolean0 = indexedType0.hasDisplayName();
      assertFalse(boolean0);
      assertFalse(indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noObjectType0, noObjectType0);
      parameterizedType0.getTypesUnderInequality(noObjectType0);
      assertFalse(parameterizedType0.isResolved());
      assertFalse(noObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(jSType_TypePair0.typeB);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rRM lu");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(parameterizedType0);
      boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(functionType0);
      assertFalse(functionType0.isNoObjectType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isStruct();
      assertFalse(allType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isStruct();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = instanceObjectType0.isStruct();
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.setStruct();
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = instanceObjectType0.isStruct();
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isDict();
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
      boolean boolean0 = enumElementType0.isDict();
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
      boolean boolean0 = enumElementType0.isDict();
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.setDict();
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
      boolean boolean0 = enumElementType0.isDict();
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      boolean boolean0 = instanceObjectType0.isGlobalThisType();
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.toMaybeFunctionType((JSType) noResolvedType0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
      Node node0 = Node.newNumber((double) 1, 0, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, enumElementType0);
      boolean boolean0 = enumType0.isEnumType();
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isResolved());
      assertTrue(boolean0);
      assertFalse(enumType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(recordType0);
      assertTrue(recordType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.isParameterizedType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(parameterizedType0);
      boolean boolean0 = jSType_TypePair0.typeB.isParameterizedType();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType.toMaybeParameterizedType((JSType) numberType0);
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
      assertFalse(jSType0.isResolved());
      assertTrue(templateType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) voidType0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) noResolvedType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      errorFunctionType0.setSource(node0);
      assertFalse(noResolvedType0.hasCachedValues());
      
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      boolean boolean0 = parameterizedType0.differsFrom(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(boolean0);
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)instanceObjectType0.getNativeType(jSTypeNative0);
      instanceObjectType0.getGreatestSubtype(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(unknownType0);
      assertFalse(voidType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "sYVUyi'~~Yc", "Error", (-1189), (-1189));
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
      boolean boolean0 = parameterizedType0.differsFrom(namedType0);
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(namedType0.isNoObjectType());
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = noResolvedType0.checkEquivalenceHelper(unknownType0, true);
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = instanceObjectType0.differsFrom(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      InstanceObjectType instanceObjectType1 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      JSType jSType0 = instanceObjectType1.getGreatestSubtype(instanceObjectType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(instanceObjectType1.equals((Object)instanceObjectType0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "CharMatcher.JAVA_ISO_CONTROL", "I<=o", 1, (-11));
      instanceObjectType0.getGreatestSubtype(namedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
      boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, noType0);
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(recordType0, indexedType0);
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isRecordType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(parameterizedType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      boolean boolean0 = parameterizedType0.checkEquivalenceHelper(noResolvedType0, true);
      assertTrue(boolean0);
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
      errorFunctionType0.getTypesUnderEquality(proxyObjectType0);
      assertTrue(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Unknown class name", "Not declared as a type name", 1, 0);
      JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
      boolean boolean0 = JSType.isEquivalent(errorFunctionType0, (JSType) null);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType.isEquivalent(numberType0, numberType0);
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.equals(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.findPropertyType("");
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.findPropertyType("Named type with empty name component");
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.canAssignTo(stringType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      boolean boolean0 = parameterizedType0.canAssignTo(noResolvedType0);
      assertFalse(parameterizedType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      ObjectType objectType0 = jSType0.dereference();
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoObjectType());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderEquality(allType0);
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(allType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      noResolvedType0.getTypesUnderInequality(instanceObjectType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
      AllType allType0 = new AllType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      instanceObjectType0.testForEqualityHelper(allType0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      instanceObjectType0.getTypesUnderInequality(noType0);
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      jSType0.getTypesUnderEquality(jSType0);
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Wv+:b9hd?sO#");
      FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, false);
      errorFunctionType0.getTypesUnderEquality(functionType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getTypesUnderEquality(stringType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.getTypesUnderInequality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.getTypesUnderEquality(objectType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Named type with empty name component");
      numberType0.getTypesUnderInequality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
      jSType0.testForEquality(jSType_TypePair0.typeB);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = allType0.canTestForShallowEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      parameterizedType0.getLeastSupertype(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType1 = noResolvedType0.getLeastSupertype(jSType0);
      assertFalse(jSType1.isResolved());
      assertSame(jSType1, jSType0);
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) noResolvedType0);
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) noResolvedType0);
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
      boolean boolean0 = jSType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(jSType0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a constructor");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Number");
      errorFunctionType0.getTypesUnderEquality(enumElementType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, (String) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Not declared as a constructor");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) stringType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
      JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType0 = unknownType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "EvalError", "EvalError", (-1571), 1347);
      JSType jSType0 = namedType0.getReferencedType();
      JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isResolved());
      assertTrue(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.equals((Object)jSType0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      jSType0.getTypesUnderInequality(jSType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
      jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.getTypesUnderShallowInequality(numberType0);
      assertFalse(numberType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = JSType.isSubtypeHelper(noResolvedType0, instanceObjectType0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(boolean0);
      assertFalse(instanceObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "^Q1;WEG'7H");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      parameterizedType0.defineProperty("zRK|=!X0y9*'/Lv*%~", parameterizedType0, true, (Node) null);
      JSType.safeResolve(parameterizedType0, (ErrorReporter) null, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.safeResolve((JSType) null, simpleErrorReporter0, noResolvedType0);
      assertFalse(noResolvedType0.isResolved());
  }
}
