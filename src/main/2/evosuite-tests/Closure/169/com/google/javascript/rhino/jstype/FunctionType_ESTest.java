/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:02:04 GMT 2024
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.setDict();
      boolean boolean0 = errorFunctionType0.makesDicts();
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "URI_ERROR_TYPE");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, (JSType) null);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseParameterizedType(parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
      errorFunctionType0.getPropertyType("bind");
      errorFunctionType0.getPropertyType("bind");
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      noResolvedType0.hasEqualCallType(errorFunctionType0);
      Node node0 = Node.newString(1, "Unknown class name");
      boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, true, node0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertNotSame(functionType2, functionType0);
      assertTrue(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.isReturnTypeInferred();
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=>A");
      boolean boolean0 = errorFunctionType0.isInstanceType();
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.canBeCalled();
      assertFalse(noResolvedType0.isInterface());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(105, "[ LvD<Pvb~r=u=vE");
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("#HD", node0);
      functionType0.getParameters();
      assertTrue(functionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfacesCount();
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getOwnImplementedInterfaces();
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getSubTypes();
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      Node node0 = Node.newString("Unknown class name");
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("ecH$MO", node0, node0, (JSType) stringType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      Node node0 = Node.newString("Unknown class name");
      Node node1 = new Node(105, node0, node0, node0, node0);
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType("ecH$MO", node1, node0, (JSType) stringType0);
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((-1495.975472109649));
      // Undeclared exception!
      try { 
        FunctionType.forInterface(jSTypeRegistry0, "): ", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Unknown class name");
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) instanceObjectType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) enumElementType0, (ObjectType) functionType0, (ObjectType) functionType0);
      noResolvedType0.setImplementedInterfaces(immutableList0);
      noResolvedType0.getAllImplementedInterfaces();
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.makesStructs();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
      boolean boolean0 = functionType0.makesStructs();
      assertFalse(functionType0.hasInstanceType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      errorFunctionType0.setStruct();
      boolean boolean0 = errorFunctionType0.makesStructs();
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "]^Wi<X");
      errorFunctionType0.makesDicts();
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      // Undeclared exception!
      try { 
        errorFunctionType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
      boolean boolean0 = functionType0.makesDicts();
      assertFalse(functionType0.hasInstanceType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
      noResolvedType0.setImplementedInterfaces(immutableList0);
      boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
      assertTrue(boolean0);
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.hasImplementedInterfaces();
      // Undeclared exception!
      try { 
        noResolvedType0.setImplicitPrototype(noResolvedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
      boolean boolean0 = functionType0.hasImplementedInterfaces();
      assertFalse(functionType0.hasInstanceType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.Collections2");
      int int0 = errorFunctionType0.getMinArguments();
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      int int0 = noResolvedType0.getMinArguments();
      assertEquals(0, int0);
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.getPropertyType("");
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
      int int0 = functionType0.getMinArguments();
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(1, int0);
      assertFalse(functionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Bad type annotation. Unknown type ", (Node) null);
      int int0 = functionType0.getMaxArguments();
      assertTrue(functionType0.isInterface());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
      int int0 = errorFunctionType0.getMaxArguments();
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
      ObjectType objectType0 = errorFunctionType0.getParentScope();
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      int int0 = functionType0.getMaxArguments();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(errorFunctionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Gvind");
      errorFunctionType0.getPropertyType("prototype");
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getAllImplementedInterfaces();
      noType0.getOwnPropertyNames();
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Set<String> set0 = noResolvedType0.getOwnPropertyNames();
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = new Node(4207);
      boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("Unknown class name");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
      ObjectType objectType0 = functionType0.getParentScope();
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, objectType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, objectType0);
      assertTrue(functionType0.isInterface());
      
      functionType0.setExtendedInterfaces(immutableList0);
      String string0 = functionType0.toDebugHashCodeString();
      assertEquals("function (this:{231605032}): {9}", string0);
      assertFalse(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0);
      noResolvedType0.setImplementedInterfaces(immutableList0);
      noResolvedType0.getAllImplementedInterfaces();
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N/", (Node) null);
      functionType0.getAllImplementedInterfaces();
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=>A");
      errorFunctionType0.getAllImplementedInterfaces();
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0);
      // Undeclared exception!
      try { 
        functionType0.setImplementedInterfaces(immutableList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      functionType0.getAllExtendedInterfaces();
      assertFalse(functionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
      try { 
        noResolvedType0.setExtendedInterfaces(immutableList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
      errorFunctionType0.getPropertyType("call");
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Gvind");
      errorFunctionType0.getPropertyType("apply");
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType((-1953));
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
      functionType0.supAndInfHelper(functionType1, true);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(functionType0.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N]0UP&Uoex");
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(1264);
      assertTrue(functionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(3761);
      assertTrue(functionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.defineProperty("prototype", numberType0, true, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      Node node0 = Node.newString(1, "prototype");
      boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, true, node0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.supAndInfHelper(noResolvedType0, true);
      assertFalse(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N/", (Node) null);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      JSType.getLeastSupertype((JSType) functionType0, (JSType) functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      linkedList0.add((JSType) instanceObjectType0);
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType0, (List<JSType>) linkedList0);
      JSType.getLeastSupertype(jSType0, (JSType) functionType0);
      assertTrue(recordType0.hasCachedValues());
      assertTrue(functionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString(0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      FunctionType functionType2 = (FunctionType)functionType1.getLeastSupertype(functionType0);
      boolean boolean0 = functionType0.isSubtype(functionType2);
      assertTrue(functionType2.equals((Object)functionType0));
      assertTrue(boolean0);
      assertNotSame(functionType2, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
      assertTrue(functionType0.hasCachedValues());
      assertNotSame(functionType0, functionType2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
      assertNotSame(functionType2, functionType1);
      assertFalse(functionType2.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) noResolvedType0, (List<JSType>) linkedList0);
      FunctionType functionType1 = (FunctionType)JSType.getLeastSupertype(jSType0, (JSType) noResolvedType0);
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertTrue(recordType0.hasCachedValues());
      assertSame(jSType0, functionType2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString(1, "Unknown class name", 0, 0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType1 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) noResolvedType0, (List<JSType>) linkedList0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      assertSame(functionType0, functionType2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString(0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) numberType0, (JSType) functionType0, (JSType) functionType0);
      FunctionType functionType1 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) immutableList0);
      FunctionType functionType2 = (FunctionType)JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
      boolean boolean0 = functionType0.isSubtype(functionType2);
      assertTrue(functionType1.isOrdinaryFunction());
      assertTrue(boolean0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
      ObjectType objectType0 = errorFunctionType0.getParentScope();
      JSType.getLeastSupertype((JSType) objectType0, (JSType) errorFunctionType0);
      assertFalse(errorFunctionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
      ObjectType objectType0 = errorFunctionType0.getParentScope();
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      errorFunctionType0.supAndInfHelper(functionType0, false);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
      ObjectType objectType0 = functionType0.getParentScope();
      JSType.getLeastSupertype((JSType) functionType0, (JSType) objectType0);
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("@", (Node) null);
      ObjectType objectType0 = functionType0.getParentScope();
      objectType0.canTestForShallowEqualityWith(functionType0);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, noType0);
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
      JSType jSType1 = JSType.getLeastSupertype((JSType) functionType1, jSType0);
      assertNotSame(jSType1, jSType0);
      assertFalse(jSType1.equals((Object)jSType0));
      assertTrue(functionType1.isOrdinaryFunction());
      assertNotSame(jSType1, functionType1);
      assertFalse(jSType1.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType1, node0);
      hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType1, (List<JSType>) linkedList0);
      assertTrue(recordType0.hasCachedValues());
      
      JSType jSType1 = JSType.getLeastSupertype(jSType0, (JSType) functionType1);
      boolean boolean0 = jSType0.isSubtype(jSType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Wz}Dx\"liZ");
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(0);
      // Undeclared exception!
      try { 
        functionType0.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString(0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface(functionType0, "Named type with empty name component");
      assertNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface(noResolvedType0, "Named type with empty name component");
      assertFalse(objectType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("Not declared as a type name");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.setInstanceType(noResolvedType0);
      errorFunctionType0.getTopMostDefiningType("Unknown class name");
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTopMostDefiningType("Named type with empty name component");
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.checkFunctionEquivalenceHelper(noResolvedType0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("side_effect_flags", (Node) null);
      FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType2.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("q]exQ", (Node) null);
      ObjectType objectType0 = functionType0.getParentScope();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      String string0 = functionType1.toDebugHashCodeString();
      assertEquals("function (): {18}", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
      jSTypeRegistry0.resolveTypesInScope(functionType0);
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString("Named type with empty name component", 0, 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType0, node0);
      hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      functionType0.setInstanceType(recordType0);
      String string0 = functionType0.toStringHelper(false);
      assertEquals("function (this:{Named type with empty name component: Function}): number", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      String string0 = functionType0.toStringHelper(false);
      assertEquals("Function", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Node node0 = Node.newString(0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      String string0 = functionType0.toStringHelper(false);
      assertEquals("function (): number", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) immutableList0);
      String string0 = functionType0.toString();
      assertEquals("function (NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, ...[NoResolvedType]): NoResolvedType", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
      String string0 = errorFunctionType0.toStringHelper(false);
      assertEquals("function (new:bind, *=, *=, *=): bind", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) prototypeObjectType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) immutableList0);
      String string0 = functionType0.toString();
      assertEquals("function (NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, NoResolvedType, ...[Named type with empty name component]): NoResolvedType", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
      FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("bind");
      assertTrue(errorFunctionType0.hasCachedValues());
      
      String string0 = functionType0.toStringHelper(false);
      assertEquals("function ((bind|null)=, *=, *=, *=): bind", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
      assertTrue(boolean0);
      assertFalse(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
      ObjectType objectType0 = functionType0.getParentScope();
      boolean boolean0 = functionType0.isSubtype(objectType0);
      assertFalse(boolean0);
      assertFalse(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
      JSType jSType0 = errorFunctionType0.getPropertyType("bind");
      boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
      functionType0.clearCachedValues();
      assertFalse(functionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
      assertFalse(functionType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Node node0 = Node.newString("Not declared as a constructor", 1, 1);
      functionType0.setSource(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ",[|g]Dg{;i[zgT");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      instanceObjectType0.getPropertyNode("Unknown class name");
      errorFunctionType0.setSource((Node) null);
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      noResolvedType0.getPrototype();
      noResolvedType0.setSource(node0);
      noResolvedType0.setSource(node0);
      assertFalse(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "_%^");
      errorFunctionType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
      noObjectType0.clearCachedValues();
      assertFalse(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) numberType0, true, jSTypeArray0);
      functionType0.clearCachedValues();
      assertTrue(functionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("side_effect_flags", (Node) null);
      functionType0.setPrototypeBasedOn(functionType0);
      assertFalse(functionType0.isFunctionPrototypeType());
      
      functionType0.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ";+z'*AZG[7#^=lM+");
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, (JSType) numberType0, (JSType) templateType0, (JSType) numberType0, jSType0, (JSType) templateType0, (JSType) templateType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "LAZY_NAMES");
      FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, true);
      boolean boolean0 = functionType1.hasCachedValues();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.resolveInternal((ErrorReporter) null, (StaticScope<JSType>) null);
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0);
      noResolvedType0.setResolvedTypeInternal(functionType0);
      functionType0.setImplementedInterfaces(immutableList0);
      functionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
      String string0 = functionType0.toDebugHashCodeString();
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals("function ({9}): function (this:me, {9}): me", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.toDebugHashCodeString();
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, unknownType0, false);
      ImmutableList<String> immutableList0 = ImmutableList.of("Unknown class name", "Not declared as a type name", "CharMatcher.JAVA_DIGIT");
      FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Unknown class name", (Node) null, arrowType0, unknownType0, immutableList0, false, true);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
      boolean boolean0 = functionType1.hasAnyTemplate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "?SWxAD3P+");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) templateType0, (JSType) recordType0, (List<JSType>) linkedList0);
      JSType jSType1 = JSType.getLeastSupertype((JSType) recordType0, jSType0);
      assertFalse(jSType1.isNominalType());
  }
}
