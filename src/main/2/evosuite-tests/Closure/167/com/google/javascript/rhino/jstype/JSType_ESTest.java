/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:53:24 GMT 2024
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
      String string0 = jSType_TypePair0.typeB.toAnnotationString();
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.getTypesUnderShallowEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 0, 1);
      namedType0.resolve(simpleErrorReporter0, errorFunctionType0);
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
      boolean boolean0 = errorFunctionType0.isStringValueType();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.matchesStringContext();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ObjectType objectType0 = voidType0.dereference();
      assertFalse(objectType0.isAllType());
      assertNotNull(objectType0);
      assertFalse(objectType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.getJSDocInfo();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isAllType());
      
      String string0 = jSType0.toDebugHashCodeString();
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertEquals("{({proxy:{9}},{6})}", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      JSType jSType0 = voidType0.collapseUnion();
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.isString();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      noResolvedType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(noResolvedType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isVoidType());
      
      boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      JSType.toMaybeParameterizedType((JSType) voidType0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
      boolean boolean0 = arrowType0.matchesStringContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        voidType0.isNullable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.unboxesTo();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
      boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(boolean0);
      assertTrue(jSType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isNominalConstructor();
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        voidType0.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
      boolean boolean0 = errorFunctionType0.isBooleanValueType();
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.canBeCalled();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, priorityQueue0);
      boolean boolean0 = unionType0.hasDisplayName();
      assertFalse(boolean0);
      assertFalse(unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        voidType0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, voidType0);
      boolean boolean0 = proxyObjectType0.isOrdinaryFunction();
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isNamedType();
      assertFalse(boolean0);
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      errorFunctionType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.matchConstraint((JSType) null);
      assertFalse(voidType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
      boolean boolean0 = enumElementType0.matchesInt32Context();
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isInstanceType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, jSType_TypePair0.typeA);
      boolean boolean0 = indexedType0.isCheckedUnknownType();
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.matchesUint32Context();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.matchesNumberContext();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isEnumType();
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNumberValueType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.forceResolve(simpleErrorReporter0, noResolvedType0);
      assertTrue(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.clearResolved();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.isFunctionPrototypeType();
      assertFalse(arrowType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      String string0 = unionType0.toStringHelper(false);
      assertEquals("(undefined)", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertTrue(boolean0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = errorFunctionType0.getReturnType();
      boolean boolean0 = jSType0.hasDisplayName();
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(boolean0);
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
      assertTrue(recordType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(proxyObjectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(functionType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isGlobalThisType();
      assertFalse(boolean0);
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      boolean boolean0 = objectType0.isGlobalThisType();
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(objectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isParameterizedType();
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      boolean boolean0 = parameterizedType0.isParameterizedType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = templateType0.isTemplateType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
      JSType.toMaybeTemplateType((JSType) enumElementType0);
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("&Ip.@dDQL%gA]vi>t<", (Node) null);
      boolean boolean0 = functionType0.isNominalConstructor();
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      Node node0 = Node.newNumber((double) 0, 0, 0);
      errorFunctionType0.setSource(node0);
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
      boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = JSType.isEquivalent(voidType0, (JSType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = JSType.isEquivalent(voidType0, voidType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.equals(numberType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType("Unknown class name");
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      enumElementType0.findPropertyType("Unknown class name");
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canAssignTo(stringType0);
      assertFalse(boolean0);
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
      boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
      assertFalse(objectType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ObjectType objectType0 = booleanType0.dereference();
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoResolvedType());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      AllType allType0 = new AllType((JSTypeRegistry) null);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(allType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.collapseUnion();
      booleanType0.testForEqualityHelper(jSType0, unionType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(booleanType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = errorFunctionType0.getReturnType();
      jSType0.testForEquality(errorFunctionType0);
      assertFalse(jSType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderInequality(enumElementType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getTypesUnderInequality(noType0);
      assertFalse(noType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      booleanType0.getTypesUnderEquality(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(booleanType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getTypesUnderInequality(voidType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      errorFunctionType0.testForEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      booleanType0.getTypesUnderEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      errorFunctionType0.testForEquality(objectType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
      booleanType0.getTypesUnderEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(booleanType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, voidType0);
      JSType jSType0 = proxyObjectType0.getLeastSupertype(voidType0);
      assertFalse(jSType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        voidType0.getLeastSupertype(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) voidType0, (JSType) voidType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
      boolean boolean0 = namedType0.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(boolean0);
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
      assertFalse(voidType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "W4916m<QC*");
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      errorFunctionType0.testForEquality(jSType0);
      assertFalse(errorFunctionType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
      JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) enumElementType0);
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      boolean boolean0 = recordType0.canTestForShallowEqualityWith(voidType0);
      assertTrue(recordType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "wc~Oc?(C");
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(voidType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(booleanType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
      assertNotSame(jSType0, noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      noResolvedType0.getLeastSupertype(booleanType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        voidType0.getRestrictedTypeGivenToBooleanOutcome(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
      booleanType0.getTypesUnderEquality(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.getTypesUnderEquality(voidType0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      noResolvedType0.getTypesUnderInequality(jSType0);
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.getTypesUnderInequality(booleanType0);
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getTypesUnderShallowInequality(nullType0);
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(unionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(voidType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = namedType0.differsFrom(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      boolean boolean0 = noResolvedType0.differsFrom(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
      boolean boolean0 = booleanType0.differsFrom(arrowType0);
      assertTrue(boolean0);
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, voidType0);
      boolean boolean0 = proxyObjectType0.differsFrom(proxyObjectType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(templateType0);
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
      assertFalse(allType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, noResolvedType0);
      assertNull(jSType0);
  }
}
