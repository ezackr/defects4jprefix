/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:51:42 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "-\"1n", "");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      Scope.Var scope_Var0 = scope0.declare("<non-file>", node0, (JSType) null, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isLocal();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
      assertFalse(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      Scope.Var scope_Var0 = scope0.getVar("com.google.javascript.jscomp.Scope$1");
      assertNotNull(scope_Var0);
      
      boolean boolean0 = scope_Var0.isGlobal();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
      assertEquals(" [testcode] ", scope_Var0.getInputName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("w]");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, objectType0, (CompilerInput) null, false);
      scope_Var0.getJSDocInfo();
      assertFalse(scope_Var0.isDefine());
      assertFalse(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      Scope.Var scope_Var0 = scope0.getVar("com.google.javascript.jscomp.Scope$1");
      String string0 = scope_Var0.getName();
      assertEquals(" [testcode] ", scope_Var0.getInputName());
      assertTrue(scope_Var0.isTypeInferred());
      assertNotNull(string0);
      assertFalse(scope_Var0.isLocal());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")f", ")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$Var", node0, objectType0, (CompilerInput) null, false);
      Node node1 = scope_Var0.getNameNode();
      assertNotNull(node1);
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "N", "N");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("N", node0, objectType0, (CompilerInput) null);
      scope_Var0.getScope();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "H9", "H9");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, "H9", "CKdx0vxUDsYgE", 49, 590);
      Scope.Var scope_Var0 = scope0.declare("H9", node0, jSType0, (CompilerInput) null, false);
      scope_Var0.resolveType(simpleErrorReporter0);
      assertTrue(jSType0.isResolved());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M", "M");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null);
      assertTrue(scope_Var0.isTypeInferred());
      
      scope_Var0.setType(objectType0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "-\"1n", "@{|}6-)He)");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      Scope.Var scope_Var0 = scope0.declare("<non-file>", node0, (JSType) null, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isDefine();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("r");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.isBleedingFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "*2gn7:-KJ!%zK:yghW", "*2gn7:-KJ!%zK:yghW");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("*2gn7:-KJ!%zK:yghW", node0, objectType0, (CompilerInput) null);
      String string0 = scope_Var0.toString();
      assertEquals("Scope.Var *2gn7:-KJ!%zK:yghW", string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M", "M");
      Scope scope0 = new Scope(node0, compiler0);
      boolean boolean0 = scope0.isBottom();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "@{|}6-)He)");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      int int0 = scope0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")f", ")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      int int0 = scope0.getVarCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "-\"1n", "");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot("-\"1n");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Cq", "Cq");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", (Node) null, objectType0, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.getInitialValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Scope$Var", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.googlu.javascript.jscomp.Scope$1", "");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = compiler0.parseTestCode(")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", objectType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("Not declared as a constructor", (SourceFile.Generator) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, enumType0, compilerInput0, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")f", ")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType(") ", objectType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("Not declared as a constructor", (SourceFile.Generator) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare(") ", node0, enumType0, compilerInput0, false);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Cq", "Cq");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", (Node) null, objectType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "IdentierValue", "IdentierValue");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "IdentierValue", "IdentierValue");
      Node node1 = new Node(37, node0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node1, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertFalse(scope_Var0.isDefine());
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Scope.Var ", "/?,2");
      Node node1 = new Node(105, node0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertEquals(105, node2.getType());
      assertFalse(scope_Var0.isDefine());
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "IdentierValue", "IdentierValue");
      Node node1 = new Node(37, node0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      node1.setType(86);
      Scope scope0 = syntacticScopeCreator0.createScope(node1, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertNotNull(node2);
      assertEquals(132, node2.getType());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("2}x;");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("2}x;", node0, (JSType) null, (CompilerInput) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      scope_Var0.resolveType(simpleErrorReporter0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", functionType0);
      Scope scope0 = new Scope(node0, enumType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("Named type with empty name component", (SourceFile.Generator) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0, false);
      String string0 = scope_Var0.getInputName();
      assertEquals("Named type with empty name component", string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.googlu.javascript.jscomp.Scope$1", "");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null);
      String string0 = scope_Var0.getInputName();
      assertEquals("<non-file>", string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "IdentierValue", "IdentierValue");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "|}a", "|}a");
      Scope scope0 = new Scope(node0, compiler0);
      node0.addSuppression("\u0004");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSType jSType0 = linkedFlowScope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("\u0004", node0, jSType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")f", ")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$Var", node0, objectType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.equals(scope_Var0);
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")q", ")q");
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("ElC.:", node0, objectType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.equals(objectType0);
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")f", ")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      Node node1 = compiler0.parseSyntheticCode("'");
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare(")f", node0, objectType0, (CompilerInput) null, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(objectType0);
      Scope.Var scope_Var1 = scope0.declare("Named type with empty name component", node1, jSType0, (CompilerInput) null);
      boolean boolean0 = scope_Var1.equals(scope_Var0);
      assertFalse(boolean0);
      assertFalse(scope_Var1.isDefine());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      Scope scope1 = null;
      try {
        scope1 = new Scope(scope0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "");
      Node node1 = new Node(0, node0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      Scope scope0 = memoizedScopeCreator0.createScope(node1, (Scope) null);
      Scope scope1 = new Scope(scope0, node0);
      Scope scope2 = scope1.getGlobalScope();
      assertTrue(scope2.isGlobal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("~<1J>M@");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      // Undeclared exception!
      try { 
        scope0.declare((String) null, node0, objectType0, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      // Undeclared exception!
      try { 
        scope0.declare("", node0, objectType0, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M", "M");
      Scope scope0 = new Scope(node0, compiler0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")f", ")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare(")f", node0, objectType0, (CompilerInput) null, false);
      Scope scope1 = new Scope(node0, objectType0);
      // Undeclared exception!
      try { 
        scope1.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")q", ")q");
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("ElC.:", node0, objectType0, (CompilerInput) null, false);
      scope0.undeclare(scope_Var0);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "om.google.javascript.jscomp.Scope$1", "om.google.javascript.jscomp.Scope$1");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node1 = Node.newNumber((double) 24);
      Scope scope0 = typedScopeCreator0.createInitialScope(node1);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertFalse(scope1.isGlobal());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "*2gn7:-KJ!%zK:yghW", "*2gn7:-KJ!%zK:yghW");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("*2gn7:-KJ!%zK:yghW", node0, objectType0, (CompilerInput) null);
      assertFalse(scope_Var0.isDefine());
      
      boolean boolean0 = scope0.isDeclared("*2gn7:-KJ!%zK:yghW", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")f", ")f");
      Scope scope0 = memoizedScopeCreator0.createScope(node0, (Scope) null);
      Node node1 = compiler0.parseSyntheticCode(")f");
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isDeclared((String) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Node node1 = new Node(991, node0);
      Scope scope0 = memoizedScopeCreator0.createScope(node1, (Scope) null);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isLocal();
      assertTrue(boolean0);
  }
}
