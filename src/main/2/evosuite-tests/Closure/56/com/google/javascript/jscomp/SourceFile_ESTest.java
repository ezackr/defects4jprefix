/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 02:46:30 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromGenerator("\n", (SourceFile.Generator) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("|w7_ Y! ", (SourceFile.Generator) null);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("M2W&9n", "IOException thrown while closing Closeable.");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      Region region0 = sourceFile_OnDisk0.getRegion(1118);
      assertNull(region0);
      
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("rw", charset0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromCode("", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("F\n", "F\n");
      sourceFile_Preloaded0.clearCachedSource();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("Yq", "Yq", "Yq");
      sourceFile_Preloaded0.getCodeNoCache();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F?Y9)jj5&$|$SewjSdp");
      SourceFile sourceFile0 = SourceFile.fromReader("UTF-16LE", stringReader0);
      sourceFile0.getName();
      assertFalse(sourceFile0.isExtern());
      assertEquals("UTF-16LE", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("|;l", "|;l");
      sourceFile_Preloaded0.setIsExtern(false);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("UTF-16LE", sourceFile_Generator0);
      sourceFile_Generated0.toString();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        SourceFile.fromInputStream("\"y]pGYO./6j", "\"y]pGYO./6j", (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        SourceFile.fromInputStream("\n", (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UTF-16LE");
      SourceFile sourceFile0 = SourceFile.fromReader("UTF-16LE", stringReader0);
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("F\n", "F\n");
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(1, int0);
      
      sourceFile_Preloaded0.getLineOffset(1);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("\n");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -6
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("_", "_");
      // Undeclared exception!
      try { 
        sourceFile_Preloaded0.getLineOffset(1558);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 1558
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("_", "_");
      sourceFile_Preloaded0.getNumLines();
      sourceFile_Preloaded0.getNumLines();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascript.jscomp.SourceFile$OnDisk", "", "\nrctuml:p");
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(2, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("|w7_ Y! ", (SourceFile.Generator) null);
      String string0 = sourceFile_Generated0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("KDf<fn1Z[L54", "", "KDf<fn1Z[L54");
      String string0 = sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("#%!s$QR99U;$L%sG");
      try { 
        sourceFile0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascript.jscomp.SourceFile$OnDisk", "", "\nrctuml:p");
      String string0 = sourceFile_Preloaded0.getLine(0);
      assertNotNull(string0);
      assertEquals("", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      String string0 = sourceFile_Preloaded0.getLine(5);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      sourceFile_Preloaded0.getRegion(31);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("F\n", "F\n");
      Region region0 = sourceFile_Preloaded0.getRegion((-3));
      assertEquals("F", region0.getSourceExcerpt());
      assertNotNull(region0);
      assertEquals(2, region0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("com.goo~le.javascript.jscom\".SourceFile$OnDisk").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("com.goo~le.javascript.jscom\".SourceFile$OnDisk", sourceFile_Generator0);
      sourceFile_Generated0.getRegion((-3356));
      String string0 = sourceFile_Generated0.getLine((-3356));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("\n", (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }
}
