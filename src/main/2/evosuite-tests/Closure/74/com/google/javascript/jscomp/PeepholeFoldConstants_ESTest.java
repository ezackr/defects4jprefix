/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:09:48 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(83);
      Node node1 = new Node(26, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(82);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = new Node(32, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(285, 285, 285);
      Node node1 = new Node(44, 4, 41);
      Node node2 = new Node(15, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(9, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-506));
      Node node1 = new Node(0, 2, 37);
      Node node2 = new Node(10, node0, node1, node1, 27, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(30);
      Node node1 = new Node(45, 26, 36);
      Node node2 = new Node(11, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(12, node1, node0, node0, 29, 3);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, node3.getType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(80);
      Node node1 = new Node(16, 1, 28);
      Node node2 = new Node(13, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(14, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      Node node1 = new Node(47, 47, 47);
      Node node2 = new Node(16, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(33);
      Node node1 = new Node(1, 11, 27);
      Node node2 = new Node(18, node0, node0, node1, 27, 17);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(18, node3.getType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(461, 461, 461);
      Node node1 = new Node(12, 30, 1);
      Node node2 = new Node(20, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(28, 28, 28);
      Node node1 = new Node(31, 1, 15);
      Node node2 = new Node(21, node1, node0, node0, 2, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(23, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = Node.newString(38, "!5\"}*U");
      Node node2 = new Node(24, node1, node0, node1, node0, 15, 21);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node((-706));
      Node node1 = new Node(8, 2, 48);
      Node node2 = new Node(25, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(25, node3.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(80);
      Node node1 = new Node(80);
      Node node2 = new Node(31, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(34);
      Node node1 = new Node(40);
      Node node2 = new Node(34, node0, node0, node1, 31, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(65, 65, 65);
      Node node1 = new Node(30, 22, 27);
      Node node2 = new Node(35, node0, node1, node1, 44, 35);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1399, 1399, 1399);
      Node node1 = new Node(35);
      Node node2 = new Node(36, node1, node0, node0, 2, 30);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(32, 32, 32);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(38, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(39);
      Node node1 = new Node(40);
      Node node2 = new Node(39, node0, node0, node1, 31, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(42, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(39);
      Node node1 = new Node(0, 26, 36);
      Node node2 = new Node(40, node1, node0, node0, 48, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node((-1033));
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(41, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(64);
      Node node1 = new Node(21);
      Node node2 = new Node(42, node0, node1, node1, 44, 35);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node((-33));
      Node node1 = new Node(29, 4, 41);
      Node node2 = new Node(43, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(147, 147, 147);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(44, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-506));
      Node node1 = new Node(36, 43, 20);
      Node node2 = new Node(45, node1, node0, 11, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(48);
      Node node2 = new Node(46, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(47);
      Node node1 = new Node(40);
      Node node2 = new Node(47, node0, node0, node1, 31, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(3, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node((-51), (-51), (-51));
      Node node1 = new Node(29, 4, 41);
      Node node2 = new Node(48, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(49, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(50, 50, 50);
      Node node1 = new Node(40);
      Node node2 = new Node(50, node0, node0, node1, 31, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(42, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(9);
      Node node1 = new Node(20, 4, 39);
      Node node2 = new Node(51, node1, node1, node0, 38, 49);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(45, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(306654252, 306654252, 306654252);
      Node node1 = new Node(306654252, 47, 31);
      Node node2 = new Node(52, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(52, node3.getType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(123, 123, 123);
      Node node1 = Node.newString("QNMY", 39, 12);
      Node node2 = new Node(53, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node((-1001));
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(54, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(75, 75, 75);
      Node node1 = new Node(15, (-3), 0);
      Node node2 = new Node(55, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotSame(node0, node3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1391, 1391, 1391);
      Node node1 = new Node(8);
      Node node2 = new Node(56, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(56, node3.getType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(40);
      Node node2 = new Node(57, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotSame(node3, node1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(58);
      Node node1 = new Node(40);
      Node node2 = new Node(58, node0, node0, node1, 31, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = new Node(45, 26, 36);
      Node node2 = new Node(59, node0, node1, node1, 11, 55);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node((-1033), (-1033), (-1033));
      Node node1 = new Node(35);
      Node node2 = new Node(60, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(61, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(306654262);
      Node node1 = new Node(306654262, 47, 31);
      Node node2 = new Node(62, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = new Node(2);
      Node node2 = new Node(63, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(64);
      Node node1 = new Node(40);
      Node node2 = new Node(64, node0, node0, node1, 31, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node2, node3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node((-1033));
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(65, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("computeCFG");
      Node node1 = new Node(22, 26, 26);
      Node node2 = new Node(66, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(461, 461, 461);
      Node node1 = new Node(12, 30, 1);
      Node node2 = new Node(67, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(68);
      Node node1 = new Node(40);
      Node node2 = new Node(68, node0, node0, node1, 31, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(64, 64, 64);
      Node node1 = new Node(21);
      Node node2 = new Node(69, node0, node1, node1, 44, 35);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(180259, node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      Node node1 = new Node(11, 49, 13);
      Node node2 = new Node(70, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(306654248);
      Node node1 = new Node(306654248, 47, 31);
      Node node2 = new Node(71, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(72, 72, 72);
      Node node1 = new Node(40);
      Node node2 = new Node(72, node0, node0, node1, 31, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node((-33));
      Node node1 = new Node(29, 4, 41);
      Node node2 = new Node(73, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(74, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(75, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-506));
      Node node1 = new Node(36, 43, 20);
      Node node2 = new Node(76, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node((-701), (-701), (-701));
      Node node1 = new Node(8, 2, 48);
      Node node2 = new Node(77, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("P;88M5S");
      Node node1 = Node.newString(44, "P;88M5S");
      Node node2 = new Node(78, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(32, 32, 32);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(79, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(284, 284, 284);
      Node node1 = new Node(43, 23, 29);
      Node node2 = new Node(80, node1, node0, node0, 2, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(494);
      Node node1 = new Node(43, 23, 29);
      Node node2 = new Node(81, node1, node0, node0, 2, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node((-51), (-51), (-51));
      Node node1 = new Node(29, 4, 41);
      Node node2 = new Node(82, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node((-1021));
      Node node1 = new Node(35);
      Node node2 = new Node(83, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(65);
      Node node1 = new Node(40);
      Node node2 = new Node(84, node1, node1, node0, 16, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(85, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node((-474), (-474), (-474));
      Node node1 = new Node(29, 4, 41);
      Node node2 = new Node(86, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node((-1033));
      Node node1 = new Node(35);
      Node node2 = new Node(87, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(29, 4, 41);
      Node node2 = new Node(88, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(0, 14, 45);
      Node node2 = new Node(89, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(20);
      Node node1 = new Node(0);
      Node node2 = new Node(90, node1, node1, node0, 16, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node((-38), (-38), (-38));
      Node node1 = new Node(19, 4, 41);
      Node node2 = new Node(91, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(65);
      Node node1 = new Node(40);
      Node node2 = new Node(92, node1, node1, node0, 16, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      Node node1 = new Node(48);
      Node node2 = new Node(93, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node((-1033));
      Node node1 = new Node(35);
      Node node2 = new Node(94, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(284, 284, 284);
      Node node1 = new Node(43, 23, 29);
      Node node2 = new Node(95, node1, node0, node0, 1, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(284, 284, 284);
      Node node1 = new Node(16, 4, 41);
      Node node2 = new Node(96, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1399);
      Node node1 = new Node(1);
      Node node2 = new Node(97, node1, node0, node0, 2, 97);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      Node node1 = new Node(46);
      Node node2 = new Node(98, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(51, 51, 51);
      Node node1 = new Node(51, 51, 51);
      Node node2 = new Node(99, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-506));
      Node node1 = new Node(36, 43, 20);
      Node node2 = new Node(101, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(123);
      Node node1 = new Node(20, (-1), 15);
      Node node2 = new Node(8, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(65);
      Node node1 = new Node(122, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-1090), (-1090), (-1090));
      Node node1 = new Node(39, 26, 36);
      Node node2 = new Node(122, node1, node0, node0, 42, 1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(60, 60, 60);
      Node node1 = new Node(21, node0, node0, node0, 26, 35);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(251);
      Node node1 = new Node(43, 23, 29);
      Node node2 = new Node(21, node1, node0, node0, 2, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(2455, 2455, 2455);
      Node node1 = Node.newNumber((double) 0);
      Node node2 = new Node(22, node1, node0, node0, (-3), 2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(85, 117, 28);
      Node node1 = new Node(9, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(19, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(100);
      Node node1 = new Node(29, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(294);
      Node node1 = new Node(101, 4, 41);
      Node node2 = new Node(96, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Infinity", 5, 55);
      Node node1 = new Node(10, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("oN3/d");
      Node node1 = new Node(25, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      Node node1 = new Node(10, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(32);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(70, 70, 70);
      Node node1 = new Node(32, node0, node0, node0, 44, 35);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(44, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("", 33, 33);
      Node node1 = new Node(32, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(41, 41, 41);
      Node node1 = new Node(32, node0, node0, node0, 14, 2);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(43);
      Node node1 = new Node(32, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, node0, 44, 35);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(63);
      Node node1 = new Node(32, node0, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      Node node1 = new Node(32, node0, node0, node0, 44, 35);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      Node node1 = new Node(32, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      Node node1 = new Node(29, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      Node node1 = new Node(26, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber((double) 27);
      Node node1 = new Node(27, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(28, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      Node node1 = new Node(26, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      Node node1 = Node.newString("hUjRg", 8, 37);
      Node node2 = new Node(52, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, moveFunctionDeclarations0);
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(64);
      Node node1 = new Node(49, 29, 8);
      Node node2 = new Node(100, node0, node1, node1, 34, 16);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("CcHx2");
      Node node1 = Node.newString(39, "Infinity");
      Node node2 = new Node(101, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler((PrintStream) null);
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0, (ScopeCreator) null);
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("o)&N3/dP");
      Node node1 = new Node(2, 0, 11);
      Node node2 = new Node(21, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(")&N#3/dP");
      Node node1 = Node.newString(")&N#3/dP");
      Node node2 = new Node(21, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(44, "");
      Node node2 = new Node(21, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2543);
      Node node1 = new Node(39, 26, 36);
      Node node2 = new Node(19, node1, node1, node0, 8, 46);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, node3.getType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(79);
      Node node1 = Node.newString(38, "!5\"}*U");
      Node node2 = new Node(16, node1, node1, node0, (-710), 33);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      Node node1 = new Node(0);
      Node node2 = new Node(16, node0, node1, 19, 27);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("]");
      Node node1 = Node.newString("]");
      Node node2 = new Node(17, node1, node0, node0, 18, 15);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      Node node1 = new Node(41, (-974), 13);
      Node node2 = new Node(16, node1, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(42, 42, 42);
      Node node2 = new Node(16, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(3, Node.CONTINUE_PROP);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      Node node1 = new Node(0);
      Node node2 = new Node(16, node0, node1, 67, 27);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("P;88M5S");
      Node node1 = Node.newString(44, "P;88M5S");
      Node node2 = new Node(17, node1, node0, node0, 18, 15);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      Node node1 = new Node(41, (-974), 13);
      Node node2 = new Node(17, node1, node1, node0, 48, 12);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(40, 40, 40);
      Node node1 = new Node(40, 40, 40);
      Node node2 = new Node(32, node0);
      Node node3 = new Node(16, node1, node2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals(42, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = Node.newString(38, "!5\"}*U");
      Node node2 = new Node(16, node1, node1, node0, (-702), 2070);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(35, 35, 35);
      Node node1 = new Node(30, 22, 27);
      Node node2 = new Node(35, node0, node1, node0, 44, 35);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(30);
      Node node1 = new Node(19, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(73);
      Node node1 = new Node(30, 22, 27);
      Node node2 = new Node(35, node0, node1, node1, 44, 35);
      node1.addChildrenToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(84);
      Node node1 = new Node(37, node0, node0, node0, 4, 42);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(37);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(84);
      Node node1 = new Node(33, 18, 40);
      Node node2 = new Node(37, node1, node0, node0, 4, 42);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(33);
      Node node1 = new Node(37, node0, node0, 3, 2);
      node0.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(37, node2.getType());
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(40);
      Node node1 = new Node(33, 18, 40);
      Node node2 = new Node(37, node1, node0, node0, 4, 42);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(64, 64, 64);
      Node node1 = new Node(30, 22, 27);
      Node node2 = new Node(35, node0, node1, node1, 44, 35);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, node3.getType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(2, 10, 37);
      Node node2 = new Node(33, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("o&N3/d");
      Node node1 = Node.newString("o&N3/d");
      Node node2 = new Node(33, node0, node0, node1, 1, 23);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }
}
