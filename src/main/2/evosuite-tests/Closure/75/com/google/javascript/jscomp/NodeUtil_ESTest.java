/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:14:06 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.LinkedListMultimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.TernaryValue;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("&<3a9[~t");
      Node node1 = NodeUtil.newVarNode("&<3a9[~t", node0);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-834));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-834> (type -834)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative((-1041));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("`)");
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(92, 92, 92);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=75> (type 75)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(26);
      assertEquals("!", string0);
      
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<FunctionType> linkedList0 = new LinkedList<FunctionType>();
      Vector<JSType> vector0 = new Vector<JSType>(linkedList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = NodeUtil.newVarNode("bcK&^", node0);
      node0.setType(42);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
      node0.toString();
      Node node2 = peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
      assertNotNull(node2);
      
      NodeUtil.isStatementParent(node2);
      boolean boolean0 = NodeUtil.isThis(node2);
      boolean boolean1 = NodeUtil.isWithinLoop(node1);
      assertEquals(118, node1.getType());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention0, "%T,bY?CzFP", (Node) null, "%T,bY?CzFP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node((byte)112);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
      assertEquals(125, node0.getLineno());
      assertEquals(125, node0.getCharno());
      assertEquals(38, node0.getType());
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(125, node0.getCharno());
      assertEquals(125, node0.getLineno());
      assertEquals(38, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = NodeUtil.isNew(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(121);
      boolean boolean0 = NodeUtil.isCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(100);
      boolean boolean0 = NodeUtil.isCallOrNew(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("$V$/");
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar((-1437));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      Node node0 = compiler0.parseTestCode("r");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "r", node0, "r");
      boolean boolean0 = NodeUtil.isObjectLitKey(node1, node1);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) null, "rhino", (Node) null, "20?AW?L/v2@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(87);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(87);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(95, 95, 95);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("><3>w{L{3!|SQsMc@");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "><3>w{L{3!|SQsMc@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("whW|ty[)!l1n4{#Hb");
      Node node1 = NodeUtil.newVarNode("whW|ty[)!l1n4{#Hb", node0);
      node0.setType(49);
      NodeUtil.isNameReferenced(node1, "whW|ty[)!l1n4{#Hb");
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(75, 75, 75);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(5585);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=5585> (type 5585)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node((-409), (-409), (-409));
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(2478, 2478, 2478);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("Zyv");
      assertTrue(boolean0);
      
      Node node0 = Node.newString("Zyv", (-21), (-21));
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, true);
      List<Node> list0 = astParallelizer0.split();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("Zyv", list0, node0, (-128), (-2825));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) null, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 176, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = NodeUtil.opToStr(843);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(52);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isSimpleFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(3510);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention0, "|h,/)~YJ&k>rL#r", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("$CV$/");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(1856);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1856
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("$V$/");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(2048, 2048, 2048);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(159);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
      assertEquals(8232, node0.getLineno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(139, 139, 139);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("$V$/");
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(92);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
      assertEquals(122, node1.getType());
      assertFalse(boolean0);
      assertEquals(110, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(52);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(76);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("NoObject");
      NodeUtil.isConstantName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(52);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(158);
      Node node0 = new Node(158, 158, 158);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 158
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(2024, 2024, 2024);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isReferenceName(node0);
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      
      NodeUtil.isPrototypePropertyDeclaration(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(1446);
      Node node1 = new Node(112, node0, 4, (-2));
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.containsFunction(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node((-1327), (-1327), (-1327));
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("%");
      Vector<Node> vector0 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("%", vector0, node0, 4095, 0);
      assertEquals(105, node1.getType());
      assertEquals(0, node1.getCharno());
      assertEquals(4095, node1.getLineno());
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(67, 67, 67);
      NodeUtil.isCall(node0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got DEL_REF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      boolean boolean0 = NodeUtil.isStatementBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node((-1524));
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(30);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("W>nsF!8vn");
      Integer integer0 = new Integer(31);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(141, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals(141, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      boolean boolean1 = NodeUtil.isNumericResultHelper(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
      assertEquals(8232, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("qN}.=q[YN6Lz +[~");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63743);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(64);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      NodeUtil.isSimpleOperatorType((byte)91);
      Node node0 = Node.newNumber((double) (byte)91);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(91.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(58);
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = new Node(49, node0, node0, 24, 44);
      node1.setType(1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      boolean boolean1 = NodeUtil.isTryCatchNodeContainer(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(1385, 1385, 1385);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("8f[cbX.&u*K4K");
      boolean boolean0 = NodeUtil.isStatementBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NodeUtil.isAssociative(102);
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(121);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      node0.getJSType();
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node((-4065));
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(453, nodeArray0, 453, 453);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(122, node1.getType());
      assertEquals(453, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(110, 8, 6);
      NodeUtil.isVar(node0);
      NodeUtil.mayEffectMutableState(node0);
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((-1614.38), 77, 2605);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(9);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = NodeUtil.opToStr(58);
      assertNull(string0);
      
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(48, 48, 48);
      Node node1 = new Node(20, node0, 4095, 21);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.getImpureBooleanValue(node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("Infinity", 10000, 10000);
      Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
      assertEquals(118, node1.getType());
      assertEquals(10000, node1.getLineno());
      
      Node node2 = Node.newNumber((double) 15);
      node2.children();
      boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("$V$/");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING $V$/ does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(89, 89, 89);
      Node node1 = new Node(6, node0, node0, node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("&J", (Node) null);
      assertEquals(118, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newNumber((double) 39);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("39", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber((-647.59045));
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node((-1391));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node.newString("_3jDXW~o", 26, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = NodeUtil.newVarNode("5", node0);
      assertFalse(node0.hasChildren());
      
      node1.setType((-63));
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "_3jDXW~o");
      Node.newNumber((double) 4);
      NodeUtil.isFunctionObjectCall(node1);
      NodeUtil.isExprAssign(node0);
      boolean boolean1 = NodeUtil.isCall(node2);
      assertTrue(boolean1 == boolean0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean2 = NodeUtil.has(node2, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean2);
      assertEquals(118, node2.getType());
      
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 15);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.isAssignmentOp(node0);
      node0.children();
      int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.rhino.jstype.JSType$TypePair");
      assertEquals(0, int0);
      
      NodeUtil.isFunctionExpression(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(3692, node0.getLineno());
      assertEquals(15, node0.getCharno());
      assertTrue(node0.isQualifiedName());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$V$/");
      Node node1 = new Node(29, (-842), 47);
      NodeUtil.getNumberValue(node1);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = NodeUtil.newVarNode("", node0);
      assertEquals(118, node1.getType());
      
      node1.setType(21);
      NodeUtil.isForIn(node1);
      Node.newNumber((double) 2, 1, 45);
      Node node2 = new Node(29, node1, node1);
      NodeUtil.getNumberValue(node2);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node((byte)98);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Stack<Node> stack0 = new Stack<Node>();
      int int0 = NodeUtil.precedence(86);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
      boolean boolean0 = NodeUtil.isName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(64);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "AST not normalized.", 791, (-1060));
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", 64, (-1668));
      NodeUtil.getImpureBooleanValue(node0);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(33, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(75);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      String string0 = NodeUtil.opToStrNoFail(29);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      HashSet<String> hashSet0 = new HashSet<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((-1801.2197941675));
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.mayEffectMutableState(node0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("Z");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("*V$");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("infinity");
      NodeUtil.isLatin("infinity");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ReplaceStrings$Config");
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatementParent((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("()", "\u0006[>=|<c8UtF1ZmGd_");
      NodeUtil.isLoopStructure(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
      assertFalse(jSType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyTypeFromValueType((Node) null, jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(2489, 2489, 2489);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
      assertEquals(38, node0.getType());
      
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(140, node0.getLineno());
      assertEquals(140, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("JSType$TypePair");
      NodeUtil.getStringNumberValue("JSType$TypePair");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(21);
      node1.addChildToFront(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      boolean boolean1 = NodeUtil.isNumericResultHelper(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(55);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 4);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("NoObject");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(97, 97, 97);
      Stack<JSType> stack0 = new Stack<JSType>();
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(97, 97, 97);
      Stack<JSType> stack0 = new Stack<JSType>();
      String string0 = NodeUtil.opToStrNoFail(13);
      assertEquals("!=", string0);
      
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(92, 92, 92);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(16);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(26);
      // Undeclared exception!
      try { 
        NodeUtil.getArrayElementStringValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(2048);
      Node node1 = new Node(43, node0, node0);
      NodeUtil.getNumberValue(node1);
      String string0 = NodeUtil.arrayToString(node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNameSuffixes);
      boolean boolean1 = NodeUtil.isGet(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(37);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, hashSet0);
      boolean boolean1 = NodeUtil.isGet(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = new Node(29, node0, 44, 2);
      HashSet<String> hashSet0 = new HashSet<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newNumber((-1004.41));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
      node0.setString(":(K:MWcZkCpPc4");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Infinity", "Infinity");
      Node node1 = new Node(21, node0, node0, 17, 16);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.redeclareVarsInsideBranch(node1);
      boolean boolean1 = NodeUtil.isLiteralValue(node1, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString(8233, "M|$wD", 8233, (-2595));
      Node node1 = Node.newString("G]s49A7", 157, 459);
      Node node2 = NodeUtil.newVarNode("dpq*l2+Kt@O%WJK", node1);
      assertEquals(118, node2.getType());
      assertEquals(157, node2.getLineno());
      
      node0.setLineno(48);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node1.setType(1131);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "M|$wD");
      assertFalse(boolean0);
      
      Node node3 = Node.newNumber(1706.9892589);
      NodeUtil.isFunctionObjectCall(node1);
      NodeUtil.isExprAssign(node3);
      boolean boolean1 = NodeUtil.isCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean2 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean2 == boolean1);
      
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = NodeUtil.MAY_BE_STRING_PREDICATE;
      int int0 = NodeUtil.getCount(node3, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 109: ELSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(81, 81, 81);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<(l9TiEy@6;7");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.getStringNumberValue("<(l9TiEy@6;7");
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 112: DEFAULT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber(46.9642042712);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "msg.prop.defined", "msg.prop.defined");
      // Undeclared exception!
      try { 
        NodeUtil.isValidPropertyName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(30, 30, 30);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newNumber((double) 108, 108, 108);
      Node node1 = new Node(1, node0, node0);
      NodeUtil.getNumberValue(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("H|3Hk<G^l\u0002&}j>", 8, 8);
      node0.setType(8);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = new Node(36, node1, node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertEquals(8, node1.getLineno());
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H|3Hk<G^l\u0002&}j>");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(53);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = NodeUtil.isAssociative(108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals(125, node0.getLineno());
      assertNull(string0);
      assertEquals(125, node0.getCharno());
      
      String string1 = NodeUtil.opToStrNoFail(24);
      assertEquals("/", string1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("9d/_/r7[[N'b6*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NAME, LP, or BLOCK node expected; found: ", (-135), (-135));
      NodeUtil.isReferenceName(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = NodeUtil.precedence(65);
      assertEquals(15, int0);
      
      int int1 = NodeUtil.precedence(15);
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
      NodeUtil.getImpureBooleanValue(node0);
      node0.children();
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(3692, node0.getLineno());
      assertEquals(13, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertEquals(3692, node1.getLineno());
      assertEquals(33, node0.getType());
      assertEquals(13, node1.getCharno());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(67);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(5747, 5747, 5747);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("&");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(102);
      NodeUtil.isStrWhiteSpaceChar(9);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(110);
      NodeUtil.isStrWhiteSpaceChar(12);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(46);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("$V$/");
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(39);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(45);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(2478, 2478, 2478);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2478
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("$V/");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node((-1972), (-1972), (-1972));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setType(18);
      Node node1 = new Node(88, node0, node0);
      NodeUtil.isStrWhiteSpaceChar((-1));
      NodeUtil.mayBeString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      HashSet<String> hashSet0 = new HashSet<String>();
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(76);
      NodeUtil.opToStr(48);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(68, 68, 68);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got REF_CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(55, 55, 55);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      NodeUtil.isWithinLoop(node0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(108, "");
      NodeUtil.isThis(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node1 = new Node(43, 23, 13);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals(140, node0.getLineno());
      assertNull(string0);
      assertEquals(140, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(83);
      NodeUtil.isStrWhiteSpaceChar(83);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(96, 96, 96);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
      List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
      Vector<Node> vector0 = new Vector<Node>(list0);
      Node node0 = Node.newString((-33), "_3jDXW~o");
      linkedListMultimap0.clear();
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 118, 33);
      NodeUtil.getInfoForNameNode(node0);
      node1.setJSDocInfo((JSDocInfo) null);
      Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
      assertEquals(105, node2.getType());
      assertEquals(33, node1.getCharno());
      assertEquals(118, node1.getLineno());
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(2478, 2478, 2478);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      int int0 = 114;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(110);
      Object object0 = new Object();
      boolean boolean0 = NodeUtil.isCommutative(110);
      Node node0 = Node.newString(110, "nvalid assignment targe");
      ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.equals("nvalid assignment targe");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement1 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement1.equals(ternaryValue0);
      boolean boolean1 = nodeUtil_MatchShallowStatement1.apply(node0);
      assertFalse(boolean1 == boolean0);
      
      Node node1 = Node.newString("+;Wfm(F5n", 2, 12);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node1, (-888), nodeUtil_MatchShallowStatement1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(67);
      boolean boolean0 = NodeUtil.isCall(node0);
      boolean boolean1 = NodeUtil.isAssign(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      NodeUtil.isAssociative(110);
      String string0 = NodeUtil.opToStr(40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(85);
      NodeUtil.isAssignmentOp(node0);
      boolean boolean0 = NodeUtil.isCommutative(21);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(18);
      assertEquals("<<", string0);
      
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(121);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = NodeUtil.precedence(102);
      assertEquals(13, int0);
      
      int int1 = NodeUtil.precedence(13);
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      NodeUtil.opToStr(79);
      // Undeclared exception!
      try { 
        Node.newString(79, (String) null, 1810, 79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(2102);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      NodeUtil.isSimpleOperatorType((byte)99);
      String string0 = NodeUtil.opToStr((byte)99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 120: CATCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(22, 129, (-1700));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.trimToSize();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(21);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setWasEmptyNode(true);
      Node node1 = NodeUtil.newVarNode("Unreferenced var: ", node0);
      NodeUtil.isVar(node1);
      NodeUtil.mayEffectMutableState(node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention((CodingConvention) null, node0, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LP [empty_block: 1] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(57, 57, (-5367));
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node1 = Node.newString(20, "JSType$TypePair");
      node0.cloneNode();
      Node.newString(15, "JSType$TypePair");
      NodeUtil.mayEffectMutableState(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(141);
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(36, node0, 4, (-52));
      node0.addChildrenToBack(node1);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(1955);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = NodeUtil.getStringValue(node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = NodeUtil.newVarNode("G[?", node0);
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(51);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(13, 13, (-436));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isFunctionObjectApply(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      Node node0 = new Node(100, 100, 121);
      Node node1 = new Node(121, node0, 18, 38);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.addChildrenToBack(node1);
      NodeUtil.isExprAssign(node1);
      boolean boolean0 = NodeUtil.isCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(98);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      String string0 = NodeUtil.opToStr(21);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = NodeUtil.opToStr(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      NodeUtil.getStringNumberValue("\n parent:");
      NodeUtil.isSimpleOperatorType(88);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NodeUtil.isAssociative(102);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externsRoot;
      Node node1 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.isAssignmentOp(node1);
      node1.setLineno(25);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(2048);
      Node node1 = new Node(43, node0, node0);
      NodeUtil.getImpureBooleanValue(node1);
      NodeUtil.isSimpleOperatorType(14);
      Node node2 = new Node(2, 0, 30);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      boolean boolean1 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = new Node((-1391));
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN, 103, 103);
      node0.setCharno(103);
      NodeUtil.getImpureBooleanValue(node0);
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
      
      String string1 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("NaN", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = NodeUtil.precedence(83);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(100);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(6);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(83);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString(86, "rhino");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      NodeUtil.mayEffectMutableState(node0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(87);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(95);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(85, 85, 85);
      Node node1 = new Node(91, node0, node0, (-2669), 31);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(110);
      NodeUtil.mayEffectMutableState(node0);
      String string0 = NodeUtil.opToStr(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(97);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isAssignmentOp(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(95, 95, 95);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(97, 97, 97);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(5714, 5714, 5714);
      NodeUtil.opToStr(31);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(58);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = new Node(10);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      Node.newString(46, "Aeo0J,Va&40", 6, 36);
      boolean boolean0 = NodeUtil.isAssociative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(101);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(105);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(105, ".i", 52, 52);
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = new Node(1, node0, (-429), 0);
      node0.setOptionalArg(true);
      HashSet<String> hashSet0 = new HashSet<String>();
      HashSet<String> hashSet1 = new HashSet<String>();
      NodeUtil.canBeSideEffected(node0, hashSet1);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(111);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCASE
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(102);
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
      
      NodeUtil.isStrWhiteSpaceChar(20);
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("externsValidation");
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      node0.setType(88);
      node0.detachChildren();
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean1 == boolean0);
      
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(55, 55, 55);
      Node.newNumber((-153.1), 1, 49);
      NodeUtil.mayEffectMutableState(node0);
      String string0 = NodeUtil.opToStr(116);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      String string0 = NodeUtil.opToStrNoFail(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(28);
      Node node1 = new Node(15, node0);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(24);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = NodeUtil.opToStr(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(64);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(64);
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
      String string0 = NodeUtil.getSourceName(node0);
      assertNotNull(string0);
      assertEquals(" [testcode] ", string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fk=>u^@-7:N");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      NodeUtil.opToStr(32);
      int int0 = new Integer(32);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
      assertTrue(boolean0);
      
      Node node0 = Node.newString("");
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      NodeUtil.opToStr(47);
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(98, 98, 227);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertEquals("undefined", string0);
      
      boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
      assertTrue(boolean0);
      assertEquals(98, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(62);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      boolean boolean1 = NodeUtil.isValidPropertyName("false");
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isForIn(node0);
      boolean boolean3 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(81, 81, 81);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(34);
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      assertEquals(8232, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
      assertEquals(141, node0.getCharno());
      assertEquals(141, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = new Node(33);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue(" (type ");
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node.newString("NAME, LP, or BLOCK node expected; found: ");
      Double double0 = NodeUtil.getStringNumberValue("NAME, LP, or BLOCK node expected; found: ");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node(74);
      Node node1 = Node.newNumber((double) 74, 8, 5);
      node0.addChildrenToFront(node1);
      node0.setWasEmptyNode(false);
      String string0 = NodeUtil.opToStrNoFail(10);
      assertEquals("^", string0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node0 = new Node((byte)12);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(35);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN, 103, 103);
      NodeUtil.getImpureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("inva\"id assignmen target", 110, 110);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.isCommutative(7);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean1 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isString(node0);
      assertFalse(boolean2 == boolean0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean3 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(74);
      NodeUtil.isSimpleOperatorType(37);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-2));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-2> (type -2)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(15);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      node0.setCharno(198);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(103);
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(141);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototye", 141, 141);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(141, node0.getCharno());
      assertEquals(141, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(15);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = NodeUtil.opToStr((byte)12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(11);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(110);
      NodeUtil.isExprAssign(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = NodeUtil.newVarNode("", node0);
      node1.getDirectives();
      NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(48);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(74, 74, 74);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(74, 110, 74);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(16);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_NS_MEMBER 110
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("0iV:A@");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
      
      Double double0 = NodeUtil.getStringNumberValue("&&");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(22);
      int int0 = new Integer(22);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = new Node(102);
      NodeUtil.precedence(9);
      int int0 = new Integer(8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(85);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
      
      NodeUtil.precedence(95);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(8232, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(64);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
      
      boolean boolean1 = NodeUtil.isExprAssign(node0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(63);
      int int0 = NodeUtil.precedence((byte)32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      NodeUtil.isAssignmentOp(node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(30, 102, 102);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isImmutableValue(node0);
      Node node1 = new Node(29, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 84: RP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(55, 55, 55);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(22);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = NodeUtil.opToStr(64);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = NodeUtil.opToStr(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
      Node node1 = Node.newString(11, "XML");
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(44);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertEquals(125, node0.getLineno());
      assertEquals(125, node0.getCharno());
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(58);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = new Node(49, node0, node0, 24, 44);
      node1.setType(95);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(102);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      node0.children();
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
      Node node1 = new Node(34, node0, 125, 47);
      MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
      
      NodeUtil.isBooleanResultHelper(node0);
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(64);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = new Node(11);
      Node node1 = new Node(34);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(57);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=57> (type 57)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(105);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(105);
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = new Node(34);
      node0.addChildrenToBack(node0);
      NodeUtil.mayHaveSideEffects(node0);
      // Undeclared exception!
      NodeUtil.redeclareVarsInsideBranch(node0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(26, 110, 255);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(68, 68, 68);
      String string0 = NodeUtil.opToStr(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = NodeUtil.newVarNode("", node0);
      assertEquals(118, node1.getType());
      
      node1.setType(21);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = 37;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(77);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 77: TRY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(97);
      Node.newNumber((double) 97, 37, 5);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "]XXPgajsZ{_<Slp\"L", "]XXPgajsZ{_<Slp\"L");
      Node node1 = new Node(29, node0, 29, 1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = new Node(58);
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" mdg#l]7c,y)JiFr9", "_jDXW~o", 935, (String) null, (-2538));
      simpleErrorReporter0.error("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", "_jDXW~o", 935, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", (-632));
      MockPrintStream mockPrintStream0 = new MockPrintStream(" mdg#l]7c,y)JiFr9");
      Node node0 = Node.newString("XB(C4GfkJF>@h#G`f/", 12, 2777);
      Node node1 = NodeUtil.newVarNode("XB(C4GfkJF>@h#G`f/", node0);
      node0.clonePropsFrom(node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      System.setCurrentTimeMillis(45);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
      boolean boolean1 = NodeUtil.isLhs(node0, node1);
      assertEquals(2777, node1.getCharno());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(85);
      NodeUtil.arrayToString(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        nodeUtil_MayBeStringResultPredicate0.apply(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
      Node node0 = new Node(48);
      Node node1 = new Node(20, node0, 4095, 21);
      node0.setType(16);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isObjectCallMethod(node1, "com.google.javascript.jscomp.NodeUtil$VarCollector");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      node0.toStringTree();
      NodeUtil.isAssignmentOp(node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
      
      boolean boolean1 = NodeUtil.isAssociative(8);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(88);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.opToStr(88);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(88, (-1738), 74);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(4532);
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.isSimpleOperatorType(41);
      NodeUtil.isStrWhiteSpaceChar(41);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(22);
      Node node0 = Node.newNumber((double) 22, 22, 22);
      NodeUtil.mayEffectMutableState(node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = new Node(4275, 4275, 251);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(4275, node1.getLineno());
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node(71, 71, 71);
      String string0 = NodeUtil.opToStr(9);
      assertNotNull(string0);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = new Node(86);
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("JhE", stack0, node0, 1, 33);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(105, 22, 105);
      Node node1 = new Node(18, node0, 0, 41);
      HashSet<String> hashSet0 = new LinkedHashSet<String>(28);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = new Node(20);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = NodeUtil.precedence(108);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)12, "javascript");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newString("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = new Node(30);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = NodeUtil.precedence(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "msg.no.semi.for", (-14), (-14));
      NodeUtil.isStrWhiteSpaceChar(1);
      String string0 = NodeUtil.getPrototypePropertyName(node0);
      assertEquals("i.for", string0);
      
      NodeUtil.getPrototypeClassName(node0);
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(25, 25, 110);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
      
      boolean boolean0 = NodeUtil.isAssociative((-967));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = new Node(105);
      // Undeclared exception!
      try { 
        NodeUtil.isHoistedFunctionDeclaration(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = NodeUtil.newVarNode("", node0);
      node1.setType(21);
      NodeUtil.mayEffectMutableState(node1);
      NodeUtil.getImpureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-3931));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-3931> (type -3931)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isBooleanResult(node0);
      boolean boolean2 = NodeUtil.isCallOrNew(node0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 83: LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(102);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      int int0 = 81;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 81: LC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar((-675));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-675), "+[k");
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("bJeXU/c", stack0, node0, 37, 4095);
      assertEquals(3, node1.getChildCount());
      assertEquals(37, node1.getLineno());
      assertEquals(4095, node1.getCharno());
      assertEquals(105, node1.getType());
      
      Node node2 = new Node(29);
      AstParallelizer.createNewFileLevelAstParallelizer(node2);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("bJeXU/c");
      node0.children();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Object object0 = new Object();
      boolean boolean1 = NodeUtil.valueCheck(node2, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.evaluatesToLocalValue(node2, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = new Node(93);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node((-42), (-42), 1427);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.isGet(node0);
      Node node1 = new Node(14, node0, node0, node0, 8, 4);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isObjectLitKey(node1, node0);
      nodeUtil_MayBeStringResultPredicate0.apply(node1);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lc (type 81)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN, 103, 103);
      NodeUtil.getImpureBooleanValue(node0);
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = new Node(85);
      NodeUtil.isAssignmentOp(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = new Node((-7));
      Node node1 = new Node(19);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newNumber((-1018.037878460538));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = Node.newString("eOyY@3Z", 43, (-931));
      Node node2 = new Node(21, node0, 38, 32);
      node1.getQualifiedName();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.has(node2, nodeUtil_MayBeStringResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = 73;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(73);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=73> (type 73)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(73);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node((byte)98);
      Node node1 = new Node(37, node0);
      boolean boolean0 = NodeUtil.isForIn(node0);
      NodeUtil.isStrWhiteSpaceChar(13);
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      NodeUtil.getNumberValue(node1);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node1);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(23);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(799);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(13);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node.newString("LOR(#h5Ey");
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      Node.newString("J#t", 10000, 10000);
      Node node0 = new Node(36, 24, 4);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETELEM 24
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeWHILE 113
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 113: WHILE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newString("`)");
      node0.children();
      HashSet<String> hashSet0 = new HashSet<String>();
      HashSet<String> hashSet1 = new HashSet<String>();
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      NodeUtil.isExprAssign(node0);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = new Node(126, 126, 126);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      boolean boolean1 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int int0 = NodeUtil.precedence(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8/>`$NBl;y.");
      int int0 = 103;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 103: DEC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newString(45, "");
      NodeUtil.mayBeString(node0);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = new Node(81);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3168));
      Node node1 = NodeUtil.newExpr(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.extractClassNameIfProvide(node0, node1);
      assertEquals(130, node1.getType());
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString(35, "sK^dW<.:bT!Itx]ey");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.siblings();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = NodeUtil.newVarNode("", node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertEquals(118, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("+infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      int int0 = NodeUtil.precedence(105);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = new Node(14, node0, node0, node0, 11, 12);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isControlStructure(node1);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: NOT 26 of LT 11
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      Node node0 = Node.newString("Infinity", 10000, 10000);
      Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
      NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
      Node node2 = Node.newNumber((double) 15);
      node2.children();
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
      compiler0.getWarnings();
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNull(string0);
      
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = new Node(51);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "G", node0, "\"");
      NodeUtil.isExprAssign(node1);
      boolean boolean0 = NodeUtil.isControlStructure(node1);
      assertFalse(boolean0);
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      NodeUtil.opToStr(64);
      NodeUtil.isStrWhiteSpaceChar(64);
      int int0 = NodeUtil.precedence(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = new Node(98, 98, 227);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1));
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node.newString("`)");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "`)", 27, 1350);
      NodeUtil.isStrWhiteSpaceChar(49);
      Node node1 = Node.newNumber((double) 1);
      NodeUtil.mayBeString(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      NodeUtil.copyNameAnnotations(node1, node1);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 60: ENUM_ID
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(32);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSWITCH 110
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "m&GU", ":BQ2Q8!NRn");
      Node node1 = new Node(26, node0, node0, node0, node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      NodeUtil.copyNameAnnotations(node0, node0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      node0.cloneNode();
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isGetOrSetKey(node1);
      node1.children();
      compilerOptions0.processObjectPropertyString = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Normalize.parseAndNormalizeTestCode(compiler0, "JSC_OPTIONAL_ARG_AT_END", "M!#~%V^E");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      nodeUtil_MayBeStringResultPredicate0.apply(node1);
      node1.setIsSyntheticBlock(false);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(110);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString("NoObject");
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = new Node(2048, 2048, 2048);
      Node node1 = new Node(43, node0, node0);
      Node node2 = node1.cloneTree();
      NodeUtil.getNumberValue(node1);
      NodeUtil.getStringValue(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      int int0 = NodeUtil.precedence(97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = new Node(58);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = new Node(49, node0, node0, 24, 44);
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = NodeUtil.opToStr(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(50);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(1200);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1200
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = new Node(67, 67, 67);
      NodeUtil.precedence(33);
      NodeUtil.getPrototypeClassName(node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("&=");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = new Node(76);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(75);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString("R", 64, (-703));
      Node node1 = new Node(39, node0, 565, 2);
      node1.getJsDocBuilderForNode();
      MockPrintStream mockPrintStream0 = new MockPrintStream("R");
      Node node2 = node1.clonePropsFrom(node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = new Integer(1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.arrayToString(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(42, node0);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      NodeUtil.opToStr(62);
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = new Node(62);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("|@KCx3;f", "|@KCx3;f", 985, "|@KCx3;f", 985);
      Node node0 = new Node(25);
      Node node1 = new Node(27, node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
      NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
      String string0 = NodeUtil.getStringValue(node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setType(47);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      boolean boolean0 = NodeUtil.isCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = NodeUtil.opToStr(69);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node((-1391));
      NodeUtil.isSimpleOperatorType(30);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 120, 120);
      NodeUtil.getNumberValue(node0);
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(75, 75, 75);
      node0.cloneNode();
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(117);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(141);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
      boolean boolean0 = NodeUtil.isLatin("^");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(41);
      Node node1 = new Node(41, node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean1 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean1);
      
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      NodeUtil.valueCheck(node1, predicate0);
      boolean boolean2 = NodeUtil.isAssign(node1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(17);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = NodeUtil.opToStr(45);
      assertEquals("===", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      int int0 = NodeUtil.precedence(87);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      NodeUtil.isGet(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = new Node(121);
      Node node1 = new Node(109, 48, 12);
      boolean boolean0 = NodeUtil.isVar(node1);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1);
      
      NodeUtil.isStrWhiteSpaceChar(5);
      boolean boolean2 = NodeUtil.isLabelName((Node) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.getJsDocBuilderForNode();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.isGet(node0);
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newString(52, "size", 52, 52);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      boolean boolean1 = NodeUtil.isCommutative((-847));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(115, (-214), (-214));
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = new Node(110);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SWITCH does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(86);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = new Node(58);
      Node node1 = new Node(49, node0, node0, 24, 44);
      node0.getAncestor(0);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newString("whW|ty[)!!l1n{#Hb");
      node0.setType(49);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      boolean boolean1 = NodeUtil.isLatin("whW|ty[)!!l1n{#Hb");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(122);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(23);
      boolean boolean0 = NodeUtil.isCall(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "colapseAnonymousFunctions", "colapseAnonymousFunctions");
      Node node1 = new Node(34, node0, 33, 47);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETPROP 33
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(105, ".i", 105, 22);
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = new Node(18, node0, 0, 41);
      node0.addChildrenToBack(node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isWithinLoop(node1);
      boolean boolean2 = NodeUtil.isValidPropertyName(".i");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 119: WITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(101);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = new Node((-1391));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType((-5084));
      byte[] byteArray0 = new byte[6];
      Node node0 = new Node(85);
      NodeUtil.isAssignmentOp(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      String string0 = NodeUtil.opToStrNoFail(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = new Node(81, 81, 81);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("collapsAnonymousFunctions");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(2048);
      Node node1 = new Node(43, node0, node0);
      TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node1);
      TernaryValue ternaryValue1 = NodeUtil.getPureBooleanValue(node0);
      assertFalse(ternaryValue1.equals((Object)ternaryValue0));
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = new Node(76);
      NodeUtil.isStrWhiteSpaceChar(10);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = new Node(109);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("&=");
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(98);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 98: HOOK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(81);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3168));
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLC
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      NodeUtil.opToStr(82);
      NodeUtil.isStrWhiteSpaceChar(1230);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-654));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-654> (type -654)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar((-4));
      Node node0 = Node.newString(">>=", (int) (byte)73, 77);
      NodeUtil.precedence(90);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = NodeUtil.opToStr(80);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString("`qV)3mI)EL3,iJSGR");
      Node node1 = NodeUtil.newVarNode("`qV)3mI)EL3,iJSGR", node0);
      node0.setType(46);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean1);
      assertEquals(118, node1.getType());
      
      boolean boolean2 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(9);
      Node node0 = new Node(16);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6=_{q/25uS$bs");
      NodeUtil.isLoopStructure(node0);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = NodeUtil.opToStr(76);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = new Node(109, 227, 2281);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getImpureBooleanValue(node1);
      assertEquals(122, node1.getType());
      assertEquals(2281, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node((byte)98);
      Node node1 = new Node(37, node0);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = new Node(37);
      Node.newString(23, "C");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node((-1391));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = Node.newString("_3jDXW~o", 26, 2);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node2 = new Node(37, node1, node1, node1, node0, 1, 39);
      NodeUtil.evaluatesToLocalValue(node2, nodeUtil_NumbericResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CALL 1 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = new Node(9, 9, 9);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4095);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = new Node((byte)101);
      node0.toString(true, true, false);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        nodeUtil_MayBeStringResultPredicate1.apply(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar((-654));
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("0W@0(b2", 2386, (-654));
      node0.setType((-3106));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(122, node1.getType());
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
      Node node2 = Node.newString(41, "0W@0(b2");
      peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      node2.removeChildren();
      Node node3 = new Node(431, node2, node2);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node2);
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      boolean boolean1 = NodeUtil.isAssociative(42);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = new Node(41);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      NodeUtil.getNumberValue(node1);
      NodeUtil.isNullOrUndefined(node0);
      node1.putIntProp(12, 124);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = Node.newString(115, "{");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newString(119, "{");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node node0 = new Node(82, 82, 227);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRC 82
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(104);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDOT
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 9, 97);
      String string0 = NodeUtil.getStringValue(node0);
      assertNotNull(string0);
      assertEquals("Infinity", string0);
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(97, node0.getCharno());
      assertEquals(9, node0.getLineno());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType((-5024));
      NodeUtil.isSimpleOperatorType(54);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(54);
      NodeUtil.isExprAssign(node0);
      NodeUtil.isCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      nodeUtil_MayBeStringResultPredicate0.equals("C)t1;}EBlGt");
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
      
      Node node0 = Node.newString(95, "*=", 1799, 95);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = new Node(112, 1514, 8);
      boolean boolean0 = NodeUtil.isVar(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1);
      
      NodeUtil.getPureBooleanValue(node0);
      boolean boolean2 = NodeUtil.isLabelName(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(31);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getNumberValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setType(31);
      Node node1 = new Node(2011, node0, node0);
      NodeUtil.isStrWhiteSpaceChar(1);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node1);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertNotNull(string0);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(105, ".i", 52, 52);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Double double0 = NodeUtil.getStringNumberValue(".i");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node1 = Node.newString(24, ".i");
      node0.cloneNode();
      Node node2 = Node.newString(73, ".i");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node2);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean1 = NodeUtil.isNumericResultHelper(node1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newString(27, "prototype");
      NodeUtil.mayBeString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 34: SETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
      Node node1 = new Node(34, node0, 125, 47);
      MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
      HashSet<String> hashSet0 = new HashSet<String>();
      HashSet<String> hashSet1 = new HashSet<String>();
      hashSet1.add("collapseAnonymousFunctions");
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, hashSet1);
      boolean boolean1 = NodeUtil.isGet(node1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isForIn(node0);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-5024));
      assertFalse(boolean0);
      
      Node node0 = Node.newString("AST not normalized.");
      NodeUtil.getImpureBooleanValue(node0);
      Node node1 = new Node(24, node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
      boolean boolean1 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
      boolean boolean2 = NodeUtil.isAssign(node1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      int int0 = NodeUtil.precedence(124);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(56);
      Node node0 = new Node(311, 1403, (-310));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
      List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
      Vector<Node> vector0 = new Vector<Node>(list0);
      Node node0 = new Node((-33));
      linkedListMultimap0.clear();
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 160, 33);
      NodeUtil.getInfoForNameNode(node0);
      node1.setJSDocInfo((JSDocInfo) null);
      Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
      assertEquals(105, node2.getType());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
      boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
      boolean boolean1 = NodeUtil.containsFunction(node2);
      assertEquals(160, node1.getLineno());
      assertFalse(boolean1 == boolean0);
      assertEquals(33, node1.getCharno());
      assertEquals(3, node2.getChildCount());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isStrWhiteSpaceChar(65279);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("Infinity", "Infinity");
      Node node0 = Node.newString(35, "Infinity");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node0 = new Node(113);
      NodeUtil.isControlStructureCodeBlock(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: WHILE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = new Node(102);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter((SourceExcerptProvider) null);
      Node node1 = NodeUtil.newExpr(node0);
      NodeUtil.isExpressionNode(node1);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-3212));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3212
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("msg.no.paren.after.parms");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = new Node(30, 61, 61);
      String string0 = NodeUtil.opToStr(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(141);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = new Node(115, (-1211), 141);
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 104: DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      Node node0 = new Node(11);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Doubl:Ae");
      node0.setCharno(3);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Double double0 = NodeUtil.getStringNumberValue("-h;1>6rP~nlGh]j");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = new Node(110);
      Stack<Node> stack0 = new Stack<Node>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node1 = Node.newString(32, "I:");
      node0.cloneNode();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = new Node(178);
      Node node1 = Node.newString(32, "Error");
      node0.addChildrenToBack(node1);
      NodeUtil.isExprAssign(node0);
      boolean boolean0 = NodeUtil.isCall(node1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.runtimeError("n&aHA$T7Y;", "n&aHA$T7Y;", 2877, "`B`pHlJfyu%y1X5|j5", 3584);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("2}#8b]#", "2}#8b]#", 2217, "mPj!<3", (-241));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = new Node(2217);
      node0.getQualifiedName();
      Node node1 = new Node(86, node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
      NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
      boolean boolean1 = NodeUtil.isAssign(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = new Node(86);
      Stack<Node> stack0 = new Stack<Node>();
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = new Node(2048, 2048, 2048);
      Node node1 = new Node(43, node0, node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node(75, 75, 75);
      NodeUtil.isVar(node0);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = new Node(49);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTHROW
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(5595);
      Integer integer0 = new Integer(5595);
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      simpleErrorReporter0.warning("bQ#}dh^*iM9!.9Q", "bQ#}dh^*iM9!.9Q", 1544, "com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates", 1544);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.isGet(node0);
      String string0 = NodeUtil.opToStrNoFail(87);
      assertEquals("|=", string0);
      
      Node node1 = new Node(110, node0, node0);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      NodeUtil.isStrWhiteSpaceChar(1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      NodeUtil.opToStr(85);
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(56);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 56: CATCH_SCOPE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = new Node(56);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(57);
      Node node0 = new Node(57, 57, 57);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String string0 = NodeUtil.opToStr(114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(65);
      NodeUtil.isStrWhiteSpaceChar(65);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = new Node(12);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Number");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.getStringNumberValue("prototype");
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node1 = Node.newString(35, "prototype");
      Node node2 = new Node(16, node1);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = new Node(2048);
      Node node1 = new Node(43, node0, node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      NodeUtil.opToStr(121);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
      
      node0.putIntProp(4, 84);
      boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean2 = NodeUtil.canBeSideEffected(node0, set0);
      assertEquals(97, node0.getCharno());
      assertTrue(boolean2 == boolean1);
      assertEquals(4, node0.getLineno());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = new Node(102);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      Vector<JSType> vector0 = new Vector<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=50> (type 50)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(19, int0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(77);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = new Node(58);
      node0.getAncestor(58);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node node0 = new Node((-2075), 91, 91);
      Node node1 = new Node(91, node0, node0, node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = new Node(91);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = Node.newString(87, "<<=", 87, 61);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(92, 92, 2024);
      NodeUtil.getOpFromAssignmentOp(node0);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(153);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = new Node(153, 153, 153);
      NodeUtil.isVar(node0);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.isLabelName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLABEL_NAME 153
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = new Node(41, 49, 38);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSType$TypePair");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$V$/");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      NodeUtil.opToStr(64);
      Node node0 = new Node(64);
      Node node1 = new Node(28, node0, 4, 3);
      node0.getQualifiedName();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      String string0 = NodeUtil.opToStrNoFail(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = new Node(85);
      NodeUtil.isAssignmentOp(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar((-654));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-654), "+[k");
      Stack<Node> stack0 = new Stack<Node>();
      Object[] objectArray0 = new Object[8];
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = new Node(44, 13, 8);
      Node[] nodeArray0 = new Node[0];
      NodeUtil.newCallNode(node0, nodeArray0);
      NodeUtil.isAssignmentOp(node0);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      NodeUtil.getPureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = new Node(105);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(73);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 73: REF_MEMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      NodeUtil.opToStr(75);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-93));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-93> (type -93)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = new Node(100);
      Node node1 = new Node((-2843), node0, 18, 38);
      node0.addChildrenToBack(node1);
      NodeUtil.mayBeString(node0);
      Node node2 = NodeUtil.getPrototypeClassName(node1);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(29);
      NodeUtil.isExprAssign(node0);
      boolean boolean0 = NodeUtil.isCall(node0);
      assertFalse(boolean0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      boolean boolean2 = NodeUtil.isLhs(node0, node0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = Node.newString("xH7vU");
      NodeUtil.mayEffectMutableState(node0);
      boolean boolean0 = NodeUtil.isCommutative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(71);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = Node.newString(86, "rhino");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(141);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(141);
      assertFalse(boolean0);
      
      Node node0 = Node.newString("^", 141, 141);
      node0.getQualifiedName();
      NodeUtil.isStrWhiteSpaceChar(8232);
      boolean boolean1 = NodeUtil.isFunctionDeclaration(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      int int0 = 78;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for semi (type 78)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      int int0 = 60;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=60> (type 60)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 107: IMPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=62> (type 62)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      NodeUtil.getPureBooleanValue(node0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("externsValidation");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      Node node1 = new Node(31, node0);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
      assertFalse(boolean0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      Node node0 = Node.newString("Infinity", (-1874), (-3491));
      Node node1 = new Node(28, node0, node0);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(153);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setType(1542);
      Node node1 = new Node((-1399), node0, node0);
      NodeUtil.isStrWhiteSpaceChar(8233);
      NodeUtil.mayBeString(node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node2);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = new Node(65);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeGET_REF
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(25);
      Node node1 = new Node(27, node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
      String string0 = NodeUtil.getStringValue(node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      NodeUtil.opToStr(74);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=74> (type 74)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "", (-135), (-135));
      NodeUtil.isReferenceName(node0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeSyntheticCode(compiler0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(57);
      node0.toString();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      nodeUtil_MayBeStringResultPredicate0.apply(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeENUM_INIT_KEYS
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node.newString("LOR(#h5Ey");
      Node node0 = new Node(18, 9, 16);
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      boolean boolean1 = NodeUtil.isCallOrNew(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(61);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for thisfn (type 61)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(30);
      node0.addChildrenToBack(node0);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      NodeUtil.isWithinLoop(node0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = Node.newString(78, ",2bJ[!5huC1HtVVq");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSEMI ,2bJ[!5huC1HtVVq
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(78);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XM|L", 125, 125);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.isSimpleOperatorType(51);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=66> (type 66)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      String string0 = NodeUtil.opToStr(65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = new Node(102);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(11);
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = Node.newNumber((double) 0, 46, 119);
      NodeUtil.getPureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = new Node(67, 67, 67);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDEL_REF 67
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Node node0 = new Node(67, 67, 67);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isAssociative(23);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=58> (type 58)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(51);
      assertEquals("in", string0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      NodeUtil.isAssociative(102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStrNoFail(91);
      NodeUtil.precedence(51);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-963));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-963> (type -963)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      NodeUtil.opToStrNoFail(20);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Infinity");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 141, (-2954));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("Infinity", 1431655764, 104);
      Node node2 = new Node(116);
      NodeUtil.getNumberValue(node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
      NodeUtil.isNullOrUndefined(node3);
      node2.putIntProp((-1640), (-622));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldWhile(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = new Node(41);
      NodeUtil.getPureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.precedence(122);
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = new Node(51);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      int int0 = new Integer(77);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for try (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = new Node((-7));
      Vector<Node> vector0 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("com.google.javascript.jscomp.ClosureReverseAbstractInterpreter$4", vector0, node0, 4, 3887);
      NodeUtil.getArgumentForFunction(node1, 13);
      assertEquals(3887, node1.getCharno());
      assertEquals(4, node1.getLineno());
      assertEquals(3, node1.getChildCount());
      
      NodeUtil.getPureBooleanValue(node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      NodeUtil.getConditionExpression(node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = new Node(103);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = new Node(62, 62, 62);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRETURN_RESULT 62
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      int int0 = NodeUtil.precedence(52);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = new Node(37);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node((byte)98);
      Node node1 = new Node(37, node0);
      NodeUtil.isSimpleOperatorType((-2358));
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node((byte) (-119));
      Node node1 = new Node(37, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("-h;1>6r;P~nlGh]j");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      String string0 = ":BQ2Q8XNRn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":BQ2Q8XNRn");
      Node node0 = new Node(32, 2, 98);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = new Node(26);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = new Node(109);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.getImpureBooleanValue(node0);
      Node node1 = Node.newString(":K46 T)?", 2, 10);
      Node node2 = new Node(44, node0, node1);
      NodeUtil.getImpureBooleanValue(node2);
      NodeUtil.getImpureBooleanValue(node2);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setType(18);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",obJ[!5huCN1HtV1q");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rb (type 80)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(107);
      boolean boolean0 = NodeUtil.isCall(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = new Node(92, 92, 92);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = new Node(90);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      nodeUtil_MayBeStringResultPredicate0.equals((Object) null);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      NodeUtil.getStringNumberValue("NaN");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      String string0 = NodeUtil.opToStr(71);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Node node0 = new Node(43);
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = new Node(1192, node0, node0, 11, 97);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      boolean boolean1 = NodeUtil.isEmptyBlock(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Node node0 = new Node(89);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(92, 92, 92);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(72);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 72: ESCXMLTEXT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ref_special (type 69)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Node node0 = Node.newString(17, "Zyv");
      NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
      NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isStrWhiteSpaceChar(2615);
      Object object0 = new Object();
      Node node0 = Node.newString(113, "com.google.javascript.jscomp.SuspiciousPropertiesCheck");
      node0.getJsDocBuilderForNode();
      NodeUtil.isFunctionObjectCall(node0);
      NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = new Node(37);
      NodeUtil.isExprAssign(node0);
      boolean boolean0 = NodeUtil.isCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean1 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.opToStr(50);
      Node.newString(39, "collapseAnonymousFunctions", (-3116), 44);
      Denormalize denormalize0 = new Denormalize(compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        nodeTraversal0.getScopeRoot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      int int0 = 66;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 66: SET_REF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = new Node(96);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = new Node(96);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Node node0 = new Node(30);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(12, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Node node0 = new Node(105);
      NodeUtil.mayEffectMutableState(node0);
      TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node0);
      TernaryValue ternaryValue1 = NodeUtil.isStrWhiteSpaceChar(21);
      assertFalse(ternaryValue1.equals((Object)ternaryValue0));
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(92);
      Node node1 = new Node(48, node0);
      Node node2 = new Node(23, (-2012), 147);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node node0 = new Node(48);
      Node node1 = new Node(20, node0, 4095, 21);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.mayBeString(node0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      Node node1 = new Node(118, node0, 40, 38);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NodeUtil.getStringValue(node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = new Node(76, 76, 76);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate1 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_NS_NAME 76
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Node node0 = new Node(113);
      NodeUtil.isAssignmentOp(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Node node1 = new Node(84, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Node node0 = new Node(108);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      NodeUtil.opToStr(52);
      Node node0 = new Node(52);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      NodeUtil.opToStr(52);
      Node node0 = new Node(52);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Node node0 = new Node(58);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = new Node(49, node0, node0, 24, 44);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-16), (-16), 117);
      String string0 = "C)t1;}EBlGt";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s7");
      Node node1 = new Node(10, 1062, 39);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      Node node0 = new Node(100);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setType(15);
      Node node1 = new Node(30, node0, node0);
      NodeUtil.constructorCallHasSideEffects(node1);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Node node0 = new Node(75);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_NAME
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=70> (type 70)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node((byte)89);
      Node node1 = new Node(37, node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Node node0 = Node.newString(105, "<W&$", 105, (-1801614837));
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(104, 98, (-6315));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("U&=");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = new Node(96, 96, 96);
      NodeUtil.getOpFromAssignmentOp(node0);
      NodeUtil.copyNameAnnotations(node0, node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      int int0 = new Integer(31);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setString("com.google.javascript.jscomp.Compiler$5");
      Integer integer0 = new Integer(101);
      NodeUtil.copyNameAnnotations(node0, node0);
      boolean boolean1 = NodeUtil.isLhs(node0, node0);
      assertEquals(97, node0.getCharno());
      assertTrue(boolean1 == boolean0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4, node0.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = new Node(44);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Node node0 = new Node(11);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean1 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      NodeUtil.mayEffectMutableState(node0);
      int int0 = new Integer(19);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Node node0 = new Node(47);
      node0.addChildToFront(node0);
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Node node0 = new Node(30);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      boolean boolean0 = NodeUtil.isCallOrNew(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Node node0 = Node.newString("`)");
      Node node1 = new Node(123, 29, 23);
      boolean boolean0 = NodeUtil.isVar(node1);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean1);
      
      NodeUtil.getPureBooleanValue(node0);
      boolean boolean2 = NodeUtil.isLabelName(node1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node((byte)89);
      Node node1 = new Node(37, node0);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.isImmutableValue(node0);
      String string0 = NodeUtil.opToStr(2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(101);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Integer integer0 = new Integer(1);
      nodeUtil_MayBeStringResultPredicate0.equals(integer0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=71> (type 71)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      node0.addChildToFront(node0);
      // Undeclared exception!
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((byte)69, 28, (byte)0);
      NodeUtil.isVar(node0);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      assertNotNull(nodeUtil_MayBeStringResultPredicate0);
      
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_SPECIAL 28
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(42, "javascript");
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      node0.copyInformationFromForTree(node1);
      NodeUtil.isValidDefineValue(node0, set0);
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      Node node0 = new Node(58);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeENUM_INIT_VALUES
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      Node node0 = Node.newString(16, "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Node node0 = new Node(103);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(28);
      node0.hasSideEffects();
      NodeUtil.isPrototypePropertyDeclaration(node0);
      NodeUtil.isBooleanResultHelper(node0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41, 13, (-389));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(52);
      Node node0 = Node.newString(105, "Infinity", 52, 52);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean1 = NodeUtil.isCall(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Node node0 = new Node(66);
      Node node1 = node0.cloneTree();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSET_REF
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(66);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      Node node0 = new Node(57, 48, (-5385));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = Node.newString(8, "|Ww<;");
      Node node2 = new Node(4095, node0, node0, node1, (-2564), (-3036));
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isControlStructure(node1);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = new Node(31, 31, 31);
      NodeUtil.isVar(node0);
      node0.getAncestor(31);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Node node0 = new Node(93);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3160));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.isLatin("\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"_\n\rMethodOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u0085\u0002\n\u0013UninterpretedOption\u0012;\n\u0004name\u0018\u0002 \u0003(\u000B2-.google.protobuf.UninterpretedOption.NamePart\u0012\u0018\n\u0010identifier_value\u0018\u0003 \u0001(\t\u0012\u001A\n\u0012positive_int_value\u0018\u0004 \u0001(\u0004\u0012\u001A\n\u0012negative_int_value\u0018\u0005 \u0001(\u0003\u0012\u0014\n\fdouble_value\u0018\u0006 \u0001(\u0001\u0012\u0014\n\fstring_value\u0018\u0007 \u0001(\f\u001A3\n\bNamePart\u0012\u0011\n");
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-2525));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-2525> (type -2525)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.getPureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Node node0 = new Node(11);
      NodeUtil.isLoopStructure(node0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Node node0 = new Node(99, 99, 99);
      Stack<Node> stack0 = new Stack<Node>();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(22);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCOLON 99
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = new Node(60);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      int int0 = NodeUtil.precedence(89);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Node node0 = new Node(130);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(72);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=72> (type 72)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Node node0 = new Node(30, 30, 826);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Node node0 = Node.newString(45, "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(99);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("%");
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "DZ.'$2MR.W", node0, "DZ.'$2MR.W");
      assertEquals(33, node1.getType());
      
      NodeUtil.mayHaveSideEffects(node0);
      MockFile mockFile0 = new MockFile("J-xl:?f");
      Node node2 = Node.newString(90, "J-xl:?f", 12, (-1104));
      int int0 = NodeUtil.getOpFromAssignmentOp(node2);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.aliasableStrings;
      NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(115);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeFOR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(115);
      NodeUtil.mayEffectMutableState(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Node node0 = Node.newString(108, "{");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Node node0 = Node.newString(73, "com.google.common.io.CharStreams");
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Node node0 = new Node(6);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = Node.newNumber((double) 49);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(77, "l()-_HM#1o_ag`");
      NodeUtil.getStringValue(node0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      nodeUtil_MatchDeclaration0.apply(node0);
      NodeUtil.isAssociative(1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTRY l()-_HM#1o_ag`
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(19, "&=");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      Node node0 = Node.newString(63, "rhino", 63, 63);
      node0.getAncestor(63);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(19, "");
      NodeUtil.isNumericResultHelper(node0);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
      Node node1 = new Node(34, node0, 33, 47);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(22);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = Node.newString(22, "prototype");
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      Node node0 = new Node(68, 68, 68);
      Node node1 = new Node(43, node0);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Infinity", "Infinity");
      Node node1 = new Node(21, node0, node0, 17, 16);
      NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(31, "OKB'Ej`z<");
      NodeUtil.isValidDefineValue(node0, set0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node((-1391));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node2 = new Node(27, node0, node1, 1, 19);
      node1.getDirectives();
      NodeUtil.isValidDefineValue(node2, (Set<String>) null);
      NodeUtil.isControlStructure(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1391
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
      Node node1 = new Node(34, node0, 125, 47);
      node0.setCharno(34);
      boolean boolean0 = NodeUtil.isLoopStructure(node1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean1 = NodeUtil.isValidDefineValue(node1, set0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      Node node0 = Node.newString(86, "rhino");
      node0.addChildrenToFront(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Node node0 = Node.newString(86, "rhino");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=53> (type 53)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("U&=");
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      Node node0 = Node.newString(33, ".i", 33, 3242);
      Node node1 = new Node(12, node0, 84, 33);
      HashSet<String> hashSet0 = new HashSet<String>();
      HashSet<String> hashSet1 = new HashSet<String>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeUtil.canBeSideEffected(node1, set0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      Node node0 = new Node(53, 53, 53);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprAssign(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 70: DEFAULTNAMESPACE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      Node node0 = new Node(53);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      Node node0 = new Node(53);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLOCAL_LOAD
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      Node node0 = Node.newString(66, "size");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSET_REF size
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(105, ".i", 52, 52);
      Node node1 = new Node(1, node0, 1, 0);
      HashSet<String> hashSet0 = new HashSet<String>();
      HashSet<String> hashSet1 = new HashSet<String>();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=76> (type 76)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(2319);
      Node node1 = new Node(56, node0);
      NodeUtil.isSimpleFunctionObjectCall(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCATCH_SCOPE
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      int int0 = new Integer(68);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(68);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=68> (type 68)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      Node node0 = new Node(94);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      Node node0 = new Node(94);
      node0.addChildrenToBack(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("%");
      Vector<Node> vector0 = new Vector<Node>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      node0.setType(101);
      NodeUtil.isStrWhiteSpaceChar(31);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = node0.cloneTree();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(11);
      NodeUtil.mayEffectMutableState(node1);
      NodeUtil.copyNameAnnotations(node0, node0);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node1);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      Node node0 = Node.newString(">>>");
      Node node1 = NodeUtil.newVarNode("infinity", node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      node0.setType(19);
      NodeUtil.mayBeString(node1);
      NodeUtil.isBooleanResultHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for leavewith (type 3)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(110);
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(32, "\" is not a type.");
      NodeUtil.isValidDefineValue(node0, set0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 106: EXPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      Node node0 = new Node(128);
      boolean boolean0 = NodeUtil.isCall(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(42, "javascript");
      NodeUtil.isValidDefineValue(node0, set0);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: THIS javascript
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      Node node0 = new Node(41, 121, 121);
      NodeUtil.getStringValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 57;
      NodeUtil.opToStr(57);
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Node node0 = new Node(103);
      NodeUtil.getStringValue(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      NodeUtil.isStrWhiteSpaceChar(35);
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("externsValidation");
      Node node0 = new Node(119, (-1), 34);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      Node.newString("-infinity");
      Double double0 = NodeUtil.getStringNumberValue("-infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Node node0 = new Node(113, 15, 15);
      NodeUtil.getArrayElementStringValue(node0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder", (-128), (-1286));
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
      assertFalse(boolean0);
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      Node node0 = new Node(48, 48, 48);
      node0.cloneTree();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-97));
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBINDNAME 48
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      Node node0 = new Node(101, (-1959), (-1959));
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, (PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      printStreamErrorManager0.printSummary();
      Node node1 = compiler0.parseTestCode("goog.asserts.assertNumber");
      node0.addChildrenToBack(node1);
      NodeUtil.isExprAssign(node0);
      NodeUtil.isCall(node1);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      Node node1 = Node.newString(46, "NAME, LP, or BLOCK node expected; found:", 6, 36);
      node1.setCharno(14);
      NodeUtil.isLoopStructure(node1);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      Node node0 = new Node(129);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EXPR_VOID does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      Node node0 = new Node(44);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate1.apply(node0);
      boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(15, "bC*M0:a:S");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      Node node1 = Node.newString(46, "NAME, LP, or BLOCK node expected; found:", 6, 36);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      NodeUtil.isLoopStructure(node0);
      NodeUtil.arrayToString(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(defaultCodingConvention0, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO 114 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      Node node0 = new Node(71, 71, 71);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      Node node0 = new Node(71);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeESCXMLATTR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(79);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Node node0 = new Node(63, 63, 63);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      Node node0 = Node.newString(63, ".i", 63, 63);
      NodeUtil.isLiteralValue(node0, false);
      NodeUtil.getNumberValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      String string0 = NodeUtil.opToStr(53);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(114, "NaN");
      Node node1 = new Node(41, node0, node0);
      NodeUtil.isValidDefineValue(node1, set0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      Node node0 = new Node(55, 55, 4156);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETVAR 55
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(112, 113, 92);
      node0.getJsDocBuilderForNode();
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.isControlStructureCodeBlock(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for error (type -1)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Locale locale0 = new Locale("dfj;ad");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(28, "dfj;ad");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      NodeUtil.opToStr(61);
      Node node0 = new Node(61);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.newString((-3), ",obJ[!5huCN1HtV1q");
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      Node.newString("y5U+6^", (-235), 51);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(63, 63, 63);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      Node node0 = new Node(114);
      NodeUtil.getConditionExpression(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      Node node0 = new Node(113, 15, 15);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(55);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setvar (type 55)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$78", (-14), (-3659));
      NodeUtil.isStrWhiteSpaceChar(160);
      String string0 = NodeUtil.getPrototypePropertyName(node0);
      assertEquals(".javascript.jscomp.DefaultPassConfig$78", string0);
      
      NodeUtil.getPrototypeClassName(node0);
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      Node node0 = new Node(120, 103, 103);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      boolean boolean2 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      NodeUtil.mayEffectMutableState(node0);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node0 = new Node(79, 105, (byte)12);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLB 105
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      int int0 = NodeUtil.precedence(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Locale locale0 = new Locale("2V(!oO$q%/kRaI}SRV%");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(14, "2V(!oO$q%/kRaI}SRV%");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      NodeUtil.opToStr(67);
      Node node0 = new Node(67);
      Node.newString((-3), ",obJ[!5huCN1HtV1q");
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isControlStructure(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      Node node0 = new Node(30);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.canBeSideEffected(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      Node node0 = new Node(94);
      Node node1 = Node.newNumber((double) 94, 12, 5);
      node0.setWasEmptyNode(false);
      NodeUtil.getNumberValue(node1);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(33);
      boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String string0 = NodeUtil.opToStr(68);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      Node node0 = Node.newString("msg.bad.ctor.return", 63, 63);
      boolean boolean1 = NodeUtil.isWithinLoop(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      Node node0 = Node.newString(86, "rhino");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.isLhs((Node) null, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      Node node0 = Node.newString(86, "rhino");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("externsValidation");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0, "TightenTypes pass appears to be stuck in an infinite loop.");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
      assertTrue(node1.isQualifiedName());
      assertEquals(1, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 58, 58);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertEquals(58, node0.getLineno());
      assertTrue(boolean0);
      assertEquals(58, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      Node node0 = Node.newString(35, "sK^dW<.:bT!Itx]ey");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isGet(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(73, 73, 5712);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1727);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_MEMBER 73
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      Node node0 = new Node(127, 127, 127);
      node0.getJsDocBuilderForNode();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      Node node0 = Node.newString(63, ".i", 63, 63);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        SourceMap.DetailLevel.valueOf(".i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.SourceMap.DetailLevel..i
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      Node node0 = new Node(51);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Node node0 = Node.newString(108, "{");
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      Node node0 = Node.newString(78, ".i", 78, 78);
      NodeUtil.isLiteralValue(node0, false);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.javascript.jscomp.rlobalNamespa}e", "com.google.javascript.jscomp.rlobalNamespa}e");
      Node node0 = Node.newString(18, "com.google.javascript.jscomp.rlobalNamespa}e");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("Infinity", "Infinity");
      Node.newString(35, "Infinity");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-3), 40);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
      Node node1 = new Node(97, node0, node0);
      NodeUtil.getNumberValue(node1);
      NodeUtil.getAssignedValue(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(97, node0.getCharno());
      assertEquals(4, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
      
      Node node1 = new Node(110);
      boolean boolean1 = NodeUtil.isControlStructureCodeBlock(node1, (Node) null);
      boolean boolean2 = NodeUtil.isValidPropertyName("!|q");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
      assertEquals(4, node0.getLineno());
      assertEquals(97, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      
      Node node1 = new Node(84);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.mayHaveSideEffects(node0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      Node node0 = new Node(2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node2 = new Node(47, node1);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      Node node0 = new Node(59, 59, 59);
      Node node1 = new Node(28, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      Node node0 = Node.newString(108, "{");
      Node node1 = NodeUtil.getConditionExpression(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      Node node0 = new Node(105);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 4636, (-4609));
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      Node node0 = new Node(72);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      Node node0 = new Node(106, 106, 98);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeEXPORT 106
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      Node node0 = Node.newString("LOR(#h5Ey");
      Node node1 = new Node(18, 9, 16);
      Node node2 = new Node(112, node1, node1, node0, 16, 32);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      node2.getDirectives();
      boolean boolean1 = NodeUtil.isValidDefineValue(node2, (Set<String>) null);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isControlStructure(node2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      Node node0 = Node.newString(29, ".", 29, 29);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(5747, 5747, 5747);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      Node node0 = new Node(77, 77, 77);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      NodeUtil.isAssociative(100);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      Node node0 = Node.newString(25, "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      Node node0 = Node.newString(30, ":i#|cq/QI3&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      Node node0 = new Node(67, 67, 67);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(67);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=67> (type 67)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "<<=", "Serializing to a ByteString threw an IOException (should never happen).");
      Node node1 = new Node(82, node0, 16, 98);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(23, "externsValidation");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(126, 126, (-2447));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      Node node0 = new Node(68, 68, 68);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      Node node0 = new Node(68, 68, 68);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_CALL 68
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      Node node0 = new Node(36);
      Node node1 = NodeUtil.newExpr(node0);
      node0.addChildrenToBack(node1);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeEXPR_RESULT
         //  parent:SETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      node0.setWasEmptyNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      Node node0 = Node.newString(9, "QQG");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      Node node0 = Node.newString(13, "8@Y^(!&$9w{4x2SN<Q");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      Node node0 = new Node(59);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeENUM_NEXT
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      Node node0 = new Node(20, 20, 20);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.isBooleanResultHelper(node0);
      Set<String> set0 = node0.getDirectives();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      Node node0 = new Node(72, 72, 121);
      Node node1 = new Node(121, node0, 18, 38);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeESCXMLTEXT 72
         //  parent:FINALLY 18
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      Node node0 = Node.newString(9, "QQG");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = Node.newNumber((double) 18, 2, (-1341));
      node0.addChildToFront(node1);
      linkedHashSet0.add("R");
      NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      Node node1 = new Node(118, node0, 40, 38);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.addSuppression("JSC_IFACE_INITIALIZER_NOT_IFACE");
      NodeUtil.getStringValue(node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertFalse(jSDocInfo0.isNoShadow());
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = Node.newString(29, "NH2Z\"RV4EiC)Oj`+r");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }
}
