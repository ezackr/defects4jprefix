/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:33:14 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExploitAssigns_ESTest extends ExploitAssigns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Q=1*I");
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isLabel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.googleommon.colect.Mult4maps$qustomSortedS=tMu.timap");
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = Node.newString(4, "com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.oole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = new Node(33, node0, 47, 52);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isLabelName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.oole.ommon.collect.Multimaps$qustomSortedS=tMultima", "com.oole.ommon.collect.Multimaps$qustomSortedS=tMultima");
      Node node1 = Node.newString(38, "com.oole.ommon.collect.Multimaps$qustomSortedS=tMultima");
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = new Node(118, node0, 4095, 29);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = new Node(98, node0, 4095, 29);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isAdd());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = new Node(100, node0, 39, 31);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isLabel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = new Node(101, node0, 1, 53);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.ommon.collei.Multimaps$qustomSortedS=tMultimap");
      Node node1 = new Node(108, node0, node0, node0, node0);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = new Node(86, node0, 2281, 2281);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(0, node2.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.ommon.colect.Multimaps$qustomSortedS=tMultimap");
      Node node1 = Node.newString("com.google.ommon.colect.Multimaps$qustomSortedS=tMultimap");
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }
}
