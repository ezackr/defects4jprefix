/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 03:15:23 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.UnfoldCompoundAssignments;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 19;
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      node2.removeProp(50);
      node0.isVarArgs();
      NodeUtil.getArrayElementStringValue(node1);
      NodeUtil.isSwitchCase(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newQualifiedNameNode(closureCodingConvention0, "KDf<fn1Z[L54", 23, 23);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.isAssociative(10);
      NodeUtil.isExprCall(node1);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1894);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(61);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(61);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.precedence(30);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(38);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      StringBuilder stringBuilder0 = new StringBuilder("NaN");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.isSimpleOperatorType(2960);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(defaultCodingConvention0, "JSCompiler_inline_label_", (Node) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = null;
      try {
        node0 = new Node(0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      NodeUtil.isAssociative(109);
      Node node0 = Node.newString(109, "^=");
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(107);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      closureCodingConvention0.isValidEnumKey("KDf<fn1Z[L54");
      NodeUtil.isSimpleOperatorType((-1417));
      Node node0 = new Node((-1417), 55, 55);
      NodeUtil.getStringValue(node0);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.isPrototypeProperty(node0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(139);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=139> (type 139)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "<<=", node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getVarsDeclaredInBranch(node1);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      NodeUtil.referencesThis(node0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-676));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(18);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.precedence(101);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(101);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(4);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = null;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      MockPrintStream mockPrintStream0 = new MockPrintStream("?O6Y");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ";oP", "?O6Y");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(37);
      NodeUtil.isObjectLitKey(node0, node0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      NodeUtil.precedence(26);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(26);
      SyntheticAst syntheticAst0 = new SyntheticAst("8");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1734);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isImmutableValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.canBeSideEffected(node0);
      NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Logger.getAnonymousLogger();
      NodeUtil.isSimpleOperatorType(96);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("<<=");
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isFunctionDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(104, 2112, 104);
      Node node1 = new Node(19);
      node0.setCharno(28);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.precedence(100);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node.newString(49, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      NodeUtil.isUndefined(node0);
      NodeUtil.getArrayElementStringValue(node1);
      Node node2 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.getNumberValue(node2);
      NodeUtil.trimJsWhiteSpace("com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: VOID [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000265]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node[] nodeArray0 = new Node[23];
      NodeUtil.isSimpleOperatorType(444);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(114);
      node0.cloneNode();
      NodeUtil.isVarDeclaration(node0);
      NodeUtil.isEmptyFunctionExpression(node0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 118;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(3187);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getRoot();
      NodeUtil.isLabelName((Node) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NodeUtil.isAssociative((-1560));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node0 = new Node(90);
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: ASSIGN_LSH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString("<<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getObjectLitKeyName(node0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(2894, "start index", 39, 2894);
      NodeUtil.mayBeStringHelper(node0);
      Node node1 = NodeUtil.newVarNode("start index", node0);
      NodeUtil.isGetOrSetKey(node1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.externsRoot;
      // Undeclared exception!
      try { 
        NodeUtil.nodeTypeMayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Vector<JSType> vector0 = new Vector<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(950);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NodeUtil.getStringNumberValue("com.google.javascript.jscomp.GlobalVarReferenceMap");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber((-0.05697419392562952));
      NodeUtil.getArrayElementStringValue(node0);
      Node node1 = new Node((-747), 13, 42);
      NodeUtil.getStringValue(node0);
      Node node2 = new Node(1);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isArrayLiteral(node2);
      NodeUtil.getArrayElementStringValue(node1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("apply");
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isLatin("ky/#F\"lEiaL");
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = new Node(44);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString("EivOMO-#cT");
      NodeUtil.mayBeStringHelper(node0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("apply");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isLatin("ky/#F\"lEiaL");
      NodeUtil.isNumericResultHelper(node0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "<<=", node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(8);
      NodeUtil.mayBeStringHelper(node1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NodeUtil.getStringNumberValue("$`~]w[SqKW5ra{K'p");
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("=");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      peepholeReplaceKnownMethods1.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      NodeUtil.getStringNumberValue("+infinity");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(97);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8DFN9+oIJCK~QO`");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Vector<JSType> vector0 = new Vector<JSType>();
      int int0 = (-971);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction((Node) null, (-971));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
      Compiler compiler0 = new Compiler();
      compiler0.getRoot();
      NodeUtil.isLabelName((Node) null);
      Node node0 = new Node(1993);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      NodeUtil.isCall(node0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      node0.toStringTree();
      NodeUtil.isNew(node0);
      NodeUtil.mayBeString(node0, false);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("===", 16, 2830);
      NodeUtil.isLabelName(node0);
      NodeUtil.isHoistedFunctionDeclaration(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        sourceMap_DetailLevel0.apply(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.isCommutative(0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods1.optimizeSubtree(node0);
      NodeUtil.isThis(node1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.externsRoot;
      NodeUtil.newUndefinedNode((Node) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.getSourceName(node1);
      NodeUtil.isSwitchCase(node1);
      NodeUtil.isForIn(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("=");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods1.optimizeSubtree(node0);
      NodeUtil.isExprCall(node1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-624), nodeArray0);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("");
      NodeUtil.isCommutative(41);
      Node node0 = Node.newNumber(1266.194026651514);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isImmutableValue(node1);
      NodeUtil.isEmptyFunctionExpression(node1);
      NodeUtil.getArrayElementStringValue(node1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.externsRoot;
      Node node1 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.mayBeString(node1, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(72);
      Node node0 = Node.newString("KDf<fn1Z[L54");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.getArrayElementStringValue(node1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString("com.google.javascript.jscomp.DefinitionsRemover$AssignmentDefinition", 42, (-624));
      NodeUtil.isFunctionObjectApply(node0);
      NodeUtil.isHoistedFunctionDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(28);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.precedence(28);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString("KDf<fn1Z[L54");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.isNameReferenced(node0, "KDf<fn1Z[L54");
      NodeUtil.isLabelName(node1);
      NodeUtil.isEmptyFunctionExpression(node1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.isSimpleOperatorType(22);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NodeUtil.isValidPropertyName("Et");
      Node node0 = Node.newString((-2903), "loader is null");
      NodeUtil.isGet(node0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "true";
      NodeUtil.isValidPropertyName("true");
      // Undeclared exception!
      try { 
        Logger.getLogger("loader is null", "true");
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find true bundle
         //
         verifyException("java.util.logging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Logger.getGlobal();
      Node.newString(36, "+{6&,8J:J`%RT7X", 104, 36);
      Node node0 = new Node(10, 0, 116);
      NodeUtil.isSimpleOperator(node0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AbstractPeepholeOptimization.validateResult((Node) null);
      NodeUtil.isSimpleOperatorType(6);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node node0 = Node.newString("Sl+rh1`e'");
      NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Logger.getLogger("KDf<fn1Z[L54");
      Node node0 = new Node((-883));
      NodeUtil.isSimpleOperatorType(31);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(49);
      NodeUtil.isStrWhiteSpaceChar(2658);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = null;
      AbstractPeepholeOptimization.validateResult((Node) null);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      nodeUtil_MayBeStringResultPredicate0.equals(peepholeRemoveDeadCode0);
      // Undeclared exception!
      try { 
        NodeUtil.getCount((Node) null, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.precedence(63);
      NodeUtil.opToStr(15);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",~DbtGG9af");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ",~DbtGG9af", ",~DbtGG9af");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(37);
      NodeUtil.isObjectLitKey(node0, node0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
      NodeUtil.isConstantByConvention(closureCodingConvention0, node1, node1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      Node node1 = new Node((-38));
      NodeUtil.getArrayElementStringValue(node1);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isObjectLitKey(node2, node1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.DefinitionsRemover$AssignmentDefinition", "com.google.javascript.jscomp.DefinitionsRemover$AssignmentDefinition");
      Node node1 = NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node[] nodeArray0 = new Node[25];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      nodeArray0[3] = null;
      Node node0 = AbstractPeepholeOptimization.validateResult((Node) null);
      NodeUtil.isSimpleOperatorType(34);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "v^", (-3150), (-3150));
      NodeUtil.isExprCall(node0);
      NodeUtil.setDebugInformation(node0, node0, "S#nc");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isExpressionNode(node0);
      NodeUtil.isNameReferenced(node0, "S#nc");
      NodeUtil.isLabelName(node0);
      defaultCodingConvention0.isConstant("v^");
      NodeUtil.newName(defaultCodingConvention0, "1Gi$2o", node0);
      NodeUtil.isStrWhiteSpaceChar(18);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("===", 16, 2830);
      NodeUtil.isLabelName(node0);
      NodeUtil.isExpressionNode(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        sourceMap_DetailLevel0.apply(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("property {0} already defined on superclass {1}; use @override to override it");
      Node node1 = new Node((-624), node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.valueCheck(node1, sourceMap_DetailLevel0);
      // Undeclared exception!
      try { 
        NodeUtil.getNodeTypeReferenceCount(node1, (-580), (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString("com.google.javascript.jscomp.DefinitionsRemover$AssignmentDefinition", 42, (-624));
      NodeUtil.isLabelName(node0);
      NodeUtil.isHoistedFunctionDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("heMXz5n");
      Node node1 = new Node(45);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isString(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("KDf<fn1Z[L54");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.isGetProp(node0);
      node0.getDirectives();
      NodeUtil.isLiteralValue(node0, false);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.isEmptyBlock(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-624), nodeArray0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isCommutative(50);
      NodeUtil.newCallNode(node0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.getImpureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      int int0 = 130;
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("*", linkedList0, (Node) null, 130, 130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(80, 80, 80);
      NodeUtil.isPrototypeProperty(node0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = NodeUtil.newName(closureCodingConvention0, "<<=", node0);
      Node node3 = new Node(1, node1, node2);
      NodeUtil.isEmptyBlock(node2);
      SyntheticAst syntheticAst0 = new SyntheticAst("<<=");
      NodeUtil.getNameReferenceCount(node0, "yZizKR{xulzGFiP");
      NodeUtil.isAssign(node1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(5);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.isUndefined(node0);
      NodeUtil.mayBeStringHelper(node0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("Unrecognized message placeholder referenced: ", linkedList0, node0, 124, 1321);
      NodeUtil.isSimpleOperator(node1);
      NodeUtil.getArrayElementStringValue(node1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(80, 80, 80);
      NodeUtil.isSimpleOperator(node0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionParamBuilder");
      Node node1 = new Node(1329, node0, node0, 4095, (-2425));
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.getLoopCodeBlock(node2);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(104);
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.isAssign(node0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      AbstractPeepholeOptimization.validateResult((Node) null);
      NodeUtil.isSimpleOperatorType(38);
      NodeUtil.isSimpleOperatorType(4);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node((-71));
      Logger.getAnonymousLogger();
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isLiteralValue(node0, true);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.isThis(node1);
      NodeUtil.isArrayLiteral(node0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NodeUtil.opToStr(103);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = null;
      Node node1 = new Node(748);
      Logger.getAnonymousLogger();
      // Undeclared exception!
      try { 
        NodeUtil.isStatementParent((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node1);
      Node node3 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node2, "<<=");
      node3.removeProp(50);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(5);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GOTO does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "";
      NodeUtil.getStringNumberValue("");
      Node node0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.isSimpleOperatorType(33);
      NodeUtil.isWithinLoop(node0);
      NodeUtil.getStringNumberValue("[");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Logger.getGlobal();
      NodeUtil.precedence(28);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(13);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      NodeUtil.opToStr(15);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = new Node(4428);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString("mnV}:&>bG1OV884");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Compiler compiler0 = new Compiler((PrintStream) null);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      NodeUtil.containsCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      NodeUtil.getStringValue(node0);
      NodeUtil.isSimpleOperatorType(107);
      NodeUtil.isSimpleOperatorType(3410);
      NodeUtil.containsType(node0, 43);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isConstantName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("<<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      node0.isVarArgs();
      NodeUtil.isSimpleOperatorType(40);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.isExprAssign(node0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = new Node(41);
      Node node1 = new Node(41, node0, node0, node0, node0, 8, 32);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = node0.copyInformationFromForTree(node2);
      node1.isVarArgs();
      node2.setCharno(4095);
      NodeUtil.getArrayElementStringValue(node3);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isEmptyBlock(node3);
      SyntheticAst syntheticAst0 = null;
      try {
        syntheticAst0 = new SyntheticAst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString(104, "dD<zE7 ");
      NodeUtil.isSwitchCase(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(11, "dD<zE7 ");
      NodeUtil.isUndefined(node1);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.getVarsDeclaredInBranch(node1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.mayBeStringHelper(node0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.getPrototypeClassName(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1323);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=1323> (type 1323)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      peepholeReplaceKnownMethods1.optimizeSubtree(node0);
      NodeUtil.isGetProp(node0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.rhino.Node$IntPropListItem");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "<<=", "com.google.javascript.rhino.Node$IntPropListItem");
      printStreamErrorManager0.getWarnings();
      StringBuffer stringBuffer0 = new StringBuffer("1+%h{Y[|#");
      node0.appendStringTree(mockPrintStream0);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isForIn(node0);
      NodeUtil.isStrWhiteSpaceChar((-1305));
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      node2.removeProp(50);
      node1.isVarArgs();
      closureCodingConvention0.extractClassNameIfRequire(node0, node0);
      node0.setCharno(2832);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node3 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isPrototypeProperty(node3);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node2, true);
      List<Node> list0 = astParallelizer0.split();
      Node node4 = NodeUtil.newFunctionNode("<<=", list0, node3, 49, 13);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      NodeUtil.isValidDefineValue(node4, set0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NodeUtil.getStringNumberValue("$`~]w[SqKW5ra{K'p");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.containsType(node0, 1, nodeUtil_BooleanResultPredicate0);
      NodeUtil.isSwitchCase(node0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NodeUtil.isCommutative(4030);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(16, node1);
      node2.isVarArgs();
      StringBuilder stringBuilder0 = new StringBuilder("G>tKv4sk#Y>aUa*R");
      SyntheticAst syntheticAst0 = new SyntheticAst("G>tKv4sk#Y>aUa*R");
      NodeUtil.mayBeString(node2, false);
      NodeUtil.isVarDeclaration(node1);
      NodeUtil.getStringValue(node2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.precedence(41);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(41);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Logger.getAnonymousLogger();
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isLiteralValue(node0, false);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      NodeUtil.getNumberValue(node0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.getRootOfQualifiedName(node1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = NodeUtil.newName(closureCodingConvention0, "<<=", node0);
      Node node3 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "preventExtensions", node0, "preventExtensions");
      node0.removeProp((-867));
      node3.isVarArgs();
      NodeUtil.getArrayElementStringValue(node1);
      NodeUtil.getRootOfQualifiedName(node2);
      NodeUtil.getNumberValue(node3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString("");
      Node node0 = new Node(8, 2351, 90);
      NodeUtil.precedence(16);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.opToStrNoFail(22);
      NodeUtil.getNumberValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(39);
      Node node0 = Node.newString("KDf<Dfn1Z[L54");
      Node node1 = new Node(44);
      node0.setCharno(436);
      Node node2 = new Node(22, node1, node1);
      NodeUtil.evaluatesToLocalValue(node2, nodeUtil_MatchNodeType0);
      NodeUtil.getStringNumberValue("_Y5`['}'5xcFfG/h");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(75, "");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.isBooleanResultHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_NAME 
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NodeUtil.isValidPropertyName("$`~]w[SqKW5ra{K'p");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      node1.addChildAfter(node0, node0);
      Node node2 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node1);
      node2.isVarArgs();
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.isUndefined(node3);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.isSimpleOperatorType(30);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = Node.newString("KDf<fn1Z[L54");
      node0.getJSDocInfo();
      Node node2 = new Node(2, node1);
      node0.isVarArgs();
      StringBuilder stringBuilder0 = new StringBuilder("G>tKv4sk#Y>aUa*R");
      SyntheticAst syntheticAst0 = new SyntheticAst("-infinity");
      NodeUtil.isSimpleOperatorType(103);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      StringBuilder stringBuilder0 = new StringBuilder("\"");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(49);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString("apply");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newNumber(431.266456197122, 846, 41);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.opToStr(0);
      NodeUtil.isAssign(node0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getSourceName(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      Node node1 = new Node(2730, node0, node0, node0, node0);
      NodeUtil.getVarsDeclaredInBranch(node1);
      NodeUtil.isLiteralValue(node0, false);
      NodeUtil.isWithinLoop(node0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(10);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("@OXmckzMy6_");
      Node node1 = new Node(2, node0, node0, node0, node0);
      StringBuilder stringBuilder0 = new StringBuilder("@OXmckzMy6_");
      node0.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isCallOrNew(node0);
      NodeUtil.isLiteralValue(node0, false);
      NodeUtil.isSimpleOperatorType(4);
      NodeUtil.referencesThis(node1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-624), nodeArray0);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isCommutative((-1808));
      NodeUtil.newCallNode(node0, nodeArray0);
      NodeUtil.isVar(node0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(104);
      NodeUtil.opToStr(4);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(13);
      NodeUtil.isGetOrSetKey(node0);
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      NodeUtil.has(node0, predicate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      ControlFlowAnalysis.computeFallThrough(node0);
      Node node1 = NodeUtil.newName(closureCodingConvention0, "<<=", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "preventExtensions", node0, "preventExtensions");
      node0.removeProp((-867));
      NodeUtil.isNameReferenced(node1, "<<=");
      node0.setCharno(21);
      node2.removeProp(15);
      node1.isVarArgs();
      node1.setCharno(109);
      NodeUtil.getArrayElementStringValue(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$`~]w[SqKW5ra{K'p");
      NodeUtil.arrayToString(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Tm.google.javascript.jscomp.NodeUtil$MatchNotFunbtion", (-70), 1927);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("KDf<fn1Z[L54");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.isAssociative(0);
      NodeUtil.getInfoForNameNode(node0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NodeUtil.opToStrNoFail(52);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(16384);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 16384
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = Node.newString(36, "+{6&,8J:J`%RT7X", (-434), 1191);
      NodeUtil.mayBeStringHelper(node0);
      node0.putBooleanProp(3052, true);
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = new Node(3438);
      NodeUtil.isGetOrSetKey(node0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      StringBuffer stringBuffer0 = new StringBuffer();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.isStrWhiteSpaceChar(4206);
      Node node0 = Node.newNumber(34.0);
      NodeUtil.isBooleanResultHelper(node0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.NodeUtil$MatchNotFunction", "com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", node0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      Predicate<Node> predicate0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getCount(node1, predicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      node0.removeProp(50);
      Node node2 = new Node(12, node1);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.copyNameAnnotations(node2, node1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 112: DEFAULT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "W_SZ IwJ", (-2161), 96);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", (-60), 101);
      NodeUtil.isSwitchCase(node0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      LightweightMessageFormatter.withoutSource();
      NodeUtil.isSimpleOperatorType(43);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node[] nodeArray0 = new Node[1];
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      NodeUtil.isSimpleOperator(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(10);
      node1.setType(30);
      NodeUtil.isSimpleOperatorType(10);
      node0.addChildrenToBack(node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 2: ENTERWITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("heV7Xz5Kn");
      Node node1 = new Node(33, node0);
      node1.siblings();
      NodeUtil.getImpureBooleanValue(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.isCommutative(28);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      closureCodingConvention0.isValidEnumKey("KDf<fn1Z[L54");
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      NodeUtil.isLatin("!r");
      NodeUtil.isSimpleOperatorType(118);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("KDf<fn1Z[L54");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Node node0 = new Node((-3635));
      NodeUtil.setDebugInformation(node0, node0, "l7TRfDX1Qm");
      NodeUtil.isForIn(node0);
      NodeUtil.isSimpleOperatorType(14);
      Node node1 = Node.newString((-2), "KDf<fn1Z[L54");
      node0.addChildrenToBack(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.getNameReferenceCount(node1, "KDf<fn1Z[L54");
      NodeUtil.isAssign(node1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString(589, "dD<zE7 ", 589, 589);
      Logger.getAnonymousLogger();
      NodeUtil.isStatementParent(node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      NodeUtil.isSimpleOperatorType(36);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node.newString("apply");
      NodeUtil.isLatin("ky/#F\"lEiaL");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString("KDf<fn1Z[L54");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = new Node(44);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNodeType", node1, "com.google.javascript.jscomp.NodeUtil$MatchNodeType");
      node2.removeProp(84);
      node1.isVarArgs();
      node0.setCharno(436);
      NodeUtil.getArrayElementStringValue(node2);
      NodeUtil.isEmptyBlock(node2);
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.JsMessageVisitor");
      NodeUtil.mayBeString(node1, false);
      NodeUtil.isVarDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node0 = new Node(536, 1071, 536);
      Node node1 = NodeUtil.newFunctionNode("msg.setter.return", arrayList0, node0, 0, 21);
      NodeUtil.getArgumentForFunction(node1, 23);
      ControlFlowAnalysis.getCatchHandlerForBlock(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-873));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -873
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString("dD<zE7 ", 41, 41);
      NodeUtil.isSwitchCase(node0);
      node0.getJSDocInfo();
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("@", list0, node0, (-2703), 2);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      NodeUtil.isValidDefineValue(node0, set0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node1);
      ControlFlowAnalysis.getCatchHandlerForBlock(node1);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      // Undeclared exception!
      try { 
        peepholeSimplifyRegExp0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSimplifyRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      NodeUtil.isTryFinallyNode(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber(2482.0);
      LightweightMessageFormatter.withoutSource();
      NodeUtil.evaluatesToLocalValue(node0);
      Node node1 = Node.newString(884, "renameLabels");
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.opToStrNoFail(18);
      NodeUtil.opToStrNoFail(46);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString("8UwP!a!W(9.");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("8UwP!a!W(9.", false);
      NodeUtil.isCall(node0);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.isStrWhiteSpaceChar(47);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      AbstractPeepholeOptimization.validateResult((Node) null);
      NodeUtil.isSimpleOperatorType(22);
      NodeUtil.isSimpleOperatorType(4);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "<<=", node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(8);
      NodeUtil.isImmutableValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setname (type 8)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString("KDf<gfn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.isEquivalentTo(node0);
      node1.appendStringTree(charArrayWriter0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getPrototypeClassName(node1);
      NodeUtil.newVarNode("!3", (Node) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("KDf<gfn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Node node2 = new Node(42, 8367, (-2));
      NodeUtil.getStringValue(node1);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(35);
      node1.addChildrenToBack(node2);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.isControlStructure(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("S#nc");
      Node node0 = Node.newString(112, "%");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      Node node1 = Node.newString("%");
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.newName(closureCodingConvention0, "infinity", node0);
      StringBuilder stringBuilder0 = new StringBuilder("<<=");
      node1.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      NodeUtil.isSimpleOperatorType(2201);
      Node node2 = Node.newString(14, "=", 1, (-922));
      NodeUtil.mayBeStringHelper(node2);
      NodeUtil.getVarsDeclaredInBranch(node2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(41);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      node0.isSyntheticBlock();
      NodeUtil.isSimpleOperatorType(16);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node.newNumber(1521.4985909829);
      Node node0 = new Node(2);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isSimpleOperatorType(44);
      // Undeclared exception!
      try { 
        Node.newString((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.newUndefinedNode(node1);
      Node node2 = new Node(39, 39, 2101);
      NodeUtil.precedence(38);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(45);
      NodeUtil.precedence(20);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType((-1124));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(73);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(67);
      NodeUtil.isObjectLitKey(node1, node1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(10);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(25);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString("dD<zE7 ", 41, 41);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(28);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.newUndefinedNode(node0);
      NodeUtil.isAssociative(2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(1576, "jew");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node1 = Node.newString(105, "-6W");
      NodeUtil.isUndefined(node0);
      node1.getDirectives();
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.getVarsDeclaredInBranch(node1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NodeUtil.isValidPropertyName("Et");
      Node node0 = Node.newString((-2903), "loader is null");
      Node node1 = new Node(25);
      NodeUtil.setDebugInformation(node0, node1, "loader is null");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isSimpleOperatorType(12);
      NodeUtil.isSimpleFunctionObjectCall(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      AbstractPeepholeOptimization.validateResult((Node) null);
      NodeUtil.isSimpleOperatorType(20);
      NodeUtil.isSimpleOperatorType(2);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      Logger.getLogger("<<=");
      Node node3 = new Node(38, node0);
      NodeUtil.getImpureBooleanValue(node2);
      NodeUtil.copyNameAnnotations(node1, node3);
      NodeUtil.isExprCall(node2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("heV7Xz5Kn");
      Node node1 = new Node(33, node0);
      node1.siblings();
      NodeUtil.getImpureBooleanValue(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 35: GETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NodeUtil.getStringNumberValue("$`~]w[SqKW5ra{K'p");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      NodeUtil.isSimpleOperator(node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(120, node0, node0, 82, 4);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCATCH 82
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      closureCodingConvention0.isConstant("J4");
      Node node0 = Node.newString("KDf<fn1Z[L54");
      NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      node0.getJsDocBuilderForNode();
      NodeUtil.containsFunction(node0);
      NodeUtil.isArrayLiteral(node0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(16, node1);
      node2.isVarArgs();
      StringBuilder stringBuilder0 = new StringBuilder("G>tKv4sk#Y>aUa*R");
      SyntheticAst syntheticAst0 = new SyntheticAst("G>tKv4sk#Y>aUa*R");
      NodeUtil.mayBeString(node2, false);
      NodeUtil.isSimpleOperatorType(13);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      NodeUtil.getCount(node2, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3);
      NodeUtil.precedence(32);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("<<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      nodeUtil_MatchDeclaration0.apply(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        sourceMap_DetailLevel0.apply(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(59);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(29);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node.newNumber((double) 12);
      Node node0 = Node.newString(32, "heVaXz5Kn", 12, 2);
      NodeUtil.mayBeStringHelper(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2830);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2830
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node[] nodeArray0 = new Node[25];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      nodeArray0[3] = null;
      Node node0 = AbstractPeepholeOptimization.validateResult((Node) null);
      NodeUtil.isSimpleOperatorType(34);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getInfoForNameNode(node0);
      NodeUtil.newVarNode("-|6u\bv=", (Node) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-62));
      Logger.getAnonymousLogger();
      NodeUtil.isStatementParent(node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -62
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "<<=", node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(8);
      NodeUtil.isImmutableValue(node1);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.isExprAssign(node0);
      NodeUtil.isLoopStructure(node1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString(41, "OVR8&V9N^l^'= 3g)", (-609), 41);
      Node node1 = Node.newNumber(19.279743188471);
      Node node2 = Node.newNumber((double) 2);
      NodeUtil.getNumberValue(node1);
      node2.setCharno(2);
      NodeUtil.getArrayElementStringValue(node1);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      StringBuffer stringBuffer0 = new StringBuffer(24);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "OVR8&V9N^l^'= 3g)");
      Node node3 = new Node(26, node1, node1, node0, 8, 17);
      NodeUtil.isCallOrNew(node3);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isStrWhiteSpaceChar(120);
      NodeUtil.isImmutableValue(node1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Logger.getAnonymousLogger();
      Node node0 = new Node(104, 2112, 104);
      NodeUtil.getStringValue(node0);
      NodeUtil.isSimpleOperatorType(96);
      node0.addChildrenToBack(node0);
      NodeUtil.getInfoForNameNode(node0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(29);
      NodeUtil.isImmutableValue(node0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("heVaXz5Kn");
      node0.toStringTree();
      NodeUtil.isNew(node0);
      NodeUtil.isSimpleOperatorType(63);
      NodeUtil.mayBeStringHelper(node0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.newName(closureCodingConvention0, "<<=", node0);
      NodeUtil.newUndefinedNode(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isPrototypePropertyDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.newName(closureCodingConvention0, "<<=", node0);
      closureCodingConvention0.getAssertionFunctions();
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(48);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Logger.getLogger("");
      Node node0 = new Node(64);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.getArrayElementStringValue(node0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getTypesWithProperty("yZizKR{xulzGFiP");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getSourceName(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.isSimpleOperatorType(15);
      NodeUtil.newUndefinedNode(node0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(123);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isReferenceName(node0);
      NodeUtil.getStringNumberValue("\"X2&L_}\"I]zvB50");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      NodeUtil.setDebugInformation(node0, node0, "$`~]w[SqKW5ra{K'p");
      Node node1 = new Node(10);
      NodeUtil.isSimpleOperatorType(115);
      node0.addChildrenToBack(node1);
      NodeUtil.isControlStructure(node1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.setDebugInformation(node0, node0, "$`~]w[SqKW5ra{K'p");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(10);
      NodeUtil.isSimpleOperatorType(115);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.isControlStructure(node1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "<<=", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      node1.isVarArgs();
      node1.setCharno(8298);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      peepholeReplaceKnownMethods0.optimizeSubtree(node2);
      NodeUtil.isSimpleOperatorType(51);
      NodeUtil.mayBeStringHelper(node2);
      NodeUtil.getVarsDeclaredInBranch(node0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      NodeUtil.precedence(31);
      NodeUtil.newUndefinedNode(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isReferenceName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString("dD<zE7 ", 41, 41);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isLatin("undefined");
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      NodeUtil.isCommutative(9);
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("w<=");
      Node node1 = new Node(18, node0, node0, node0, node0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      node0.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isCallOrNew(node0);
      NodeUtil.isLiteralValue(node1, true);
      NodeUtil.isSimpleOperatorType(11);
      NodeUtil.referencesThis(node0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType((-5336));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = null;
      Node node1 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.isNameReferenced(node1, "0");
      NodeUtil.isLabelName(node1);
      Node node2 = NodeUtil.newExpr(node1);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: VOID of EXPR_RESULT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000018]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node0 = Node.newString("[");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = new Node(3526, node0);
      NodeUtil.precedence(51);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(49);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Logger.getLogger("D``>??)@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "msg.setter.return");
      Node node0 = Node.newString(112, "msg.setter.return");
      NodeUtil.isSwitchCase(node0);
      Node node1 = new Node(12, 100, 43);
      NodeUtil.isName(node1);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(4);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node2);
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.rhino.jstype.NoObjectType", (-77), 43);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Compiler compiler0 = new Compiler();
      UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      nodeTraversal1.getCompiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(36);
      NodeUtil.isName(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.getInfoForNameNode(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.newUndefinedNode(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString(88, "Error: the child of a FOR-IN cannot be an INC or DEC", 144, 125);
      NodeUtil.isName(node0);
      NodeUtil.isCommutative(277);
      NodeUtil.precedence(16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(18);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 117: CONTINUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("h");
      Node node0 = new Node(104);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isObjectLitKey(node1, node1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.extractClassNameIfProvide(node1, node1);
      NodeUtil.isEmptyFunctionExpression(node1);
      NodeUtil.opToStrNoFail(11);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      Node node0 = Node.newString("WH");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "NaN", node0, "WH");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getStringValue(node1);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node.newNumber((double) 39);
      Node node2 = new Node(45, 31, 35);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1488);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=1488> (type 1488)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString(" @>YP*{Tw$3b)>");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      peepholeReplaceKnownMethods1.optimizeSubtree(node0);
      node0.removeChildren();
      NodeUtil.isSimpleOperatorType(2);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.isAssociative(23);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger.getLogger("ee");
      Node node1 = new Node(59);
      Node node2 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.isObjectLitKey(node1, node2);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      closureCodingConvention0.extractClassNameIfProvide(node0, node1);
      NodeUtil.isEmptyFunctionExpression(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(39);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 39: NUMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.clearNamedTypes();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isEmptyFunctionExpression(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 48: BINDNAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(25);
      NodeUtil.opToStrNoFail(17);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString(" @>YP*{Tw$3b)>");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(50);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 112: DEFAULT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('z');
      node1.appendStringTree(charArrayWriter1);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      StringBuffer stringBuffer0 = new StringBuffer();
      NodeUtil.precedence(13);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
      NodeUtil.isAssociative(2);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      NodeUtil.getStringNumberValue("$`~]w[SqKW5ra{K'p");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.setDebugInformation(node0, node0, "$`~]w[SqKW5ra{K'p");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isLatin("$`~]w[SqKW5ra{K'p");
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      NodeUtil.isCommutative(121);
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.opToStr(77);
      Node node0 = new Node(18);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3746);
      nodeUtil_MatchNodeType0.apply(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.getInfoForNameNode(node0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node2 = NodeUtil.newUndefinedNode(node1);
      Node node3 = new Node(39, 39, 1);
      NodeUtil.precedence(38);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(45);
      nodeUtil_MatchNodeType0.apply(node1);
      NodeUtil.isFunctionExpression(node1);
      NodeUtil.isArrayLiteral(node1);
      NodeUtil.mayEffectMutableState(node2);
      NodeUtil.getInfoForNameNode(node3);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(104, 2112, 104);
      NodeUtil.opToStr(14);
      NodeUtil.isLatin(": ");
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.isPrototypeProperty(node0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("");
      Node node0 = Node.newString(104, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", (-3174), 16);
      NodeUtil.isExprCall(node0);
      NodeUtil.setDebugInformation(node1, node0, "}-]*n#j%sr|$Sc{>");
      NodeUtil.isSwitchCase(node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      peepholeFoldConstants0.optimizeSubtree(node1);
      NodeUtil.isSimpleOperatorType(2);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 110: SWITCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      Node node2 = new Node(2, 5, 34);
      NodeUtil.getStringValue(node0);
      Node node3 = new Node(120);
      NodeUtil.isNumericResultHelper(node2);
      node3.setLineno(39);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(0);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node0 = new Node(3597);
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node((-62), (-62), 4025);
      Logger logger0 = Tracer.logger;
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.opToStrNoFail(51);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString("heVaX'5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(88);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isSimpleOperatorType(46);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "<<=", node0);
      StringBuilder stringBuilder0 = new StringBuilder("<<=");
      node1.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      NodeUtil.isSimpleOperatorType(50);
      node1.addChildrenToBack(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node2, nodeUtil_BooleanResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.isControlStructure(node1);
      NodeUtil.getPrototypeClassName(node1);
      NodeUtil.isPrototypeProperty(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getStringValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods1.optimizeSubtree(node0);
      NodeUtil.isSimpleOperatorType(119);
      NodeUtil.isThis(node1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.clearNamedTypes();
      Vector<JSType> vector0 = new Vector<JSType>();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "2L:[3e(hx3_", 193, 193);
      NodeUtil.setDebugInformation(node0, node0, "2L:[3e(hx3_");
      NodeUtil.isForIn(node0);
      NodeUtil.isSimpleOperatorType(3);
      Node node1 = Node.newString(133, "2L:[3e(hx3_");
      node1.addChildrenToBack(node0);
      NodeUtil.isSimpleOperatorType(19);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isLValue(node0);
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      Logger.getLogger("<<=");
      Node node2 = new Node(38, node0);
      NodeUtil.opToStrNoFail(24);
      Node.newString(31, "KDf<fn1Z[L54", 9, (-2));
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(88);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isGetProp(node0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isSimpleOperatorType(22);
      Node node2 = Node.newString(15, "0");
      node0.addChildrenToBack(node1);
      NodeUtil.isSimpleOperatorType(8239);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      nodeUtil_MayBeStringResultPredicate0.apply(node2);
      NodeUtil.isControlStructure(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Logger.getLogger("");
      Node node0 = Node.newString("", 41, 41);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", (-3203), 16);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(112);
      NodeUtil.isObjectLitKey(node1, node1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = new Node(44);
      node0.getProp(318);
      node0.setCharno(436);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.precedence(85);
      NodeUtil.getImpureBooleanValue(node1);
      NodeUtil.isCallOrNew(node1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString("apply");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
      NodeUtil.isGet(node0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      MockFile mockFile0 = new MockFile("s");
      Logger.getLogger("h");
      Node node1 = new Node((-1505));
      Node node2 = new Node(410, 7, 27);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      StringBuffer stringBuffer0 = new StringBuffer();
      NodeUtil.precedence(21);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.isFunctionObjectCallOrApply(node1);
      NodeUtil.referencesThis(node1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "<<=", (-77), (-77));
      NodeUtil.isExprCall(node0);
      Node node1 = new Node(18, 26, 2);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp1 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp1.optimizeSubtree(node1);
      Node.newNumber((double) 47);
      NodeUtil.setDebugInformation(node1, node2, "<<=");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node3 = new Node(2, 4, 35);
      NodeUtil.isCallOrNew(node2);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node2, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.isSimpleOperatorType(93);
      Node node0 = Node.newString((-922), "@](Kkc", 1851, (-2725));
      NodeUtil.mayBeStringHelper(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(23);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      NodeUtil.isThis(node0);
      linkedList0.listIterator();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node1 = new Node(33, 38, (-1));
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = new Node(48, 0, (-1));
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      nodeUtil_MatchDeclaration0.apply(node2);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      sourceMap_DetailLevel0.apply(node1);
      NodeUtil.has(node1, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node.newString("KDf<fn1Z[L54");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.isAssociative(100);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 30: NEW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString("8UwP!a!W(9.");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      NodeUtil.opToStrNoFail(90);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isAssociative(36);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 70: DEFAULTNAMESPACE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString(43, "'qa'|#X;$.");
      NodeUtil.getStringValue(node0);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = Node.newNumber(9.64052444656312);
      NodeUtil.newUndefinedNode(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.extractClassNameIfProvide(node0, node0);
      NodeUtil.isEmptyFunctionExpression(node1);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-3650));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3650
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(104);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(85);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      nodeUtil_MatchNotFunction0.apply(node0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(90);
      NodeUtil.getSourceName(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeReplaceKnownMethods0.isEcmaScript5OrGreater();
      NodeUtil.isSimpleOperatorType(61);
      NodeUtil.isObjectLitKey(node1, node1);
      NodeUtil.getStringNumberValue("-+qq`BQZ&!");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.isSimpleOperatorType(93);
      Node node0 = Node.newString((-922), "@](Kkc", 1851, (-2725));
      NodeUtil.mayBeStringHelper(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 8: SETNAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1545), (-3), 39);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.setDebugInformation(node2, node0, "4%OvK7Xu|~Bu");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node3 = new Node(17);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.mayBeString(node3);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.isTryFinallyNode(node2, node1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.rhino.Node$IntPropListItem");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "<<=", "com.google.javascript.rhino.Node$IntPropListItem");
      node0.isVarArgs();
      StringBuilder stringBuilder0 = new StringBuilder("com.google.javascript.rhino.Node$IntPropListItem");
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.RenameLabels$LabelInfo");
      NodeUtil.mayBeString(node0, false);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isEmptyBlock(node0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Logger.getLogger("");
      Node node0 = Node.newString("", 41, 41);
      Node node1 = new Node(1123, 35, 786);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.setDebugInformation(node0, node0, "");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(15);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node2, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("wYu^<i&z4P}");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.newName(googleCodingConvention0, "=", node0);
      StringBuilder stringBuilder0 = new StringBuilder();
      node0.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = Node.newString(50, "wYu^<i&z4P}", 13, 16);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getSourceName(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1));
      nodeUtil_MatchNodeType0.apply(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.isSimpleOperator(node0);
      Node node1 = new Node(1, node0, node0, 98, 19);
      NodeUtil.getArrayElementStringValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1396));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Logger.getLogger("heVaXz5Kn");
      Node node0 = new Node((-1396));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isObjectLitKey(node1, node1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.extractClassNameIfProvide(node1, node1);
      NodeUtil.isEmptyFunctionExpression(node0);
      NodeUtil.opToStrNoFail(122);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node.newNumber(0.0);
      NodeUtil.isSimpleOperatorType(47);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(3847);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=3847> (type 3847)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = NodeUtil.newName(closureCodingConvention0, "<<=", node1);
      Node node3 = NodeUtil.newExpr(node0);
      node2.isVarArgs();
      node2.setCharno(8298);
      NodeUtil.getArrayElementStringValue(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      node0.removeChildren();
      NodeUtil.getArrayElementStringValue(node1);
      NodeUtil.isSwitchCase(node2);
      NodeUtil.isSimpleOperatorType(121);
      NodeUtil.isSimpleFunctionObjectCall(node3);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Node node0 = Node.newString(104, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isSwitchCase(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", (-3174), 16);
      NodeUtil.isExprCall(node0);
      Node node2 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", (-3174), 16);
      node2.setWasEmptyNode(false);
      nodeUtil_MatchNodeType0.apply(node1);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isCallOrNew(node2);
      NodeUtil.isCommutative(11);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(40);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString("dD<zE7 ", 41, 41);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isAssociative(3);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(27);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.isSimpleOperatorType(68);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Z(OK2L", 93, 68);
      NodeUtil.isSimpleOperator(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType((-61));
      NodeUtil.isTryFinallyNode(node0, node0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("@OXmckzMy6_");
      Node node1 = new Node(2, node0, node0, node0, node0);
      StringBuilder stringBuilder0 = new StringBuilder("@OXmckzMy6_");
      node0.appendStringTree(stringBuilder0);
      NodeUtil.isFunctionObjectCall(node1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      NodeUtil.isSimpleOperator(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(10);
      node1.setType(30);
      NodeUtil.isSimpleOperatorType(10);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      defaultCodingConvention0.isVarArgsParameter(node1);
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(95);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.clone();
      hashSet0.add("=");
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.getInfoForNameNode(node1);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode((String) null, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      MockFile mockFile0 = new MockFile("s");
      Logger.getLogger("h");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "s");
      node0.appendStringTree(stringBuffer0);
      NodeUtil.isFunctionObjectCall(node0);
      StringBuffer stringBuffer1 = new StringBuffer();
      NodeUtil.precedence(33);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-400));
      node0.removeFirstChild();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType((-199));
      nodeUtil_MatchNodeType0.apply(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\"");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Node node0 = new Node((-1963));
      NodeUtil.setDebugInformation(node0, node0, "l7TRfDX1Qm");
      NodeUtil.isSimpleOperatorType((-1963));
      node0.detachChildren();
      Node node1 = Node.newString((-2259), "l7TRfDX1Qm");
      node0.addChildrenToBack(node1);
      NodeUtil.isSimpleOperatorType(79);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("");
      Node node0 = Node.newString(104, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", (-3174), 16);
      NodeUtil.isHoistedFunctionDeclaration(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      SourceMap.DetailLevel sourceMap_DetailLevel1 = SourceMap.DetailLevel.SYMBOLS;
      sourceMap_DetailLevel1.apply(node0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      Vector<Node> vector0 = new Vector<Node>();
      Node node2 = NodeUtil.newFunctionNode("Z(OK2L", vector0, node1, 1175, 132);
      node2.isOptionalArg();
      NodeUtil.referencesThis(node2);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(104, 2112, 104);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(121);
      nodeUtil_MatchNodeType0.equals((Object) null);
      NodeUtil.isSimpleOperatorType(116);
      node1.addChildrenToBack(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MatchNodeType0);
      NodeUtil.getPrototypeClassName(node0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(97, (-2851), (-2851));
      Node node1 = new Node(41, node0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("<<=", (Charset) null);
      Node node2 = compiler0.parse(jSSourceFile0);
      node0.isEquivalentToTyped(node2);
      NodeUtil.getImpureBooleanValue(node1);
      Node node3 = Node.newString("G'4#", 147, 12);
      node3.isVarArgs();
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(120);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "6cbP?cX&{z:1mX6/3", 35, 13);
      NodeUtil.setDebugInformation(node1, node0, "6cbP?cX&{z:1mX6/3");
      NodeUtil.isForIn(node0);
      NodeUtil.isSimpleOperatorType(16);
      Node.newString((-716), "6cbP?cX&{z:1mX6/3");
      node0.addChildrenToBack(node1);
      NodeUtil.isSimpleOperatorType(24);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isLValue(node1);
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = 41;
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(52, 52, 52);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getImpureBooleanValue(node1);
      NodeUtil.opToStr(49);
      NodeUtil.isLatin("JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR");
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.isPrototypeProperty(node1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "S#nc", "1JAqT[m(&{Ow");
      StringBuffer stringBuffer0 = new StringBuffer("Expected CALL node, got ");
      NodeUtil.precedence(52);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1431655764);
      node0.removeFirstChild();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(43);
      nodeUtil_MatchNodeType0.apply(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("S#nc");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%");
      Node node0 = Node.newString(112, "%");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(5);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node0);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isPrototypeProperty(node0);
      NodeUtil.getStringValue(node0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Object object0 = new Object();
      Node node0 = new Node(110);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(18, node0, node0);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      nodeUtil_MayBeStringResultPredicate0.equals(object0);
      NodeUtil.isControlStructure(node0);
      NodeUtil.getPrototypeClassName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2138);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2138
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      node2.removeProp(50);
      node1.isVarArgs();
      NodeUtil.getPrototypePropertyName(node1);
      node0.setCharno(2832);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node3 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isPrototypeProperty(node3);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node2.detachChildren();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(53);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node4 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.isArrayLiteral(node3);
      NodeUtil.isObjectLitKey(node3, node3);
      // Undeclared exception!
      try { 
        NodeUtil.isTryFinallyNode((Node) null, node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1396));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node((-1396));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.putProp(6, (Object) null);
      node1.isNoSideEffectsCall();
      NodeUtil.canBeSideEffected(node1);
      NodeUtil.containsType(node1, 17, nodeUtil_MatchNodeType0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeUtil.opToStr(52);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(2112);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(22);
      node1.addChildrenToBack(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(111);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(160, (-1423), 1351);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isWithinLoop(node0);
      NodeUtil.isSimpleOperatorType(45);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1729);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.opToStrNoFail(12);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(94, 3, (-943));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      Node node2 = new Node(3, node1);
      NodeUtil.precedence(47);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(20);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Logger.getLogger("com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.precedence(63);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "S#nc", "?JAq{[m(&=.iOw");
      StringBuffer stringBuffer0 = new StringBuffer("Expected CALL node, got ");
      Node node1 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " (", 88, 39);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.setDebugInformation(node1, node1, "malformed 'for' statement ");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isSimpleOperatorType(97);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(G=+|#8gjymHn33VD*");
      int int0 = 114;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3187);
      Logger logger0 = Tracer.logger;
      Node node0 = Node.newString(33, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isSwitchCase(node0);
      StringBuilder stringBuilder0 = new StringBuilder(",k^+zo<$.+k/vk.?/mK");
      node0.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(40);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.canBeSideEffected(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2845));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(10);
      node1.setType(30);
      NodeUtil.isSimpleOperatorType(10);
      NodeUtil.canBeSideEffected(node1);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, compiler1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NodeUtil.isSimpleOperatorType(75);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2249);
      NodeUtil.isStrWhiteSpaceChar(111);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node.newString("KDf<fn1Z[L54");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node0 = Node.newNumber((double) 38);
      Node node1 = new Node(48, (-810), 44);
      NodeUtil.precedence(41);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.precedence(46);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(115);
      node0.removeFirstChild();
      NodeUtil.getArrayElementStringValue(node0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString("}");
      NodeUtil.newName(closureCodingConvention0, "}", node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(542);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.precedence(35);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "Et";
      NodeUtil.isValidPropertyName("Et");
      Node node0 = new Node(21);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.clone();
      hashSet0.add("=");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(93, ">>>", (-1229), 297);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(90, 90, 90);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeReplaceKnownMethods0.isEcmaScript5OrGreater();
      NodeUtil.isSimpleOperatorType(67);
      NodeUtil.isObjectLitKey(node1, node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.getPureBooleanValue(node1);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3187);
      Logger logger0 = Tracer.logger;
      nodeUtil_MatchNodeType0.equals(logger0);
      Node node0 = new Node(3187);
      NodeUtil.opToStr(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(17);
      SyntheticAst syntheticAst0 = new SyntheticAst("KDf<fn1Z[L54");
      Node node1 = Node.newString("ENUM", 27, 114);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(4025);
      Node node0 = new Node((-62));
      Logger.getAnonymousLogger();
      NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(88);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.opToStrNoFail(9);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      StringBuffer stringBuffer0 = new StringBuffer();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.opToStrNoFail(101);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("<<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = new Node(41, node0);
      node0.isVarArgs();
      StringBuilder stringBuilder0 = new StringBuilder("G>tKv4sk#Y>aUa*R");
      SyntheticAst syntheticAst0 = new SyntheticAst("-infinity");
      NodeUtil.mayBeString(node1, false);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      NodeUtil.isAssign(node2);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString(41, "9.G7tZ'[I2AhC", (-180), (-180));
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node.newNumber((double) 12);
      Node node0 = new Node(98, 42, (-1));
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=74> (type 74)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("pN*#]2y7zl\".~$P'g");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "pN*#]2y7zl\".~$P'g", node0, "pN*#]2y7zl\".~$P'g");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "infinity", node0);
      node1.setCharno(31);
      Object object0 = new Object();
      NodeUtil.precedence(41);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.evaluatesToLocalValue(node2, nodeUtil_MatchNodeType0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(74, 161, 74);
      NodeUtil.isCommutative(2403);
      NodeUtil.opToStr(32);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node0 = new Node(135);
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 120: CATCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node.newString("=");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(102);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 102: INC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = NodeUtil.newName(closureCodingConvention0, "<<=", node1);
      Node node3 = NodeUtil.newExpr(node0);
      node3.removeProp(50);
      node2.isVarArgs();
      NodeUtil.isExprCall(node3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node4 = null;
      // Undeclared exception!
      try { 
        NodeUtil.setDebugInformation(node3, (Node) null, ":t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString("<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = new Node(39, 39, 2101);
      NodeUtil.precedence(38);
      NodeUtil.isThis(node1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      Node node0 = new Node((-997));
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      node0.setCharno(108);
      Node node1 = new Node(51, 41, 11);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.isName(node1);
      NodeUtil.isSimpleOperatorType(26);
      NodeUtil.isControlStructure(node1);
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.isForIn(node1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(2234);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isSimpleOperatorType((-4562));
      Node node1 = Node.newString(45, "x");
      node0.addChildrenToBack(node1);
      NodeUtil.isSimpleOperatorType(31);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      Node node2 = NodeUtil.newExpr(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node2);
      NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      node2.removeProp(50);
      node1.isVarArgs();
      closureCodingConvention0.extractClassNameIfRequire(node0, node0);
      node0.setCharno(2832);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node3 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isPrototypeProperty(node3);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node2.detachChildren();
      node3.getJSDocInfo();
      AstParallelizer.createNewFunctionLevelAstParallelizer(node2, true);
      Node node4 = NodeUtil.newFunctionNode("<<=", linkedList0, node3, 49, 13);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected(node4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\"");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Node node0 = new Node((-3635));
      NodeUtil.opToStrNoFail(26);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(52, 52, 52);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getImpureBooleanValue(node1);
      Node node2 = new Node((-2321), 1, 1610612736);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.precedence(22);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(464);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3187);
      Logger logger0 = Tracer.logger;
      nodeUtil_MatchNodeType0.equals(logger0);
      Node node0 = new Node(3187);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.opToStr(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A$/MJWEt9,V/:Fwigu", "xB&Y;^y'b(w9Z");
      StringBuffer stringBuffer0 = new StringBuffer("@/)?omcFS,eQy`J^J;");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "0ILj[!89WCeOI1PlkW+", 21, (-364));
      NodeUtil.isCallOrNew(node0);
      NodeUtil.setDebugInformation(node1, node0, "}Y");
      NodeUtil.isSimpleOperatorType(23);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.getCount(node1, nodeUtil_BooleanResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.isControlStructure(node0);
      NodeUtil.getStringValue(node1);
      NodeUtil.copyNameAnnotations(node1, node0);
      NodeUtil.isObjectLitKey(node0, node0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.isFunctionObjectApply(node0);
      Node node1 = new Node(26, node0, node0, 11, 8);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      closureCodingConvention0.isValidEnumKey("KDf<fn1Z[L54");
      Node.newString(121, "7T", 45, 45);
      NodeUtil.isSimpleOperatorType(21);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node.newString("KDf<fn1Z[L54");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 36: SETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "<<=", node0, "<<=");
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "4)(xu]AriV", 6, 2);
      NodeUtil.isExprCall(node1);
      Node node2 = new Node(11, 15, 4095);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node3 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      NodeUtil.setDebugInformation(node1, node3, "2L:[3e(hx3_");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node4 = new Node(4);
      NodeUtil.isCallOrNew(node4);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node2, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QF5I,sLmPJwc4J|L", 111, 111);
      NodeUtil.canBeSideEffected(node0);
      Node node1 = NodeUtil.newVarNode(",SM1Ao*`&^6B\"8lxrs", node0);
      NodeUtil.setDebugInformation(node0, node1, "QF5I,sLmPJwc4J|L");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(38);
      NodeUtil.isControlStructure(node2);
      NodeUtil.getPrototypeClassName(node1);
      ControlFlowAnalysis.getCatchHandlerForBlock(node2);
      NodeUtil.isReferenceName(node0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(89);
      NodeUtil.isCommutative(89);
      NodeUtil.precedence(89);
      Logger logger0 = Tracer.logger;
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.opToStrNoFail(89);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("@OXmckzMy6_");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Node node1 = new Node(10);
      node0.wasEmptyNode();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isSimpleOperatorType(160);
      NodeUtil.precedence(12);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      NodeUtil.opToStr(77);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Ykhcl\"&O[Pdo~@z", 35, (-4488));
      NodeUtil.getImpureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      LightweightMessageFormatter.withoutSource();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(43, "com.google.javascript.rhino.jstype.NoObjectType");
      NodeUtil.getStringValue(node0);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = Node.newNumber((double) 1);
      NodeUtil.newUndefinedNode(node1);
      NodeUtil.isObjectLitKey(node0, node1);
      NodeUtil.getPureBooleanValue(node1);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      nodeUtil_MatchDeclaration0.apply(node1);
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isSimpleOperatorType(22);
      Node node2 = Node.newString(15, "0");
      node0.addChildrenToBack(node1);
      NodeUtil.isSimpleOperatorType(29);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(89);
      NodeUtil.isCommutative(89);
      NodeUtil.precedence(89);
      NodeUtil.precedence(10);
      NodeUtil.isLatin("com.google.javascript.jscomp.CheckAccidentalSemicolon");
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      NodeUtil.isSimpleOperatorType(114);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = ".!qoCv'3";
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, ".!qoCv'3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(88);
      NodeUtil.isSimpleOperatorType(100);
      NodeUtil.isImmutableValue(node0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("KDf<gfn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.appendStringTree(charArrayWriter0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getPrototypeClassName(node1);
      NodeUtil.precedence(25);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString("I2tfUw1-K-1Z|UkP<)");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "ju$u$", node0);
      StringBuilder stringBuilder0 = new StringBuilder("ju$u$");
      node1.isNoSideEffectsCall();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = Node.newString(44, "ju$u$", 1, 10);
      Object object0 = new Object();
      nodeUtil_BooleanResultPredicate0.equals(peepholeRemoveDeadCode0);
      NodeUtil.mayBeStringHelper(node2);
      NodeUtil.getVarsDeclaredInBranch(node1);
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.evaluatesToLocalValue(node2, (Predicate<Node>) null);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node.newNumber((-1622.1702138));
      Node node1 = new Node(39, 39, 2101);
      NodeUtil.precedence(38);
      NodeUtil.isSimpleOperatorType(113);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      NodeUtil.isValidPropertyName("Et");
      Node node0 = new Node(21);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(122);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isHoistedFunctionDeclaration(node0);
      NodeUtil.isExprAssign(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newString("KDf<fn1Z[L54");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.isAssociative(100);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.precedence(98);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      NodeUtil.isValidPropertyName("Et");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = new Node(21);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.clone();
      SyntheticAst syntheticAst0 = new SyntheticAst("KDf~991Z[L54");
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString(2, "{main}");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node2 = new Node(21, node1);
      node2.isVarArgs();
      StringBuilder stringBuilder0 = new StringBuilder("G>tKv4sk#Y>a~a*R");
      SyntheticAst syntheticAst0 = new SyntheticAst("-infinity");
      NodeUtil.mayBeString(node2, false);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Node node0 = new Node((-3635));
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      NodeUtil.precedence(42);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType((-1488));
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType2 = new NodeUtil.MatchNodeType(2332);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      node0.addChildrenToBack(node1);
      NodeUtil.isSimpleOperatorType(8240);
      NodeUtil.arrayToString(node0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      Node node1 = new Node((-384), 110, 31);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      peepholeSimplifyRegExp0.optimizeSubtree(node0);
      NodeUtil.setDebugInformation(node0, node0, "heVaXz5Kn");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(13);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node2, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("3");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 118: VAR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "<<=", node1, "<<=");
      Logger.getLogger("<<=");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "V69,K{M]0Iw", 7, (-2267));
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStrNoFail(27);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-337));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -337
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = new Node(44);
      node0.setCharno(436);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.precedence(85);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString(115, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isLoopStructure(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.mayBeString(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.isTryFinallyNode(node0, node0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      NodeUtil.getStringNumberValue("+infinity");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = new Node(452, (-3098), (-3098));
      NodeUtil.precedence(29);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(979);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString("A$/MJWEt9,V/:Fwigu");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.newName(googleCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "KDf<fn1Z[L54", node0, "heV7Xz5Kn");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newQualifiedNameNode(closureCodingConvention0, "heV7Xz5Kn", 151, 35);
      NodeUtil.precedence(46);
      NodeUtil.opToStr(1);
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.opToStrNoFail(25);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString("E>`.");
      ControlFlowAnalysis.computeFallThrough(node0);
      node1.isVarArgs();
      Node node2 = new Node(44, node1, node0);
      node2.setCharno(522);
      NodeUtil.getArrayElementStringValue(node2);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      StringBuffer stringBuffer0 = new StringBuffer(4);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "E>`.");
      NodeUtil.isCallOrNew(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isStrWhiteSpaceChar(287);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("R#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "R#nc", "1JAqT[m(&{Ow");
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newString(41, "R#nc", (-3), 47);
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.setDebugInformation(node2, node0, "R#nc");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node3 = new Node(44);
      NodeUtil.isCallOrNew(node3);
      node1.detachChildren();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node3, (Set<String>) null);
      NodeUtil.isSimpleOperatorType(1);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString(42, "kaFCpFeXI", 34, 1833);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      NodeUtil.isCallOrNew(node0);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("pN*#]2y7zl\".~$P'g");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "pN*#]2y7zl\".~$P'g", node0, "pN*#]2y7zl\".~$P'g");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getRootOfQualifiedName(node1);
      node1.setCharno(31);
      Node node2 = Node.newString(34, "infinity", (-580), 14);
      Object object0 = new Object();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.mayBeStringHelper(node2);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.getPureBooleanValue(node1);
      NodeUtil.evaluatesToLocalValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node2, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETPROP infinity
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("8f^SEH5Xgu9hc7=K");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^", node0);
      StringBuilder stringBuilder0 = new StringBuilder("NaN");
      node1.appendStringTree(stringBuilder0);
      Node node2 = Node.newString("8f^SEH5Xgu9hc7=K", 9, 2389);
      node1.addChildToFront(node2);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      StringBuffer stringBuffer0 = new StringBuffer();
      NodeUtil.precedence(37);
      Node node3 = node1.removeFirstChild();
      NodeUtil.isStrWhiteSpaceChar(428);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "S#nc", "1JAqT[m(&{Ow");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType((-1256));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node0);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isForIn(node0);
      NodeUtil.isStrWhiteSpaceChar(20);
      NodeUtil.getSourceName(node0);
      NodeUtil.isFunctionDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      closureCodingConvention0.isValidEnumKey("KDf<fn1Z[L54");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node.newNumber(1.0);
      Node node0 = new Node(29, 49, 31);
      NodeUtil.precedence(19);
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(346);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 346
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 113: WHILE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.precedence(63);
      NodeUtil.opToStr(63);
      NodeUtil.isLatin("|fP^Um=rf;N.CGdZ");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3191);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node0 = new Node(108, 33, 33);
      node0.setCharno(33);
      Node node1 = new Node(21, 10, 267);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      NodeUtil.isName(node2);
      NodeUtil.isSimpleOperatorType(46);
      NodeUtil.isControlStructure(node2);
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.isForIn(node0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.opToStr(77);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node node0 = new Node(18);
      NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-948));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-948> (type -948)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(105);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 105: FUNCTION
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Logger.getLogger("");
      Node.newString("", 41, 41);
      Node node0 = new Node(1123, 35, 786);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.precedence(91);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3));
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(77);
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.isCallOrNew(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("KDf<fn1Z[L54");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KDf<fn1Z[L54");
      Node node0 = Node.newString(115, "t!2U&!6KzW<aqQ");
      NodeUtil.isSwitchCase(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.referencesThis(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node0);
      NodeUtil.isTryFinallyNode(node0, node0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.CallGraph$Function", (-3203), 85);
      NodeUtil.isExprCall(node0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      DefaultCodingConvention defaultCodingConvention1 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention1, "com.google.javascript.jscomp.CallGraph$Function", (-1224), 860);
      NodeUtil.isExprCall(node0);
      NodeUtil.setDebugInformation(node0, node1, "com.google.javascript.jscomp.CallGraph$Function");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isSimpleOperatorType(76);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.isArrayLiteral(node1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      NodeUtil.opToStr(103);
      Node node0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(86);
      // Undeclared exception!
      try { 
        NodeUtil.isImmutableValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-2846));
      NodeUtil.isSimpleOperator(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(110);
      NodeUtil.isTryFinallyNode(node0, node0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(41);
      jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 75: REF_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(90);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeReplaceKnownMethods0.isEcmaScript5OrGreater();
      NodeUtil.isSimpleOperatorType(67);
      NodeUtil.isObjectLitKey(node1, node1);
      NodeUtil.getStringNumberValue("-+qq`BQZ&!");
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      Node node1 = new Node((-38));
      NodeUtil.getArrayElementStringValue(node1);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(42);
      NodeUtil.isObjectLitKey(node2, node1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(38);
      NodeUtil.isStrWhiteSpaceChar(32);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\"");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Node node0 = Node.newString(13, "", 13, 2593);
      Object object0 = new Object();
      nodeUtil_BooleanResultPredicate0.equals(object0);
      NodeUtil.mayBeStringHelper(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      NodeUtil.getVarsDeclaredInBranch(node1);
      NodeUtil.getPureBooleanValue(node1);
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString("dD<zE7 ", 41, 41);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.isLatin("undefined");
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      NodeUtil.isCommutative(9);
      nodeUtil_MatchNodeType0.apply(node0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("`fbno9B[c-F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%");
      Node node1 = Node.newString((-2107), "`fbno9B[c-F");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node1);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(60);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getArrayElementStringValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 80: RB
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.isSimpleOperatorType(22);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      LightweightMessageFormatter.withoutSource();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(43, "com.google.javascript.rhino.jstype.NoObjectType");
      NodeUtil.getStringValue(node0);
      NodeUtil.getArrayElementStringValue(node0);
      StringBuffer stringBuffer0 = new StringBuffer("false");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.isReferenceName(node1);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isSimpleOperatorType((-1491));
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Logger.getLogger("KDf<fn1Z[L54");
      Node node1 = new Node((-883));
      Node node2 = new Node(170, 40, 1587);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=53> (type 53)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = Node.newString(5, "4(;V;?XL, Ah63o");
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=50> (type 50)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("pN*#]2y7zl\".~$P'g");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "pN*#]2y7zl\".~$P'g", node0, "pN*#]2y7zl\".~$P'g");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.newName(closureCodingConvention0, "infinity", node0);
      node1.setCharno(31);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      StringBuffer stringBuffer0 = new StringBuffer();
      NodeUtil.precedence(9);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(11);
      NodeUtil.isAssociative(4095);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node.newString(36, "+{6&,8J:J`%RT7X", (-434), 1191);
      Node node0 = new Node(88, (-2110), 96);
      NodeUtil.isSimpleOperator(node0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Logger.getAnonymousLogger();
      Node node0 = new Node(104, 2112, 104);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(96);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.getPureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDOT 2112
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node.newString("V@>YP*{Tw$J)>");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.isStrWhiteSpaceChar(43);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("pN*#]2y7zl\".~$P'g");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "pN*#]2y7zl\".~$P'g", node0, "pN*#]2y7zl\".~$P'g");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "infinity", node0);
      node1.setCharno(31);
      Node.newString(42, "infinity", (-580), 1408);
      Object object0 = new Object();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("pN*#]2y7zl\".~$P'g", false);
      NodeUtil.isCall(node2);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.isStrWhiteSpaceChar(12);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = new Node(102, 75, 79);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Object object0 = new Object();
      nodeUtil_MatchNodeType0.equals(object0);
      Node node0 = new Node(110);
      NodeUtil.precedence(24);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType((-3587));
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(26, 2612, (-989));
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = NodeUtil.newExpr(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(17, 51, 286);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("pN*#]2y7zl\".~$P'g");
      NodeUtil.newName(closureCodingConvention0, "infinity", node0);
      node0.setCharno(31);
      NodeUtil.precedence(102);
      NodeUtil.opToStr(8);
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(89);
      NodeUtil.isCommutative(89);
      NodeUtil.precedence(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node.newNumber((double) 21);
      Node node1 = new Node((-2884), 2057, (-3));
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3187);
      Logger logger0 = Tracer.logger;
      Node node0 = Node.newString(33, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isSwitchCase(node0);
      StringBuilder stringBuilder0 = new StringBuilder(17);
      node0.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isExpressionNode(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      DefaultCodingConvention defaultCodingConvention1 = new DefaultCodingConvention();
      NodeUtil.precedence(122);
      Compiler compiler0 = new Compiler();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      Logger logger0 = Tracer.logger;
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-77));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -77
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.appendStringTree(charArrayWriter0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NodeUtil.precedence(18);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "KDf<fn1Z[L54", 41, 111);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.setDebugInformation(node0, node0, "KDf<fn1Z[L54");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(78);
      NodeUtil.isSimpleOperatorType(934);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(101);
      NodeUtil.isObjectLitKey(node1, node0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString("dD<zE7 ", 589, 589);
      NodeUtil.isStatementParent(node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      NodeUtil.mayEffectMutableState(node0, compiler0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 82: RC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(89);
      NodeUtil.isCommutative(89);
      NodeUtil.precedence(89);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.precedence(10);
      NodeUtil.isLatin("com.google.javascript.jscomp.CheckAccidentalSemicolon");
      NodeUtil.isSimpleOperatorType(89);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('[');
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(13);
      NodeUtil.isImmutableValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(616);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=616> (type 616)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z~6");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "mIzK6", "mIzK6");
      StringBuffer stringBuffer0 = new StringBuffer("mVDPM*>Ko~L tW)OBrl");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.isLiteralValue(node1, true);
      NodeUtil.getInfoForNameNode(node0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(94, 3, (-943));
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(0);
      SyntheticAst syntheticAst0 = new SyntheticAst("\"replacements\" is null.");
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, syntacticScopeCreator0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node1 = syntheticAst0.getAstRoot(compiler1);
      node1.addChildrenToBack(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      Node node2 = new Node(26, 15, 17);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = new Node(27);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(46);
      NodeUtil.isImmutableValue(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node3, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.isControlStructure(node3);
      NodeUtil.getInfoForNameNode(node0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.isSimpleOperatorType(86);
      Node node0 = Node.newString((-922), "@](Kkc", 1851, (-2725));
      NodeUtil.mayBeStringHelper(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 8: SETNAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      closureCodingConvention0.isValidEnumKey("KDf<fn1Z[L54");
      NodeUtil.isSimpleOperatorType((-1417));
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 66: SET_REF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = Node.newString("heV7Xz5Kn");
      Logger.getLogger("19~QCC9B,OONh[");
      Node node1 = new Node(33, node0);
      node1.siblings();
      NodeUtil.getImpureBooleanValue(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.opToStrNoFail(16);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(98, (-3873), 98);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      // Undeclared exception!
      try { 
        NodeUtil.isBooleanResult(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.rhino.jstype.NoObjectType", (-77), 45);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Compiler compiler0 = new Compiler();
      UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      nodeTraversal1.getCompiler();
      Node node0 = Node.newString(86, "MUL", (-432), 2569);
      Object object0 = new Object();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Object object1 = new Object();
      nodeUtil_BooleanResultPredicate0.equals(object1);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString(105, "$ZCoJSz7", 41, 41);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      File file0 = MockFile.createTempFile("MJHGwGsi9", "MJHGwGsi9");
      MockFile mockFile0 = new MockFile(file0, "MJHGwGsi9");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeUtil.opToStrNoFail(87);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString("heV7Xz5Kn");
      MockFile mockFile0 = new MockFile("s");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      NodeUtil.opToStr(50);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dD<zE7 ");
      Node node0 = Node.newString(589, "dD<zE7 ", 589, 589);
      Logger.getAnonymousLogger();
      NodeUtil.isStatementParent(node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.precedence(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("S#nc");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%");
      Node node0 = Node.newString(111, "%");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(5);
      NodeUtil.setDebugInformation(node0, node0, "REF_NAME");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isSimpleOperatorType(111);
      NodeUtil.mayBeString(node0, false);
      NodeUtil.isUndefined(node0);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newString("<<=");
      Logger.getLogger("<<=");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Vector<JSType> vector0 = new Vector<JSType>();
      node0.putIntProp(88, 88);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      node0.removeFirstChild();
      Node node1 = new Node(81);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isCallOrNew(node1);
      NodeUtil.isCommutative(1057);
      NodeUtil.opToStr(28);
      ControlFlowAnalysis.getCatchHandlerForBlock(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Node node0 = new Node((-494), (-494), 0);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(32);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode((String) null, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(97);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      simpleErrorReporter1.error(" r8Dps `", " r8Dps `", (-2071), (String) null, (-2071));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 54: GETVAR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SyntheticAst syntheticAst0 = new SyntheticAst("oP");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = NodeUtil.newExpr(node0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      NodeUtil.mayEffectMutableState(node1, compiler1);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L5");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L5", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      Node node3 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      node2.isOptionalArg();
      StringBuilder stringBuilder0 = new StringBuilder(">X;D{WVSJ A x2>l");
      NodeUtil.setDebugInformation(node1, node3, ">X;D{WVSJ A x2>l");
      Node node4 = new Node(51);
      Logger.getAnonymousLogger();
      StringBuffer stringBuffer0 = new StringBuffer();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      NodeUtil.opToStrNoFail(20);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newString(88, " (type ");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node1 = Node.newString(102, "?JAq{[m(&=.iOw");
      NodeUtil.isGetProp(node1);
      node0.getDirectives();
      node0.setCharno((-2395));
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.getInfoForNameNode(node1);
      NodeUtil.newVarNode("?JAq{[m(&=.iOw", node1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.rhino.jstype.NoObjectType", (-77), 43);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Compiler compiler0 = new Compiler();
      UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      nodeTraversal1.getCompiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(36);
      NodeUtil.isName(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.getInfoForNameNode(node1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETELEM
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newNumber((-1020.782656263491), 43, 105);
      node0.isVarArgs();
      NodeUtil.opToStr(14);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newString("<<=");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = new Node(23, node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("V@>YP*{Tw$J)>");
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.setDebugInformation(node0, node0, "V@>YP*{Tw$J)>");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(37);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Stack<JSType> stack1 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 106: EXPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      Logger.getLogger("<<=");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("@OXmckzMy6_");
      Node node1 = new Node(2, node0, node0, node0, node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(91);
      String string0 = "ENUM";
      SyntheticAst syntheticAst0 = new SyntheticAst("ENUM");
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("heVaXz5Kn");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Logger.getLogger("_");
      Node node2 = new Node(39);
      Node node3 = new Node(50, 16, 120);
      NodeUtil.precedence(39);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(7);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(2112);
      NodeUtil.getStringValue(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString((-1355), " (type ");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node1 = Node.newString(31, "oP");
      NodeUtil.isGetProp(node0);
      node0.getDirectives();
      node1.setCharno(7);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.getInfoForNameNode(node0);
      NodeUtil.newVarNode("?'P[S", node1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(53);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      LightweightMessageFormatter.withoutSource();
      Logger logger1 = Tracer.logger;
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 81: LC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.isSimpleOperatorType(68);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1772);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=1772> (type 1772)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newString("heVaXz5Kn");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = NodeUtil.newVarNode("heVaXz5Kn", node0);
      NodeUtil.setDebugInformation(node0, node1, "heVaXz5Kn");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(1835);
      NodeUtil.precedence(15);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
      Node.newNumber((double) (-1), (-1540), 38);
      node0.removeFirstChild();
      Node node3 = Node.newString(1490, "Q&E1");
      node3.getQualifiedName();
      nodeUtil_MatchNodeType0.apply(node3);
      NodeUtil.isStrWhiteSpaceChar(1446);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "S#nc", "S#nc");
      Node node1 = Node.newString(29, "com", (-3), 2);
      NodeUtil.mayBeStringHelper(node1);
      Node node2 = NodeUtil.newVarNode("S#nc", node1);
      NodeUtil.isGetOrSetKey(node1);
      NodeUtil.isTryFinallyNode(node2, node0);
      NodeUtil.isSimpleOperatorType(13);
      NodeUtil.isImmutableValue(node0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Logger.getGlobal();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$`~]w[SqKW5ra{K'p", (-51), (-51));
      NodeUtil.isSimpleOperator(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(22, 19, 1);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.isCommutative(1168);
      NodeUtil.opToStr(47);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      SyntheticAst syntheticAst0 = new SyntheticAst(";1<n&Wmn");
      NodeUtil.isSimpleOperatorType(82);
      Node.newString(453, ";1<n&Wmn");
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter((SourceExcerptProvider) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(";1<n&Wmn", ";1<n&Wmn");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;1<n&Wmn
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3187);
      Logger logger0 = Tracer.logger;
      Node node0 = Node.newString(33, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isSwitchCase(node0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      NodeUtil.isVar(node0);
      StringBuilder stringBuilder0 = new StringBuilder(",k^+zo<$.+k/vk.?/mK");
      node0.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isImmutableValue(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.isExprAssign(node0);
      NodeUtil.isExpressionNode(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Logger logger0 = Logger.getLogger("R#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "R#nc", "1JAqT[m(&{Ow");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newString(41, "R#nc", (-3), 47);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(44);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isArrayLiteral(node1);
      NodeUtil.mayEffectMutableState(node2);
      NodeUtil.isSimpleOperator(node1);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      NodeUtil.isAssign(node0);
      NodeUtil.setDebugInformation(node0, node0, "(");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(500);
      NodeUtil.isArrayLiteral(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(94);
      // Undeclared exception!
      try { 
        SimpleDefinitionFinder.getNameNodeFromFunctionNode(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.isStrWhiteSpaceChar(65279);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      String string0 = "T@F6+j";
      File file0 = MockFile.createTempFile("ga{rp]Vlj6", "T@F6+j");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      // Undeclared exception!
      try { 
        JSSourceFile.fromInputStream((String) null, (InputStream) mockFileInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString(105, "$ZCoJSz7", 41, 41);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      DefaultCodingConvention defaultCodingConvention1 = new DefaultCodingConvention();
      NodeUtil.newQualifiedNameNode(defaultCodingConvention1, "apply", 147, (-2781));
      // Undeclared exception!
      try { 
        NodeUtil.isHoistedFunctionDeclaration(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(104, 2112, 104);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      node0.getJSDocInfo();
      NodeUtil.precedence(27);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(100);
      node0.removeFirstChild();
      NodeUtil.precedence(11);
      // Undeclared exception!
      try { 
        NodeUtil.getArrayElementStringValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 85: COMMA
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      int int0 = 988;
      int int1 = 107;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.addChildrenToBack(node0);
      NodeUtil.isSimpleOperatorType(16);
      NodeUtil.arrayToString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getVarsDeclaredInBranch(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Logger.getGlobal();
      Node node0 = new Node(120);
      NodeUtil.isSimpleOperatorType(4095);
      NodeUtil.arrayToString(node0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      NodeUtil.getVarsDeclaredInBranch(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(41, 41, (-3428));
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(51);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(19);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      LightweightMessageFormatter.withoutSource();
      Logger logger1 = Tracer.logger;
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.opToStr(19);
      int int0 = 47;
      Node[] nodeArray0 = new Node[1];
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(">>", sourceFile_Generator0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      SourceFile sourceFile0 = compilerInput0.getSourceFile();
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = null;
      try {
        compiler0 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Stack<JSType> stack0 = new Stack<JSType>();
      int int0 = 83;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 83: LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(98, (-3873), 98);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      NodeUtil.mayEffectMutableState(node0, compiler0);
      NodeUtil.getPrototypeClassName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isGetProp((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = Node.newString(49, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      NodeUtil.isUndefined(node0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      passConfig_PassConfigDelegate0.getTypedScopeCreator();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler1, unfoldCompoundAssignments0, (ScopeCreator) null);
      nodeTraversal1.getCompiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler1.defaultCodingConvention;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(2);
      NodeUtil.isName(node0);
      HashSet<String> hashSet0 = new HashSet<String>();
      Set<String> set0 = compilerOptions0.idGenerators;
      NodeUtil.isValidDefineValue(node2, set0);
      NodeUtil.getInfoForNameNode(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Logger logger1 = Tracer.logger;
      Node node0 = new Node(118, 40, 83);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      NodeUtil.mayEffectMutableState(node0, compiler0);
      NodeUtil.isGetProp(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      NodeUtil.isAssign(node0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3545);
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(2006, 146, 2112);
      NodeUtil.getStringValue(node0);
      Node node1 = new Node(38);
      NodeUtil.isStrWhiteSpaceChar(9);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3191);
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(3191);
      Stack<JSType> stack0 = new Stack<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 74: REF_NS_MEMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("S#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.getWarnings();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newString(88, " (type ");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node1 = Node.newString(102, "?JAq{[m(&=.iOw");
      NodeUtil.isGetProp(node1);
      node0.getDirectives();
      NodeUtil.isLiteralValue(node1, false);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.isEmptyBlock(node1);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      Node node2 = new Node(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.setDebugInformation(node2, node2, "=11");
      NodeUtil.isSimpleOperatorType(39);
      node2.detachChildren();
      Node node3 = Node.newString(6, "=11");
      node3.addChildrenToBack(node1);
      NodeUtil.isSimpleOperatorType(1);
      NodeUtil.opToStrNoFail(45);
      NodeUtil.copyNameAnnotations(node0, node0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      Node node2 = new Node(2, 5, 34);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = new Node(120);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(0);
      NodeUtil.isImmutableValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=58> (type 58)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node.newNumber((-1.0));
      Node node0 = new Node(158, 37, 5);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(64, "");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "<<=", node0, "<<=");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = NodeUtil.newName(googleCodingConvention0, "infinity", node1);
      node0.setCharno(1);
      NodeUtil.getArrayElementStringValue(node2);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.mayBeString(node2);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isReferenceName(node2);
      NodeUtil.isCommutative(2);
      NodeUtil.copyNameAnnotations(node1, node2);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node.newNumber(0.0);
      Node node0 = Node.newString(34, "$ZCoJSz7", 18, 2);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      DefaultCodingConvention defaultCodingConvention1 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$ZCoJSz7", 1, 4095);
      NodeUtil.isHoistedFunctionDeclaration(node1);
      NodeUtil.isThis(node1);
      NodeUtil.isArrayLiteral(node0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.CallGraph$Function", (-3203), 85);
      NodeUtil.isExprCall(node0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)38;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.opToStr(104);
      NodeUtil.isLatin("replaceIdGenerators");
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.isPrototypeProperty(node0);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString(115, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isLoopStructure(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newString(6, ",k^+zo<$.+k/vk.?/mK", 103, 31);
      peepholeSimplifyRegExp0.optimizeSubtree(node0);
      NodeUtil.setDebugInformation(node1, node1, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(76);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(77);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType2 = new NodeUtil.MatchNodeType(119);
      nodeUtil_MatchNodeType2.apply(node2);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node3 = peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
      NodeUtil.isFunctionExpression(node3);
      NodeUtil.isArrayLiteral(node3);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        SimpleDefinitionFinder.getNameNodeFromFunctionNode(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node0 = Node.newNumber((-370.6));
      Node node1 = new Node(38, 4, 2);
      NodeUtil.precedence(14);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.setDebugInformation(node0, node1, (String) null);
      NodeUtil.isSimpleOperatorType(33);
      node0.detachChildren();
      Node node2 = Node.newString((-1), "8ZxG");
      node0.addChildrenToBack(node2);
      NodeUtil.isSimpleOperatorType(25);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(98);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 98: HOOK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = "KDf<fn1Z[L54";
      Node node0 = Node.newNumber((-0.05697419392562952));
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.getWarnings();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "KDf<fn1Z[L54", 93, 168);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.setDebugInformation(node1, node0, "\n\nSubtree1: ");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getNumberValue(node0);
      NodeUtil.trimJsWhiteSpace("\n\nSubtree1: ");
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1613));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-1613> (type -1613)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("pN*#]2y7zl\".~$P'g");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "pN*#]2y7zl\".~$P'g", node0, "pN*#]2y7zl\".~$P'g");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "infinity", node0);
      node1.setCharno(31);
      Node.newString(42, "infinity", (-580), 14);
      Object object0 = new Object();
      NodeUtil.isName(node2);
      node0.addChildrenToBack(node2);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      nodeUtil_MayBeStringResultPredicate0.equals("infinity");
      NodeUtil.isControlStructure(node0);
      NodeUtil.getPrototypeClassName(node1);
      NodeUtil.getInfoForNameNode(node2);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(42);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Logger logger1 = Tracer.logger;
      Node node0 = new Node(118, 40, 83);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.isLatin("!r");
      NodeUtil.isSimpleOperatorType(117);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString(115, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isLoopStructure(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newString((-1143), ",k^+zo<$.+k/vk.?/mK", (-1857), 116);
      Logger.getAnonymousLogger();
      NodeUtil.isStatementParent(node1);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$`~]w[SqKW5ra{K'p");
      compiler0.getPropertyMap();
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler1 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      NodeUtil.mayEffectMutableState(node0, compiler1);
      NodeUtil.isGetProp(node0);
      Node node1 = NodeUtil.newExpr(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node1, node0);
      NodeUtil.isAssign(node1);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      Node node0 = new Node((-997));
      NodeUtil.opToStr(1);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      node0.setCharno(108);
      Node node1 = new Node(51, 41, 11);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.precedence(94);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(17);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newString("<<=");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = new Node(23, node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.isName(node0);
      NodeUtil.isSimpleOperatorType(2);
      NodeUtil.isControlStructure(node2);
      NodeUtil.isBooleanResultHelper(node2);
      NodeUtil.isForIn(node2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString(115, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isLoopStructure(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newString(6, ",k^+zo<$.+k/vk.?/mK", 103, 31);
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      NodeUtil.setDebugInformation(node1, node1, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isLatin("msg.setter.return");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR ,k^+zo<$.+k/vk.?/mK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStr(65);
      // Undeclared exception!
      try { 
        Node.newString(65, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Logger.getLogger("");
      Node node0 = new Node(64);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isPrototypePropertyDeclaration(node0);
      NodeUtil.copyNameAnnotations(node0, node0);
      NodeUtil.isLiteralValue(node0, false);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.getInfoForNameNode(node0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(296);
      NodeUtil.opToStr(119);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      node0.setCharno(119);
      Node node1 = new Node((-1), 1199, 0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-521));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-521> (type -521)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      Node node0 = Node.newString(105, "$ZCoJSz7", 41, 41);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      DefaultCodingConvention defaultCodingConvention1 = new DefaultCodingConvention();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      Node node2 = NodeUtil.newExpr(node1);
      ControlFlowAnalysis.computeFollowNode(node2);
      NodeUtil.copyNameAnnotations(node2, node1);
      NodeUtil.isLiteralValue(node1, true);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.isEmptyBlock(node0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(34);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Logger logger1 = Tracer.logger;
      Node node0 = new Node(34, 120, 40);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.RAW;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      NodeUtil.mayEffectMutableState(node0, compiler0);
      NodeUtil.isGetProp(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isVarOrSimpleAssignLhs((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      Node node2 = new Node(2, 5, 34);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = new Node(120);
      NodeUtil.isNumericResultHelper(node2);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(0);
      NodeUtil.isImmutableValue(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node2);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for try (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Logger.getLogger("S#nc");
      Logger.getLogger("S#nc");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u000B");
      Node node0 = Node.newString((-1020), "/=");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(109);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node0);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isForIn(node0);
      NodeUtil.isStrWhiteSpaceChar((-3252));
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      Node node1 = Node.newString(41, " \")M?2nUO=M?e", 86, 122);
      NodeUtil.mayBeStringHelper(node0);
      Node node2 = NodeUtil.newVarNode("-@FUOdzP5AE", node0);
      NodeUtil.isGetOrSetKey(node0);
      NodeUtil.isTryFinallyNode(node2, node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.newName(googleCodingConvention0, "START_OF_EXPR", node2);
      NodeUtil.isFunctionDeclaration(node1);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1545), (-3), 39);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.setDebugInformation(node2, node0, "4%OvK7Xu|~Bu");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node3 = new Node(17);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node4 = peepholeSimplifyRegExp0.optimizeSubtree(node3);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node4, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1545), (-3), 39);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.setDebugInformation(node2, node0, "4%OvK7Xu|~Bu");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStrNoFail(92);
      NodeUtil.isSimpleOperatorType(2);
      NodeUtil.isImmutableValue(node2);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = new Node((-71));
      Logger.getAnonymousLogger();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node1 = Node.newString((-71), "#");
      Node node2 = Node.newString(48, "+", 12, 4);
      NodeUtil.isGetProp(node2);
      node0.getDirectives();
      NodeUtil.isLiteralValue(node1, true);
      NodeUtil.isEmptyBlock(node2);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node2, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBINDNAME + 12
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      NodeUtil.isSimpleOperatorType(152);
      Node node0 = Node.newString(84, "(dtp>|D!zL[", 41, 2901);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.newVarNode("(dtp>|D!zL[", node0);
      NodeUtil.isSimpleOperator(node0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(104, 144, 103);
      NodeUtil.getStringValue(node0);
      NodeUtil.opToStr(2459);
      NodeUtil.isLatin("Error: the child of a FOR-IN cannot be an INC or DEC");
      NodeUtil.isLatin("com.google.javascript.jscomp.Normalize$ScopeTicklingCallback");
      NodeUtil.isSimpleOperatorType(9);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("KDf<fn1Z[L54");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "KDf<fn1Z[L54", node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node1, "<<=");
      node2.removeProp(50);
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, (Logger) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "-+qq`BQZ&!", 66, 118);
      NodeUtil.isExprCall(node0);
      node0.setCharno(27);
      Node node1 = Node.newString(24, "-+qq`BQZ&!", 16, 114);
      Object object0 = new Object();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("-+qq`BQZ&!", true);
      nodeUtil_BooleanResultPredicate0.equals(node0);
      NodeUtil.mayBeStringHelper(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for eol (type 1)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(90, 90, 90);
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeReplaceKnownMethods0.isEcmaScript5OrGreater();
      NodeUtil.isSimpleOperatorType(67);
      NodeUtil.isGetProp(node1);
      node0.getDirectives();
      NodeUtil.isLiteralValue(node0, true);
      NodeUtil.isCallOrNew(node0);
      NodeUtil.isEmptyBlock(node1);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
      NodeUtil.getOpFromAssignmentOp(node0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = new Node(305, 305, 107);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType(81);
      SyntheticAst syntheticAst0 = new SyntheticAst("\"replacements\" is null.");
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, syntacticScopeCreator0);
      nodeTraversal0.getCompiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToBack(node1);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.isExprAssign(node0);
      NodeUtil.isExpressionNode(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger logger0 = Logger.getLogger("R#nc");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "R#nc", "1JAqT[m(&{Ow");
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newString(41, "R#nc", (-3), 47);
      peepholeSimplifyRegExp0.optimizeSubtree(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = Node.newString(9, "wf*G", 4095, 340);
      Object object0 = new Object();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      nodeUtil_BooleanResultPredicate0.equals(node1);
      NodeUtil.mayBeStringHelper(node2);
      NodeUtil.getVarsDeclaredInBranch(node1);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.evaluatesToLocalValue(node2, nodeUtil_BooleanResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      NodeUtil.isValidPropertyName("Et");
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(83, 83, 40);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      NodeUtil.mayEffectMutableState(node0, compiler0);
      NodeUtil.isGetProp(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      NodeUtil.isAssign(node0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = Node.newString("~)gqJo,k");
      Node node1 = new Node(2, node0, node0, node0, node0);
      StringBuilder stringBuilder0 = new StringBuilder("~)gqJo,k");
      NodeUtil.isFunctionObjectCall(node1);
      StringBuffer stringBuffer0 = new StringBuffer();
      NodeUtil.precedence(23);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3));
      NodeUtil.getArrayElementStringValue(node0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3187);
      Logger logger0 = Tracer.logger;
      Node node0 = Node.newString(33, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isSwitchCase(node0);
      StringBuilder stringBuilder0 = new StringBuilder(17);
      node0.appendStringTree(stringBuilder0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(56);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isNullOrUndefined(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "-+qq`BQZ&!", 66, 118);
      NodeUtil.isExprCall(node0);
      Node node1 = new Node(26, 2612, (-989));
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      Node node3 = NodeUtil.newExpr(node0);
      ControlFlowAnalysis.computeFollowNode(node2);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node3);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Object object0 = new Object();
      Node node0 = new Node(110);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(18, node0, node0);
      DefaultCodingConvention defaultCodingConvention1 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(15);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      NodeUtil.isBooleanResultHelper(node2);
      NodeUtil.getPureBooleanValue(node1);
      NodeUtil.evaluatesToLocalValue(node2, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(defaultCodingConvention1, node0, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SWITCH is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Logger.getLogger("");
      Node node0 = Node.newString("", 41, 41);
      Node node1 = new Node(1123, 35, 786);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.getPureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString("I2tfUw1-K-1Z|UkP<)");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.setDebugInformation(node0, node0, "I2tfUw1-K-1Z|UkP<)");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(43);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node1, hashSet0);
      NodeUtil.isSimpleFunctionObjectCall(node1);
      NodeUtil.isGetOrSetKey(node0);
      NodeUtil.getLoopCodeBlock(node1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Logger.getGlobal();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "", (-1015), 4044);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.isAssign(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = new Node(42, node0, 51, 51);
      NodeUtil.isHoistedFunctionDeclaration(node0);
      NodeUtil.isThis(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.isGet(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Logger.getLogger("SEMI");
      Node node0 = Node.newString(88, "po+?<M,Im?N");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      NodeUtil.isSimpleOperatorType((-1471));
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "-+qq`BQZ&!", 66, 118);
      NodeUtil.isExprCall(node0);
      Node node1 = new Node(26, 2612, (-989));
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      NodeUtil.setDebugInformation(node1, node2, "-+qq`BQZ&!");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      node2.putProp((-266), (Object) null);
      node1.isNoSideEffectsCall();
      NodeUtil.canBeSideEffected(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPureBooleanValue(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("@OXmckzMy6_");
      Node node1 = new Node(2, node0, node0, node0, node0);
      StringBuilder stringBuilder0 = new StringBuilder("@OXmckzMy6_");
      NodeUtil.getStringValue(node0);
      NodeUtil.opToStr(34);
      HashSet<String> hashSet0 = new HashSet<String>();
      StatementFusion statementFusion0 = new StatementFusion();
      Node node2 = statementFusion0.optimizeSubtree(node0);
      NodeUtil.isValidDefineValue(node2, hashSet0);
      NodeUtil.isSimpleOperatorType(132);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(73);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 73: REF_MEMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(2234);
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isSimpleOperatorType((-4562));
      Node node1 = Node.newString(45, "x");
      NodeUtil.getStringValue(node1);
      NodeUtil.opToStr(23);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      LightweightMessageFormatter.withoutSource();
      Node node0 = Node.newString(115, ",k^+zo<$.+k/vk.?/mK");
      NodeUtil.isLoopStructure(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.isGetOrSetKey(node0);
      NodeUtil.getLoopCodeBlock(node0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node.newNumber(0.0);
      Node node0 = new Node(25);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger(")ub:8Q");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      String string0 = "t!2U&!6K\\zW<aqQ";
      Node node1 = Node.newString(77, "false");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isName(node1);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(6);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.isControlStructure(node1);
      NodeUtil.isBooleanResultHelper(node0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try { 
        compiler0.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(26, 26, 26);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.newExpr(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(27, 26, 3266);
      NodeUtil.isCallOrNew(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("@OXmckzMy6_");
      Node node1 = new Node(2, node0, node0, node0, node0);
      StringBuilder stringBuilder0 = new StringBuilder("@OXmckzMy6_");
      node0.appendStringTree(stringBuilder0);
      NodeUtil.isFunctionObjectCall(node1);
      StringBuffer stringBuffer0 = new StringBuffer();
      NodeUtil.precedence(87);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(6);
      NodeUtil.precedence(88);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("<<=");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "<<=", node0, "<<=");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      NodeUtil.newUndefinedNode(node1);
      Node node2 = new Node(39, 39, 2101);
      NodeUtil.precedence(38);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(45);
      NodeUtil.getCount(node2, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = new Node(42);
      Logger.getAnonymousLogger();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      Vector<JSType> vector0 = new Vector<JSType>();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node1 = Node.newString(30, "0(H?7Y2*<E");
      Node node2 = Node.newString(29, "+", (-3525), 44);
      NodeUtil.isGetProp(node2);
      node0.getDirectives();
      Node node3 = node1.clonePropsFrom(node2);
      NodeUtil.isLiteralValue(node0, true);
      NodeUtil.isEmptyBlock(node0);
      NodeUtil.getPureBooleanValue(node3);
      NodeUtil.isCallOrNew(node2);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.evaluatesToLocalValue(node3, sourceMap_DetailLevel0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      LightweightMessageFormatter.withoutSource();
      Node node0 = new Node(98, (-3873), 98);
      Node node1 = new Node(1, (-3190), 44);
      Node node2 = new Node(2855);
      NodeUtil.isNumericResultHelper(node2);
      node1.setLineno(48);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(98);
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.getArrayElementStringValue(node2);
      node0.setLineno(407);
      NodeUtil.isUndefined(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode((String) null, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Object object0 = new Object();
      Node node0 = new Node(110);
      NodeUtil.getStringValue(node0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(18, node0, node0);
      node0.addChildrenToBack(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      nodeUtil_MayBeStringResultPredicate0.equals(object0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 115: FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z~6");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "mIzK6", "mIzK6");
      StringBuffer stringBuffer0 = new StringBuffer("mVDPM*>Ko~L tW)OBrl");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = new Node(71, node1, node0, node0, node0);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.isLiteralValue(node1, true);
      NodeUtil.isWithinLoop(node0);
      NodeUtil.isStatementParent(node0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(65, "");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.isBooleanResultHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeGET_REF 
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.setDebugInformation(node0, node1, (String) null);
      NodeUtil.isSimpleOperatorType(33);
      node0.detachChildren();
      Node node2 = Node.newString((-1), "8ZxG");
      node0.addChildrenToBack(node2);
      NodeUtil.isCall(node1);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.isStrWhiteSpaceChar(8232);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("pN*#]2y7zl\".~$P'g");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "pN*#]2y7zl\".~$P'g", node0, "pN*#]2y7zl\".~$P'g");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.newName(closureCodingConvention0, "infinity", node0);
      node1.setCharno(31);
      Node.newString(42, "infinity", (-580), 1408);
      Object object0 = new Object();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("pN*#]2y7zl\".~$P'g", false);
      NodeUtil.isSimpleOperatorType(3);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 104: DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Logger.getGlobal();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(121);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, 160, 121);
      NodeUtil.isStatementParent(node0);
      NodeUtil.opToStr(121);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = Node.newString(49, "");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.isBooleanResultHelper(node1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTHROW 
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = Node.newString("KDf<gfn1Z[L54");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.appendStringTree(charArrayWriter0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getPrototypeClassName(node1);
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.setDebugInformation(node0, node1, (String) null);
      NodeUtil.isSimpleOperatorType(33);
      node0.detachChildren();
      NodeUtil.isName(node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isSimpleOperatorType(48);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getArrayElementStringValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 114: DO
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Logger.getLogger("");
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(64);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "4)(xu]AriV", node0);
      node1.addChildToFront(node0);
      node0.addChildrenToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y<jU#V<");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType((-1864));
      NodeUtil.isImmutableValue(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      NodeUtil.precedence(93);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Logger logger0 = Logger.getLogger("msg.setter.return");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("VIAwM/DcHeB");
      LightweightMessageFormatter.withoutSource();
      Logger logger1 = Tracer.logger;
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = NodeUtil.newExpr(node0);
      Compiler.runCallableWithLargeStack((Callable<JSSourceFile>) null);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Node node2 = new Node(108, node1);
      NodeUtil.mayEffectMutableState(node2, compiler0);
      NodeUtil.getPureBooleanValue(node2);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(34);
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      Logger logger1 = Tracer.logger;
      Node node0 = new Node(34, 120, 40);
      NodeUtil.redeclareVarsInsideBranch(node0);
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.RAW;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node0, hashSet0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(25);
      NodeUtil.getArrayElementStringValue(node0);
      node1.addChildrenToBack(node0);
      node0.addChildToBack(node1);
      Node node2 = new Node(2, 5, 34);
      NodeUtil.getStringValue(node0);
      Node node3 = new Node(120);
      NodeUtil.isNumericResultHelper(node2);
      node3.setLineno(39);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isSimpleOperatorType(0);
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node1, hashSet0);
      NodeUtil.getArrayElementStringValue(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }
}
