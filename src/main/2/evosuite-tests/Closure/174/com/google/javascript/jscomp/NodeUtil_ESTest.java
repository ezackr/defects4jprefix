/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:35:02 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckEventfulObjectDisposal;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CodingConventions;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.TernaryValue;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      String string0 = NodeUtil.opToStrNoFail(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("com.google.javascripa.jscomp.PerformanceTracker$Stats");
      assertEquals("com.google.javascripa.jscomp.PerformanceTracker$Stats", string0);
      
      Node node0 = Node.newNumber((double) 126);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.getNumberValue(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      String string1 = NodeUtil.opToStr(51);
      assertEquals("in", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("/=");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("Efzd|XD*V");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention1, "&tR.");
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(" (CLASS)\n");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("13B+gqI");
      Compiler compiler0 = new Compiler();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "13B+gqI", node0, "13B+gqI");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node1);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
      
      boolean boolean0 = NodeUtil.isCommutative((-2555));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = true;
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      Compiler compiler0 = new Compiler((PrintStream) null);
      compiler0.initCompilerOptionsIfTesting();
      compiler0.getRoot();
      // Undeclared exception!
      try { 
        peepholeMinimizeConditions0.getExceptionHandler((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(58);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Cmpiler");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      String string0 = NodeUtil.opToStr((-1128));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NodeUtil.isSimpleOperatorType((-44));
      Node node0 = new Node((-44));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertEquals(44, node0.getType());
      
      NodeUtil.isPrototypeProperty(node0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(closureCodingConvention0);
      Node node0 = Node.newNumber((double) 105, 105, 81);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = NodeUtil.newQualifiedNameNodeDeclaration(codingConventions_Proxy0, "1", node0, jSDocInfo0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = NodeUtil.booleanNode(false);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      assertTrue(node0.isFalse());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(32, "+vm", 32, 106);
      Node node1 = new Node(65536);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      boolean boolean0 = peepholeFoldConstants0.mayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.Compiler");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      boolean boolean0 = peepholeFoldConstants0.mayHaveSideEffects(node0);
      assertEquals(2, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = null;
      NodeUtil.getSourceName((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ChainCalls$CallS*te");
      node0.isSyntheticBlock();
      NodeUtil.getSourceName(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.isValidQualifiedName("d7|ElY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Nsp");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatementParent((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node.newString(120, "this", 120, 120);
      Node node0 = NodeUtil.booleanNode(false);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-2602));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2602
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(1695, 1695, 1695);
      boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
      
      Node node0 = new Node(14);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertTrue(node0.isFalse());
      
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      NodeUtil.opToStr(36);
      boolean boolean1 = NodeUtil.referencesThis(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(node0.isFalse());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-6));
      // Undeclared exception!
      try { 
        nodeUtil_MatchNodeType0.apply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = NodeUtil.booleanNode(true);
      Integer integer0 = new Integer(15);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(77, "trows");
      Node node1 = NodeUtil.numberNode(43, node0);
      assertTrue(node1.isNumber());
      
      boolean boolean0 = NodeUtil.isValidSimpleName("trows");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      Node node1 = NodeUtil.numberNode(1413.37418687925, (Node) null);
      assertNotNull(node1);
      
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals("1413.37418687925", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(1649);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NodeUtil.getStringValue(Double.POSITIVE_INFINITY);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments1 = new PeepholeCollectPropertyAssignments();
      assertFalse(peepholeCollectPropertyAssignments1.equals((Object)peepholeCollectPropertyAssignments0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention1, "4jCegxX\"Ze/5/4T", (Node) null, "4jCegxX\"Ze/5/4T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(closureCodingConvention1, "2", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(43);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString(46, "%", 46, 92);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("_i");
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("_i", string0);
      
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.anyResultsMatch(node0, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      node0.isQuotedString();
      boolean boolean0 = NodeUtil.isUndefined(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(14, "com.google.javascript.jscomp.NodeUtil$1", 14, 152);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      boolean boolean1 = NodeUtil.isEmptyFunctionExpression(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(93);
      Compiler compiler0 = new Compiler();
      int int0 = NodeUtil.precedenceWithDefault(56);
      assertEquals((-1), int0);
      
      Compiler compiler1 = new Compiler();
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.Compiler");
      boolean boolean0 = NodeUtil.allArgsUnescapedLocal(node0);
      assertTrue(boolean0);
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(25);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("");
      NodeUtil.opToStr(57);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(102);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NodeUtil.precedenceWithDefault(123);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(81);
      assertEquals((-1), int0);
      
      Node node0 = new Node(81, 81, 32);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isAssignmentOp(node0);
      assertTrue(node0.isFalse());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(524, 524, 524);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node((-15));
      NodeUtil.canBeSideEffected(node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -15
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = NodeUtil.opToStr(103);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = NodeUtil.opToStr(49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean1 = nodeUtil_MatchDeclaration0.apply(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertEquals(44, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(47);
      boolean boolean0 = NodeUtil.isExprAssign(node0);
      assertEquals(43, node0.getType());
      assertFalse(boolean0);
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 2, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
      
      node0.addChildToFront(node1);
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(45);
      NodeUtil.containsFunction(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 57);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("");
      int int0 = NodeUtil.getInverseOperator(310);
      assertEquals((-1), int0);
      
      StatementFusion statementFusion0 = new StatementFusion();
      boolean boolean0 = NodeUtil.containsType(node0, 4095);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString("jgub#2e9l");
      node0.isQuotedString();
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      int int0 = NodeUtil.precedenceWithDefault((-2238));
      assertEquals((-1), int0);
      
      NodeUtil.getSourceFile(node0);
      assertFalse(node0.isFalse());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("this");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertTrue(node1.hasOneChild());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertTrue(boolean0);
      
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(4748);
      Node node0 = new Node(1464);
      boolean boolean1 = NodeUtil.isNaN(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("5laUM4nw");
      assertEquals("5laUM4nw", string0);
      
      Node node0 = Node.newString("5laUM4nw");
      String string1 = NodeUtil.getNearestFunctionName(node0);
      assertNull(string1);
      
      String string2 = NodeUtil.arrayToString(node0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertTrue(node0.isFalse());
      
      String string0 = NodeUtil.opToStr(16);
      assertEquals(">", string0);
      
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("D^f3lbHb");
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(1444);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(81);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      NodeUtil.isPrototypeProperty(node1);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      node0.checkTreeEquals(node1);
      Compiler compiler0 = new Compiler();
      NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.getCodingConvention();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString(")^P5,@OkQlXL3*hdsrg");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getImpureBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName(")KA%:$1Ceg[t7f");
      assertFalse(boolean0);
      
      Node node0 = NodeUtil.booleanNode(false);
      node0.cloneNode();
      NodeUtil.precedenceWithDefault(55);
      String string0 = NodeUtil.opToStr((-4610));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(112);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isSymmetricOperation(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("8");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newVarNode("infinity", node0);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasOneChild());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = NodeUtil.isStatementBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(136, "this", 136, 136);
      NodeUtil.opToStr(57);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString(149, "this", 149, 149);
      node0.setChangeTime(149);
      String string0 = NodeUtil.opToStr(38);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Node node0 = Node.newString("rQaOiiD!4~[");
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.hasOneChild());
      
      NodeUtil.getImpureBooleanValue(node0);
      String string0 = NodeUtil.opToStr(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.Compiler");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node((-595), (-595), (-595));
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 15);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      boolean boolean0 = NodeUtil.isValidPropertyName("com.go8gle.javascript.jscomp.CompTler");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("jr");
      Node node0 = Node.newString("jr");
      String string0 = NodeUtil.getBestLValueName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newNumber((-750.88699464128));
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(131);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = NodeUtil.opToStr(40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = NodeUtil.newVarNode("", (Node) null);
      assertNotNull(node0);
      assertTrue(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("9hz~]FA)");
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
      
      String string0 = NodeUtil.opToStr(116);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114, 964, (-2721));
      Node node1 = new Node(56, node0, node0, 55, 57);
      boolean boolean0 = NodeUtil.isNaN(node1);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals("114", string0);
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isAssignmentOp(node1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("?");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.isValidPropertyName("?");
      node0.addChildToFront(node1);
      NodeUtil.mayHaveSideEffects(node1);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NodeUtil.booleanNode(true);
      NodeUtil.isSimpleOperatorType(31);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2737);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2737
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      NodeUtil.isNullOrUndefined(node0);
      NodeUtil.mayEffectMutableState(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction((Node) null, 1446);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Object object0 = new Object();
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 9);
      boolean boolean0 = NodeUtil.isStatementParent(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 4095, sourceMap_DetailLevel0);
      assertEquals(0, int0);
      
      boolean boolean1 = NodeUtil.isLatin("");
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isNullOrUndefined(node0);
      assertTrue(boolean2 == boolean0);
      
      int int1 = NodeUtil.getInverseOperator(8);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("duplicate child");
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      NodeUtil.isSimpleOperatorType(77);
      NodeUtil.isFunctionObjectApply(node0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("duplicate child");
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString(149, "undefined", 149, 149);
      NodeUtil.isConstantName(node0);
      NodeUtil.booleanNode(false);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("?");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.isVarDeclaration(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: STRING ? of DELPROP 30
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = NodeUtil.booleanNode(true);
      Integer integer0 = new Integer(15);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
      
      NodeUtil.isImmutableValue(node0);
      assertFalse(node0.isFalse());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = NodeUtil.booleanNode(true);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      assertTrue(node0.isTrue());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(98);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(100);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(30, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(8217);
      Node node0 = Node.newNumber((double) 8217);
      NodeUtil.getNumberValue(node0);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
      
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING com.google.javascript.jscomp.Compiler does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NodeUtil.precedenceWithDefault(135);
      Node node0 = Node.newString("");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("");
      NodeUtil.isFunctionObjectCall(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.isSyntheticBlock();
      boolean boolean0 = NodeUtil.isAssociative(38);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean1 = NodeUtil.containsFunction(node1);
      assertTrue(boolean1 == boolean0);
      
      NodeUtil.getSourceFile(node0);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      node1.getJSDocInfo();
      Node node2 = peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
      NodeUtil.getPureBooleanValue(node2);
      assertEquals(122, node2.getType());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber((-2540.3154012789), 168, 168);
      node0.addChildToBack(node0);
      // Undeclared exception!
      NodeUtil.mayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      boolean boolean0 = NodeUtil.isStatementParent(node1);
      String string0 = NodeUtil.opToStr(32);
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.referencesThis(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: struct
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(30, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node1, node1);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      NodeUtil.getInputId(node1);
      assertFalse(node0.isFalse());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getBestLValueOwner(node0);
      assertTrue(node0.isTrue());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isSymmetricOperation(node0);
      assertFalse(boolean0);
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = new Node(2230);
      boolean boolean0 = NodeUtil.isRelationalOperation(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(106);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isImmutableResult(node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      NodeUtil.isFunctionExpression(node0);
      assertFalse(node0.isTrue());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      NodeUtil.isNameReferenced(node0, "com.google.javascript.jscomp.Compiler");
      // Undeclared exception!
      try { 
        NodeUtil.getRValueOfLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("true", string0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$VarCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Node node0 = new Node(11, 11, 11);
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NodeUtil.precedenceWithDefault(100);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isCommutative(3);
      NodeUtil.isCommutative(12);
      Node node0 = new Node(100, 12, 1802);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 110: SWITCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(147);
      Compiler compiler0 = new Compiler();
      Node node0 = NodeUtil.booleanNode(false);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("false", string0);
      
      boolean boolean1 = NodeUtil.isValidSimpleName("false");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(30, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
      assertTrue(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = Node.newString(101, "H3I");
      NodeUtil.isLatin("*r+8VRR`(M +)Q@!iJ");
      Map<Node, Node> map0 = NodeUtil.mapMainToClone(node0, node0);
      ImmutableBiMap<Node, Node> immutableBiMap0 = ImmutableBiMap.copyOf((Map<? extends Node, ? extends Node>) map0);
      ImmutableBiMap.copyOf((Map<? extends Node, ? extends Node>) immutableBiMap0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      int int0 = NodeUtil.precedenceWithDefault(148);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("com.google.javascripa.jscomp.PerformanceTracker$Stats");
      assertEquals("com.google.javascripa.jscomp.PerformanceTracker$Stats", string0);
      
      Node node0 = new Node(122);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.getNodeTypeReferenceCount(node1, 54, sourceMap_DetailLevel0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
      NodeUtil.isStrWhiteSpaceChar(15);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VOID does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString(114, "_fZ+9+%");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = NodeUtil.precedenceWithDefault(39);
      assertEquals(15, int0);
      
      NodeUtil.mayHaveSideEffects(node0);
      Node.newString(51, "_fZ+9+%");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(114, "_fZ+9+%");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDO _fZ+9+%
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
      
      String string0 = NodeUtil.opToStr(10);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isLiteralValue(node0, true);
      assertTrue(node0.isFalse());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(121);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 172;
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      String string0 = "*<.ZC$";
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "*<.ZC$");
      Node node1 = new Node(172, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSimpleOperatorType(54);
      NodeUtil.isImmutableResult(node0);
      assertEquals(43, node0.getType());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(39);
      int int0 = NodeUtil.precedenceWithDefault(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getPureBooleanValue(node0);
      String string0 = NodeUtil.opToStr(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "*U");
      NodeUtil.isReferenceName(node0);
      node0.setIsSyntheticBlock(true);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = NodeUtil.opToStr(120);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("OAT]mpXi'AjRj", 22, 22);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      InputId inputId0 = NodeUtil.getInputId((Node) null);
      assertNull(inputId0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(68);
      Node node1 = new Node(68, node0, node0, 68, 4);
      NodeUtil.isSimpleOperator(node1);
      NodeUtil.arrayToString(node1);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(102);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: INC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(36);
      assertEquals((-1), int0);
      
      int int1 = NodeUtil.precedenceWithDefault(51);
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString("this");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.copyNameAnnotations(node0, node0);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue(" * @constructor\n");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      NodeUtil.precedenceWithDefault(128);
      Node node0 = Node.newNumber((double) (-1));
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      Compiler compiler0 = new Compiler();
      String string0 = node0.toString(true, false, false);
      assertEquals("TRUE", string0);
      
      boolean boolean1 = NodeUtil.isAssociative(49);
      assertFalse(boolean1);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      StatementFusion statementFusion0 = new StatementFusion(true);
      Node node1 = statementFusion0.tryFuseStatementsAggressively(node0);
      boolean boolean2 = NodeUtil.containsFunction(node1);
      assertTrue(boolean2 == boolean0);
      
      node0.getJSDocInfo();
      NodeUtil.isStrWhiteSpaceChar(12);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getPureBooleanValue(node1);
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(107, (-921210296), 16);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 107
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(102);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 102: INC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isAssignmentOp(node1);
      NodeUtil.isEmptyBlock(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.canBeSideEffected(node1);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = NodeUtil.booleanNode(true);
      Integer integer0 = new Integer(15);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(node0.isTrue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(12, 48, 28);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      boolean boolean1 = NodeUtil.isCallOrNew(node0);
      assertEquals(44, node0.getType());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.Compiler");
      assertEquals(2, node0.getChildCount());
      
      int int0 = NodeUtil.precedenceWithDefault(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node.newNumber((-2540.3154012789), 107, 107);
      NodeUtil.isStrWhiteSpaceChar(20);
      String string0 = NodeUtil.opToStr(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.newString("null");
      NodeUtil.isSimpleOperatorType(30);
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("com.google.javascripa.jscomp.PerformanceTracker$Stats");
      assertEquals("com.google.javascripa.jscomp.PerformanceTracker$Stats", string0);
      
      Node node0 = Node.newString(127, "com.google.javascripa.jscomp.PerformanceTracker$Stats", 127, 127);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "com.google.javascripa.jscomp.PerformanceTracker$Stats", node0);
      NodeUtil.getImpureBooleanValue(node1);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      NodeUtil.isLiteralValue(node0, true);
      boolean boolean1 = NodeUtil.canBeSideEffected(node1);
      assertTrue(boolean1 == boolean0);
      
      Compiler compiler0 = new Compiler();
      boolean boolean2 = NodeUtil.isRelationalOperation(node1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString("2VHe@(`R*z_rAw#M");
      Node node1 = new Node(31, node0, node0, 30, 37);
      node0.isQuotedString();
      NodeUtil.getBestLValueName(node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: DELPROP 30
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      node0.getString();
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(101);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      node0.setDirectives((Set<String>) null);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isCommutative(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      NodeUtil.getStringNumberValue("6^2aU(8*wN9L|W@");
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = new Node(11);
      Logger.getLogger("q");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(53);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.newNumber((double) 54);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = new Node(53, node0, node0, 46, 32);
      String string0 = NodeUtil.arrayToString(node1);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isTryCatchNodeContainer(node0);
      boolean boolean3 = NodeUtil.isReferenceName(node1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isEmptyFunctionExpression(node0);
      boolean boolean2 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(43, node0.getType());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      boolean boolean0 = NodeUtil.isValidQualifiedName("com.go8gle.javascript.jscomp.CompTler");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node((-15), (-15), (-15));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.copyNameAnnotations(node0, node0);
      int int0 = NodeUtil.precedenceWithDefault(48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 2, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
      
      node0.addChildToFront(node1);
      node0.isQuotedString();
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
      
      Node node2 = Node.newString(15, "VWE#4d%J,WS&N|B");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = NodeUtil.precedenceWithDefault(155);
      assertEquals(16, int0);
      
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      SyntheticAst syntheticAst0 = new SyntheticAst("joGExDAw2{;gG1\"y");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      String string0 = NodeUtil.getSourceName(node0);
      assertNotNull(string0);
      assertEquals("joGExDAw2{;gG1\"y", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertNotNull(string0);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      NodeUtil.getConditionExpression(node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.javascript.jscomp.Compiler", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, ">5'T(/(9rPAtr#+'", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Compiler");
      // Undeclared exception!
      try { 
        SimpleDefinitionFinder.getNameNodeFromFunctionNode(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getNearestFunctionName(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getNearestFunctionName(node1);
      NodeUtil.mayBeString(node1);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(74);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isLValue(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      boolean boolean0 = NodeUtil.isCallOrNewTarget(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.isObjectLitKey(node0);
      nodeUtil_MatchShallowStatement0.equals(peepholeMinimizeConditions0);
      boolean boolean1 = NodeUtil.isSwitchCase(node0);
      boolean boolean2 = NodeUtil.isAssociative(15);
      assertTrue(boolean2 == boolean0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean3 = NodeUtil.isValidSimpleName("`L6z3:7I9RT)4T7IUTw");
      assertTrue(boolean3 == boolean1);
      
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(1, int0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(122);
      // Undeclared exception!
      try { 
        PeepholeFoldConstants.evaluateComparison(4095, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertTrue(node0.isFalse());
      
      Node node1 = Node.newNumber((double) 43, 38, (-2367));
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
      
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean1 = NodeUtil.isLiteralValue(node1, false);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(36);
      Node node0 = new Node(36);
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = NodeUtil.opToStr(52);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascripa.jscomp.PerformanceTracker$Stats");
      int int0 = NodeUtil.precedenceWithDefault(76);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = null;
      NodeUtil.getBestLValueName((Node) null);
      // Undeclared exception!
      try { 
        SourceMap.DetailLevel.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = new Node(92, node0, node0, 47, 1791);
      NodeUtil.evaluatesToLocalValue(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = Node.newString("com.google.javascript.jscomp.Compiler", 39, 30);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      NodeUtil.isAssociative(47);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node((-2920), (-2920), 773);
      Node node1 = new Node(93, 39, 4095);
      node1.addChildToBack(node0);
      NodeUtil.mayHaveSideEffects(node1);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString(93, "y!3sA*Q5Nc4/hz)gf;", (-526), 98);
      NodeUtil.isObjectLitKey(node0);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(94);
      node0.toStringTree();
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-2030));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2030
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.NodeUtil$VarCollector");
      node0.isSyntheticBlock();
      NodeUtil.getSourceName(node0);
      NodeUtil.precedenceWithDefault(57);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node.newString(153, " of ");
      int int0 = NodeUtil.precedenceWithDefault(49);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node((-15));
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.precedenceWithDefault(43);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(150);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 150
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString(114, "_fZ+9+%");
      PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("_fZ+9+%");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Compiler compiler0 = new Compiler();
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(135);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      NodeUtil.precedenceWithDefault(132);
      Compiler compiler0 = new Compiler();
      compiler0.getRoot();
      NodeUtil.getBestLValueOwner((Node) null);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node.newString("");
      NodeUtil.isSimpleOperatorType(46);
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for CATCH (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      NodeUtil.getConditionExpression(node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getExternsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node.newString("com.google.javascript.jscomp.ChainCalls$CallSite");
      int int0 = NodeUtil.precedenceWithDefault(102);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString("9hz~]FA)");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.booleanNode(true);
      NodeUtil.precedenceWithDefault(44);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      NodeUtil.getStringNumberValue("6^2aU(8*wN9L|W@");
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Object object0 = new Object();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.equals("6^2aU(8*wN9L|W@");
      Integer integer0 = new Integer(11);
      nodeUtil_MatchShallowStatement0.equals(integer0);
      NodeUtil.opToStrNoFail(11);
      NodeUtil.precedenceWithDefault(11);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.parsing.ParserRunner$ParseResult");
      boolean boolean0 = NodeUtil.isStatementBlock(node0);
      assertFalse(boolean0);
      
      node0.addChildToFront(node0);
      Node node1 = NodeUtil.getBestLValueOwner(node0);
      assertNull(node1);
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 9);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.isUndefined(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node.newString("", 33, 16);
      Logger.getLogger("q");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(120);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
      try { 
        linkedFlowScope1.getRootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.LinkedFlowScope", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(101);
      NodeUtil.isSimpleOperatorType(43);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.addChildToFront(node1);
      node0.isQuotedString();
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.getBestLValueOwner((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.allArgsUnescapedLocal((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = NodeUtil.booleanNode(true);
      node0.getQualifiedName();
      Node.newString(15, "!==");
      boolean boolean0 = NodeUtil.isSimpleOperatorType(79);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ConcreteType$5");
      Node node1 = new Node(79, node0, node0, 110, 89);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isUndefined(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      ControlFlowAnalysis.computeFallThrough(node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      boolean boolean2 = NodeUtil.isSymmetricOperation(node0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node.newString("D^f3lbHb");
      String string0 = NodeUtil.opToStr(53);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = NodeUtil.opToStr(113);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(108);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertFalse(node0.isFalse());
      
      int int0 = NodeUtil.precedenceWithDefault(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
      
      Logger.getLogger("q");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isAssociative(11);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      NodeUtil.isAssociative(100);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object object0 = new Object();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Integer integer0 = new Integer(11);
      NodeUtil.opToStr(11);
      NodeUtil.isStrWhiteSpaceChar(11);
      // Undeclared exception!
      try { 
        NodeUtil.isCallOrNewTarget((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(133);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = Node.newString("p|xqH/k4tUMJFU", 1145, 125);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.evaluatesToLocalValue(node0);
      boolean boolean1 = NodeUtil.isObjectCallMethod(node0, "w(&?Ey[B6N*");
      assertFalse(boolean1 == boolean0);
      
      int int0 = NodeUtil.getNameReferenceCount(node0, "p|xqH/k4tUMJFU");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      Node.newString(46, "w!x-}Qke<");
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("0Lqdl");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Double double0 = NodeUtil.getStringNumberValue("0xoo#dscxB(+ho");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = NodeUtil.precedenceWithDefault(59);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node.newString("kK8W$NCh]y9i");
      NodeUtil.precedenceWithDefault(145);
      NodeUtil.isSimpleOperatorType(53);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
      try { 
        linkedFlowScope0.getRootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.LinkedFlowScope", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.Compiler");
      assertTrue(node0.hasMoreThanOneChild());
      
      int int0 = NodeUtil.precedenceWithDefault(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("-infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("-O`]JKK{#tlaA\"2");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node.newString(21, "@G?Kv5 +Y|JM[!HI");
      NodeUtil.isStrWhiteSpaceChar(4095);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString("?");
      Node node1 = new Node(31, node0, node0, 30, 37);
      node0.addChildToFront(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isStatementBlock(node0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      NodeUtil.newUndefinedNode(node0);
      node0.isSyntheticBlock();
      NodeUtil.precedenceWithDefault(40);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node.newNumber((-1338.44), 82, 82);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      String string0 = NodeUtil.opToStr(29);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString(" (CLASS)\n");
      Node node1 = NodeUtil.newExpr(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      Node node2 = NodeUtil.getBestLValue(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = NodeUtil.opToStr(114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(100);
      assertEquals(3, int0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      boolean boolean0 = NodeUtil.isCommutative(3);
      assertFalse(boolean0);
      
      int int1 = NodeUtil.precedence(23);
      assertEquals(12, int1);
      
      int int2 = NodeUtil.precedenceWithDefault(12);
      assertEquals(8, int2);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.precedenceWithDefault(114);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.isSimpleOperator(node1);
      node0.addChildToFront(node1);
      boolean boolean0 = NodeUtil.isExpressionResultUsed(node1);
      boolean boolean1 = NodeUtil.isBleedingFunctionName(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      Node node0 = new Node((-300), (-300), (-300));
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) null);
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "apply");
      NodeUtil.isReferenceName(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(118, 87, 1870);
      node0.addChildToBack(node0);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      Node node0 = new Node(14);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Predicate<Node> predicate0 = NodeUtil.IMMUTABLE_PREDICATE;
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      boolean boolean1 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      NodeUtil.opToStr(90);
      NodeUtil.isStrWhiteSpaceChar(90);
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = NodeUtil.booleanNode(true);
      node0.getQualifiedName();
      Node node1 = Node.newString(15, "!==");
      PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("AE;H7Y{lz'ba^");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      // Undeclared exception!
      try { 
        reorderConstantExpression0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ReorderConstantExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = new Node(89, node0, node0, 47, 1791);
      boolean boolean0 = NodeUtil.isUndefined(node1);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(")kdLissh]UFdU_");
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      NodeUtil.isAssociative(9);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      int int0 = NodeUtil.precedenceWithDefault(110);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node((-4171));
      NodeUtil.getPrototypeClassName(node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      JSType.toMaybeTemplatizedType((JSType) null);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StatementFusion statementFusion0 = new StatementFusion();
      Node node0 = Node.newString("The name %s is not annotated as constant.");
      NodeUtil.isSimpleOperatorType(51);
      NodeUtil.opToStr(95);
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Compiler compiler0 = new Compiler();
      NodeUtil.isStrWhiteSpaceChar(12288);
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.opToStr(89);
      NodeUtil.isStrWhiteSpaceChar(44);
      NodeUtil.precedenceWithDefault(138);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = NodeUtil.opToStr(81);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      NodeUtil.precedenceWithDefault(146);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getCodingConvention();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "EU");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NAME EU [is_constant_name: com.google.javascript.rhino.Node$IntPropListItem@0000000020] does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(111);
      assertFalse(boolean0);
      
      NodeUtil.isCommutative(3396);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 111: CASE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString(126, "[+So2+D\".J?#", 126, (-60));
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.opToStr(50);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString("duplicate child");
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      NodeUtil.isSimpleOperatorType(77);
      NodeUtil.isStatementParent(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      boolean boolean0 = node0.isSyntheticBlock();
      NodeUtil.booleanNode(true);
      NodeUtil.precedenceWithDefault(40);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(42);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.opToStr(48);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      // Undeclared exception!
      try { 
        peepholeFoldWithTypes0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldWithTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node.newString("Expected CALL node, got ");
      String string0 = NodeUtil.opToStr(51);
      assertEquals("in", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node.newString("");
      NodeUtil.isSimpleOperatorType(0);
      String string0 = NodeUtil.opToStr(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString(10, "d");
      Node node1 = new Node(13, node0, node0, 3772, 55);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 10, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(1, int0);
      
      node0.addChildToFront(node1);
      node0.isQuotedString();
      NodeUtil.getBestJSDocInfo(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertFalse(boolean0);
      
      NodeUtil.isCommutative(46);
      // Undeclared exception!
      NodeUtil.isValidDefineValue(node1, (Set<String>) null);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(72, 72, 72);
      int int0 = NodeUtil.precedenceWithDefault(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+=");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean0);
      
      DiagnosticType diagnosticType0 = CheckEventfulObjectDisposal.UNLISTEN_WITH_ANONBOUND;
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
      
      System.setCurrentTimeMillis((-3200L));
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
      
      boolean boolean1 = NodeUtil.isExprAssign(node0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114, 964, (-2721));
      Node node1 = new Node(56, node0, node0, 55, 57);
      node0.addChildToBack(node1);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.allArgsUnescapedLocal(node0);
      Node node2 = NodeUtil.getBestLValueOwner(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString(3773, "c%hdBtvDuKU^h7");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      Node node2 = new Node(38, node0, node0, node0, node1);
      NodeUtil.getRValueOfLValue(node0);
      NodeUtil.getImpureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString(149, "com.go8gle.javascript.jscomp.CompTler", 65535, 149);
      NodeUtil.isObjectLitKey(node0);
      NodeUtil.isSimpleOperatorType(38);
      String string0 = NodeUtil.opToStr(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      NodeUtil.booleanNode(true);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      NodeUtil.isSimpleOperatorType(57);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(149, "this", 149, 149);
      NodeUtil.getStringValue(node0);
      node0.setChangeTime(149);
      int int0 = NodeUtil.precedenceWithDefault(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.ompiler");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.isLValue(node0);
      assertFalse(boolean0);
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      NodeUtil.opToStr(112);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2870));
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node.newString("com.google.javascript.jscomp.Compiler");
      int int0 = NodeUtil.precedenceWithDefault(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+=");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.allResultsMatch(node0, sourceMap_DetailLevel0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Logger.getLogger("fl");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Predicate<Node> predicate0 = NodeUtil.IMMUTABLE_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      NodeUtil.isSimpleOperatorType(47);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean0);
      
      String string0 = NodeUtil.opToStr(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("?");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.isFunctionExpression(node1);
      int int0 = NodeUtil.precedenceWithDefault(56);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Logger.getLogger("undefined");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(12);
      NodeUtil.evaluatesToLocalValue(node0);
      String string0 = NodeUtil.opToStrNoFail(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node.newString("6cQDH?aK.");
      NodeUtil.isSimpleOperatorType(16);
      String string0 = NodeUtil.opToStr((-3007));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.isSyntheticBlock();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.isNullOrUndefined(node1);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node.newNumber(46.0, 0, 116);
      int int0 = NodeUtil.precedenceWithDefault(51);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(149, "this", 149, 149);
      NodeUtil.getStringValue(node0);
      NodeUtil.precedence(38);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      NodeUtil.precedenceWithDefault(134);
      Node node0 = Node.newNumber(3179.9903749716427, 105, (-1));
      node0.children();
      NodeUtil.isRelationalOperation(node0);
      System.setCurrentTimeMillis(8);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      NodeUtil.isSimpleOperatorType(106);
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = NodeUtil.precedenceWithDefault(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ChainCalls$CallSite");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleSlot simpleSlot0 = new SimpleSlot("com.google.javascript.jscomp.ChainCalls$CallSite", (JSType) null, true);
      simpleSlot0.getJSDocInfo();
      Node node1 = NodeUtil.newQualifiedNameNodeDeclaration(googleCodingConvention0, "com.google.javascript.jscomp.ChainCalls$CallSite", node0, (JSDocInfo) null);
      NodeUtil.arrayToString(node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = new Integer(101);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(33);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.evaluatesToLocalValue(node0);
      Node node1 = new Node(29, node0, node0, node0, node0, 4, 48);
      boolean boolean0 = NodeUtil.isCallOrNewTarget(node0);
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      
      // Undeclared exception!
      try { 
        NodeUtil.isExecutedExactlyOnce(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(149, "this", 149, 149);
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.isRelationalOperation(node0);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      boolean boolean0 = NodeUtil.isValidQualifiedName("this");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "this");
      NodeUtil.isSimpleOperatorType(49);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      assertNotNull(nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node.newString(" y w_`yI-Xmku");
      NodeUtil.isSimpleOperatorType(54);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-3936));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3936
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node.newString("com.google.javascript.jscomp.Compiler");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = NodeUtil.precedenceWithDefault(36);
      assertEquals((-1), int0);
      
      int int1 = NodeUtil.precedenceWithDefault(51);
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("duplicate child");
      Node node1 = NodeUtil.newExpr(node0);
      NodeUtil.arrayToString(node0);
      NodeUtil.mayHaveSideEffects(node1);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(14);
      String string0 = NodeUtil.opToStr(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString("this");
      NodeUtil.newUndefinedNode(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.getSourceName(node0);
      NodeUtil.precedenceWithDefault(53);
      Compiler compiler1 = new Compiler();
      assertEquals(0.0, compiler1.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isAssociative(22);
      NodeUtil.opToStr(22);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StatementFusion statementFusion0 = new StatementFusion();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.isStatementParent(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      JSModule jSModule0 = new JSModule("");
      nodeUtil_MayBeStringResultPredicate0.equals(jSModule0);
      NodeUtil.getNodeTypeReferenceCount(node0, 2, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(37);
      Node node0 = Node.newString("t=y.prototype;");
      node0.isSyntheticBlock();
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      
      int int0 = NodeUtil.precedenceWithDefault(50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = 144;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(144);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 144
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      int int0 = NodeUtil.precedenceWithDefault(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("%hF4k");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler1 = new Compiler();
      assertFalse(compiler1.equals((Object)compiler0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      NodeUtil.isSimpleOperatorType(44);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = new Node(89, node0, node0, 47, 1791);
      NodeUtil.isStatementParent(node0);
      NodeUtil.isUndefined(node1);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      NodeUtil.getImpureBooleanValue(node2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString("=ZTO;c2*P^>M*rTb/");
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = new Node(30, 56, 42);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node2);
      Node node3 = new Node(82, node2, node1, node1, node2);
      boolean boolean1 = NodeUtil.isCallOrNew(node3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Node node0 = new Node(11);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(32);
      boolean boolean0 = nodeUtil_MatchNodeType0.apply(node0);
      boolean boolean1 = NodeUtil.mayBeString(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString(114, "T_fZ+9+%");
      PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("T_fZ+9+%");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      NodeUtil.mayBeString(node0);
      Node node2 = NodeUtil.getConditionExpression(node1);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      NodeUtil.opToStr(109);
      NodeUtil.isStrWhiteSpaceChar(109);
      NodeUtil.opToStr(109);
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(11);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isStrWhiteSpaceChar(13);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName(")KA%:$1Ceg[t7f");
      assertFalse(boolean0);
      
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(57, node0, node0, node0, node0, 43, 47);
      NodeUtil.copyNameAnnotations(node0, node1);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertTrue(node0.isFalse());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(21);
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.opToStrNoFail(21);
      assertEquals("+", string1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(17, 104, 115);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = linkedFlowScope1.getRootNode();
      node0.addChildToBack(node1);
      // Undeclared exception!
      NodeUtil.mayHaveSideEffects(node1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ChainCalls$CallSite");
      node0.isSyntheticBlock();
      NodeUtil.getSourceName(node0);
      NodeUtil.precedenceWithDefault(46);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(37);
      Node node0 = Node.newString("t=y.prototype;");
      node0.isSyntheticBlock();
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      
      int int0 = NodeUtil.precedenceWithDefault(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString(" (CLA0)SS)\n");
      NodeUtil.newExpr(node0);
      NodeUtil.isSimpleOperatorType(18);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(68);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString(149, "this", 149, 149);
      node0.setChangeTime(149);
      int int0 = NodeUtil.precedenceWithDefault(52);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      NodeUtil.getStringNumberValue("6^2a(8*wN9L|W@");
      Node node0 = new Node(11);
      node0.setSourceEncodedPosition(11);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      NodeUtil.mayHaveSideEffects(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      ControlFlowAnalysis.computeFollowNode(node0);
      // Undeclared exception!
      try { 
        StatementFusion.fuseExpressionIntoExpression((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.StatementFusion", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(115);
      Double double0 = NodeUtil.getStringNumberValue("uP");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.opToStrNoFail(19);
      assertEquals(">>", string1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      NodeUtil.precedence(19);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.precedenceWithDefault(106);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("jMI9aQl6+");
      assertEquals("jMI9aQl6+", string0);
      
      Node node0 = Node.newString(2190, "jMI9aQl6+", 127, 2190);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "jMI9aQl6+", node0);
      NodeUtil.getImpureBooleanValue(node1);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      NodeUtil.isLiteralValue(node0, true);
      Node node2 = new Node(47, node1, node1, node0, 269, 46);
      boolean boolean1 = NodeUtil.canBeSideEffected(node2);
      assertTrue(boolean1 == boolean0);
      
      Compiler compiler0 = new Compiler();
      boolean boolean2 = NodeUtil.isRelationalOperation(node1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      node0.addChildToFront(node1);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(108);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = NodeUtil.booleanNode(false);
      assertTrue(node0.isFalse());
      
      int int0 = NodeUtil.getInverseOperator(15);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString(26, "@G?Kv5 +Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(4095, 56, 42);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.getCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      NodeUtil.isConstantByConvention(jqueryCodingConvention0, node0, node1);
      String string0 = NodeUtil.getNearestFunctionName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString(2467, "com.google.javascript.jscomp.Compiler", (-1653), 3289);
      Integer integer0 = new Integer(16);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertTrue(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(137);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for TRY (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString("NF&96@S$");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node1.isSyntheticBlock();
      NodeUtil.isSimpleOperatorType(15);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(50);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(149);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for CONST (type 149)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = NodeUtil.opToStr(65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newNumber((-2540.3154012789), 107, 107);
      Node node1 = new Node(107, node0, node0, 107, 4095);
      node0.addChildToBack(node1);
      NodeUtil.mayHaveSideEffects(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      String string0 = NodeUtil.opToStr(73);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      node0.isOnlyModifiesArgumentsCall();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
      boolean boolean1 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isObjectCallMethod(node0, "com.google.javascript.jscomp.Compiler");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString(21, "@G?Kv5 +Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(36, (-6031), 1389);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      int int0 = NodeUtil.precedenceWithDefault(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      StatementFusion statementFusion0 = new StatementFusion();
      Node node0 = new Node(68, 120, 1694);
      node0.isSyntheticBlock();
      NodeUtil.isSimpleOperatorType(35);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      NodeUtil.booleanNode(true);
      int int0 = 102;
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      Node node1 = null;
      try {
        node1 = new Node(102, node0, node0, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      int int0 = NodeUtil.precedenceWithDefault(110);
      assertEquals((-1), int0);
      
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = Node.newString(52, "com.google.javascript.jscomp.Compiler");
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(108);
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(25, 25, 25);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.isVarDeclaration(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      int int0 = NodeUtil.precedenceWithDefault(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString(19, "`0]|fJbMT", 37, 37);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants(true);
      boolean boolean1 = peepholeFoldConstants1.mayHaveSideEffects(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.opToStr(107);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = Node.newString("com.google.javascript.jscomp.Compiler", 32, 97);
      NodeUtil.isStrWhiteSpaceChar(52);
      Node node3 = new Node(7);
      node3.getJSDocInfo();
      NodeUtil.precedenceWithDefault(154);
      // Undeclared exception!
      try { 
        node3.replaceChild(node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(73);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      NodeUtil.isValidQualifiedName(".NaN");
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newString(150, ".NaN", 150, 150);
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getLoopCodeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(36);
      String string0 = NodeUtil.opToStr((-3712));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(45);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      NodeUtil.precedenceWithDefault((-2856));
      Node node0 = new Node((-2856));
      int int0 = NodeUtil.precedenceWithDefault(50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      NodeUtil.precedenceWithDefault(78);
      String string0 = NodeUtil.opToStr((-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString(149, "com.go8gle.javascript.jscomp.CompTler", 65535, 149);
      NodeUtil.isObjectLitKey(node0);
      Node node1 = Node.newString("CT|#qGF0CA47QZ1");
      Node node2 = NodeUtil.newUndefinedNode(node1);
      node2.isSyntheticBlock();
      int int0 = NodeUtil.precedenceWithDefault(121);
      assertEquals((-1), int0);
      
      boolean boolean0 = NodeUtil.isLoopStructure(node2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(74);
      String string0 = NodeUtil.opToStr(74);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = NodeUtil.opToStr(58);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = new Node(99, 87, 1870);
      node0.addChildToBack(node0);
      NodeUtil.mayHaveSideEffects(node0);
      String string0 = NodeUtil.opToStr((-4359));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(47);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprAssign(node1);
      assertFalse(boolean0);
      
      NodeUtil.getNumberValue(node1);
      assertTrue(node0.isFalse());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(96);
      String string0 = NodeUtil.opToStr(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.isSimpleOperatorType(100);
      String string0 = NodeUtil.opToStrNoFail(100);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newNumber((-1470.9327305220759), 85, 98);
      NodeUtil.numberNode(Double.POSITIVE_INFINITY, node0);
      NodeUtil.isSimpleOperatorType((-698));
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(36);
      Node node0 = new Node(36);
      NodeUtil.isBooleanResultHelper(node0);
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for DEFAULT_CASE (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      NodeUtil.booleanNode(false);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Object object0 = new Object();
      NodeUtil.isSimpleOperatorType(102);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 47: REGEXP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
      
      boolean boolean0 = NodeUtil.isCommutative(27);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeUtil.isSimpleOperatorType(118);
      Compiler compiler1 = new Compiler();
      assertFalse(compiler1.equals((Object)compiler0));
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Compiler compiler0 = new Compiler();
      Logger.getLogger(">G,W,");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(118, 87, 1870);
      Node node1 = new Node(104, 37, 29);
      node1.addChildToBack(node0);
      NodeUtil.mayHaveSideEffects(node1);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(87);
      Node node0 = new Node(102);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      boolean boolean1 = NodeUtil.isNullOrUndefined(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      NodeUtil.getConditionExpression(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.opToStrNoFail(13);
      assertEquals("!=", string1);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      NodeUtil.precedenceWithDefault(78);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.isSimpleOperatorType(78);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(78);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 78
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+=");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean1 = nodeUtil_MatchDeclaration0.apply(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = NodeUtil.opToStr(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(140);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 140
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node.newString("false");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertEquals(2, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(8232);
      Node node0 = new Node(42);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Compiler compiler0 = new Compiler();
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      TernaryValue ternaryValue1 = NodeUtil.getImpureBooleanValue(node0);
      assertFalse(ternaryValue1.equals((Object)ternaryValue0));
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = new Node(37, 37, 640);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(8232);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = NodeUtil.opToStr(91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node.newString("com.google.javascript.jscomp.Compiler");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(53);
      Node.newString(52, "com.google.javascript.jscomp.Compiler");
      int int0 = NodeUtil.getInverseOperator(16);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newNumber((-2540.3154012789), 107, 107);
      Node node1 = new Node(57, node0);
      node0.addChildToBack(node1);
      NodeUtil.mayHaveSideEffects(node1);
      Double double0 = NodeUtil.getStringNumberValue("0Lqdl");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Logger.getLogger("JSCompiler_prototypeAlias");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean1 = NodeUtil.isSimpleOperatorType(103);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node.newString("D^f3lbHb");
      int int0 = NodeUtil.precedenceWithDefault(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(93);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(93);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString("duplicate child");
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      NodeUtil.isSimpleOperatorType(77);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(119);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      NodeUtil.precedence(13);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(99);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 99
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(118);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = new Node((-15));
      int int0 = NodeUtil.precedenceWithDefault(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node.newString(62, "l");
      NodeUtil.isSimpleOperatorType(38);
      String string0 = NodeUtil.opToStr(132);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      String string0 = NodeUtil.opToStr(71);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 9);
      NodeUtil.isStatementParent(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = new Node(4095, 29, 42);
      NodeUtil.evaluatesToLocalValue(node1);
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node.newString("com.google.javascript.jscomp.ChainCalls$CallSite");
      int int0 = NodeUtil.precedenceWithDefault(143);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Integer integer0 = new Integer(123);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = Node.newString((int) integer0, "/!i,");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Object object0 = new Object();
      String string0 = NodeUtil.opToStrNoFail(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("-m6:]/h5 ", (-1135), (-1135));
      Node.newString(51, "-m6:]/h5 ");
      NodeUtil.precedenceWithDefault(93);
      // Undeclared exception!
      try { 
        NodeUtil.isExecutedExactlyOnce(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newString("qg^DS-");
      node0.isSyntheticBlock();
      int int0 = new Integer(48);
      NodeUtil.isStrWhiteSpaceChar(139);
      NodeUtil.opToStr(35);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for WHILE (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.getProp(47);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newString(149, "this", 149, 149);
      NodeUtil.getStringValue(node0);
      node0.setChangeTime(149);
      NodeUtil.isRelationalOperation(node0);
      Node node1 = NodeUtil.newVarNode("this", node0);
      assertEquals(118, node1.getType());
      assertEquals(149, node1.getLineno());
      
      NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = NodeUtil.opToStr(62);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString("NF&96@S$");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node1.isSyntheticBlock();
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = NodeUtil.precedenceWithDefault(20);
      assertEquals(10, int0);
      
      NodeUtil.mayHaveSideEffects(node0);
      Node node2 = Node.newString(50, "NF&96@S$");
      Node node3 = StatementFusion.fuseExpressionIntoExpression(node1, node2);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newString(")");
      Node node1 = NodeUtil.newExpr(node0);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
      
      NodeUtil.mayHaveSideEffects(node1);
      String string1 = NodeUtil.opToStr(18);
      assertEquals("<<", string1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = Node.newString("p|xqH/k4tUMJFU", 95, 95);
      PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(")kUdLissh]UFdU_");
      Node node1 = new Node(9, node0, node0, node0, node0);
      node1.mayMutateArguments();
      peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar((-2270));
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      NodeUtil.isSimpleOperatorType(90);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeSyntheticCode(compiler0, "7", ".)KA%:$1Ceg[t7f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Object object0 = new Object();
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      
      int int0 = NodeUtil.precedenceWithDefault(43);
      assertEquals(15, int0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Integer integer0 = new Integer(108);
      Node node1 = NodeUtil.newName(jqueryCodingConvention0, "undefined", node0);
      String string1 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = NodeUtil.referencesThis(node1);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(85);
      NodeUtil.precedenceWithDefault(111);
      Node node0 = new Node(0, 85, 0);
      boolean boolean1 = NodeUtil.isObjectLitKey(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      Node node0 = Node.newString(103, ".&tR");
      NodeUtil.mayBeString(node0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newString(126, "com.google.javascripa.jscomp.PerformanceTracker$Stats", 126, 126);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean1 = NodeUtil.isCallOrNewTarget(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      boolean boolean2 = NodeUtil.isStatementParent(node1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString("PA6l");
      Predicate<Node> predicate0 = NodeUtil.IMMUTABLE_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      PeepholeFoldConstants.evaluateComparison(48, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      NodeUtil.precedenceWithDefault(96);
      String string0 = NodeUtil.opToStr(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(151);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
      
      NodeUtil.opToStr(27);
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Integer integer0 = new Integer(116);
      NodeUtil.isSimpleOperatorType(116);
      Node node0 = Node.newString(113, "'=");
      int int0 = NodeUtil.getInverseOperator(2530);
      assertEquals((-1), int0);
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString(22, "OAT]mpXi'AjRj");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node.newNumber((double) 1, 136, 307);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = new Node(29, 43, 51);
      NodeUtil.getImpureBooleanValue(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      Node node2 = NodeUtil.newName(closureCodingConvention1, "com.google.javascript.jscomp.Compiler", node0);
      Predicate<Node> predicate0 = NodeUtil.IMMUTABLE_PREDICATE;
      node2.getInputId();
      NodeUtil.evaluatesToLocalValue(node2, predicate0);
      String string0 = NodeUtil.opToStr(2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newNumber((double) 307, 307, 1121);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = new Node(50, node0, node0, node0, 8232, (-2352));
      NodeUtil.getImpureBooleanValue(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      NodeUtil.newName(closureCodingConvention1, "this", node0);
      closureCodingConvention1.getAssertionFunctions();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      node1.addSuppression("this");
      NodeUtil.mayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      compiler0.getRoot();
      NodeUtil.isSimpleOperatorType(57);
      Node node0 = new Node(49);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isBooleanResultHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      NodeUtil.opToStrNoFail(92);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newString(")^P5,@OkQlXL3*hdsrg");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newNumber(4.9E-324);
      Compiler compiler0 = new Compiler();
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      Set<String> set0 = gatherRawExports0.getExportedVariableNames();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node0, true);
      assertEquals(44, node0.getType());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node.newString(",r[");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(127);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      assertNotNull(linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      NodeUtil.isCommutative(85);
      String string0 = NodeUtil.opToStr(85);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node.newString("b");
      NodeUtil.isSimpleOperatorType(56);
      String string0 = NodeUtil.opToStr((-2352));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = Node.newString("this");
      NodeUtil.isControlStructure(node0);
      NodeUtil.getSourceName(node0);
      NodeUtil.precedenceWithDefault(147);
      NodeUtil.isNullOrUndefined(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      StatementFusion statementFusion0 = new StatementFusion();
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      PeepholeFoldConstants.evaluateComparison(42, node0, node0);
      NodeUtil.evaluatesToLocalValue(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
      assertEquals(44, node0.getType());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newString("_i");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean0);
      
      NodeUtil.isUndefined(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(55);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      NodeUtil.precedenceWithDefault(152);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = new NodeUtil.MayBeStringResultPredicate();
      Node.newString("$\"?OD<um]-f!M.x1Vl", (-949), (-949));
      NodeUtil.isStrWhiteSpaceChar(54);
      int int0 = NodeUtil.precedenceWithDefault(84);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(142);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = NodeUtil.precedenceWithDefault(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(152);
      int int0 = NodeUtil.precedenceWithDefault(152);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node.newString(153, " of ");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(12, 52, 50);
      node0.removeChildren();
      node0.children();
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(51, node0, node0, 1084, 30);
      node0.addChildToBack(node1);
      // Undeclared exception!
      NodeUtil.mayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isAssignmentOp(node1);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      
      node0.addChildrenToFront(node1);
      boolean boolean1 = NodeUtil.isWithinLoop(node1);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean2 = NodeUtil.isCallOrNew(node1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = NodeUtil.opToStr(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = Node.newString((-1909054220), "?", (-1909054220), (-1909054220));
      Node node1 = Node.newString(29, "_.", (-1533), 15);
      NodeUtil.isObjectLitKey(node1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.isBooleanResultHelper(node0);
      int int0 = NodeUtil.precedenceWithDefault(36);
      assertEquals((-1), int0);
      
      Node.newString(57, "false");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(96);
      assertEquals(1, int0);
      
      int int1 = NodeUtil.precedenceWithDefault(107);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Integer integer0 = new Integer(129);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = NodeUtil.precedenceWithDefault(129);
      assertEquals((-1), int0);
      
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      Node node1 = NodeUtil.newVarNode("in", (Node) null);
      assertNotNull(node1);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newString(23, "Date", 132, (-1577));
      Node node1 = node0.cloneTree();
      node1.setChangeTime(56);
      node1.getSideEffectFlags();
      NodeUtil.isGet(node0);
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: MUL Date [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(141);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = Node.newString("call", (-949), (-949));
      node0.setSourceFileForTesting("call");
      NodeUtil.isStrWhiteSpaceChar(54);
      int int0 = NodeUtil.precedenceWithDefault(84);
      assertEquals((-1), int0);
      
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString("_i");
      Node node1 = new Node(137, node0, node0, 110, 76);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      NodeUtil.isUndefined(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = new Node(53, node1, node1, 38, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      boolean boolean1 = peepholeFoldConstants0.nodeTypeMayHaveSideEffects(node0);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals("_i", string0);
      assertNotNull(string0);
      
      NodeUtil.mayHaveSideEffects(node2);
      boolean boolean2 = NodeUtil.isTryCatchNodeContainer(node1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = NodeUtil.isReferenceName(node2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeUtil.isSimpleOperatorType(70);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(70);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 70
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(67);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 67
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newString(26, "@G?Kv5 +Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(4095, 56, 42);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, 79, 77);
      Node node1 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, node0);
      node1.clonePropsFrom(node0);
      node0.isEquivalentTo(node1);
      assertEquals(29, node1.getType());
      
      boolean boolean0 = NodeUtil.allArgsUnescapedLocal(node1);
      assertTrue(boolean0);
      assertEquals(79, node1.getLineno());
      
      boolean boolean1 = NodeUtil.isNullOrUndefined(node0);
      boolean boolean2 = NodeUtil.isAssociative(2111);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = new Node(38, 38, 38);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = Node.newString(126, "com.google.javascripa.jscomp.PerformanceTracker$Stats", 126, 126);
      NodeUtil.isWithinLoop(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.precedenceWithDefault(31);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.isStrWhiteSpaceChar(63);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(131);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newString("Internal Error: Don't know how to handle {0}");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      int int0 = NodeUtil.precedenceWithDefault(110);
      assertEquals((-1), int0);
      
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = Node.newString(37, "Internal Error: Don't know how to handle {0}");
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = NodeUtil.opToStr(83);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for BREAK (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node.newString(40, "com.google.javascript.jscomp.Compiler", 49, 13);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "com.google.javascript.jscomp.Compiler", node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.isCommutative(0);
      node1.removeFirstChild();
      // Undeclared exception!
      try { 
        NodeUtil.isBleedingFunctionName(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?@QH}d{Acn[fuacQ");
      Node node1 = new Node(4143, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = Node.newNumber((-1468.4315), 85, 98);
      Node node1 = NodeUtil.numberNode(Double.POSITIVE_INFINITY, node0);
      Node node2 = new Node(57, node1, node0, node0, (-862048943), 42);
      NodeUtil.getImpureBooleanValue(node2);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(48);
      assertEquals((-1), int0);
      
      Compiler compiler0 = new Compiler();
      NodeUtil.redeclareVarsInsideBranch(node2);
      assertEquals(38, node1.getType());
      assertEquals(98, node1.getCharno());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(80);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newString(62, "l");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 62
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(60);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = new Node(101);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      NodeUtil.precedenceWithDefault(95);
      Node node0 = new Node(95);
      LightweightMessageFormatter.withoutSource();
      NodeUtil.precedenceWithDefault(5760);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(95);
      assertEquals(1, int0);
      
      Node node0 = new Node(95);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertTrue(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(52);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      NodeUtil.precedenceWithDefault(99);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node0 = new Node(74);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isAssignmentOp(node0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(122, "^", 87, 3462);
      NodeUtil.getStringValue(node0);
      Node node1 = Node.newString(" of ", 64, 57);
      NodeUtil.isStrWhiteSpaceChar(43);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: STRING  of  64
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      NodeUtil.opToStr(66);
      // Undeclared exception!
      try { 
        NodeUtil.getStringValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 74
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(111);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = new Node(57, node0, node0, node0, node0);
      jqueryCodingConvention0.isOptionalParameter(node1);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      boolean boolean1 = NodeUtil.isLValue(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      NodeUtil.precedence(18);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("com.google.javascripa.jscomp.PerformanceTracker$Stats");
      Node node0 = new Node(131, 141, 122);
      Node node1 = new Node(39, 84, 39);
      node0.addChildToBack(node1);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = Node.newString(27, "@G?K5 +Y|J[!HI");
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.isCommutative(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.isSimpleOperatorType(23);
      HashSet<String> hashSet0 = new LinkedHashSet<String>(23);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      NodeUtil.booleanNode(false);
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(117);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newNumber((-2540.3154012789), 168, 168);
      Node node1 = new Node(49, 0, 47);
      node0.addChildToBack(node1);
      NodeUtil.mayHaveSideEffects(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node.newString(21, "@G?Kv5 +Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = Node.newString(101, "H3I");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(127, 127, (-2287));
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 127
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(95);
      NodeUtil.isSimpleOperatorType((-3985));
      String string0 = " ex[Y'r\\QO{/s";
      File file0 = MockFile.createTempFile("Ur$D", " ex[Y'rQO{/s");
      MockFile mockFile0 = new MockFile(file0, "lV 7LFQ+Cr@k?");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("+infinity");
      Double double0 = NodeUtil.getStringNumberValue("+infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = Node.newString(149, "com.go8gle.javascript.jscomp.CompTler", 65535, 149);
      NodeUtil.isObjectLitKey(node0);
      NodeUtil.mayBeStringHelper(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isLiteralValue(node0, false);
      Node node1 = Node.newString(16, "com.go8gle.javascript.jscomp.CompTler");
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCONST com.go8gle.javascript.jscomp.CompTler 65535
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = new Node(101);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      NodeUtil.booleanNode(true);
      boolean boolean0 = peepholeFoldConstants0.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ChainCalls$CallSite");
      Node node1 = new Node(101, node0, node0, 65279, 36);
      node1.useSourceInfoFromForTree(node0);
      NodeUtil.isHoistedFunctionDeclaration(node1);
      NodeUtil.isUndefined(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(36);
      NodeUtil.precedenceWithDefault(105);
      Compiler compiler0 = new Compiler();
      String string0 = NodeUtil.getNearestFunctionName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(14);
      Node node0 = new Node(14);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newString((-1909054219), "", (-1909054219), (-1909054219));
      Node node1 = Node.newString(29, "_.", 53, 15);
      NodeUtil.isUndefined(node0);
      Node node2 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.isExprAssign(node2);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Integer integer0 = new Integer(2820);
      NodeUtil.opToStr(109);
      Node node0 = new Node(96);
      Compiler compiler0 = new Compiler();
      node0.getDirectives();
      boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(45);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(45);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = NodeUtil.precedenceWithDefault(65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = Node.newString(64, "ugo<^};t[I1c9");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:OBJECTLIT ugo<^};t[I1c9
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = Node.newString(46, "[+So2+D\".J?#", (-60), 46);
      NodeUtil.getImpureBooleanValue(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.getNearestFunctionName(node0);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(74);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(91);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.getInverseOperator(148);
      NodeUtil.isStrWhiteSpaceChar(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("required \"{0}\" namespace neverprovided", "required \"{0}\" namespace neverprovided", 89, 148);
      NodeUtil.isSimpleOperatorType(88);
      String string0 = NodeUtil.opToStr(148);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(87);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(62);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node.newString(" y w_`yI-Xmku");
      NodeUtil.isSimpleOperatorType(82);
      String string0 = NodeUtil.opToStr(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(38, (-1985), 38);
      NodeUtil.isSimpleOperatorType(69);
      Node node1 = new Node(8);
      node1.getJSDocInfo();
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.isLoopStructure(node1);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newString(42, "null");
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newString(153, "  ");
      NodeUtil.getStringValue(node0);
      NodeUtil.newVarNode("  ", node0);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = NodeUtil.opToStr(75);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(126);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newNumber((-2540.3154012789), 168, 168);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("goog.isFunction");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Compiler compiler0 = new Compiler();
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      hashMap0.put(node0, node0);
      NodeUtil.verifyScopeChanges(hashMap0, node0, false, compiler0);
      assertFalse(node0.isNull());
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(63);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 63: ARRAYLIT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.copyInformationFromForTree(node1);
      int int0 = NodeUtil.precedenceWithDefault(41);
      assertEquals(15, int0);
      
      Compiler compiler0 = new Compiler();
      NodeUtil.isSymmetricOperation(node1);
      assertTrue(node0.isFalse());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(117);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      int int0 = NodeUtil.precedenceWithDefault(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.Compiler");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(75);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = NodeUtil.newUndefinedNode(node0);
      jqueryCodingConvention0.isOptionalParameter(node1);
      NodeUtil.mayBeString(node1);
      node0.getInputId();
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node0 = Node.newString(29, "W");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newString(18, "w!x-}Qke<");
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newString(128, "com.google.javascripa.jscomp.PerformanceTracker$Stats", 128, 128);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      int int0 = NodeUtil.precedenceWithDefault(31);
      assertEquals(13, int0);
      
      NodeUtil.mayHaveSideEffects(node0);
      int int1 = NodeUtil.precedenceWithDefault(55);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = new Node(144, 144, 144);
      node0.addChildToBack(node0);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.precedence(29);
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = Node.newString(21, "@G?Kv5 +Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = Node.newString(101, "yH3I");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean1 = NodeUtil.isGetOrSetKey(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = Node.newString(76, "com.google.javascripa.jscomp.PerformanceTracker$Stats", (-2079), 76);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = Node.newString(55, "search");
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 76
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      NodeUtil.precedenceWithDefault(153);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isCommutative(1440);
      NodeUtil.isCommutative(112);
      Node node0 = new Node((-26), 75, 90);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -26
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = new Node(78, 111, 130);
      Node node1 = new Node(48, node0, node0, 111, 30);
      node1.children();
      NodeUtil.isUndefined(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.mayHaveSideEffects(node1);
      node0.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        NodeUtil.allArgsUnescapedLocal(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.getSideEffectFlags();
      NodeUtil.isGet(node0);
      NodeUtil.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = "6/,";
      Node node0 = Node.newString(97, "6/,", 117, 117);
      NodeUtil.booleanNode(false);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for PARAM_LIST (type 83)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
      
      int int1 = NodeUtil.precedenceWithDefault(1485);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(115);
      node0.isLocalResultCall();
      NodeUtil.isObjectCallMethod(node0, "THIS");
      NodeUtil.isControlStructure(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node.newString(39, "t5PrlD");
      // Undeclared exception!
      try { 
        PeepholeSubstituteAlternateSyntax.containsUnicodeEscape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node.newString(29, "_fZ+9x%", 114, (-2319));
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean1 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypes);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(558);
      NodeUtil.precedence(86);
      NodeUtil.opToStr((-431));
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = new Node(45);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.getBestLValueOwner(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        nodeUtil_MatchDeclaration0.apply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = Node.newNumber((-2540.3154012789), 112, 112);
      Node node1 = new Node(112, node0, node0, 112, 4095);
      node0.addChildToBack(node1);
      NodeUtil.mayHaveSideEffects(node1);
      int int0 = NodeUtil.getInverseOperator(122);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(84);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 84
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newString(153, " of ");
      node0.getInputId();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getBestJSDocInfo(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodePARAM_LIST
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(boolean0);
      
      NodeUtil.isLiteralValue(node0, true);
      assertEquals(43, node0.getType());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newString((-15), "/qP8aN", (-15), 117);
      Node node1 = Node.newString(119, "EXTENDS", 128, 4095);
      node1.putIntProp(4095, 57);
      node1.isLocalResultCall();
      NodeUtil.isObjectCallMethod(node0, "EXTENDS");
      NodeUtil.isControlStructure(node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setInlineLocalFunctions(false);
      Set<String> set0 = compilerOptions0.stripNamePrefixes;
      NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
      System.setCurrentTimeMillis(30);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newString(21, "@G?Kv5 +Y|JM[!HI");
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(74);
      Node node0 = NodeUtil.booleanNode(true);
      assertEquals(44, node0.getType());
      
      Node.newString("Property tarle overflow");
      int int0 = NodeUtil.precedenceWithDefault(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = new Node((-15));
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node1 = Node.newString(30, "com.google.javascript.jscomp.ConcreteType$5");
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      NodeUtil.isFunctionExpression(node0);
      Node node1 = new Node(2, node0, node0, node0, 34, 54);
      node0.addChildToFront(node1);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.isStrWhiteSpaceChar(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(108);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = new Node(88, node1, node1, node1, 4, 37);
      boolean boolean0 = peepholeFoldConstants0.mayHaveSideEffects(node2);
      assertTrue(boolean0);
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(88, "I1?S");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected("com.google.javascript.jscomp.CodePrinter$MappedCodePrinter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = new Node(72, 72, 72);
      NodeUtil.booleanNode(false);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      boolean boolean0 = peepholeFoldConstants0.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.precedenceWithDefault(97);
      String string0 = NodeUtil.opToStr(38);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("com.google.javascripa.jscomp.PerformanceTracker$Stats");
      Node node0 = Node.newString(11, "com.google.javascripa.jscomp.PerformanceTracker$Stats", 155, 11);
      Node.newNumber((double) 8);
      NodeUtil.isObjectLitKey(node0);
      NodeUtil.isSimpleOperatorType(110);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-233));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -233
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.opToStrNoFail(20);
      Node node0 = Node.newString(20, "NO#  KfvHH+NW", 20, 20);
      Node node1 = new Node(20, node0, node0, 43, (-567));
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      NodeUtil.precedenceWithDefault(115);
      int int0 = NodeUtil.precedenceWithDefault(115);
      assertEquals((-1), int0);
      
      Node.newString(65279, ":/,", 137, 137);
      Node node0 = NodeUtil.booleanNode(false);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      NodeUtil.isExprAssign(node0);
      assertEquals(43, node0.getType());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = new Node(65535);
      NodeUtil.mayBeString(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention1, "collapseAnonymousFunctions", node0);
      Node node2 = new Node(42, node1, node0, node0, node1);
      Node node3 = NodeUtil.getRootOfQualifiedName(node2);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      String string0 = NodeUtil.opToStr(64);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(21);
      NodeUtil.isSimpleOperatorType(41);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 64: OBJECTLIT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(74, 74, 74);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newString(155, "undefined", 155, 155);
      NodeUtil.isObjectLitKey(node0);
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      LoggerErrorManager loggerErrorManager1 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager1);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("undefined");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: desc
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Integer integer0 = new Integer(148);
      Node node0 = new Node(148, 148, (-1677));
      NodeUtil.precedenceWithDefault((-1605));
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = Node.newString(46, "~s'qMKct?F");
      NodeUtil.isBooleanResultHelper(node1);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = Node.newString(46, "[+So2+D\".J?#", 126, (-60));
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.mayBeString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(26);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = new Node(15, 116, 21);
      Node node1 = new Node(63, node0, node0, node0);
      NodeUtil.isUndefined(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(36);
      NodeUtil.getImpureBooleanValue(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Node node0 = new Node(104);
      Compiler compiler0 = new Compiler();
      node0.setSourceEncodedPosition(104);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isValidQualifiedName("|VpwjOmGsn#}[P%Le-V.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(15, 116, (-515));
      Node node1 = Node.newString("", 63, 2);
      Node node2 = new Node(14, node0, node1, node0);
      node0.srcrefTree(node2);
      Node node3 = NodeUtil.newExpr(node2);
      NodeUtil.arrayToString(node3);
      NodeUtil.isLiteralValue(node3, false);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "|&L");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = new Node(47, node0, node0, node0, node0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      jqueryCodingConvention1.isOptionalParameter(node1);
      NodeUtil.mayBeString(node1);
      NodeUtil.isLValue(node0);
      Node node2 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention1, "|&L");
      assertFalse(node2.isDebugger());
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node((-15));
      node0.removeProp((-15));
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(13, "3,V");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6`<>H");
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, (AbstractCompiler) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got NE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("com.google.javascripa.jscomp.PerformanceTracker$Stats");
      assertEquals("com.google.javascripa.jscomp.PerformanceTracker$Stats", string0);
      
      Node node0 = Node.newString(48, "com.google.javascripa.jscomp.PerformanceTracker$Stats", 116, 48);
      NodeUtil.isObjectLitKey(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.isBooleanResultHelper(node0);
      int int0 = NodeUtil.precedenceWithDefault(56);
      assertEquals((-1), int0);
      
      Node node1 = Node.newString(1567, "");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Node node0 = new Node(19);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSourceEncodedPositionForTree((-1015));
      Node node1 = new Node(46, node0, node0, node0, node0, 57, 3467);
      node0.isEquivalentTo(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node2 = Node.newString("com.google.common.collect.EmptyImmutableSortedMap", (-23), (-2210));
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
      
      NodeUtil.isSymmetricOperation(node0);
      boolean boolean1 = NodeUtil.isAssignmentOp(node2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(86);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newString("_i");
      Node node1 = new Node(108, node0, node0, 110, 37);
      NodeUtil.getStringNumberValue("could not determine the type of this expression");
      // Undeclared exception!
      try { 
        NodeUtil.isExecutedExactlyOnce(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114, 964, (-2721));
      Node node1 = new Node(56, node0, node0, 55, 57);
      node0.addChildToBack(node1);
      NodeUtil.mayHaveSideEffects(node1);
      int int0 = NodeUtil.getInverseOperator(54);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = Node.newString("_i");
      Node node1 = new Node(137, node0, node0, 110, 76);
      NodeUtil.isStatementParent(node0);
      NodeUtil.isUndefined(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = new Node(53, node1, node1, 38, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.nodeTypeMayHaveSideEffects(node0);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      NodeUtil.arrayToString(node1);
      NodeUtil.mayHaveSideEffects(node2);
      NodeUtil.isTryCatchNodeContainer(node1);
      String string0 = NodeUtil.opToStr(72);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      StatementFusion statementFusion0 = new StatementFusion();
      Node node0 = new Node(68, 120, 1694);
      Node node1 = new Node(8232, 20, 49);
      node1.getLength();
      node0.addChildToFront(node1);
      node0.removeChild(node1);
      node0.addChildToBack(node1);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = new Node(120, 11, 92);
      Node node1 = new Node(40, 137, 4455);
      node1.getLength();
      node1.addChildToFront(node0);
      node1.removeChild(node0);
      node1.addChildToBack(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node.newNumber((double) 101, 2105, 114);
      Node node0 = Node.newString(42, "s^:F_DL");
      NodeUtil.mayHaveSideEffects(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = Node.newString(146, "Object#Key", 161, 161);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0);
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.precedenceWithDefault(66);
      NodeUtil.precedenceWithDefault(1675);
      NodeUtil.isStrWhiteSpaceChar((-1));
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = new Node(84, 84, 84);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.booleanNode(true);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      boolean boolean0 = peepholeFoldConstants0.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(112, 38, 112);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      node0.addChildToFront(node1);
      node1.isQuotedString();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = Node.newString(126, "com.google.javascripa.jscomp.PerformanceTracker$Stats", 126, 126);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(jqueryCodingConvention0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(codingConventions_Proxy0);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "|VpwjOmGsn#}[P%Le-V", node0);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 16, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
      
      node0.addChildToFront(node1);
      node1.isQuotedString();
      NodeUtil.getBestJSDocInfo(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(117);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4095);
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("computeFunctionNames");
      syntheticAst0.getAstRoot(compiler0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "+nnu#eep2", node0, "computeFunctionNames");
      Compiler compiler1 = new Compiler();
      NodeUtil.isPrototypeProperty(node1);
      String string0 = NodeUtil.opToStr(4095);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("5laUM4nw");
      Node.newString(2190, "U", 2190, (-24));
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.precedence(124);
      String string0 = NodeUtil.opToStr(4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = Node.newString(2033, "+=", 2033, 2033);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "+=", node0);
      NodeUtil.getImpureBooleanValue(node1);
      Object object0 = new Object();
      boolean boolean0 = NodeUtil.isNaN(node1);
      assertFalse(boolean0);
      
      NodeUtil.arrayToString(node0);
      boolean boolean1 = NodeUtil.isAssignmentOp(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("jMI9aQl6+");
      Node node0 = Node.newString(2190, "jMI9aQl6+", 127, 2190);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newName(closureCodingConvention0, "jMI9aQl6+", node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.isCallOrNew(node0);
      DiagnosticType diagnosticType0 = CheckEventfulObjectDisposal.UNLISTEN_WITH_ANONBOUND;
      String string0 = NodeUtil.opToStr(82);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = "@G?K5 +Y|J[!HI";
      Node node0 = Node.newString(27, "@G?K5 +Y|J[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node1 = new Node(113, node0, 36, 48);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      NodeUtil.isLiteralValue(node0, true);
      Node node2 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String string0 = NodeUtil.opToStr(80);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      NodeUtil.isAssociative(21);
      NodeUtil.precedenceWithDefault(67);
      Node node0 = new Node((-1));
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Object object0 = new Object();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isAssociative(22);
      NodeUtil.opToStr(22);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(22, 80, 80);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NodeUtil.evaluatesToLocalValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeUtil.isSimpleOperatorType(70);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(60);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 60
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = new Node(86, 111, 130);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(21);
      int int0 = NodeUtil.precedenceWithDefault(125);
      assertEquals((-1), int0);
      
      Node node0 = Node.newString("x[#={ir$IBe>ttY");
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = Node.newString(Integer.MAX_VALUE, "com.google.javascripa.jscomp.PerformanceTracker$Stats");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = new Node(21, 104, 21);
      Node node1 = new Node(63, node0, node0, node0);
      NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.getLoopCodeBlock(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("could not determine the type of this expression");
      assertEquals("could not determine the type of this expression", string0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention1);
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.Compiler");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.stripTypes;
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toLowerCase");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString(100, "", 100, 2402);
      NodeUtil.getStringValue(node0);
      node0.setChangeTime(16);
      NodeUtil.newVarNode(";Z9X[R745!zP", node0);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Node node0 = new Node(98);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("com.google.javascripa.jscomp.PerformancTracker$Sats");
      assertEquals("com.google.javascripa.jscomp.PerformancTracker$Sats", string0);
      
      Node node0 = new Node(122);
      String string1 = NodeUtil.opToStr(17);
      assertEquals(">=", string1);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      NodeUtil.precedenceWithDefault(89);
      int int0 = new Integer(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(89, ":/,", (-1173), 1);
      NodeUtil.evaluatesToLocalValue(node0);
      String string0 = NodeUtil.getNearestFunctionName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      NodeUtil.precedenceWithDefault(89);
      Integer integer0 = new Integer(1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = Node.newNumber((double) 101, 2105, 114);
      Node node1 = new Node(72, node0, node0, 29, 4);
      node0.addChildToBack(node1);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 77: TRY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = Node.newString(64, "ugo<^};t[I1c9");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      boolean boolean0 = peepholeFoldConstants0.mayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = Node.newString(155, "");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      node0.getDirectives();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      int int0 = 91;
      Node node0 = Node.newString(91, "#-zx", 91, 91);
      NodeUtil.getImpureBooleanValue(node0);
      Integer integer0 = new Integer(35);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node.newString(26, "8@>n)k");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(111, 30, 4095);
      node0.toStringTree();
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      NodeUtil.isAssociative(22);
      NodeUtil.opToStr(22);
      NodeUtil.precedenceWithDefault(22);
      ImmutableSortedMap.of();
      Compiler compiler0 = null;
      try {
        compiler0 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(69);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 69
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = Node.newString("this");
      Node node1 = new Node(2310, node0, node0, 16, 30);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      NodeUtil.isUndefined(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = new Node(154, node1, 57, 39);
      Node node3 = new Node(37, node2, node2, 112, 108);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      boolean boolean1 = peepholeFoldConstants0.nodeTypeMayHaveSideEffects(node2);
      boolean boolean2 = peepholeFoldConstants0.mayHaveSideEffects(node3);
      assertFalse(boolean2 == boolean0);
      
      String string0 = NodeUtil.arrayToString(node1);
      assertNotNull(string0);
      assertEquals("this", string0);
      
      NodeUtil.mayHaveSideEffects(node1);
      boolean boolean3 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(79);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node node0 = new Node(118, 87, 1870);
      String string0 = NodeUtil.opToStr(45);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Object object0 = new Object();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isAssociative((-1955));
      Node node0 = new Node(104);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = Node.newString(25, "%@l~N5|X", 120, 62);
      NodeUtil.isControlStructure(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node1 = new Node(52, 45, 42);
      node1.srcref(node0);
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      node0.addChildrenAfter(node1, (Node) null);
      compilerOptions0.setInlineLocalFunctions(true);
      Set<String> set0 = compilerOptions0.cssRenamingWhitelist;
      NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypes);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: MOD %@l~N5|X 120
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = Node.newString(149, "this", 149, 149);
      NodeUtil.getStringValue(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Compiler compiler0 = new Compiler();
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      HashMap<Node, Node> hashMap1 = new HashMap<Node, Node>();
      hashMap1.put(node0, node0);
      NodeUtil.verifyScopeChanges(hashMap1, node0, true, compiler0);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = Node.newString(100, "av.!SRPXd+q*@f]JD<");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(20, 40, 2);
      Node.newString(43, "J'%gA4zFkBZ]MZq?VDB", 134, 110);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.isCallOrNew(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:OR av.!SRPXd+q*@f]JD<
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      NodeUtil.precedenceWithDefault(69);
      boolean boolean0 = true;
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("|=", "|=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // |=
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      Node node2 = new Node(1, node0, node0, node1);
      NodeUtil.isSimpleOperatorType(39);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      node2.addSuppression("infinity");
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.mayHaveSideEffects(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.getBestLValueOwner(node2);
      // Undeclared exception!
      try { 
        NodeUtil.allArgsUnescapedLocal(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = new Node(115, 115, (-2287));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = Node.newString(23, "Dae", 132, 132);
      Node node1 = node0.cloneTree();
      node1.setChangeTime(56);
      node1.getSideEffectFlags();
      boolean boolean0 = NodeUtil.isGet(node0);
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean1);
      
      node0.setOptionalArg(false);
      NodeUtil.mayHaveSideEffects(node1);
      boolean boolean2 = NodeUtil.isSymmetricOperation(node0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = Node.newString(46, "[+So2+D\".J?#", 126, (-60));
      NodeUtil.getImpureBooleanValue(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      boolean boolean0 = NodeUtil.mayBeString(node0);
      boolean boolean1 = NodeUtil.isSymmetricOperation(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Node node0 = new Node(78, 84, 115);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(130);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MNN");
      Node node0 = Node.newString(27, "@G?K5 +Y|J[!HI", 27, 27);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "@G?K5 +Y|J[!HI", node0);
      NodeUtil.mayBeString(node0);
      NodeUtil.isStrWhiteSpaceChar(8);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      NodeUtil.isAssociative(21);
      int int0 = NodeUtil.precedenceWithDefault(61);
      assertEquals((-1), int0);
      
      LinkedFlowScope.createEntryLattice((Scope) null);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Double double0 = NodeUtil.getStringNumberValue("Infinity");
      assertNotNull(double0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(58);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(165);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 165
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node node1 = new Node(2, node0, node0, node0, 34, 54);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setInlineLocalFunctions(false);
      Set<String> set0 = compilerOptions0.cssRenamingWhitelist;
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = Node.newString(100, "u}`[y3U]2/+wVw1#");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S)h/uw&");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Node node0 = Node.newString(64, "ugo<^};t[I1c9");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(2, node0, node0, 57, 101);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      boolean boolean0 = peepholeFoldConstants0.nodeTypeMayHaveSideEffects(node0);
      boolean boolean1 = peepholeFoldConstants0.mayHaveSideEffects(node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals("[object Object]", string0);
      assertNotNull(string0);
      
      NodeUtil.mayHaveSideEffects(node1);
      boolean boolean2 = NodeUtil.isTryCatchNodeContainer(node0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean3 == boolean0);
      
      NodeUtil.isSimpleOperatorType(0);
      Predicate<Node> predicate0 = NodeUtil.IMMUTABLE_PREDICATE;
      boolean boolean4 = NodeUtil.allResultsMatch(node1, predicate0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = Node.newString(64, "ugo<^};t[I1c9");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = linkedFlowScope0.getRootNode();
      NodeUtil.getNumberValue(node1);
      StatementFusion statementFusion0 = new StatementFusion(false);
      NodeUtil.numberNode(1.7976931348623157E308, node1);
      StatementFusion statementFusion1 = new StatementFusion(true);
      // Undeclared exception!
      try { 
        statementFusion1.tryFuseStatements(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.StatementFusion", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = new Node(34, 34, (-1490));
      Node node1 = new Node(59, node0, node0, 53, 43);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      peepholeFoldConstants0.nodeTypeMayHaveSideEffects(node0);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      NodeUtil.arrayToString(node0);
      NodeUtil.mayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isTryCatchNodeContainer(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = new Node(34, 34, (-1490));
      NodeUtil.mayBeString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(30, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.isLiteralValue(node1, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.isCallOrNew(node0);
      boolean boolean0 = true;
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      peepholeFoldConstants0.mayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("h2$E-A~<z", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = new Node(25, 2079, 102);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.isCallOrNew(node0);
      // Undeclared exception!
      try { 
        NodeUtil.anyResultsMatch(node0, (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = Node.newString(21, "@G?Kv5 +Y|JM[!HI");
      Node node1 = NodeUtil.numberNode(15, node0);
      node0.addChildrenToBack(node1);
      assertEquals(0, node1.getChildCount());
      
      Node node2 = new Node(36, (-6031), 1389);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      boolean boolean1 = NodeUtil.isCallOrNew(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = Node.newString(26, "@G?Kv5 +Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(4095, 56, 42);
      DiagnosticType diagnosticType0 = CheckEventfulObjectDisposal.UNLISTEN_WITH_ANONBOUND;
      NodeUtil.opToStr(54);
      int int0 = NodeUtil.getInverseOperator(53);
      assertEquals((-1), int0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node2 = NodeUtil.newVarNode("JSC_UNLISTEN_WITH_ANONBOUND", node0);
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      NodeUtil.booleanNode(false);
      Node node0 = Node.newString(12, "com.google.javascript.jscomp.NodeUtil$VarCollector", 37, 39);
      NodeUtil.isControlStructure(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setInlineLocalFunctions(false);
      Set<String> set0 = compilerOptions0.cssRenamingWhitelist;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(216, nodeArray0, 216, 117);
      boolean boolean0 = NodeUtil.anyResultsMatch(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
      
      int int0 = NodeUtil.precedenceWithDefault(75);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("5laUM4nw");
      Node.newString(2190, "U", 2190, (-24));
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Node node0 = new Node(115, 115, (-2287));
      NodeUtil.isStatementParent(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Node node0 = new Node((-804), 68, 107);
      Node node1 = new Node(36, 90, 30);
      node0.getLength();
      node0.addChildToFront(node1);
      node0.removeChild(node1);
      node1.addChildToBack(node0);
      NodeUtil.mayHaveSideEffects(node1);
      boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node node0 = Node.newNumber((-440.8081488338594), 146, 146);
      node0.getBooleanProp(146);
      node0.putIntProp(146, 397);
      Node node1 = NodeUtil.newVarNode("JSC_MALFORMED_TYPEDEF", node0);
      node1.isNoSideEffectsCall();
      node1.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = Node.newString(38, "undefined", 97, 97);
      NodeUtil.getStringValue(node0);
      String string1 = " of ";
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      NodeUtil.getImpureBooleanValue(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      boolean boolean0 = true;
      StatementFusion statementFusion0 = new StatementFusion(true);
      // Undeclared exception!
      try { 
        statementFusion0.tryFuseStatements(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.StatementFusion", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = Node.newString(46, "[+So2+D\".J?#", 126, (-60));
      NodeUtil.getImpureBooleanValue(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      Set<String> set0 = compilerOptions0.cssRenamingWhitelist;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Node node0 = Node.newString(20, "@G?Kv5 +Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node.newString(101, "H3I");
      NodeUtil.isBooleanResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Node node0 = new Node(145, (-1442), 130);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      peepholeFoldConstants0.mayHaveSideEffects(node0);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isLatin("4+");
      NodeUtil.isCommutative(12);
      Node node0 = new Node(89, 85, 12);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4+");
      NodeUtil.getOpFromAssignmentOp(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ASSIGN_BITAND 85 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Node node0 = Node.newString(64, "ugo<^};t[I1c9");
      Node node1 = new Node(155);
      NodeUtil.getImpureBooleanValue(node0);
      boolean boolean0 = NodeUtil.isCommutative(4095);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      int int0 = 26;
      Node node0 = Node.newString(26, "]Q?Kv5 ]Y|JM[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      NodeUtil.isFunctionExpression(node0);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Node.newString(27, "@G?K5 +Y|J[!HI");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString(13, "@G?K5 +Y|J[!HI");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      // Undeclared exception!
      try { 
        reorderConstantExpression0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ReorderConstantExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Object object0 = new Object();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.isSimpleOperatorType(11);
      Node node0 = new Node(103, 104, 113);
      Compiler compiler0 = new Compiler();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      NodeUtil.getBestLValueOwner(node0);
      NodeUtil.allResultsMatch(node0, nodeUtil_MatchShallowStatement0);
      // Undeclared exception!
      try { 
        NodeUtil.isForIn((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(95);
      Node node1 = new Node(56, node0, node0, node0);
      NodeUtil.isSimpleOperatorType(31);
      node0.addSuppression((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      NodeUtil.precedenceWithDefault(34);
      LinkedFlowScope.createEntryLattice((Scope) null);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, 30, 37);
      boolean boolean0 = NodeUtil.isStatementParent(node1);
      assertFalse(boolean0);
      
      node1.children();
      node0.isQuotedString();
      Node node2 = node1.cloneNode();
      boolean boolean1 = NodeUtil.isLiteralValue(node2, false);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.stripNameSuffixes;
      boolean boolean2 = NodeUtil.isValidDefineValue(node2, set0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = NodeUtil.getInverseOperator(92);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isLatin("");
      NodeUtil.isCommutative(12);
      Node node0 = new Node(89, 85, 12);
      NodeUtil.containsType(node0, 56);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
