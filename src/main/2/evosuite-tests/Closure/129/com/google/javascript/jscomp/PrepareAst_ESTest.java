/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:47:21 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PrepareAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrepareAst_ESTest extends PrepareAst_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("W)t.");
      Node node1 = new Node(77, node0, node0, node0, 47, 30);
      PrepareAst prepareAst0 = new PrepareAst(compiler0, true);
      // Undeclared exception!
      try { 
        prepareAst0.process(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // normalizeNodeType constraints violated
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PrepareAst prepareAst0 = new PrepareAst(compiler0);
      prepareAst0.process((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("tm1:_");
      PrepareAst prepareAst0 = new PrepareAst(compiler0, true);
      prepareAst0.process(node0, node0);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("W)t.");
      Node node1 = new Node(110, node0, node0, node0, 47, 30);
      PrepareAst prepareAst0 = new PrepareAst(compiler0, true);
      prepareAst0.process(node0, node1);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("W)t.");
      Node node1 = new Node(77, node0, node0, node0, 47, 30);
      node1.removeChildren();
      PrepareAst prepareAst0 = new PrepareAst(compiler0, true);
      prepareAst0.process(node0, node1);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PrepareAst prepareAst0 = new PrepareAst(compiler0);
      Node node0 = new Node((-4664));
      Node node1 = new Node(64, node0, node0, node0, 50, 30);
      prepareAst0.process(node1, node1);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$2");
      Node node1 = new Node(37, node0);
      PrepareAst prepareAst0 = new PrepareAst(compiler0);
      prepareAst0.process(node0, node1);
      assertFalse(node1.isFor());
  }
}
