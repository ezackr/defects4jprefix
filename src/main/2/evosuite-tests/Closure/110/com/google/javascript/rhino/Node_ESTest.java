/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 06:48:50 GMT 2024
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.spliterator();
      assertEquals(421991, node0.getSourcePosition());
      assertEquals(103, node0.getType());
      assertTrue(node0.isDec());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      node0.putProp(46, 40);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG 29 [is_namespace: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.putProp(56, node0);
      // Undeclared exception!
      try { 
        node0.getChangeTime();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node((-10));
      node0.setSourceFileForTesting((String) null);
      node0.addSuppression((String) null);
      node0.putProp(51, 2);
      assertEquals((-10), node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(59, 59, 59);
      node0.getJsDocBuilderForNode();
      assertEquals(59, node0.getType());
      assertEquals(241723, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.Lists$TransformingSequentialList");
      node0.setQuotedString();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(28, "Xm<ZnfCVFn", 28, 28);
      boolean boolean0 = node0.isQuotedString();
      assertEquals(28, node0.getType());
      assertFalse(boolean0);
      assertEquals(114716, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString(38, "", 54, 31);
      node0.isUnscopedQualifiedName();
      assertEquals(38, node0.getType());
      assertEquals(221215, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got GETTER_DEF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals(4091, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(63, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertEquals(0, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setDouble(0.0);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = new Node(12, node0, node0, node0);
      String string0 = node0.checkTreeEquals(node1);
      assertEquals(110, node0.getType());
      assertEquals(12, node1.getType());
      assertEquals("Node tree inequality:\nTree1:\nSWITCH\n\n\nTree2:\nEQ\n    SWITCH\n\n\nSubtree1: SWITCH\n\n\nSubtree2: EQ\n    SWITCH\n", string0);
      assertNotNull(string0);
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.toStringTree();
      assertEquals(105, node0.getType());
      assertEquals(430185, node0.getSourcePosition());
      assertEquals(105, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(77);
      Node node1 = node0.srcref(node0);
      assertEquals((-1), node1.getLineno());
      assertEquals(77, node1.getType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node((byte)113);
      node0.setWasEmptyNode(false);
      assertEquals(113, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(33);
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getInputId();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      node0.siblings();
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(37, node0.getType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      Node node2 = null;
      try {
        node2 = new Node(51, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(119);
      node0.setSourceEncodedPosition(119);
      assertEquals(119, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node((byte)30);
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isNew());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(115, node0.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node((-2602));
      node0.setIsSyntheticBlock(false);
      assertEquals((-2602), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(31, 31, 31);
      Node node1 = new Node(48, node0, node0, node0, 47, 1);
      node1.addChildToFront(node1);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      boolean boolean0 = node0.isQuotedString();
      assertEquals(154, node0.getType());
      assertEquals(630938, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber((-73.4761), 18, 110);
      Node node1 = new Node(18, node0, (-3746), 37);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
      assertEquals(1, node1.getChildCount());
      assertNull(node_NodeMismatch0);
      assertEquals(18, node1.getType());
      assertEquals(73838, node0.getSourcePosition());
      assertEquals((-1), node1.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = node0.srcrefTree(node0);
      assertTrue(node1.isDec());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.wasEmptyNode();
      assertEquals(491640, node0.getSourcePosition());
      assertTrue(node0.isCatch());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(37);
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertEquals(37, node0.getType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertEquals(467058, node0.getSourcePosition());
      assertFalse(boolean0);
      assertTrue(node0.isDo());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(120);
      node0.getDirectives();
      assertTrue(node0.isCatch());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(29);
      node0.setChangeTime(29);
      assertEquals(29, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString(0, "Should not happen\n", 0, 0);
      int int0 = node0.getSourcePosition();
      assertEquals(0, int0);
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(118, 11, 11);
      int int0 = node0.getLength();
      assertEquals(0, int0);
      assertEquals(45067, node0.getSourcePosition());
      assertTrue(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.setCharno(101);
      assertTrue(node0.isAnd());
      assertEquals(413797, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(Integer.MAX_VALUE);
      boolean boolean0 = node0.isEquivalentToTyped(node0);
      assertEquals(Integer.MAX_VALUE, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(115);
      node0.setDirectives((Set<String>) null);
      assertTrue(node0.isFor());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = modificationVisitor0.caseFunctionType(functionType0);
      assertFalse(jSType1.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(109, 109, 109);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(143, 143, 143);
      boolean boolean0 = node0.isLocalResultCall();
      assertEquals(143, node0.getType());
      assertFalse(boolean0);
      assertEquals(585871, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(118, 11, 11);
      node0.setSourceFileForTesting((String) null);
      int int0 = node0.getSourceOffset();
      assertTrue(node0.isVar());
      assertEquals((-2147483637), int0);
      assertEquals(11, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.setIsSyntheticBlock(true);
      boolean boolean0 = node0.isSyntheticBlock();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(154);
      node0.putBooleanProp(117, true);
      // Undeclared exception!
      try { 
        node0.getProp(117);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(16);
      node0.putProp(29, node0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GT [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.setIsSyntheticBlock(true);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ERROR [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(30);
      node0.putProp(30, "com.google.javascript.rhino.Node$AbstractPropListItem");
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW [var_args_name: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(31);
      Object object0 = new Object();
      node0.putProp(31, object0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(149, 149, 149);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node0.putProp(32, locale_FilteringMode0);
      node0.toStringTree();
      assertEquals(149, node0.getType());
      assertEquals(149, node0.getLineno());
      assertEquals(610453, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(33, jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(103);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node0.putProp(34, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 34
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(35, jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 35
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(16);
      node0.putProp(36, node0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GT [quoted: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(37);
      Locale locale0 = Locale.ROOT;
      node0.putProp(37, locale0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL [opt_arg: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(30);
      Object object0 = new Object();
      node0.putProp(39, object0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW [empty_block: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(9, 9, 9);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(40, jSDocInfo0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BITOR 9 [originalname: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      node0.putProp(41, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 41
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      node0.putProp(42, locale_FilteringMode0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS 42 [side_effect_flags: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(43);
      Object object0 = new Object();
      node0.putProp(43, object0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE [is_constant_name: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      node0.putProp(44, "z{ut;zLDuG");
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 44
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
      node0.putProp(45, "RANGE_ERROR_FUNCTION_TYPE");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 45
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(47);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(47, jSDocInfo0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // REGEXP [is_dispatcher: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(48, jSDocInfo0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEC 103 [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(49);
      Locale locale0 = Locale.KOREAN;
      node0.putProp(49, locale0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW [direct_eval: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString(38, ",v^(", 54, 31);
      node0.putProp(50, ",v^(");
      assertEquals(38, node0.getType());
      
      node0.toStringTree();
      assertEquals(221215, node0.getSourcePosition());
      assertEquals(54, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.putProp(51, 40);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ERROR [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(16);
      node0.setLength(16);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GT [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber((double) 58);
      node0.putProp(54, node0);
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(90, 154, 38);
      node0.putProp(55, node0.SIDE_EFFECT_FLAGS);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ASSIGN_LSH 154 [inferred: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(114);
      node0.putProp(56, node0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO [change_time: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-1));
      Locale locale0 = Locale.KOREAN;
      node0.putProp(57, locale0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ERROR [reflected_object: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(14);
      node0.putProp(4095, node0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 4095
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(39, 12, 37);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertNotNull(node_NodeMismatch0);
      assertTrue(node0.isNumber());
      assertEquals(39, node1.getType());
      assertEquals(49189, node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 4095);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(0, node1.getChildCount());
      assertNotNull(node_NodeMismatch0);
      assertTrue(node1.isNumber());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(113, (String) null, 113, 113);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString(125, " :Ou`EN{)mKo#`5l~");
      node0.setString(" :Ou`EN{)mKo#`5l~");
      assertEquals(125, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("FUNCTION_PROTOTYPE", 306654267, 306654267);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isEquivalentTo(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("EGN 7", (-108), 50);
      node0.isEquivalentTo(node1);
      assertEquals(40, node1.getType());
      assertEquals(40, node0.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(52, node0, node0, 39, 39);
      Node node2 = null;
      try {
        node2 = new Node(46, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(4278);
      Node node1 = new Node(16, node0, node0, node0, 48, 4);
      Node node2 = null;
      try {
        node2 = new Node(39, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node((-124));
      Node node1 = new Node(57, node0, node0, node0, 42, 48);
      Node node2 = null;
      try {
        node2 = new Node(56, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(31, 31, 31);
      Node node1 = new Node(32, node0);
      Node node2 = null;
      try {
        node2 = new Node(47, node0, node1, node0, 48, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = new Node(0, node0);
      Node node2 = null;
      try {
        node2 = new Node(43, node1, node0, node1, 31, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber((-1136.68738262));
      Node node1 = new Node(42, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(1, node1, node1, node0, 2, 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(84);
      node0.addChildrenToBack(node0);
      Node node1 = null;
      try {
        node1 = new Node(57, node0, node0, node0, node0, 29, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(15, node0);
      Node node2 = null;
      try {
        node2 = new Node(36, node1, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = new Node(31, node0, 43, 55);
      Node node2 = null;
      try {
        node2 = new Node(1, node1, node1, node0, node1, 57, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2229));
      Node node1 = new Node(4, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(39, node1, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(149);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(38, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(156, 156, 156);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(16, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node((-1812));
      assertEquals((-1), node0.getCharno());
      assertEquals((-1812), node0.getType());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(16, nodeArray0);
      assertEquals(16, node1.getType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(109);
      boolean boolean0 = node0.hasChildren();
      assertEquals(109, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node((byte)69);
      Node node1 = new Node(16, node0, node0, node0, node0);
      boolean boolean0 = node1.hasChildren();
      assertEquals(69, node0.getType());
      assertEquals(16, node1.getType());
      assertTrue(boolean0);
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(346, 346, 346);
      Node node1 = new Node(49, node0, node0);
      node1.addChildrenToBack(node1);
      Node node2 = new Node(541);
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(0, "Should not happen\n", 0, 0);
      node0.getChildAtIndex(0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString(29, "YimPZnfCVFn", (-4235), 29);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getIndexOfChild(node0);
      assertEquals(6, node0.getChildCount());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber((double) 681);
      node0.addChildToFront(node0);
      int int0 = node0.getIndexOfChild(node0);
      assertTrue(node0.hasOneChild());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = Node.newString(0, ",v+^(", 15, 48);
      Node node2 = new Node(36, node1, node0);
      assertEquals(36, node2.getType());
      assertEquals(2, node2.getChildCount());
      
      Node node3 = node1.getLastSibling();
      assertEquals(0, node1.getType());
      assertTrue(node3.isWith());
      assertEquals(61488, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node((byte)116);
      Node node1 = new Node(37, node0, node0, node0, 29, 53);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber((double) 97);
      Node node1 = new Node(30, node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(1477);
      node0.addChildrenToFront(node0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(177);
      Node node1 = new Node(39, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(1477);
      Node node1 = new Node(588, node0);
      node1.addChildrenToFront(node1);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(99, 99, 99);
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(1199, 1199, 1199);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(1199, 1199, 1199);
      Node node1 = new Node(12, node0, node0, 38, 57);
      node1.addChildBefore(node1, node0);
      Node node2 = Node.newString(0, " =U+#{eY0gvb)7w3j", 47, 129);
      node1.addChildBefore(node2, node0);
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(22);
      Node node1 = new Node(22);
      Node node2 = new Node(39, node0, node0, node0, node1);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = new Node(38, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 13, 13);
      Node node1 = new Node(1797, 37, 1);
      Node node2 = new Node(4095, node0, node0, node0, node1);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber((-863.8161116895));
      Node node1 = new Node(49, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(12);
      Node node2 = new Node(48, node0);
      node2.addChildAfter(node1, (Node) null);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(307, 307, 307);
      Node node1 = new Node(866, node0, node0);
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node((-459));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, 46, 39);
      Node node2 = new Node(42, node0, node1, node1);
      node2.removeFirstChild();
      assertFalse(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node((-725), (-725), (-725));
      Node node1 = new Node(2, node0, node0);
      node1.addChildBefore(node1, node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(4477, 4477, 4477);
      Node node1 = new Node(50, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      Node node1 = new Node(115, node0, node0, node0, node0);
      node1.replaceChild(node0, node1);
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node0.isNumber());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isFor());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node((-23));
      Node node1 = new Node((-23));
      Node node2 = new Node(47, node0, node1);
      assertEquals(2, node2.getChildCount());
      
      node2.replaceChild(node0, node2);
      assertTrue(node2.isRegExp());
      assertEquals((-23), node1.getType());
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node((-459));
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(1533);
      Node node1 = new Node(1, node0, 52, 52);
      node1.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node((-459));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, 46, 39);
      Node node2 = new Node(42, node0, node1, node1);
      node2.replaceChildAfter(node0, node2);
      assertEquals(188455, node1.getSourcePosition());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertTrue(node1.isName());
      assertEquals(42, node2.getType());
      assertEquals((-459), node0.getType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node((-10), (-10), (-10));
      node0.putProp(51, 2);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = node0.clonePropsFrom(node0);
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newNumber(76.809266905, (-1637), (-1637));
      node0.putIntProp((-1637), (-1637));
      int int0 = node0.getExistingIntProp((-1637));
      assertEquals((-1637), int0);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(52);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 52
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // AND 101 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(99);
      // Undeclared exception!
      try { 
        node0.setDouble(99);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 99
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      // Undeclared exception!
      try { 
        node0.setDouble(39);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(40);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(40);
      // Undeclared exception!
      try { 
        node0.setString("u]gA%JF");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(262167);
      // Undeclared exception!
      try { 
        node0.setString("2c'>/va;9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 262167
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(38);
      // Undeclared exception!
      try { 
        node0.setString("2c'>/va;9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node((byte)105);
      Node node1 = new Node((byte)105, node0, node0);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node((byte)105);
      node0.type = 38;
      Node node1 = new Node((byte)105, node0, node0);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(83);
      String string0 = node0.toString(false, false, false);
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertEquals("PARAM_LIST", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(103);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      node0.setJSType(templateType0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEC is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.setJSType(templateType0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK 125 : Object#Key is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(22, 22, 22);
      node0.setSourceFileForTesting("com.google.javascript.rhino.Node$StringNode");
      String string0 = node0.getSourceFileName();
      assertEquals(22, node0.getType());
      assertEquals(90134, node0.getSourcePosition());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(119);
      node0.getSourceFileName();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isWith());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(43);
      node0.setSourceFileForTesting((String) null);
      boolean boolean0 = node0.isFromExterns();
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(149);
      boolean boolean0 = node0.isFromExterns();
      assertEquals(149, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(132);
      int int0 = node0.getSourceOffset();
      assertEquals((-1), int0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setStaticSourceFile(simpleSourceFile0);
      int int0 = node0.getSourceOffset();
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), int0);
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      assertEquals(118, node0.getLineno());
      
      node0.setLineno(4095);
      assertEquals(16773238, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(118);
      node0.setLineno(4095);
      assertEquals(16773120, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(149);
      Node node1 = new Node(39, node0);
      node1.setSourceEncodedPositionForTree(15);
      assertEquals(15, node0.getCharno());
      assertEquals(149, node0.getType());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(16);
      node0.children();
      assertEquals((-1), node0.getLineno());
      assertEquals(16, node0.getType());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node((byte) (-120));
      // Undeclared exception!
      try { 
        node0.getAncestor((byte) (-120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node((byte)74);
      Node node1 = node0.getAncestor(0);
      assertNotNull(node1);
      assertEquals(74, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = node0.getAncestor(115);
      assertNull(node1);
      assertEquals(115, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(38);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(89);
      boolean boolean0 = node0.hasOneChild();
      assertFalse(boolean0);
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber((-58.691968055534375));
      Node node1 = new Node(55, node0, node0, node0, node0);
      boolean boolean0 = node1.hasOneChild();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
      assertEquals(55, node1.getType());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(52);
      Node node1 = Node.newString(57, "<6-ZE;k'zk)/");
      Node node2 = new Node(47, node1, node1, node0);
      boolean boolean0 = node2.hasOneChild();
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(57, node1.getType());
      assertEquals(52, node0.getType());
      assertFalse(node1.hasOneChild());
      assertEquals(47, node2.getType());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(1533);
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertFalse(boolean0);
      assertEquals(1533, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
      boolean boolean0 = node1.hasMoreThanOneChild();
      assertEquals(53, node1.getType());
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals(61442, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node((-1285));
      Node node1 = new Node(32);
      Node node2 = new Node(38, node1, node0);
      boolean boolean0 = node2.hasMoreThanOneChild();
      assertEquals((-1), node2.getLineno());
      assertEquals(38, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
      boolean boolean0 = node1.isEquivalentToShallow(node1);
      assertEquals(61442, node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertTrue(boolean0);
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node1.isFunction());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newNumber((-41.79513725335379));
      Node node1 = new Node(4095, node0, node0, 54, 50);
      boolean boolean0 = node1.hasChild(node1);
      assertEquals(39, node0.getType());
      assertEquals(4095, node1.getType());
      assertEquals(221234, node1.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(2);
      Node node1 = new Node(2, node0, 57, 715);
      boolean boolean0 = node1.hasChild(node0);
      assertEquals(234187, node1.getSourcePosition());
      assertEquals(2, node1.getType());
      assertTrue(boolean0);
      assertEquals(2, node0.getType());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node((-3771));
      node0.checkTreeEquals(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals((-3771), node0.getType());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber((-73.4761), 18, 110);
      Node node1 = new Node(18, node0, (-3746), 37);
      Node node2 = new Node(18, node1, node1, 0, (-1974));
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      assertEquals(18, node1.getType());
      assertNotNull(node_NodeMismatch0);
      assertEquals(73838, node0.getSourcePosition());
      assertEquals((-1), node1.getLineno());
      assertTrue(node0.isNumber());
      assertEquals((-1), node2.getCharno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node2.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(18, node2.getType());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node((-1880));
      Node node1 = new Node((-1880), node0, node0, 49, 2);
      Node node2 = new Node((-1880), node1, node1, node1);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals((-1880), node0.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1880), node2.getType());
      assertEquals(200706, node1.getSourcePosition());
      assertEquals((-1880), node1.getType());
      assertNotNull(node_NodeMismatch0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
      assertNull(node_NodeMismatch0);
      assertEquals(61442, node1.getSourcePosition());
      assertEquals(53, node1.getType());
      assertTrue(node0.isNumber());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      assertEquals(1, node1.getChildCount());
      assertNotNull(node_NodeMismatch0);
      assertEquals(83, node1.getType());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
      assertEquals(417894, node0.getSourcePosition());
      assertTrue(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(103);
      boolean boolean0 = node0.isEquivalentToShallow(node0);
      assertEquals(103, node0.getType());
      assertTrue(boolean0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      boolean boolean0 = node0.isEquivalentTo(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(630938, node0.getSourcePosition());
      assertEquals(154, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(37);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isCall());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString(38, "", 54, 31);
      node0.getQualifiedName();
      assertTrue(node0.isName());
      assertEquals(221215, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(38, ",v^(", 54, 31);
      String string0 = node0.getQualifiedName();
      assertEquals(221215, node0.getSourcePosition());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(42, node0, node0, 52, 47);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS 52 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(40, node0, 4095, 16);
      node0.addChildrenToBack(node1);
      node0.getQualifiedName();
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(33);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = node0.isQualifiedName();
      assertTrue(boolean0);
      assertEquals(42, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString(38, "", 57, 31);
      boolean boolean0 = node0.isQualifiedName();
      assertEquals(38, node0.getType());
      assertEquals(233503, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(2);
      boolean boolean0 = node0.isQualifiedName();
      assertEquals(2, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(38, "v+^(", 54, 31);
      boolean boolean0 = node0.isQualifiedName();
      assertEquals(221215, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertTrue(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(38, "v^", 54, 31);
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertTrue(boolean0);
      assertEquals(221215, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(109);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(40, node0, 4095, 16);
      assertEquals(16773136, node1.getSourcePosition());
      assertTrue(node1.isString());
      
      Node node2 = node0.detachFromParent();
      assertEquals(135201, node2.getSourcePosition());
      assertTrue(node2.isGetProp());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = node0.removeFirstChild();
      assertEquals(115, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node((byte)77);
      Node node1 = new Node(46, node0, node0, 4095, 38);
      Node node2 = node1.removeChildren();
      assertEquals(46, node1.getType());
      assertEquals(16773158, node1.getSourcePosition());
      assertEquals(77, node2.getType());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(1533, 1533, 1533);
      Node node1 = new Node(32, node0, node0, node0, node0, 57, 55);
      node1.detachChildren();
      assertEquals(6280701, node0.getSourcePosition());
      assertEquals(1533, node0.getType());
      assertEquals(233527, node1.getSourcePosition());
      assertEquals(32, node1.getType());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(31, 31, 31);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = new Node(1, node0, node0, node0, node0, 57, 50);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = new Node(40);
      Node node2 = new Node(1, node1, node1, node0, node1, 57, 50);
      node2.removeChildAfter(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = new Node(40);
      Node node2 = new Node(1, node1, node1, node0, node1, 57, 50);
      node2.removeFirstChild();
      node2.removeChildAfter(node0);
      assertFalse(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node((-2602));
      Node node1 = new Node(55);
      Node node2 = new Node(42, node0, node1, node1);
      Node node3 = node2.cloneTree();
      assertEquals(55, node1.getType());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(2, node3.getChildCount());
      assertEquals(42, node3.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
      node0.putProp(40, jSDocInfo0);
      Node node1 = node0.copyInformationFrom(node0);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node0.setStaticSourceFile(simpleSourceFile0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2516));
      Node node1 = new Node(39, node0, 54, (-2516));
      Node node2 = node1.copyInformationFromForTree(node0);
      assertTrue(node2.isNumber());
      assertEquals(39, node0.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node((-725), (-725), (-725));
      Node node1 = new Node(2, node0, node0, node0, node0, 40, 12);
      assertEquals(40, node1.getLineno());
      
      node1.useSourceInfoFromForTree(node0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(25, 25, 25);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(40, jSDocInfo0);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      assertEquals(25, node1.getType());
      assertEquals(102425, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node((-10), (-10), (-10));
      node0.putProp(51, 2);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      assertEquals((-10), node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node((-3771));
      Node node1 = new Node(2, node0, node0, 0, 55);
      node1.useSourceInfoIfMissingFromForTree(node0);
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString(130, "", 130, (-895));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      assertEquals((-1), node0.getCharno());
      assertEquals(130, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(42);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("\n\nSubtree1: ");
      node0.addSuppression("THROW 52");
      assertTrue(node0.isThis());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = new Node((byte)30);
      assertEquals(30, node0.getType());
      
      node0.setSideEffectFlags((int) (byte)30);
      boolean boolean0 = node0.mayMutateArguments();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2661));
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals((-2661), node_SideEffectFlags0.valueOf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1073741823);
      node_SideEffectFlags0.setAllFlags();
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(node0.isParamList());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(43);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      boolean boolean0 = node_NodeMismatch0.equals(node0);
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(37);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
      assertTrue(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node(37);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = new Node(5760, node0);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
      boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
      assertFalse(boolean0);
      assertFalse(node_NodeMismatch0.equals((Object)node_NodeMismatch1));
      assertEquals(5760, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node1.hasChildren());
      assertTrue(node0.isCall());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(37);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = new Node(5760, node0);
      Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
      assertNotNull(node_NodeMismatch1);
      
      boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
      assertEquals(5760, node1.getType());
      assertFalse(node_NodeMismatch0.equals((Object)node_NodeMismatch1));
      assertEquals(37, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(22, 22, 22);
      boolean boolean0 = node0.isAdd();
      assertEquals(90134, node0.getSourcePosition());
      assertEquals(22, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString(21, "OBJECTLEIT", 149, 122);
      boolean boolean0 = node0.isAdd();
      assertTrue(boolean0);
      assertEquals(610426, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(80);
      boolean boolean0 = node0.isAnd();
      assertEquals(80, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = node0.isAnd();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      boolean boolean0 = node0.isArrayLit();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(63);
      boolean boolean0 = node0.isArrayLit();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString(130, "", 130, (-895));
      node0.isAssign();
      assertEquals(130, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(86);
      boolean boolean0 = node0.isAssign();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = node0.isAssignAdd();
      assertFalse(boolean0);
      assertTrue(node0.isFunction());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(93);
      boolean boolean0 = node0.isAssignAdd();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      boolean boolean0 = node0.isBlock();
      assertEquals(176171, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(125);
      boolean boolean0 = node0.isBlock();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(43);
      boolean boolean0 = node0.isBreak();
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node((byte)116);
      boolean boolean0 = node0.isBreak();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(109, 109, 109);
      boolean boolean0 = node0.isCall();
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(109, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(130, "E", 130, (-895));
      Node node1 = new Node(37, node0, node0);
      boolean boolean0 = node1.isCall();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
      assertTrue(node0.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = new Node((-3771));
      boolean boolean0 = node0.isCase();
      assertEquals((-3771), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(111, "com.google.jaascript.rhno.Nde", 43, (-881));
      boolean boolean0 = node0.isCase();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      node0.isCast();
      assertTrue(node0.isScript());
      assertEquals(540804, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      boolean boolean0 = node0.isCast();
      assertEquals(635035, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(50);
      boolean boolean0 = node0.isCatch();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(50, node0.getType());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      boolean boolean0 = node0.isCatch();
      assertTrue(boolean0);
      assertEquals(491640, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = node0.isComma();
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertEquals(115, node0.getType());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(85);
      boolean boolean0 = node0.isComma();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = node0.isContinue();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isSwitch());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newString(117, "f", 117, (-1251));
      boolean boolean0 = node0.isContinue();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(119);
      boolean boolean0 = node0.isDebugger();
      assertFalse(boolean0);
      assertTrue(node0.isWith());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString(152, "as/", 152, 152);
      boolean boolean0 = node0.isDebugger();
      assertTrue(boolean0);
      assertEquals(622744, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(171);
      boolean boolean0 = node0.isDec();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(171, node0.getType());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      boolean boolean0 = node0.isDec();
      assertEquals(421991, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node((-3771));
      boolean boolean0 = node0.isDefaultCase();
      assertEquals((-3771), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node(112);
      boolean boolean0 = node0.isDefaultCase();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2, 1370, 2);
      node0.isDelProp();
      assertTrue(node0.isNumber());
      assertEquals(5611522, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newNumber((-22.0));
      Node node1 = new Node(31, node0, node0, 54, 49);
      boolean boolean0 = node1.isDelProp();
      assertEquals(221233, node1.getSourcePosition());
      assertTrue(boolean0);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = node0.isDo();
      assertTrue(node0.isFor());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      boolean boolean0 = node0.isDo();
      assertEquals(467058, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = node0.isEmpty();
      assertFalse(boolean0);
      assertEquals(42, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(124);
      boolean boolean0 = node0.isEmpty();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      boolean boolean0 = node0.isExprResult();
      assertEquals(53261, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(13, node0.getType());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString(130, "", 130, (-895));
      boolean boolean0 = node0.isExprResult();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(123);
      boolean boolean0 = node0.isFalse();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(123, node0.getType());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(43, 52, 2);
      boolean boolean0 = node0.isFalse();
      assertEquals(212994, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(119);
      boolean boolean0 = node0.isFor();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(119, node0.getType());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = node0.isFor();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      boolean boolean0 = node0.isFunction();
      assertTrue(boolean0);
      assertEquals(430185, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node((byte)113);
      boolean boolean0 = node0.isGetterDef();
      assertTrue(node0.isWhile());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(147);
      boolean boolean0 = node0.isGetterDef();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(2);
      boolean boolean0 = node0.isGetElem();
      assertEquals(2, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(35);
      boolean boolean0 = node0.isGetElem();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = node0.isGetProp();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(42, node0.getType());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      boolean boolean0 = node0.isGetProp();
      assertTrue(boolean0);
      assertEquals(135201, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(98);
      boolean boolean0 = node0.isHook();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(150);
      boolean boolean0 = node0.isIf();
      assertFalse(boolean0);
      assertEquals(150, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(108);
      boolean boolean0 = node0.isIf();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(43);
      boolean boolean0 = node0.isIn();
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(51);
      boolean boolean0 = node0.isIn();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isInc();
      assertTrue(node0.isAnd());
      assertEquals(413797, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString(102, "#Lu^;<1I)Tk");
      boolean boolean0 = node0.isInc();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(39);
      boolean boolean0 = node0.isInstanceOf();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(52, node0, node0, node0);
      boolean boolean0 = node1.isInstanceOf();
      assertFalse(node0.isInstanceOf());
      assertTrue(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(145);
      boolean boolean0 = node0.isLabel();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(145, node0.getType());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString(152, "com.google.javascript.rhino.Node$StringNode", 152, 152);
      Node node1 = new Node(126, node0, node0, node0);
      boolean boolean0 = node1.isLabel();
      assertTrue(boolean0);
      assertEquals(622744, node0.getSourcePosition());
      assertEquals(152, node0.getType());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(3015, 3015, 3015);
      boolean boolean0 = node0.isLabelName();
      assertEquals(3015, node0.getType());
      assertFalse(boolean0);
      assertEquals(12352455, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = new Node(153, node0, node0, (-1225), 37);
      boolean boolean0 = node1.isLabelName();
      assertTrue(boolean0);
      assertTrue(node1.hasOneChild());
      assertEquals(150, node0.getType());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node((-1437), (-1437), (-1437));
      boolean boolean0 = node0.isName();
      assertEquals((-1437), node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString(38, "v^", 54, 31);
      boolean boolean0 = node0.isName();
      assertTrue(boolean0);
      assertEquals(221215, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(109, 109, 109);
      boolean boolean0 = node0.isNE();
      assertEquals(109, node0.getType());
      assertFalse(boolean0);
      assertEquals(446573, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2, 1370, 2);
      Node node1 = new Node(13, node0, node0);
      boolean boolean0 = node1.isNE();
      assertEquals((-1), node1.getCharno());
      assertEquals(5611522, node0.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node(43);
      boolean boolean0 = node0.isNew();
      assertTrue(node0.isFalse());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node((-3771));
      assertFalse(node0.isNew());
      
      node0.setType(30);
      boolean boolean0 = node0.isNew();
      assertEquals(30, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2, 1370, 2);
      boolean boolean0 = node0.isNot();
      assertEquals(5611522, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(26, 1789, 26);
      boolean boolean0 = node0.isNot();
      assertTrue(boolean0);
      assertEquals(7327770, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      boolean boolean0 = node0.isNull();
      assertFalse(boolean0);
      assertEquals(417894, node0.getSourcePosition());
      assertTrue(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString(41, "com.google.common.base.Predicates$IsEqualToPredicate", 41, 41);
      boolean boolean0 = node0.isNull();
      assertEquals(167977, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      boolean boolean0 = node0.isNumber();
      assertFalse(boolean0);
      assertEquals(176171, node0.getSourcePosition());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isNumber();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(118, 11, 11);
      node0.isObjectLit();
      assertEquals(45067, node0.getSourcePosition());
      assertEquals(118, node0.getType());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(64);
      boolean boolean0 = node0.isObjectLit();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newNumber((double) 58);
      boolean boolean0 = node0.isOr();
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(100);
      boolean boolean0 = node0.isOr();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node((-3771));
      boolean boolean0 = node0.isParamList();
      assertFalse(boolean0);
      assertEquals((-3771), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(83);
      boolean boolean0 = node0.isParamList();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(89, 89, 89);
      boolean boolean0 = node0.isRegExp();
      assertEquals(89, node0.getType());
      assertEquals(364633, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString(47, "com.google.common.base.CharMatcher$3", 36, 30);
      boolean boolean0 = node0.isRegExp();
      assertTrue(boolean0);
      assertEquals(147486, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(154, (-578), (-578));
      boolean boolean0 = node0.isReturn();
      assertEquals(154, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(4, "com.google.jaascript.rhno.Nde", 1, 33);
      boolean boolean0 = node0.isReturn();
      assertEquals(4129, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isScript();
      assertEquals(430185, node0.getSourcePosition());
      assertEquals(105, node0.getType());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(132);
      boolean boolean0 = node0.isScript();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
      boolean boolean0 = node0.isSetterDef();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(148);
      boolean boolean0 = node0.isSetterDef();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      boolean boolean0 = node0.isString();
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(49, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("", 57, 57);
      boolean boolean0 = node0.isString();
      assertTrue(boolean0);
      assertEquals(233529, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(2);
      boolean boolean0 = node0.isStringKey();
      assertFalse(boolean0);
      assertEquals(2, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(154, (-578), (-578));
      boolean boolean0 = node0.isStringKey();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      boolean boolean0 = node0.isSwitch();
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = node0.isSwitch();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      boolean boolean0 = node0.isThis();
      assertEquals(430185, node0.getSourcePosition());
      assertTrue(node0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = node0.isThis();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(26, 1789, 26);
      node0.isThrow();
      assertEquals(7327770, node0.getSourcePosition());
      assertEquals(26, node0.getType());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = new Node((-722), (-722), (-722));
      Node node1 = new Node(49, node0, node0);
      boolean boolean0 = node1.isThrow();
      assertTrue(boolean0);
      assertEquals((-722), node0.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node((-3771));
      boolean boolean0 = node0.isTrue();
      assertEquals((-3771), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node((byte)44);
      boolean boolean0 = node0.isTrue();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node((-3771));
      boolean boolean0 = node0.isTry();
      assertEquals((-3771), node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(77);
      boolean boolean0 = node0.isTry();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(2);
      boolean boolean0 = node0.isTypeOf();
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(2, node0.getType());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(32);
      boolean boolean0 = node0.isTypeOf();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(86);
      boolean boolean0 = node0.isVar();
      assertFalse(boolean0);
      assertEquals(86, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = node0.isVar();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node(119);
      boolean boolean0 = node0.isVoid();
      assertFalse(boolean0);
      assertTrue(node0.isWith());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(122);
      boolean boolean0 = node0.isVoid();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(37);
      boolean boolean0 = node0.isWhile();
      assertFalse(boolean0);
      assertEquals(37, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node((byte)113);
      boolean boolean0 = node0.isWhile();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      boolean boolean0 = node0.isWith();
      assertEquals(421991, node0.getSourcePosition());
      assertTrue(node0.isDec());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      boolean boolean0 = node0.isWith();
      assertTrue(boolean0);
      assertEquals(487543, node0.getSourcePosition());
  }
}
