/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:47:32 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!$H#E", "B?-zfq!$H#E");
      Node node1 = new Node(105, node0, node0);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.visit((NodeTraversal) null, node1, node1);
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Hemoebzg", "Hemoebzg");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("B?-zf!<$H#E", "B?-zf!<$H#E");
      Node node1 = new Node(4, node0, node0);
      Node node2 = node1.removeFirstChild();
      node2.addChildToBack(node1);
      Node node3 = new Node(114, node0);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.process(node2, node2);
      assertEquals(1, node2.getChildCount());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!$H#E", "B?-zfq!$H#E");
      Node node1 = new Node(114, node0, node0);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.process(node0, node1);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "; found: null", "-~zq!]$H#5");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("B?-zfq!<$H#E");
      Node node1 = new Node(4, node0, node0);
      Node node2 = new Node(77, node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node1, node2);
      assertEquals(38, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "BP*zfq<$ H#E", "BP*zfq<$ H#E");
      Node node1 = new Node(4, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(77, node1);
      node3.addChildToBack(node2);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node2, node3);
      assertFalse(node2.equals((Object)node3));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "BP*zfq<$ H#E", "BP*zfq<$ H#E");
      Node node1 = new Node(4, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(77, node1);
      node0.setType(105);
      node3.addChildToBack(node2);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node2, node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Invalid attempt to remove node: RETURN of TRY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "vaIr", "vaIr");
      Node node1 = new Node(124, node0, node0);
      Node node2 = new Node(48, node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.process(node1, node2);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!$H#E", "B?-zfq!$H#E");
      Node node1 = new Node(125, node0, node0);
      Node node2 = new Node(42, node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node1, node2);
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_aTT$?=lqIn", "_aTT$?=lqIn");
      Node node1 = new Node(114, node0, node0);
      Node node2 = new Node(44, node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.process(node1, node2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "vaIr", "vaIr");
      Node node1 = new Node(120, node0, node0);
      Node node2 = new Node(48, node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!<$H#E", "B?-zfq!<$H#E");
      Node node1 = new Node(4, node0, node0);
      Node node2 = node1.removeFirstChild();
      node2.addChildToBack(node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node2, node0);
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node0.getChildCount());
  }
}
