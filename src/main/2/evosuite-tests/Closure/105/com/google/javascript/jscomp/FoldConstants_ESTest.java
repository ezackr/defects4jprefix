/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 06:24:40 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("(9xCKB^l");
      Node node1 = new Node(27, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("SeDZQ'/_>]");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("FfecTU*\"$N;P");
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(32, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(symbolTable0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, memoizedScopeCreator0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = new Node((-1088));
      Node node1 = new Node(32, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(1518, "OBJECT_FUNCTION_TYPE");
      Node node1 = new Node(39, 14, 4);
      Node node2 = new Node(32, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'/9>]a", 1487, 1487);
      Node node1 = new Node(41, 14, 4);
      Node node2 = new Node(32, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString("FfecTU*\"$N;P");
      Node node1 = new Node(26, node0, node0);
      Compiler compiler0 = new Compiler();
      Node node2 = new Node(32, node1, node1);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(symbolTable0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, memoizedScopeCreator0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(2663, "OBJECT_FUNCTION_TYPE");
      Node node1 = new Node(47, 14, 4);
      Node node2 = new Node(32, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node2);
      assertFalse(node2.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-2.1474836415752614E9));
      Node node1 = new Node(29, node0, node0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(130, 130, 130);
      Node node1 = new Node(29, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(2988);
      Node node1 = new Node(29, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("[].join()");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node0);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("SeDZQ'/_>]");
      Node node1 = new Node(4, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node1);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
      Node node0 = Node.newString("rSc{~h7|#8f3,=UYKt", (-3131), (-3131));
      Node node1 = Node.newString("rSc{~h7|#8f3,=UYKt", 49, 43);
      Node node2 = new Node(108, node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: IF of IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(110, 110, 110);
      Node node1 = new Node(38, 5, 4095);
      node1.setType(13);
      Node node2 = new Node(98, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
      Node node0 = new Node(41, 41, 41);
      Node node1 = new Node(13, 26, 24);
      Node node2 = new Node(114, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(112, 112, 112);
      Node node1 = new Node(38, 5, 4095);
      Node node2 = new Node(101, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 5 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
      Node node0 = Node.newString("4Xh+i^B", (-3130), (-3130));
      Node node1 = Node.newString("4Xh+i^B", 15, (-3130));
      Node node2 = new Node(100, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(33, "OBJECT_FUNCTION_TYPE");
      Node node1 = new Node(113, (-1853), 17);
      Node node2 = new Node(9, node1, node0);
      ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, externExportsPass0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertFalse(node2.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString("(.\"Amt5Vxa");
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("(.\"Amt5Vxa");
      Node node2 = new Node(11, node1, node0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'1/_>]a", 2967, 2967);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = compiler0.parseSyntheticCode("SeZQ'1/_>]a", "jntkI:T3");
      Node node2 = new Node(18, node0, node0, node0, node1);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node((-2560), (-2560), (-2560));
      Node node1 = new Node((-2560), (-2560), (-2560));
      Node node2 = new Node(19, node0, node1);
      nodeTraversal0.traverse(node2);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SeZ!/_>]a");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("SeZ!/_>]a");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber(174.9);
      Node node2 = new Node(20, node0, node1);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node((-920));
      Node node1 = Node.newString("", 39, 19);
      Node node2 = new Node(37, node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
      Node node0 = Node.newString("rSc{~h7|#8f3,=UYKt", (-3131), (-3131));
      Node node1 = Node.newString("rSc{~h7|#8f3,=UYKt", 49, 43);
      Node node2 = new Node(46, node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(1522);
      Node node1 = Node.newString("", 29, 39);
      Node node2 = new Node(86, node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node2);
      assertFalse(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SZQ'/_X>qk", 2970, 2970);
      Node node1 = new Node(46, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node2 = Node.newString("SZQ'/_X>qk");
      Node node3 = new Node(30, node2, node1);
      foldConstants0.visit(nodeTraversal0, node3, node2);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("b+J%W");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node0);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'1/_>]a", 1515, 1515);
      Node node1 = new Node(27, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node2 = Node.newString("SeZQ'1/_>]a");
      Node node3 = new Node(14, node1, node2);
      foldConstants0.visit(nodeTraversal0, node3, node1);
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node((-3107), (-3107), (-3107));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(1, 43, 64336);
      Node node2 = new Node(16, node0, node1);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", (-1427), (-1427));
      Node node1 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", 45, 44);
      Node node2 = new Node(21, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("com.googl.javascript.jscomFoldConsants", (-39), 4);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("com.googl.javascript.jscomFoldConsants", (-39), 4);
      Node node2 = new Node(22, node0, node1);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'K1/_>]a", 1541, 1541);
      Node node1 = new Node(39, 14, 4);
      Node node2 = new Node(23, node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(41, 41, 41);
      Node node1 = Node.newString("length");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node2 = new Node(24, node0, node0, node1, 1, 21);
      foldConstants0.visit(nodeTraversal0, node2, (Node) null);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("join", 22, 22);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("join");
      Node node2 = new Node(14, node1, node0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", (-1467), (-1467));
      Node node1 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", 45, 44);
      Node node2 = new Node(16, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertFalse(node2.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
      Node node0 = Node.newString("defineProperty", 2108, 113);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node1 = Node.newString("defineProperty");
      Node node2 = new Node(15, node1, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
      Node node0 = Node.newString("4Xh+i^B", 86, 86);
      Node node1 = Node.newString("4Xh+i^B", 11, 48);
      Node node2 = new Node(12, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("Fractional bitwise operand: {0}", 2958, 2958);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("a");
      Node node2 = new Node(13, node1, node0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
      Node node0 = Node.newString("rSJ{~h7|#8f3,=UYKt", (-3131), (-3131));
      Node node1 = Node.newString("rSJ{~h7|#8f3,=UYKt", 15, (-3131));
      Node node2 = new Node(45, node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("join", 8, 8);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("join");
      Node node2 = new Node(49, node1, node0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("(.\"At5Vxa");
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      Node node1 = new Node(39, 13, 2);
      Node node2 = new Node(35, node0, node1);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseSyntheticCode("lntbh", "lntbh");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBlock(nodeTraversal0, node0, (Node) null);
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      Node node0 = new Node((-113), (-113), (-2197));
      Node node1 = new Node(49, node0, node0, node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(1791, 163, 1791);
      Node node1 = Node.newString(".Y7-UgWaG~\"");
      Node node2 = new Node(108, node0, node1);
      // Undeclared exception!
      try { 
        foldConstants0.visit((NodeTraversal) null, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      Node node0 = new Node(41, 41, 41);
      Node node1 = new Node(46, 12, 0);
      Node node2 = new Node(21, node1, node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldHookIf(nodeTraversal0, node2, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SDZQ'/_>", 2967, 2967);
      Node node1 = new Node(44, 22, 4095);
      ConstCheck constCheck0 = new ConstCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, constCheck0);
      Node node2 = compiler0.parseSyntheticCode("SDZQ'/_>", "SDZQ'/_>");
      Node node3 = new Node(23, node1, node0, node2, 4, 14);
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeIf(nodeTraversal0, node3, node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(41, 41, 41);
      Node node1 = Node.newString("length");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node2 = new Node(24, node0, node0, node1, 1, 21);
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node1);
      assertEquals(11, Node.USES_PROP);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SDZQ'/_>", 2967, 2967);
      Node node1 = new Node(98, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(122);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr((NodeTraversal) null, node0, node1, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(2.147483647E9);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr((NodeTraversal) null, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(122);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'/9>]a", 1522, 1522);
      Node node1 = compiler0.parseTestCode("?Rc{wWA1#^(qW");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node1, node1);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'1/_x]a");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(115, node0, node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'1/_>]a", 2967, 2967);
      Node node1 = new Node(116, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SDZQ'/_>", 2967, 2967);
      Node node1 = new Node(98, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-1630.0795702));
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(115);
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'/9>]a", 1522, 1522);
      Node node1 = new Node(14, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("z[");
      Node node1 = new Node(10, node0, node0);
      Compiler compiler0 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node1, node1);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(32.0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown arithmetic operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(63, 63, 63);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber((double) 4);
      foldConstants0.tryFoldArithmetic(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(33, 33, 33);
      Node node1 = Node.newNumber((double) 5);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node1, node0, node0);
      assertEquals(33, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(2.1474836484295316E9);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(1149.304303);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(2.147483647E9);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown bitwise operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(Double.NaN);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("SeZQ'1/_>]a", 1514, 1514);
      Node node1 = Node.newNumber((double) 41);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldShift(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((double) 2, 10, 7);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown shift operator: number
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node0 = Node.newNumber(2.147483647232417E9, 2145563344, 37);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-2.147483648E9));
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(1149.304303);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("ZQ='/>");
      VarCheck varCheck0 = new VarCheck(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      Node node1 = new Node(122, node0, node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("ZQ='/>");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      Node node1 = new Node(122, node0, node0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("t;Cz__(GQwz4CX#L*");
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(38, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node((-2560), (-2560), (-2560));
      Node node1 = Node.newNumber((double) 0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
      Node node0 = new Node(41, 41, 41);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(63, 63, 63);
      Node node1 = new Node(42, 26, 1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(1945, (-720), (-720));
      Node node1 = new Node(43);
      foldConstants0.tryFoldComparison((NodeTraversal) null, node0, node1, node1, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(44);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("SeZQ'/9>]a");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      Node node1 = new Node(122, node0, node0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(44);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("^");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(32, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node1);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = new Node(17);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node1);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node((-2560), (-2560), (-2560));
      Node node1 = new Node(13, node0, node0, 45, 6);
      Node node2 = Node.newNumber((double) 0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node2, node2, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseSyntheticCode("ZQ'/>", "ZQ'/>");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(38, node0, node0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(33, 117, 33);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldStringIndexOf((NodeTraversal) null, node0, node0, node0, node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(33, 117, 33);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      node0.addChildrenToFront(node0);
      Node node1 = Node.newNumber(3964.0555515432616);
      foldConstants0.tryFoldStringIndexOf((NodeTraversal) null, node0, node0, node1, node0);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(33, 33, 33);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldStringJoin(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(33, 33, 33);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("N9ngth");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldStringJoin(nodeTraversal0, node1, node0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(63, 63, 63);
      foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node0, node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(63, 63, 63);
      Node node1 = Node.newNumber(31.366593364048605);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(63, 63, 63);
      Node node1 = Node.newNumber((double) (-3));
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(63, 63, 63);
      node0.addChildToBack(node0);
      Node node1 = Node.newNumber(1.0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(1643);
      foldConstants0.tryFoldGetProp((NodeTraversal) null, node0, node0, node0, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-3110), ":0c_", (-3110), 321);
      Node node1 = Node.newString("length");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, syntacticScopeCreator0);
      foldConstants0.tryFoldGetProp(nodeTraversal0, node1, node0, node1, node0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = Node.newString("length");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldGetProp((NodeTraversal) null, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("lntbh");
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node0, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("", 2958, 2958);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("");
      Node node2 = new Node(5, node1, node0, node0, node0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("FfecT*rH\";");
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
      Node node1 = Node.newString("FfecT*rH\";");
      Node node2 = compiler0.parseTestCode("a");
      Node node3 = new Node(24, node2, node1, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node3, node3);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("FfecT*rH\";");
      Node node1 = new Node(113, 1319, 12);
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
      Node node2 = Node.newString("FfecT*rH\";");
      Node node3 = compiler0.parseTestCode("a");
      Node node4 = new Node(24, node3, node2, node0, node1);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node4, node1);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("FfecTU*rH\"$;");
      Node node1 = new Node(12, 40, 9);
      Compiler compiler0 = new Compiler();
      VarCheck varCheck0 = new VarCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      Node node2 = Node.newString("FfecTU*rH\"$;");
      Node node3 = new Node(19, node2, node1, node1, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node3, node2);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'/9>]a", (-324), (-324));
      Node node1 = new Node(1, 14, 4);
      Node node2 = new Node(32, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = FoldConstants.containsUnicodeEscape(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("SeZQ'K1/_>]a", 1541, 1541);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      Node node0 = new Node(113, 3, 45);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(100, 100, 100);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(115);
      foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
      assertEquals(14, Node.DEFAULT_PROP);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
      Node node0 = Node.newString("rSc{~h7|#8f3,=UYKt", (-3131), (-3131));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString("&vO6h,<6rU0", 44, 44);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("SDZQ'/_>", "VZU5wdj");
      Node node1 = compiler0.parse(jSSourceFile0);
      Node node2 = new Node(114, node0, node1);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(100, 100, 100);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("rSJ{~h7|#8f3,=UYKt", (-3131), (-3131));
      Node node1 = new Node(101, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeCondition((NodeTraversal) null, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString(26, "o@JM`jDY5xIu Dz-", 26, 26);
      Node node1 = new Node(26, node0, node0);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("FfcU*$N;P", 26, 26);
      Node node1 = new Node(26, node0, node0);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1.0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(11, Node.USES_PROP);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(3, 12, 7);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = compiler0.parseTestCode("k>GZQ'/_>8");
      Node node2 = new Node(49, node0, node1, node1, 49, 10);
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node0);
      assertEquals(31, Node.INCRDECR_PROP);
  }
}
