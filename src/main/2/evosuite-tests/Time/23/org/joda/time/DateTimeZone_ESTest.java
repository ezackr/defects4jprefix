/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:33:23 GMT 2024
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone.forOffsetHours(17887500);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone.forOffsetMillis(1);
      DateTimeZone.forOffsetMillis(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      dateTimeZone0.getShortName((-1167L), locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(112);
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeZone0.getShortName((long) 112, locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone.forOffsetHours(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getName(49845248L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.adjustOffset(5106L, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.getOffset((long) 238);
      fixedDateTimeZone0.toString();
      fixedDateTimeZone0.convertUTCToLocal(238);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getShortName(582L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.US;
      dateTimeZone0.getName(152L, locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(137L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC(9223372036854775743L, true, 9223372036854775743L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC((-2881L), true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology.getInstance();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC(977L, false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
      DateTimeZone.setDefault(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone.forOffsetMillis((-130));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone.forOffsetHoursMinutes(Integer.MIN_VALUE, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone.forOffsetHours((-20));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone.getAvailableIDs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone.forID("E/LT");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.isStandardOffset(0L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone.setDefault((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone.getDefault();
      DateTimeZone.getDefault();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone.setProvider(provider0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(2053L, dateTimeZone0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone.forOffsetHoursMinutes(564, 564);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone.forID("UTC");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 10800000L);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.adjustOffset(49349744L, true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeZone1.UTC.isFixed();
      Locale locale0 = Locale.ENGLISH;
      dateTimeZone0.UTC.getNameKey((-172L));
      dateTimeZone0.getOffsetFromLocal((-172L));
      dateTimeZone0.getShortName((long) (-28800000));
      dateTimeZone1.nextTransition((-172L));
      DateTimeZone.getDefault();
      Integer integer0 = new Integer((-28800000));
      DateTimeZone.forID("-08:00");
      LocalDateTime localDateTime0 = new LocalDateTime(9972000000L, dateTimeZone1);
      dateTimeZone1.isLocalDateTimeGap(localDateTime0);
      dateTimeZone0.getStandardOffset(886L);
      dateTimeZone1.previousTransition(3600768L);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, (-1L));
      Locale locale0 = Locale.CANADA_FRENCH;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getOffsetFromLocal(581L);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1753);
      dateTimeZone0.getName((long) 1753);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("EET");
      dateTimeZone0.getOffsetFromLocal(2052L);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("EET");
      dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 58);
      DateTimeZone.setDefault(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone.forID((String) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone.forID("+vV=w|\"8pC*B&iq9");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("EET");
      dateTimeZone0.getOffsetFromLocal((-9223372036854775780L));
      dateTimeZone0.convertLocalToUTC((-9223372036854775780L), false);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone.forID("+00:06");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone.forID("-EAT");
      Locale locale0 = Locale.GERMAN;
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(567, "Fk|;Bn;ga;");
      DateTimeZone.forTimeZone(simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC(9223372036854775743L, false);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC(9223372036854775743L, true);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getAvailableIDs();
      DateTimeZone.setProvider(uTCProvider0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(53, "AET");
      ZoneId zoneId0 = simpleTimeZone0.toZoneId();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.UTC.getOffset((ReadableInstant) null);
      DateTimeZone.setDefault(fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone.forID("+00:00");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone.getDefault();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(137L);
      dateTimeZone0.UTC.getOffset((ReadableInstant) dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.adjustOffset((-9223372036829575809L), true);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone.forTimeZone((TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone.forOffsetMillis(1000);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.isStandardOffset((-766623600001L));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Calcutta");
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getOffsetFromLocal(9223372036854775782L);
  }
}
