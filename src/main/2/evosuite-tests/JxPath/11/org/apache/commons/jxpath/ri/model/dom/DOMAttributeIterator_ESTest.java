/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 10:16:55 GMT 2024
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator;
import org.apache.html.dom.HTMLAppletElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLHtmlElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLGoElementImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMAttributeIterator_ESTest extends DOMAttributeIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QName qName0 = new QName("org.apache.wmlhdom.WMInputElemetmpl", "org.apache.wmlhdom.WMInputElemetmpl");
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(pSVIDocumentImpl0, "org.apache.wmlhdom.WMInputElemetmpl");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLGoElementImpl wMLGoElementImpl0 = new WMLGoElementImpl(wMLDocumentImpl0, "org.apache.wmlhdom.WMInputElemetmpl");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, wMLGoElementImpl0);
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName0);
      int int0 = dOMAttributeIterator0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      QName qName0 = new QName("xmlns");
      QName qName1 = new QName("*", "*");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "cols", "xmlns", "xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, pSVIElementNSImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      NodePointer nodePointer1 = nodePointer0.createAttribute(jXPathContext0, qName0);
      assertNotNull(nodePointer1);
      
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName1);
      assertEquals(0, dOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("xmlns", "xmlns");
      QName qName1 = new QName("xmlns", "xn[4");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHtmlElementImpl hTMLHtmlElementImpl0 = new HTMLHtmlElementImpl(hTMLDocumentImpl0, "xn[4");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLHtmlElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "xn[4");
      NodePointer nodePointer1 = nodePointer0.createAttribute(jXPathContext0, qName0);
      assertNotNull(nodePointer1);
      
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName1);
      assertEquals(0, dOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("xmns");
      QName qName1 = new QName("xmlns", "xmns");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHtmlElementImpl hTMLHtmlElementImpl0 = new HTMLHtmlElementImpl(hTMLDocumentImpl0, "xmns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLHtmlElementImpl0, locale0);
      hTMLHtmlElementImpl0.setVersion("http://www.w3.org/XML/1998/namespace");
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName1);
      assertEquals(0, dOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("xmns");
      QName qName1 = new QName("xmlns", "xmns");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/elliottzackrone/.sdkman/candidates/java/8.0.382-amzn/jre/lib/jxpath.properties");
      HTMLHtmlElementImpl hTMLHtmlElementImpl0 = new HTMLHtmlElementImpl(hTMLDocumentImpl0, "xmns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLHtmlElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) evoSuiteFile0);
      nodePointer0.createAttribute(jXPathContext0, qName0);
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName1);
      assertEquals(0, dOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      QName qName0 = new QName("*");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "*");
      hTMLAppletElementImpl0.setVspace("*");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLAppletElementImpl0, locale0);
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName0);
      assertEquals(0, dOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("ECut");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "ECut");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLAppletElementImpl0, locale0);
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName0);
      assertEquals(0, dOMAttributeIterator0.getPosition());
      
      dOMAttributeIterator0.getNodePointer();
      assertEquals(1, dOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("ECut");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "ECut");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLAppletElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "ECut");
      nodePointer0.createAttribute(jXPathContext0, qName0);
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName0);
      NodePointer nodePointer1 = dOMAttributeIterator0.getNodePointer();
      assertEquals(0, dOMAttributeIterator0.getPosition());
      assertNotNull(nodePointer1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QName qName0 = new QName("H");
      Locale locale0 = Locale.FRENCH;
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(pSVIDocumentImpl0, "H");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, documentTypeImpl0, locale0);
      DOMAttributeIterator dOMAttributeIterator0 = new DOMAttributeIterator(nodePointer0, qName0);
      boolean boolean0 = dOMAttributeIterator0.setPosition(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, dOMAttributeIterator0.getPosition());
      assertFalse(boolean0);
  }
}
