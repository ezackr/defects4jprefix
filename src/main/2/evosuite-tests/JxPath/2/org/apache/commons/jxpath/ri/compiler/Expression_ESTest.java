/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 09:36:49 GMT 2024
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Expression_ESTest extends Expression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.JAPANESE;
      Expression.PointerIterator expression_PointerIterator0 = new Expression.PointerIterator(unionContext0, qName0, locale0);
      // Undeclared exception!
      try { 
        expression_PointerIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      QName qName0 = new QName((String) null, (String) null);
      Locale locale0 = Locale.JAPANESE;
      Expression.PointerIterator expression_PointerIterator0 = new Expression.PointerIterator(unionContext0, qName0, locale0);
      // Undeclared exception!
      try { 
        expression_PointerIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator(iterator0);
      // Undeclared exception!
      try { 
        expression_ValueIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression$ValueIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator(iterator0);
      boolean boolean0 = expression_ValueIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      boolean boolean0 = coreOperationGreaterThanOrEqual0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) iterator0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("0", "RZkupl8*[e[QqCa");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      Iterator iterator1 = constant0.iteratePointers(rootContext0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Iterator iterator0 = constant0.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{!z,}k");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      ChildContext childContext0 = new ChildContext(ancestorContext0, processingInstructionTest0, false, false);
      Iterator iterator0 = coreOperationNotEqual0.iterate(childContext0);
      QName qName0 = new QName("{!z,}k", "{!z,}k");
      Locale locale0 = Locale.JAPANESE;
      Expression.PointerIterator expression_PointerIterator0 = new Expression.PointerIterator(iterator0, qName0, locale0);
      Expression.PointerIterator expression_PointerIterator1 = new Expression.PointerIterator(expression_PointerIterator0, qName0, locale0);
      BeanPointer beanPointer0 = (BeanPointer)expression_PointerIterator1.next();
      assertFalse(beanPointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator(iterator0);
      Object object0 = expression_ValueIterator0.next();
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) iterator0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("0", "RZkupl8*[e[QqCa");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator(initialContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)expression_ValueIterator0.next();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }
}
