/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:15:54 GMT 2024
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdTypeResolverBuilder_ESTest extends StdTypeResolverBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      stdTypeResolverBuilder0.getDefaultImpl();
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      boolean boolean0 = stdTypeResolverBuilder0.isTypeIdVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
      
      stdTypeResolverBuilder0.typeIdVisibility(true);
      assertTrue(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      stdTypeResolverBuilder0.getTypeProperty();
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.init((JsonTypeInfo.Id) null, classNameIdResolver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // idType can not be null
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Stack<NamedType> stack0 = new Stack<NamedType>();
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not build, 'init()' not yet called
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
      stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, hashSet0);
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
      stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, linkedHashSet0);
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
      Class<Void> class0 = Void.class;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.defaultImpl(class0);
      stdTypeResolverBuilder1.init(jsonTypeInfo_Id0, classNameIdResolver0);
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, (Collection<NamedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Class<String> class0 = String.class;
      stdTypeResolverBuilder0.defaultImpl(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Stack<NamedType> stack0 = new Stack<NamedType>();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, classNameIdResolver0);
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      stdTypeResolverBuilder0.defaultImpl(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
      stdTypeResolverBuilder1._customIdResolver = (TypeIdResolver) classNameIdResolver0;
      Stack<NamedType> stack0 = new Stack<NamedType>();
      stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.inclusion((JsonTypeInfo.As) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeAs can not be null
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.typeProperty((String) null);
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.typeProperty("");
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.typeProperty(" _.]syFz7%MT`DON");
      assertFalse(stdTypeResolverBuilder1.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
      LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
      LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
      stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
      LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
      stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, (JavaType) null, hashSet0, false, false);
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
      stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
      LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
      // Undeclared exception!
      try { 
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Do not know how to construct standard type id resolver for idType: CUSTOM
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }
}
