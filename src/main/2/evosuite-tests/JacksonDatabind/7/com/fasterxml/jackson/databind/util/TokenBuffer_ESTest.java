/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:17:23 GMT 2024
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DateFormat;
import java.util.Stack;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeString((SerializableString) null);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      String string0 = tokenBuffer0.toString();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals("[TokenBuffer: ]", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Byte byte0 = new Byte((byte)86);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeObject(serializedString0);
      tokenBuffer0.toString();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Segment0.append(6, jsonToken0, (Object) bigInteger0, (Object) tokenBuffer0, (Object) tokenBuffer1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getEmbeddedObject();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      Short short0 = new Short((short)1547);
      tokenBuffer_Segment0.append(6, jsonToken0, (Object) jsonGenerator_Feature0, (Object) short0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      tokenBuffer_Parser0.getObjectId();
      tokenBuffer_Segment0.append(927, jsonToken0, (Object) fileSystemHandling0, (Object) null);
      tokenBuffer_Parser0.getValueAsString();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeStringField("", "");
      tokenBuffer0.writeEndObject();
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.FIELD_NAME, jsonToken0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      Byte byte0 = new Byte((byte)86);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeObject(serializedString0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.toString();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
      assertEquals(JsonToken.START_OBJECT, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, 2510, (-707));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer0.writeEndObject();
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, (int) (byte)23, (-1810));
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer0._appendRaw(16, tokenBuffer_Parser0);
      tokenBuffer0.writeEndObject();
      try { 
        tokenBuffer0.writeObject(tokenBuffer_Parser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer0._appendRaw(16, tokenBuffer_Parser0);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper1.reader(class0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      ObjectReader objectReader2 = objectReader1.with(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader2, true, true);
      objectMapper0.addMixInAnnotations(class0, class0);
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer_Parser0.version();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      tokenBuffer_Parser0.overrideCurrentName("");
      boolean boolean0 = tokenBuffer_Parser0.isClosed();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(boolean0);
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer2.writeNumber((short)3);
      tokenBuffer2.writeFieldName("}Fks{,-}\"j");
      tokenBuffer1.version();
      tokenBuffer_Segment0.next();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      tokenBuffer0._append(jsonToken0);
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Short short0 = new Short((short) (-971));
      tokenBuffer0.writeObject(short0);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT]", string0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      objectMapper0.addMixInAnnotations(class0, class1);
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer_Parser0.version();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer2.writeEndObject();
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues((InjectableValues) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, false, true);
      tokenBuffer_Parser0.overrideCurrentName("");
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getValueAsLong(0L);
      tokenBuffer_Parser0.hasTextCharacters();
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      treeMap0.descendingMap();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-2497), (-2454), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2497
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      int int0 = tokenBuffer0.getFeatureMask();
      assertEquals(79, int0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      tokenBuffer1.toString();
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer0.writeNumber(bigInteger0);
      int int0 = tokenBuffer_Segment0.rawType(2169);
      assertEquals(0, int0);
      
      tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.next();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.setCodec((ObjectCodec) null);
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getCurrentLocation();
      assertNotNull(jsonLocation0);
      
      tokenBuffer0.toString();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeString((SerializableString) null);
      // Undeclared exception!
      try { 
        tokenBuffer0._reportUnsupportedOperation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      char[] charArray0 = new char[2];
      tokenBuffer_Parser0.getTextCharacters();
      charArray0[0] = 'D';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 16, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
      tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      SerializedString serializedString0 = new SerializedString("g");
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.close();
      boolean boolean0 = true;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
      int int0 = (-2275);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-2275), 2300, (Object) tokenBuffer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2275
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.close();
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      int int0 = tokenBuffer1.getFeatureMask();
      assertEquals(79, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer1.writeNumber(bigInteger0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer0._appendRaw(16, tokenBuffer_Parser0);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Parser0.getEmbeddedObject();
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, int0);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Short short0 = new Short((short) (-985));
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(3864, 3864, (Object) short0, (Object) short0, (Object) null);
      tokenBuffer_Segment1.next();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.setFeatureMask(9);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer0._appendRaw(16, tokenBuffer_Parser0);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer0.firstToken();
      assertEquals(9, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2300, 2300, (Object) objectMapper0);
      tokenBuffer_Segment1.append(16, jsonToken0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat(dateFormat0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      int int0 = 0;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      String string0 = "RD+cXu]7bqg";
      try { 
        Long.valueOf("RD+cXu]7bqg", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeString((SerializableString) null);
      tokenBuffer0.writeEndObject();
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.VALUE_NULL, jsonToken0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeStartArray((-936));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer1.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      Byte byte0 = new Byte((byte)86);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Double double0 = new Double((-430.3));
      tokenBuffer0.writeObject(double0);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_FLOAT]", string0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      objectMapper0.setSerializerFactory(beanSerializerFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-138), (-138), (Object) tokenBuffer_Parser0, (Object) beanSerializerFactory0, (Object) objectMapper0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -138
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(mapperFeature0, false);
      Class<Double> class0 = Double.class;
      ObjectReader objectReader0 = objectMapper2.readerWithView(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.flush();
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = 'n';
      int int0 = 0;
      tokenBuffer0.writeString(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 0, (-213));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0._appendRaw(16, objectMapper0);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Parser0.getTypeId();
      tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Object object0 = tokenBuffer_Segment0.findTypeId(2822);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      Short short0 = new Short((short) (-2616));
      tokenBuffer0.writeObject(jsonEncoding0);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_STRING]", string0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      SerializedString serializedString0 = new SerializedString("No ObjectCodec defined");
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Byte byte0 = new Byte((byte) (-19));
      tokenBuffer_Segment0.appendRaw(2001, 2001, (Object) byte0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      tokenBuffer_Parser0.isClosed();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, true);
      tokenBuffer0.writeEndArray();
      tokenBuffer0.getFeatureMask();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      NullNode nullNode0 = NullNode.getInstance();
      objectMapper1.writeTree((JsonGenerator) tokenBuffer0, (TreeNode) nullNode0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-69);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("JSON");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Float float0 = new Float((double) 16);
      ValueNode valueNode0 = arrayNode0.numberNode(float0);
      tokenBuffer0.writeTree(valueNode0);
      tokenBuffer0.getOutputContext();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      try { 
        tokenBuffer_Parser0._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Class<String> class0 = String.class;
      objectMapper0.addMixInAnnotations(class0, class0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.firstToken();
      tokenBuffer_Segment0.findTypeId(1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      int int0 = tokenBuffer_Parser0.getTextOffset();
      assertEquals(0, int0);
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '}';
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Byte byte0 = new Byte((byte)97);
      tokenBuffer0.writeObject(byte0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      tokenBuffer0.getOutputTarget();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Segment0.append(79, jsonToken0, (Object) jsonToken0, (Object) null, (Object) bigInteger0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonParser jsonParser0 = jsonFactory2.createParser("), expected ");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte[] byteArray0 = new byte[0];
      int int0 = (-648);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (-648), (-648));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Object object0 = tokenBuffer_Segment0.findObjectId((-1349));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      jsonParser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeEndObject();
      Float float0 = new Float(0.0);
      tokenBuffer0.writeObjectId(float0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer1.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      boolean boolean0 = true;
      boolean boolean1 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.asParser((JsonParser) jsonParserDelegate0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Float float0 = new Float((-3663.8932577174987));
      Object object0 = new Object();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      Float float1 = new Float(1910.214);
      Float float2 = new Float(0.75F);
      ObjectNode objectNode1 = objectNode0.put("JSON", float2);
      objectNode1.putObject((String) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeTree(arrayNode0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'T';
      charArray0[2] = 'c';
      charArray0[3] = '^';
      charArray0[4] = ';';
      charArray0[5] = ':';
      charArray0[6] = '^';
      charArray0[7] = '&';
      charArray0[8] = 'j';
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      tokenBuffer_Parser0.overrideCurrentName("lfZMRw!@vH_xttd0d");
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.writeEndObject();
      // Undeclared exception!
      try { 
        tokenBuffer2.copyCurrentEvent(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigDecimal bigDecimal0 = new BigDecimal((-2549L));
      tokenBuffer0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("S'C{Xrh@6Ua^hj");
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator((String) null);
      PipedReader pipedReader0 = new PipedReader(69);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeTypeId("a`{m %");
      tokenBuffer_Parser0.getValueAsDouble((double) 16);
      tokenBuffer0.writeNumber((String) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer0.append(tokenBuffer1);
      tokenBuffer_Parser0.nextToken();
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeTypeId(tokenBuffer0);
      tokenBuffer0.writeNumber((String) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.append(tokenBuffer1);
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser1.configure(jsonParser_Feature0, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeEndObject();
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0);
      Double double0 = new Double(16);
      tokenBuffer3.writeTypeId(double0);
      tokenBuffer0.writeNumber("Can not pass member of type ");
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Can not pass member of type \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNumber("com.fasterxml.jackson.databind.deser.BeanDeserializerModifier");
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      int int0 = tokenBuffer1.getFeatureMask();
      assertEquals(79, int0);
      
      Object object0 = new Object();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getObjectId();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(79, jsonToken0, (Object) objectMapper0, (Object) jsonEncoding0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      tokenBuffer_Parser1.configure(jsonParser_Feature0, false);
      tokenBuffer_Parser0.getParsingContext();
      tokenBuffer_Parser0.getCurrentLocation();
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      boolean boolean1 = true;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer1.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        tokenBuffer0.append(tokenBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Short short0 = new Short((short) (-971));
      tokenBuffer0.writeObject(short0);
      // Undeclared exception!
      try { 
        tokenBuffer0.append((TokenBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, (-2584), (-2584));
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.useDefaultPrettyPrinter();
      assertEquals(79, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      boolean boolean0 = true;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      boolean boolean1 = false;
      ObjectMapper objectMapper2 = objectMapper1.configure(mapperFeature0, false);
      objectMapper1.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.flush();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      objectMapper0.configure(jsonParser_Feature0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, false, false);
      tokenBuffer_Parser0.getTypeId();
      tokenBuffer0._objectId = null;
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue((String) null, (-2408), 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser1.close();
      assertTrue(tokenBuffer_Parser1.isClosed());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '}';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      Byte byte0 = new Byte((byte)97);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer_Segment0.append(41, jsonToken0);
      tokenBuffer1.writeObject(byte0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getText();
      tokenBuffer_Parser0.getTextOffset();
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      String string0 = "u@:h}>";
      int int0 = 1023;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("u@:h}>", 1023, 1023);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Parser0.getCurrentLocation();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_OBJECT]", string0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeBoolean(false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      PipedReader pipedReader0 = new PipedReader(83);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer1.writeTypeId(objectMapper0);
      tokenBuffer1.writeNumber(" c");
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, true, false);
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      
      tokenBuffer0.writeEndObject();
      Float float0 = new Float(0.0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      tokenBuffer2.writeEndObject();
      assertEquals(JsonToken.END_OBJECT, tokenBuffer2.firstToken());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      tokenBuffer0.writeEndObject();
      Float float0 = new Float((-1.0));
      tokenBuffer0.writeTypeId(jsonParser0);
      assertTrue(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.canReadObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      tokenBuffer2.writeEndObject();
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.getFeatureMask();
      Object object0 = new Object();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser1.getObjectId();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._first;
      Double double0 = new Double(16);
      SerializedString serializedString0 = new SerializedString(" +G.:");
      tokenBuffer_Segment1.append(16, jsonToken0, (Object) double0, (Object) double0, (Object) serializedString0);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParser0);
      tokenBuffer1.writeEndObject();
      Class<Double> class0 = Double.class;
      tokenBuffer_Parser1.readValueAs(class0);
      tokenBuffer2.writeTypeId((Object) null);
      tokenBuffer0.writeNumber(" +G.:");
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      
      tokenBuffer_Segment0.hasIds();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      ObjectCodec objectCodec0 = tokenBuffer1.getCodec();
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(objectCodec0);
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Short short0 = new Short((short) (-1037));
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(3864, 3864, (Object) short0, (Object) short0, (Object) null);
      tokenBuffer_Segment1.next();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      objectMapper0.setNodeFactory(jsonNodeFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      MapperFeature mapperFeature1 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[2] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[3] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[4] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      mapperFeatureArray0[5] = mapperFeature4;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      tokenBuffer_Segment1.append(3864, jsonToken0, (Object) null, (Object) mapperFeature0, (Object) "Can not use Object Id with Builder-based deserialization (type ");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser1.peekNextToken());
      
      tokenBuffer0.writeEndObject();
      Class<Double> class0 = Double.class;
      tokenBuffer_Parser0.readValueAs(class0);
      tokenBuffer0.writeTypeId(mapperFeature0);
      tokenBuffer1.writeNumber((String) null);
      tokenBuffer1.append(tokenBuffer0);
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      ArrayNode arrayNode0 = objectNode0.withArray("OsL>e1J@^@");
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeBoolean(false);
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " FKXPqe/0)R");
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer1.writeNumber(bigDecimal0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(tokenBuffer_Parser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.asParser();
      tokenBuffer0._appendRaw((-1052), tokenBuffer_Segment0);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Parser0.getEmbeddedObject();
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0._closed = false;
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      
      tokenBuffer0._appendRaw(1073, tokenBuffer_Parser0);
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = tokenBuffer0.enable(jsonGenerator_Feature0);
      assertEquals(79, jsonGenerator0.getFeatureMask());
      assertFalse(jsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeString((SerializableString) null);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("Current token (");
      tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('b');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.writeBoolean(true);
      try { 
        tokenBuffer_Parser0._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeStringField("", "");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = false;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      String string0 = "Zu!j^}ojz%_|K5,HQjf";
      tokenBuffer0.writeNumberField("Zu!j^}ojz%_|K5,HQjf", (long) 16);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(boolean1 == boolean0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Byte byte0 = new Byte((byte)97);
      Float float0 = new Float((float) (byte)97);
      tokenBuffer0.writeObject(float0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.peekNextToken();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]D&~&");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer_Parser0.nextToken();
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      ArrayNode arrayNode0 = objectNode0.withArray("OL>e1J@^@");
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeBoolean(false);
      tokenBuffer0.isClosed();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer0.toString();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      Class<Long> class0 = Long.class;
      objectMapper0.addMixInAnnotations(class0, class0);
      tokenBuffer_Segment0._tokenTypes = 1L;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      tokenBuffer_Parser1.version();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0);
      tokenBuffer2.append(tokenBuffer3);
      TokenBuffer tokenBuffer4 = new TokenBuffer(tokenBuffer_Parser1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      tokenBuffer4.disable(jsonGenerator_Feature0);
      TokenBuffer tokenBuffer5 = new TokenBuffer(objectMapper0, true);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer2.enable(jsonGenerator_Feature1);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeEndObject();
      tokenBuffer0.firstToken();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("yQ&EE1*#o|}Pj2X");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.nextTextValue();
      tokenBuffer_Parser0.peekNextToken();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("n.T7o?w1zAMgj~eHc");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (byte) (-33), (byte)20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer0.writeNumberField("Zu!j^}ojz%_|K5,HQjf", (long) 16);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Short short0 = new Short((short) (-985));
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(3864, 3864, (Object) short0, (Object) short0, (Object) null);
      tokenBuffer_Segment1.next();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((BigInteger) null);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      
      int int0 = tokenBuffer_Segment1.rawType((byte)41);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Byte byte0 = new Byte((byte)86);
      Float float0 = new Float((float) (byte)86);
      tokenBuffer0.writeObject(float0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5, jsonToken0, (Object) byte0);
      assertNull(tokenBuffer_Segment1);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.nextToken();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer1.writeObject((Object) null);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigDecimal bigDecimal0 = new BigDecimal((double) 2467);
      tokenBuffer_Segment0.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, true);
      int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeTree((TreeNode) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.asParser();
      tokenBuffer0._appendRaw((-1052), tokenBuffer_Segment0);
      tokenBuffer0.writeEndObject();
      int int0 = tokenBuffer_Segment0.rawType((-1052));
      assertEquals(2, int0);
      
      tokenBuffer_Parser0.getEmbeddedObject();
      int int1 = tokenBuffer_Parser0.getTextLength();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)89;
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      tokenBuffer0.writeTree(binaryNode0);
      tokenBuffer0.writeString((SerializableString) null);
      tokenBuffer0.writeEndObject();
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, jsonToken0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeBoolean(true);
      Class<String> class0 = String.class;
      objectMapper0.addMixInAnnotations(class0, class0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      SerializedString serializedString0 = new SerializedString("g");
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.toString();
      tokenBuffer1.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser1.overrideCurrentName("[TokenBuffer: ]");
      tokenBuffer_Parser0.nextToken();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Short short0 = new Short((short)15);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.appendRaw((int) (short)15, 3256, (Object) null, (Object) null, (Object) null);
      tokenBuffer_Segment0.next();
      ObjectMapper objectMapper1 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0);
      objectMapper0.disableDefaultTyping();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._first;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, false, false);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectReader0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      tokenBuffer_Parser1.configure(jsonParser_Feature0, true);
      tokenBuffer0.writeEndObject();
      Float float0 = new Float((-1.0));
      tokenBuffer1.writeTypeId(jsonParserDelegate0);
      tokenBuffer1.append(tokenBuffer0);
      tokenBuffer1.writeEndObject();
      tokenBuffer1._appendRaw(1755, jsonParserDelegate0);
      assertTrue(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      boolean boolean0 = false;
      tokenBuffer0.writeBoolean(false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("S'C{Xrh@6Ua^hj");
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      PipedReader pipedReader0 = new PipedReader(69);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.append('l');
      try { 
        tokenBuffer_Parser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.getFeatureMask();
      Object object0 = new Object();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getObjectId();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(79, jsonToken0, (Object) objectMapper0, (Object) jsonEncoding0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser1);
      TokenBuffer tokenBuffer3 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer3.writeEndObject();
      tokenBuffer2.writeTypeId((Object) null);
      tokenBuffer0.writeNumber((String) null);
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      jsonGeneratorDelegate0.writeNumberField((String) null, (float) 16);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      boolean boolean0 = false;
      tokenBuffer0.writeBoolean(false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("S'C{Xrh@6Ua^hj");
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      boolean boolean1 = true;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      objectMapper0.registerSubtypes(classArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeStringField("Unrecognized value type for VALUE_NUMBER_FLOAT: ", "' (code ");
      tokenBuffer0.writeEndObject();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory1.disable(jsonParser_Feature0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 12, 8);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer1.append(tokenBuffer0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Integer integer0 = new Integer(399);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(65280, jsonToken0, (Object) integer0, (Object) jsonFactory2);
      tokenBuffer_Segment1.hasIds();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '}';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      Byte byte0 = new Byte((byte)97);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer_Segment0.append(41, jsonToken0);
      tokenBuffer1.writeObject(byte0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getText();
      tokenBuffer_Segment1._tokenTypes = (-2013L);
      tokenBuffer1.serialize(tokenBuffer0);
      tokenBuffer_Parser0.getTextOffset();
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      jsonNodeFactory0.arrayNode();
      Float float0 = new Float(0.0);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = new ObjectNode(jsonNodeFactory0);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectNode objectNode2 = objectNode1.put(":}*,AyU4&%?^", boolean0);
      ObjectNode objectNode3 = objectNode2.putObject("PKKt,A+'B}Cf>3rC");
      Short short0 = new Short((short) (-1691));
      ObjectNode objectNode4 = objectNode3.put("D", short0);
      ArrayNode arrayNode0 = objectNode4.putArray("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader");
      arrayNode0.numberNode(float0);
      tokenBuffer0.writeTree(arrayNode0);
      tokenBuffer0.getOutputContext();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      Float float0 = new Float((float) 7);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer_Segment0.appendRaw(7, 7, (Object) null, (Object) float0, (Object) null);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.getFeatureMask();
      Object object0 = new Object();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser1.getObjectId();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(79, jsonToken0, (Object) objectMapper0, (Object) jsonEncoding0, (Object) null);
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.append((-2053), jsonToken1, (Object) objectMapper0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber((BigDecimal) null);
      SerializedString serializedString0 = new SerializedString("");
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.util.TokenBuffer");
      PipedReader pipedReader0 = new PipedReader(69);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer0.append(tokenBuffer1);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer3 = new TokenBuffer(jsonParser0);
      tokenBuffer3.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      try { 
        tokenBuffer_Parser0._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      objectMapper0.registerSubtypes(classArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeStringField("Unrecognized value type for VALUE_NUMBER_FLOAT: ", "' (code ");
      tokenBuffer0.writeEndObject();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      jsonGeneratorDelegate0.writeNumberField("Unrecognized value type for VALUE_NUMBER_FLOAT: ", 1.0F);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      tokenBuffer_Segment0._tokenTypes = 0L;
      tokenBuffer_Segment0._tokenTypes = 1L;
      tokenBuffer_Segment0.hasIds();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonFactory0.configure(jsonParser_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.USE_GETTERS_AS_SETTERS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[4] = mapperFeature4;
      objectMapper2.enable(mapperFeatureArray0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper4, true, false);
      tokenBuffer_Parser0.nextToken();
      tokenBuffer_Parser0.close();
      System.setCurrentTimeMillis((-1L));
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (START_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer0.writeString((String) null);
      try { 
        tokenBuffer0.writeObject(jsonParserDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not of boolean type
         //  at [Source: java.lang.String@0000000639; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.getFeatureMask();
      Object object0 = new Object();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getObjectId();
      tokenBuffer_Segment0.append(79, jsonToken0, (Object) objectMapper0, (Object) jsonEncoding0, (Object) null);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      objectMapper0.registerSubtypes(classArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeStringField("Unrecognized value type for VALUE_NUMBER_FLOAT: ", "' (code ");
      tokenBuffer0.writeEndObject();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      jsonGeneratorDelegate0.writeNumberField("' (value 0x", 1.0F);
      jsonGeneratorDelegate0.writeStartArray((-418));
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      boolean boolean0 = false;
      tokenBuffer0.writeBoolean(false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      PipedReader pipedReader0 = new PipedReader(83);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0, jsonFactory1);
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParserDelegate0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      Short short0 = new Short((short) (-971));
      Integer integer0 = new Integer(449);
      tokenBuffer0.writeObject(integer0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer0.writeNumber(bigDecimal0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      tokenBuffer0._append(jsonToken0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      PipedReader pipedReader0 = new PipedReader(83);
      jsonFactory1.createParser((Reader) pipedReader0);
      JsonToken jsonToken1 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken1, jsonFactory1);
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
      tokenBuffer_Segment0.appendRaw(8, (-11), (Object) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Short short0 = new Short((short) (-971));
      tokenBuffer0.writeObject(short0);
      tokenBuffer0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, (InputStream) dataInputStream0, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      tokenBuffer_Parser0.nextTextValue();
      tokenBuffer_Parser0.peekNextToken();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      tokenBuffer_Parser0.getCurrentLocation();
      tokenBuffer0.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
