/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:58:51 GMT 2024
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.InputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      JavaType javaType0 = referenceType0.containedTypeOrUnknown(1);
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<HashMap> class0 = HashMap.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isArrayType());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.readerForUpdating(javaType0);
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      JavaType javaType0 = simpleType0.getKeyType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getContentTypeHandler();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = javaType0.getContentValueHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      String string0 = javaType0.getGenericSignature();
      assertEquals("Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      collectionType0.getErasedSignature();
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      arrayType0.getParameterSource();
      assertFalse(arrayType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      JavaType javaType1 = javaType0.forcedNarrowBy(class0);
      assertSame(javaType0, javaType1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withValueHandler(class0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      
      Class<Object> class2 = Object.class;
      JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.hasHandlers());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(typeFactory0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      JavaType javaType0 = collectionLikeType0.forcedNarrowBy(class1);
      assertFalse(javaType0.isConcrete());
      assertTrue(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      boolean boolean0 = javaType0.isTypeOrSubTypeOf(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = javaType0.isTypeOrSubTypeOf(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      Class<Object> class0 = Object.class;
      boolean boolean0 = arrayType0.isTypeOrSubTypeOf(class0);
      assertTrue(boolean0);
      assertFalse(arrayType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      boolean boolean0 = mapLikeType0.isJavaLangObject();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();
      // Undeclared exception!
      try { 
        objectMapper_DefaultTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, arrayDeque0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not build, 'init()' not yet called
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      boolean boolean0 = javaType0.hasGenericTypes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.hasGenericTypes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<String> class0 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[23];
      javaTypeArray0[5] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[5]);
      JavaType javaType1 = referenceType0.containedTypeOrUnknown((-671));
      assertFalse(referenceType0.useStaticType());
      assertNotNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      boolean boolean0 = arrayType0.hasValueHandler();
      assertFalse(boolean0);
      assertFalse(arrayType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) arrayType0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(arrayType0);
      boolean boolean0 = referenceType1.hasValueHandler();
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Integer> class0 = Integer.class;
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) class0, (Object) javaType0);
      boolean boolean0 = arrayType0.hasHandlers();
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertTrue(boolean0);
      assertFalse(javaType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(javaType0);
      boolean boolean0 = arrayType1.hasHandlers();
      assertTrue(boolean0);
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
  }
}
