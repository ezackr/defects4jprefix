/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 22:16:38 GMT 2024
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import java.lang.reflect.Array;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdSubtypeResolver_ESTest extends StdSubtypeResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      NamedType[] namedTypeArray0 = new NamedType[0];
      stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
      stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
      assertEquals(0, namedTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      NamedType[] namedTypeArray0 = new NamedType[1];
      stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
      assertEquals(1, namedTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<JsonEncoding>[] classArray0 = (Class<JsonEncoding>[]) Array.newInstance(Class.class, 0);
      stdSubtypeResolver0.registerSubtypes(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<JsonEncoding>[] classArray0 = (Class<JsonEncoding>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        stdSubtypeResolver0.registerSubtypes(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<Integer> class0 = Integer.TYPE;
      NamedType namedType0 = new NamedType(class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<Integer> class0 = Integer.TYPE;
      NamedType namedType0 = new NamedType(class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      NamedType namedType1 = new NamedType(class0, "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver");
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType1, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<NamedType> class0 = NamedType.class;
      NamedType namedType0 = new NamedType(class0, ":%\u0005hqnUU");
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      assertFalse(hashMap0.isEmpty());
  }
}
