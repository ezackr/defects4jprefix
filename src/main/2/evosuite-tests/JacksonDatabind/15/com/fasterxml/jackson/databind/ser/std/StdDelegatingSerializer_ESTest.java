/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:48:02 GMT 2024
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.lang.reflect.Type;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDelegatingSerializer_ESTest extends StdDelegatingSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Converter<Object, String> converter0 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(converter0).toString();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Object, ?>) converter0);
      Converter<Object, ?> converter1 = stdDelegatingSerializer0.getConverter();
      assertNotNull(converter1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "dxeXu4YdY'[|");
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serializeWithType((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0, asExistingPropertyTypeSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      Converter<DOMSerializer, JsonTypeInfo.Id> converter0 = (Converter<DOMSerializer, JsonTypeInfo.Id>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<DOMSerializer, ?>) converter0);
      JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.getDelegatee();
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Object) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      stdDelegatingSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(stdDelegatingSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
      stdDelegatingSerializer0.resolve((SerializerProvider) null);
      assertFalse(stdDelegatingSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, stdDelegatingSerializer0);
      stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
      assertFalse(stdDelegatingSerializer0.equals((Object)stdDelegatingSerializer1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, (JsonSerializer<?>) null);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, stdDelegatingSerializer0);
      JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      Converter<DOMSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<DOMSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn(coreXMLSerializers_XMLGregorianCalendarSerializer0).when(converter0).convert(any(com.fasterxml.jackson.databind.ext.DOMSerializer.class));
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<DOMSerializer, ?>) converter0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize((Object) null, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter<JsonTypeInfo.Id, Integer> converter0 = (Converter<JsonTypeInfo.Id, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any(com.fasterxml.jackson.annotation.JsonTypeInfo.Id.class));
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize(locale0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, (JsonSerializer<?>) null);
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0, true);
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0, true);
      assertNull(jsonNode0);
  }
}
