/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:25:15 GMT 2024
 */
package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.BitSet;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Integer> class0 = Integer.class;
        TypeToken<Integer> typeToken0 = TypeToken.get(class0);
        Gson gson0 = new Gson();
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUILDER_FACTORY;
        TypeAdapter<Integer> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
        TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
        typeAdapterFactory1.equals((Object) typeAdapterFactory0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Gson gson0 = new Gson();
        String string0 = gson0.toString();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Gson gson0 = new Gson();
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) "S{<qK]KF*_(GEXE':");
        jsonPrimitive0.isNumber();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Gson gson0 = new Gson();
        TypeToken<Integer> typeToken0 = TypeToken.get(class0);
        TypeAdapter<Integer> typeAdapter0 = gson0.getAdapter(typeToken0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Integer>) class0, (TypeAdapter<? super Integer>) typeAdapter0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Gson gson0 = new Gson();
        Class<StringBuilder> class0 = StringBuilder.class;
        TypeAdapter<StringBuilder> typeAdapter0 = gson0.getAdapter(class0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Gson gson0 = new Gson();
        Long long0 = new Long(11L);
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) long0);
        jsonPrimitive0.isBoolean();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Gson gson0 = new Gson();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
        Class<JsonArray> class0 = JsonArray.class;
        gson0.fromJson(jsonElement0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Gson gson0 = new Gson();
        Short short0 = new Short((short) (-2656));
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) short0);
        jsonPrimitive0.isNumber();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Gson gson0 = new Gson();
        Byte byte0 = new Byte((byte) (-40));
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) byte0);
        jsonPrimitive0.isNumber();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        Gson gson0 = new Gson();
        gson0.toJsonTree((Object) class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Gson gson0 = new Gson();
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = charset0.encode("mNbgPb");
        BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
        JsonArray jsonArray0 = (JsonArray) gson0.toJsonTree((Object) bitSet0);
        jsonArray0.size();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Gson gson0 = new Gson();
        Class<Boolean> class0 = Boolean.TYPE;
        gson0.fromJson("DOsfu=Ll?uay51", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Gson gson0 = new Gson();
        Class<Boolean> class0 = Boolean.TYPE;
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        Float float0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Gson gson0 = new Gson();
        JsonObject jsonObject0 = new JsonObject();
        Class<Boolean> class0 = Boolean.TYPE;
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Gson gson0 = new Gson();
        Class<Boolean> class0 = Boolean.TYPE;
        JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
        jsonElement0.isJsonNull();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Gson gson0 = new Gson();
        Class<Byte> class0 = Byte.TYPE;
        gson0.fromJson("'w3)#\"=Cd", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Gson gson0 = new Gson();
        Class<Byte> class0 = Byte.TYPE;
        String string0 = gson0.fromJson("null", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Gson gson0 = new Gson();
        Class<Short> class0 = Short.TYPE;
        gson0.fromJson("S{<qK]KF*_(GEXE':", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Gson gson0 = new Gson();
        JsonObject jsonObject0 = new JsonObject();
        Class<Integer> class0 = Integer.TYPE;
        gson0.fromJson((JsonElement) jsonObject0, class0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Gson gson0 = new Gson();
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        Class<Integer> class0 = Integer.TYPE;
        Integer integer0 = gson0.fromJson((JsonElement) jsonNull0, class0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Gson gson0 = new Gson();
        Class<Long> class0 = Long.TYPE;
        gson0.fromJson("S.;iCYLA$3", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Gson gson0 = new Gson();
        Class<Long> class0 = Long.TYPE;
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        Float float0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Gson gson0 = new Gson();
        Class<Character> class0 = Character.TYPE;
        gson0.fromJson("kv{Cg)P`J$2(D", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Gson gson0 = new Gson();
        Class<Character> class0 = Character.TYPE;
        String string0 = gson0.fromJson("null", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Gson gson0 = new Gson();
        Class<Character> class0 = Character.TYPE;
        gson0.fromJson("S{<qK]KF*_(GEXE':", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Gson gson0 = new Gson();
        Character character0 = new Character('&');
        JsonElement jsonElement0 = gson0.toJsonTree((Object) character0);
        jsonElement0.isJsonPrimitive();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Gson gson0 = new Gson();
        Class<Character> class0 = Character.TYPE;
        JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
        jsonElement0.isJsonPrimitive();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Gson gson0 = new Gson();
        Boolean boolean0 = Boolean.valueOf(true);
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
        Class<String> class0 = String.class;
        String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Gson gson0 = new Gson();
        Class<String> class0 = String.class;
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        String string0 = gson0.fromJson((JsonElement) jsonNull0, class0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Gson gson0 = new Gson();
        JsonObject jsonObject0 = new JsonObject();
        Class<String> class0 = String.class;
        gson0.fromJson((JsonElement) jsonObject0, class0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        Gson gson0 = new Gson();
        gson0.fromJson("lEBf[)0U;$", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Gson gson0 = new Gson();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
        Class<StringBuilder> class0 = StringBuilder.class;
        StringBuffer stringBuffer0 = gson0.fromJson(jsonElement0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Gson gson0 = new Gson();
        StringBuilder stringBuilder0 = new StringBuilder();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuilder0);
        jsonElement0.isJsonPrimitive();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        Gson gson0 = new Gson();
        String string0 = gson0.toJson((Object) null, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Gson gson0 = new Gson();
        StringBuffer stringBuffer0 = new StringBuffer();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
        jsonElement0.isJsonPrimitive();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Gson gson0 = new Gson();
        Class<URL> class0 = URL.class;
        gson0.fromJson("t`ZN,X$8{PkQzO0", class0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Gson gson0 = new Gson();
        Class<URL> class0 = URL.class;
        URL uRL0 = gson0.fromJson("null", class0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Gson gson0 = new Gson();
        URL uRL0 = MockURL.getFtpExample();
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) uRL0);
        jsonPrimitive0.isString();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Gson gson0 = new Gson();
        URI uRI0 = MockURI.aFileURI;
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) uRI0);
        jsonPrimitive0.isBoolean();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Gson gson0 = new Gson();
        Class<InetAddress> class0 = InetAddress.class;
        Inet4Address inet4Address0 = (Inet4Address) gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$2", class0);
        inet4Address0.isLinkLocalAddress();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Gson gson0 = new Gson();
        Class<InetAddress> class0 = InetAddress.class;
        JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
        jsonElement0.isJsonNull();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Gson gson0 = new Gson();
        Class<UUID> class0 = UUID.class;
        gson0.fromJson("'3Aeom", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Gson gson0 = new Gson();
        UUID uUID0 = MockUUID.randomUUID();
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) uUID0);
        jsonPrimitive0.isNumber();
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        Gson gson0 = new Gson();
        Class<UUID> class1 = UUID.class;
        TypeToken<UUID> typeToken0 = TypeToken.get(class1);
        TypeAdapter<UUID> typeAdapter0 = gson0.getAdapter(typeToken0);
        TypeAdapterRuntimeTypeWrapper<UUID> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<UUID>(gson0, typeAdapter0, class0);
        JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree((UUID) null);
        jsonElement0.isJsonArray();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Gson gson0 = new Gson();
        Class<GregorianCalendar> class0 = GregorianCalendar.class;
        gson0.fromJson(". Forgot to register a type adapter?", class0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Gson gson0 = new Gson();
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        Class<Calendar> class0 = Calendar.class;
        Calendar calendar0 = gson0.fromJson((JsonElement) jsonNull0, class0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Gson gson0 = new Gson();
        JsonObject jsonObject0 = new JsonObject();
        Double double0 = new Double(0.0);
        jsonObject0.addProperty("7<;P+YbK91c<r", (Number) double0);
        Class<Calendar> class0 = Calendar.class;
        Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Gson gson0 = new Gson();
        StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$4");
        Class<Locale> class0 = Locale.class;
        Locale locale0 = gson0.fromJson((Reader) stringReader0, class0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Gson gson0 = new Gson();
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        Class<Locale> class0 = Locale.class;
        Locale locale0 = gson0.fromJson((JsonElement) jsonNull0, class0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Gson gson0 = new Gson();
        Locale locale0 = Locale.US;
        JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
        jsonElement0.isJsonPrimitive();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Gson gson0 = new Gson();
        String string0 = gson0.toJson((JsonElement) null);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Gson gson0 = new Gson();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
        JsonElement jsonElement1 = gson0.toJsonTree((Object) jsonElement0);
        jsonElement1.equals((Object) jsonElement0);
    }
}
