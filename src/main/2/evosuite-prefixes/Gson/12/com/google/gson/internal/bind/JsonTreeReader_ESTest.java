/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:58:59 GMT 2024
 */
package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.internal.bind.JsonTreeReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonTreeReader_ESTest extends JsonTreeReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.close();
        jsonTreeReader0.endArray();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
        jsonTreeReader0.promoteNameToValue();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        boolean boolean0 = jsonTreeReader0.hasNext();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonObject jsonObject0 = new JsonObject();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
        jsonTreeReader0.beginObject();
        jsonTreeReader0.endObject();
        jsonTreeReader0.isLenient();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonObject jsonObject0 = new JsonObject();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
        jsonObject0.addProperty(",>O^ ;g&=", (Character) null);
        jsonTreeReader0.beginObject();
        jsonTreeReader0.skipValue();
        jsonTreeReader0.endObject();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
        String string0 = jsonTreeReader0.toString();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        jsonArray0.add((JsonElement) jsonArray0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        jsonTreeReader0.skipValue();
        jsonTreeReader0.endArray();
        jsonTreeReader0.isLenient();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        jsonArray0.add((JsonElement) jsonArray0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.skipValue();
        jsonTreeReader0.endArray();
        jsonTreeReader0.isLenient();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JsonObject jsonObject0 = new JsonObject();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
        jsonTreeReader0.beginObject();
        boolean boolean0 = jsonTreeReader0.hasNext();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        boolean boolean0 = jsonTreeReader0.hasNext();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
        jsonTreeReader0.nextNull();
        jsonTreeReader0.nextLong();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        Boolean boolean0 = new Boolean(true);
        jsonArray0.add(boolean0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        boolean boolean1 = jsonTreeReader0.nextBoolean();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Short short0 = new Short((short) (-1209));
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(short0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        String string0 = jsonTreeReader0.nextString();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.endObject();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        Character character0 = new Character('d');
        jsonArray0.add(character0);
        jsonTreeReader0.beginArray();
        String string0 = jsonTreeReader0.nextString();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.nextString();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Boolean boolean0 = Boolean.TRUE;
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        boolean boolean1 = jsonTreeReader0.nextBoolean();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        jsonArray0.add((String) null);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        jsonTreeReader0.nextNull();
        jsonTreeReader0.isLenient();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Double double0 = new Double(485.818447);
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        double double1 = jsonTreeReader0.nextDouble();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive("1");
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        jsonTreeReader0.setLenient(true);
        double double0 = jsonTreeReader0.nextDouble();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive("NaN");
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        jsonTreeReader0.nextDouble();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive("Infinity");
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        jsonTreeReader0.nextDouble();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        jsonArray0.add("9");
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        double double0 = jsonTreeReader0.nextDouble();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Short short0 = new Short((short) (-1198));
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(short0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        long long0 = jsonTreeReader0.nextLong();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        Character character0 = new Character('8');
        jsonArray0.add(character0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        long long0 = jsonTreeReader0.nextLong();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        Integer integer0 = new Integer(0);
        jsonArray0.add((Number) integer0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        int int0 = jsonTreeReader0.nextInt();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive("1");
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
        int int0 = jsonTreeReader0.nextInt();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        JsonObject jsonObject0 = new JsonObject();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
        jsonTreeReader0.nextInt();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        jsonArray0.add((JsonElement) jsonArray0);
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.beginArray();
        jsonTreeReader0.nextDouble();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        JsonObject jsonObject0 = new JsonObject();
        JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
        jsonTreeReader0.beginObject();
        jsonTreeReader0.nextInt();
    }
}
