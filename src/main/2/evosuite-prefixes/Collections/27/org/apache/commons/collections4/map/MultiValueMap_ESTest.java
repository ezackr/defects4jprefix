/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:30:39 GMT 2024
 */
package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) multiValueMap0.iterator();
        ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("`eXBV");
        BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("org.apache.commons.collections4.iterators.EmptyIterator", constantFactory0, biFunction0);
        boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
        multiValueMap0.size();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) multiValueMap0.iterator();
        ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("`eXBV");
        BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("org.apache.commons.collections4.iterators.EmptyIterator", constantFactory0, biFunction0);
        boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        multiValueMap0.clear();
        multiValueMap0.size();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
        MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
        Collection<Object> collection0 = multiValueMap1.values();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
        MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
        Collection<Object> collection0 = multiValueMap1.values();
        boolean boolean0 = multiValueMap0.putAll((ArrayList<String>) null, collection0);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
        MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
        MultiValueMap<Object, Collection<String>> multiValueMap2 = new MultiValueMap<Object, Collection<String>>();
        multiValueMap2.putIfAbsent(multiValueMap1, (Object) null);
        multiValueMap2.iterator((Object) multiValueMap0);
        multiValueMap2.isEmpty();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
        Integer integer0 = new Integer((-2));
        BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge(integer0, integer0, biFunction0);
        ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
        MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
        multiValueMap1.totalSize();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        HashMap<MultiValueMap<Object, Object>, Object> hashMap0 = new HashMap<MultiValueMap<Object, Object>, Object>();
        MultiValueMap.multiValueMap((Map<MultiValueMap<Object, Object>, ? super LinkedList<HashMap<String, Integer>>>) hashMap0, (Factory<LinkedList<HashMap<String, Integer>>>) null);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
        MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
        boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) multiValueMap0.iterator();
        multiValueMap0.put("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
        multiValueMap0.size();
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) multiValueMap0.iterator();
        multiValueMap0.put("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
        boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) multiValueMap0.iterator();
        ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("`eXBV");
        BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("org.apache.commons.collections4.iterators.EmptyIterator", constantFactory0, biFunction0);
        multiValueMap0.put("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
        boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
        multiValueMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) multiValueMap0.iterator();
        ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("`eXBV");
        BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("org.apache.commons.collections4.iterators.EmptyIterator", constantFactory0, biFunction0);
        multiValueMap0.put("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
        boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.iterators.EmptyIterator", iterator0);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        multiValueMap0.putIfAbsent(arrayList0, arrayList0);
        ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
        boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1);
        multiValueMap0.size();
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        multiValueMap0.putIfAbsent(arrayList0, arrayList0);
        ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
        boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1);
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        MultiValueMap<String, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) multiValueMap0);
        multiValueMap1.putIfAbsent("", "");
        boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
        multiValueMap1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        MultiValueMap<String, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) multiValueMap0);
        multiValueMap1.putIfAbsent("", "");
        boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("", "", biFunction0);
        MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
        multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
        multiValueMap0.size();
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("", "", biFunction0);
        MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
        multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
        multiValueMap1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
        HashMap<ArrayList<Object>, Integer> hashMap0 = new HashMap<ArrayList<Object>, Integer>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>(1);
        Integer integer0 = new Integer(1);
        hashMap0.put(arrayList0, integer0);
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        multiValueMap0.size();
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<String>>();
        Collection<Object> collection0 = multiValueMap0.values();
        Collection<Object> collection1 = multiValueMap0.values();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
        MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap1.merge("", "", biFunction0);
        boolean boolean0 = multiValueMap1.containsValue((Object) "", (Object) multiValueMap0);
        multiValueMap1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
        MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap1.merge("", "", biFunction0);
        boolean boolean0 = multiValueMap1.containsValue((Object) "", (Object) multiValueMap0);
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String>();
        boolean boolean0 = multiValueMap0.containsValue((Object) "?iw%7nlE.w{DBFk|", (Object) "?iw%7nlE.w{DBFk|");
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("", "", biFunction0);
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>>((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
        boolean boolean0 = multiValueMap1.containsValue((Object) "", (Object) "");
        multiValueMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("", "", biFunction0);
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>>((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
        boolean boolean0 = multiValueMap1.containsValue((Object) "", (Object) "");
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        MultiValueMap<ArrayList<Collection<String>>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<String>>, LinkedList<Object>>();
        ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
        Object object0 = multiValueMap0.put(arrayList0, arrayList0);
        MultiValueMap<ArrayList<Collection<String>>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<String>>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
        int int0 = multiValueMap1.size(object0);
        multiValueMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        MultiValueMap<ArrayList<Collection<String>>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<String>>, LinkedList<Object>>();
        ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
        Object object0 = multiValueMap0.put(arrayList0, arrayList0);
        MultiValueMap<ArrayList<Collection<String>>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<String>>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
        int int0 = multiValueMap1.size(object0);
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
        MultiValueMap<LinkedList<Object>, String> multiValueMap1 = new MultiValueMap<LinkedList<Object>, String>();
        int int0 = multiValueMap1.size((Object) multiValueMap0);
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
        boolean boolean0 = multiValueMap0.putAll((Collection<Object>) null, (Collection<Object>) null);
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
        ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
        multiValueMap0.putIfAbsent(arrayList1, constantFactory0);
        arrayList0.add(arrayList1);
        boolean boolean0 = multiValueMap0.putAll((Collection<Object>) arrayList1, (Collection<ArrayList<Object>>) arrayList0);
        arrayList0.size();
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
        ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
        multiValueMap0.putIfAbsent(arrayList1, constantFactory0);
        arrayList0.add(arrayList1);
        boolean boolean0 = multiValueMap0.putAll((Collection<Object>) arrayList1, (Collection<ArrayList<Object>>) arrayList0);
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
        MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
        Iterator<Object> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
    }
}
