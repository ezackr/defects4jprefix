/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 00:49:33 GMT 2024
 */
package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.xml.namespace.QName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class XmlSerializerProvider_ESTest extends XmlSerializerProvider_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, ".$;Tu", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
        Class<InputStream> class0 = InputStream.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) toXmlGenerator0, (JavaType) mapLikeType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        xmlSerializerProvider0.createInstance((SerializationConfig) null, beanSerializerFactory0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        PropertyName propertyName0 = PropertyName.construct("", "");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) rootNameLookup0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "=1p:F", writerConfig0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, nonNsStreamWriter0);
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) bufferRecycler0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) objectMapper0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "I[*}Y_fH!M", writerConfig0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) objectIdGenerators_IntSequenceGenerator0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "I[*}Y_fH!M", writerConfig0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, (ObjectCodec) null, nonNsStreamWriter0);
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) iOContext0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        PropertyName propertyName0 = PropertyName.construct("T");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, false);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "T", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
        JavaType javaType0 = TypeFactory.unknownType();
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) propertyName0, javaType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) objectMapper0, (JavaType) null, (JsonSerializer<Object>) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        Class<Object> class0 = Object.class;
        JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getUnknownTypeSerializer(class0);
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) objectMapper0, (JavaType) null, jsonSerializer0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getDefaultNullValueSerializer();
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) tokenBuffer0, (JavaType) null, jsonSerializer0);
        tokenBuffer0.canOmitFields();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        PropertyName propertyName0 = PropertyName.construct("Th");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "Th", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null);
        JavaType javaType0 = TypeFactory.unknownType();
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) toXmlGenerator0, javaType0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.databind.util.TokenBuffer$1", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-8), (-8), objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeStartArray(56319);
        QName qName0 = new QName("com.fasterxml.jackson.databind.util.TokenBuffer$1");
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        xmlSerializerProvider0._serializeXmlNull(toXmlGenerator0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        PropertyName propertyName0 = new PropertyName(".$;`u", ".$;`u");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, false);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, ".$;`u", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) configOverrides0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
        XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) xmlRootNameLookup0, (JavaType) null);
    }
}
