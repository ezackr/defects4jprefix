/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 17:41:18 GMT 2024
 */
package com.fasterxml.jackson.core.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FilteringParserDelegate_ESTest extends FilteringParserDelegate_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        filteringParserDelegate0.getNumberValue();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getValueAsString();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getFloatValue();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.currentToken();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.getValueAsString("2}n{V_ X1oI45>");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getDoubleValue();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getByteValue();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
        jsonStreamContext0.hasCurrentName();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.getValueAsLong();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getText();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getValueAsBoolean(false);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.overrideCurrentName("Unexpected problem: chain of filtered context broken");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        filteringParserDelegate0.getValueAsInt(3);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        int int0 = filteringParserDelegate0.getMatchCount();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getBooleanValue();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getBigIntegerValue();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getTokenLocation();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getValueAsDouble();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getNumberType();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilter tokenFilter1 = filteringParserDelegate0.getFilter();
        tokenFilter1.includeBinary();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.getValueAsBoolean();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getLongValue();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.readBinaryValue((OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.getShortValue();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.getBinaryValue();
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        filteringParserDelegate0.getValueAsInt();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        filteringParserDelegate0.getValueAsLong(0L);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getValueAsDouble(1.0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
        filteringParserDelegate0._currToken = jsonToken0;
        int int0 = filteringParserDelegate0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        filteringParserDelegate0._currToken = jsonToken0;
        int int0 = filteringParserDelegate0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        int int0 = filteringParserDelegate0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        filteringParserDelegate0._currToken = jsonToken0;
        boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        filteringParserDelegate0._currToken = jsonToken0;
        boolean boolean0 = filteringParserDelegate0.hasTokenId(1);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasTokenId(0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        boolean boolean0 = filteringParserDelegate0.hasTokenId((-1));
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        filteringParserDelegate0._currToken = jsonToken0;
        boolean boolean0 = filteringParserDelegate0.hasTokenId(1937);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasToken((JsonToken) null);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
        filteringParserDelegate0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-57), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
        filteringParserDelegate0._nextToken2();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.nextToken();
        String string0 = filteringParserDelegate0.getCurrentName();
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        String string0 = filteringParserDelegate0.getCurrentName();
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextToken();
        filteringParserDelegate0.getCurrentName();
        filteringParserDelegate0.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, false);
        filteringParserDelegate0.clearCurrentToken();
        filteringParserDelegate0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        filteringParserDelegate0._currToken = jsonToken0;
        filteringParserDelegate0.clearCurrentToken();
        filteringParserDelegate0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, (TokenFilter) null, true, false);
        filteringParserDelegate1._nextToken2();
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-57), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
        filteringParserDelegate0._nextToken2();
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        filteringParserDelegate0._currToken = jsonToken0;
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        filteringParserDelegate0._currToken = jsonToken0;
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test6061() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(1, tokenFilter0, true);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.nextFieldName((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test6263() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
        // Undeclared exception!
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test6364() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, (TokenFilter) null, false, true);
        filteringParserDelegate1.nextValue();
    }

    @Test(timeout = 4000)
    public void test6465() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1.nextValue();
        filteringParserDelegate1.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test6566() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1.nextValue();
    }

    @Test(timeout = 4000)
    public void test6667() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, false);
        filteringParserDelegate1.nextValue();
    }

    @Test(timeout = 4000)
    public void test6768() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test6869() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.nextToken();
    }

    @Test(timeout = 4000)
    public void test6970() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test7071() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", s:econd x", false);
        StringReader stringReader0 = new StringReader(", s:econd x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
        jsonToken0.isNumeric();
    }

    @Test(timeout = 4000)
    public void test7172() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1853, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
        jsonToken0.asString();
    }

    @Test(timeout = 4000)
    public void test7273() throws Throwable {
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
        filteringParserDelegate0._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7374() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextToken2();
        filteringParserDelegate0.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test7375() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextToken2();
        filteringParserDelegate1.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test7476() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, false);
        filteringParserDelegate1._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7577() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7678() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B:x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7779() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B:x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        filteringParserDelegate0._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7880() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7981() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0._nextToken2();
        jsonToken0.id();
    }

    @Test(timeout = 4000)
    public void test8082() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1853, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0._nextToken2();
        jsonToken0.isStructEnd();
    }

    @Test(timeout = 4000)
    public void test8183() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextTokenWithBuffering(filteringParserDelegate0._exposedContext);
    }

    @Test(timeout = 4000)
    public void test8284() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test8385() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
    }

    @Test(timeout = 4000)
    public void test8486() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("'MROC<+e'E3tv,;=.");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-868), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test8587() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test8688() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonToken jsonToken0 = filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
        jsonToken0.isStructStart();
    }

    @Test(timeout = 4000)
    public void test8789() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B&xo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
    }

    @Test(timeout = 4000)
    public void test8890() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
    }

    @Test(timeout = 4000)
    public void test8991() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext((TokenFilter) null);
        // Undeclared exception!
        filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test9092() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("'MROC<+e'E3tv,;=.");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-906), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        JsonToken jsonToken0 = filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
        tokenFilterContext0.isStartHandled();
    }

    @Test(timeout = 4000)
    public void test9093() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("'MROC<+e'E3tv,;=.");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-906), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        JsonToken jsonToken0 = filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test9194() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0.nextToken();
        filteringParserDelegate0.skipChildren();
    }

    @Test(timeout = 4000)
    public void test9295() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.skipChildren();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test9396() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextToken();
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0.skipChildren();
    }
}
