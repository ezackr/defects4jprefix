/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 17:23:18 GMT 2024
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        int int0 = uTF8JsonGenerator0.getOutputBuffered();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        int int0 = uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(" ");
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        uTF8JsonGenerator0.writeFieldName("U\\#G:3^/`U`1?K'");
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(" ");
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        uTF8JsonGenerator0.writeFieldName("U\\#G:3^/`U`1?K'");
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjEp&RYi|e\"zb");
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        uTF8JsonGenerator0.writeNull();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, byteArrayBuilder0);
        Object object0 = uTF8JsonGenerator0.getOutputTarget();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, byteArrayBuilder0);
        Object object0 = uTF8JsonGenerator0.getOutputTarget();
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, (OutputStream) null);
        SerializedString serializedString0 = new SerializedString("@tu=");
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeNumberField("2kb2{.\"", (double) 2);
        uTF8JsonGenerator0.writeFieldName("");
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6A+CjEp&RYi|e\"zb");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        char[] charArray0 = new char[2];
        uTF8JsonGenerator0.writeString(charArray0, 3, 0);
        // Undeclared exception!
        uTF8JsonGenerator0.writeFieldName("W``Y6A+CjEp&RYi|e\"zb");
    }

    @Test(timeout = 4000)
    public void test00710() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2001), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
        uTF8JsonGenerator0.writeFieldName("");
    }

    @Test(timeout = 4000)
    public void test00811() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(67);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
        byte[] byteArray0 = new byte[10];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
        uTF8JsonGenerator0.writeFieldName("r");
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test00812() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(67);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
        byte[] byteArray0 = new byte[10];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
        uTF8JsonGenerator0.writeFieldName("r");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test00913() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W`X6B.jd5R|eeb");
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 56319);
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-499));
        uTF8JsonGenerator0.writeFieldName(" ");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01014() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("W``Y6ACjEjd5R|eeb");
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        SerializedString serializedString0 = new SerializedString("?iN/~");
        uTF8JsonGenerator0.writeNumberField("?iN/~", (double) 0);
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test01216() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte) 0);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01317() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, true);
        SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
        uTF8JsonGenerator0.writeNumber((int) (byte) 51);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
        uTF8JsonGenerator0.writeNumber((int) (byte) 51);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test01520() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
        SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test01621() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeArrayFieldStart("]6WA");
        uTF8JsonGenerator0.writeNumber((float) 0);
        uTF8JsonGenerator0.writeNumberField("]6WA", (double) 2);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01722() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, (ObjectCodec) null, (OutputStream) null);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        double[] doubleArray0 = new double[7];
        uTF8JsonGenerator0.writeArray(doubleArray0, 2, 0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01823() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 51, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        double[] doubleArray0 = new double[3];
        uTF8JsonGenerator0.writeArray(doubleArray0, 57343, (-946));
    }

    @Test(timeout = 4000)
    public void test01824() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 51, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        double[] doubleArray0 = new double[3];
        uTF8JsonGenerator0.writeArray(doubleArray0, 57343, (-946));
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01925() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeEndArray();
    }

    @Test(timeout = 4000)
    public void test02026() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeArrayFieldStart("f{o}g");
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test02127() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 192, false);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.writeStartObject();
        jsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test02228() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test02329() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeEndObject();
    }

    @Test(timeout = 4000)
    public void test02430() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeStartObject();
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test02531() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEC$jd5R|eeb", "W``Y6ACjEC$jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[10];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-14), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
        uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
        uTF8JsonGenerator0.writeFieldName("1N9*ekGp@r");
        uTF8JsonGenerator0.writeFieldName("");
    }

    @Test(timeout = 4000)
    public void test02632() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((float) 2);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        uTF8JsonGenerator0.writeFieldName("$LFO");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test02733() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
        minimalPrettyPrinter0.writeRootValueSeparator(jsonGeneratorDelegate0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.writeString("W``Y6ACj.jd5R|eeb");
        uTF8JsonGenerator0.writeFieldName(" ");
    }

    @Test(timeout = 4000)
    public void test02734() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
        minimalPrettyPrinter0.writeRootValueSeparator(jsonGeneratorDelegate0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.writeString("W``Y6ACj.jd5R|eeb");
        uTF8JsonGenerator0.writeFieldName(" ");
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test02835() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
    }

    @Test(timeout = 4000)
    public void test02936() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
        uTF8JsonGenerator0.writeNumber((int) (byte) 84);
        SerializedString serializedString0 = new SerializedString("Invalid UTF-8[middle byte 0x");
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
    }

    @Test(timeout = 4000)
    public void test03037() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 192, false);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test03038() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 192, false);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test03139() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("W``Y6ACjEjd5R|eeb");
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 6, true);
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test03240() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeString((String) null);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test03341() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeString("");
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test03342() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeString("");
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test03443() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjE)5RYi|eb");
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        char[] charArray0 = new char[4];
        // Undeclared exception!
        uTF8JsonGenerator0.writeString(charArray0, 0, 3);
    }

    @Test(timeout = 4000)
    public void test03544() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        SerializedString serializedString0 = new SerializedString("5EqZR");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 576, (ObjectCodec) null, pipedOutputStream0);
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test03645() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test03646() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test03747() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjEjd5R|eeb");
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 56320, 12);
    }

    @Test(timeout = 4000)
    public void test03848() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[15];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        uTF8JsonGenerator0.writeNumberField("write a boolean value", (-483.4));
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 7, 1024);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test03949() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "4:~Ky5Quf@&rReY");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
    }

    @Test(timeout = 4000)
    public void test03950() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "4:~Ky5Quf@&rReY");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test04051() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[5];
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 247, false);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 15, 15);
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
    }

    @Test(timeout = 4000)
    public void test04153() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test04254() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        char[] charArray0 = new char[2];
        uTF8JsonGenerator0._charBuffer = charArray0;
        uTF8JsonGenerator0.writeNumber((float) 2);
    }

    @Test(timeout = 4000)
    public void test04355() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x", 0, 1);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test04456() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeRaw("Split surrogate on writeRaw() input (last character): first character 0x%4x", 2, 7994);
    }

    @Test(timeout = 4000)
    public void test04557() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((float) 2);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
        uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        uTF8JsonGenerator0.writeString("");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test04658() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(" ");
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.writeString("W``Y6ACj.jd5R|eeb");
        jsonGenerator0.writeNumber(0.0F);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test04659() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(" ");
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.writeString("W``Y6ACj.jd5R|eeb");
        jsonGenerator0.writeNumber(0.0F);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test04760() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        SerializedString serializedString0 = new SerializedString("");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test04761() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        SerializedString serializedString0 = new SerializedString("");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test04862() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, (ObjectCodec) null, (OutputStream) null);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test04963() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjE)5RYi|eb");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 50, true);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test04964() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjE)5RYi|eb");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 50, true);
        uTF8JsonGenerator0.writeRaw("");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test05065() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        char[] charArray0 = new char[3];
        charArray0[1] = '\u009F';
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 2);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeRaw('\u009F');
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test05267() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        char[] charArray0 = new char[3];
        uTF8JsonGenerator0.writeRaw(charArray0, 2640, Integer.MAX_VALUE);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test05368() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 51, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeBinary(byteArray0, 0, (-449));
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test05469() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjEp&RYi|e\"zb");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test05470() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjEp&RYi|e\"zb");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 0);
    }

    @Test(timeout = 4000)
    public void test05571() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[10];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 56319);
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 53);
    }

    @Test(timeout = 4000)
    public void test05672() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjE)5RYi|eb");
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        uTF8JsonGenerator0.writeNumber((short) (-2322));
    }

    @Test(timeout = 4000)
    public void test05773() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1193, (ObjectCodec) null, mockPrintStream0, byteArray0, 556, true);
        uTF8JsonGenerator0.writeNumber((short) (byte) (-55));
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test05774() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1193, (ObjectCodec) null, mockPrintStream0, byteArray0, 556, true);
        uTF8JsonGenerator0.writeNumber((short) (byte) (-55));
    }

    @Test(timeout = 4000)
    public void test05875() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3121, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((short) (-1));
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test05976() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 51, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeNumber((-1029));
    }

    @Test(timeout = 4000)
    public void test06077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1453, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeNumber(1);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test06178() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeNumber((long) 3);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test06279() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeNumber((long) 3);
    }

    @Test(timeout = 4000)
    public void test06380() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
        uTF8JsonGenerator0.writeNumber((long) 2);
    }

    @Test(timeout = 4000)
    public void test06381() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
        uTF8JsonGenerator0.writeNumber((long) 2);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test06482() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test06583() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "oFW-E/GNu3&kS#O", false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, byteArrayOutputStream0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test06684() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeNumberField(" ", Double.NaN);
    }

    @Test(timeout = 4000)
    public void test06685() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeNumberField(" ", Double.NaN);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test06786() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 17, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeNumberField("1N9*ekGp@r", Double.NEGATIVE_INFINITY);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test06887() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeNumber(208.0F);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test06988() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        BigDecimal bigDecimal0 = new BigDecimal((long) 56319);
        uTF8JsonGenerator0.writeNumberField("hN5S_1p_0`.", bigDecimal0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07089() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07190() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, (OutputStream) null);
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07291() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, (ObjectCodec) null, (OutputStream) null);
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", bigDecimal0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07392() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 576, (ObjectCodec) null, pipedOutputStream0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07493() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
        uTF8JsonGenerator0.writeNumber("Wa!U87W");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07594() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeNumber("write a boolean value");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07695() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        uTF8JsonGenerator0.writeNumber(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test07696() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test07797() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeBoolean(false);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test07898() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 751, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 751, true);
        uTF8JsonGenerator0.writeBoolean(true);
    }

    @Test(timeout = 4000)
    public void test07999() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1756), (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeBoolean(true);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test080100() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1756), (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 3);
    }

    @Test(timeout = 4000)
    public void test081101() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeNumberField("k1>'\"=jl&)!nlD", (double) 0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test082102() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1453, (ObjectCodec) null, (OutputStream) null);
        SerializedString serializedString0 = new SerializedString("");
        uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
        uTF8JsonGenerator0.writeNumber((long) 0);
        uTF8JsonGenerator0.writeNumber((long) 2);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test083103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
        uTF8JsonGenerator0.writeStartArray();
        uTF8JsonGenerator0._flushBuffer();
        uTF8JsonGenerator0.writeNumber((-2869.39F));
        uTF8JsonGenerator0.writeNumber((double) 1);
    }

    @Test(timeout = 4000)
    public void test083104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
        uTF8JsonGenerator0.writeStartArray();
        uTF8JsonGenerator0._flushBuffer();
        uTF8JsonGenerator0.writeNumber((-2869.39F));
        uTF8JsonGenerator0.writeNumber((double) 1);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test084105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2167), (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0._verifyPrettyValueWrite("//B.h0W/z)3", 1);
    }

    @Test(timeout = 4000)
    public void test085106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0);
        uTF8JsonGenerator0._verifyPrettyValueWrite("+:,", 2);
    }

    @Test(timeout = 4000)
    public void test086107() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-395), (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0._verifyPrettyValueWrite(";Dyp}^i", 71);
    }

    @Test(timeout = 4000)
    public void test087108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 192, true);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        int[] intArray0 = new int[3];
        jsonGenerator0.writeArray(intArray0, 2, 2);
    }

    @Test(timeout = 4000)
    public void test088109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0._verifyPrettyValueWrite("Split surrogate on writeRaw() input (last character): first character 0x%4x", 0);
    }

    @Test(timeout = 4000)
    public void test089110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.flush();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test090111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.flush();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test091112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-516), (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.flush();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test092113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test092114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test093115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2691), (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test094116() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test095117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 916, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test096118() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test097119() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 17, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0._releaseBuffers();
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test098120() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjEp&RYi|e\"zb");
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
        // Undeclared exception!
        uTF8JsonGenerator0.writeString("W``Y6ACjEp&RYi|e\"zb");
    }

    @Test(timeout = 4000)
    public void test099121() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("W``Y6ACjEjd5R|eeb");
        minimalPrettyPrinter0.writeRootValueSeparator(jsonGeneratorDelegate0);
        minimalPrettyPrinter0.writeStartArray(jsonGeneratorDelegate0);
        uTF8JsonGenerator0.writeNumberField("1N9*ekGp@r", Double.NEGATIVE_INFINITY);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test099122() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("W``Y6ACjEjd5R|eeb");
        minimalPrettyPrinter0.writeRootValueSeparator(jsonGeneratorDelegate0);
        minimalPrettyPrinter0.writeStartArray(jsonGeneratorDelegate0);
        uTF8JsonGenerator0.writeNumberField("1N9*ekGp@r", Double.NEGATIVE_INFINITY);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test100123() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        char[] charArray0 = new char[3];
        charArray0[1] = '\u009F';
        uTF8JsonGenerator0.writeString(charArray0, 1, 2);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test101124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("W``Y6ACjEjd5R|eeb");
        uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
        uTF8JsonGenerator0.writeNumberField("1N9*ekGp@r", Double.NEGATIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test101125() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("W``Y6ACjEjd5R|eeb");
        uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
        uTF8JsonGenerator0.writeNumberField("1N9*ekGp@r", Double.NEGATIVE_INFINITY);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test102126() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        uTF8JsonGenerator0.writeFieldName("2kb2{.\"");
    }

    @Test(timeout = 4000)
    public void test102127() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACj.jd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        uTF8JsonGenerator0.writeFieldName("2kb2{.\"");
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test103128() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, (OutputStream) null);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
        uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
        uTF8JsonGenerator0.writeFieldName("Q9&MZ~[iU\"_,");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test104129() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0._maximumNonEscapedChar = 56320;
        char[] charArray0 = new char[3];
        charArray0[1] = '\u00A0';
        uTF8JsonGenerator0.writeString(charArray0, 1, 2);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test105130() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0._maximumNonEscapedChar = 3;
        char[] charArray0 = new char[2];
        charArray0[1] = '\u00A0';
        uTF8JsonGenerator0.writeString(charArray0, 1, 2);
    }

    @Test(timeout = 4000)
    public void test106131() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
        byte[] byteArray0 = new byte[8];
        byteArray0[2] = (byte) 107;
        byteArray0[3] = (byte) (-118);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte) 107);
    }

    @Test(timeout = 4000)
    public void test107132() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1454);
    }

    @Test(timeout = 4000)
    public void test108133() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        byte[] byteArray0 = bufferRecycler0.allocByteBuffer(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1493);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test109134() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        byte[] byteArray0 = bufferRecycler0.allocByteBuffer(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 11966);
    }

    @Test(timeout = 4000)
    public void test110135() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        byte[] byteArray0 = new byte[2];
        uTF8JsonGenerator0.writeBinaryField("k1>'\"=jl&)!nlD", byteArray0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test111136() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjE)5RYi|eb");
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
        uTF8JsonGenerator0.writeBinary(byteArray0);
    }

    @Test(timeout = 4000)
    public void test112137() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
        byte[] byteArray0 = bufferRecycler0.allocByteBuffer(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 1);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test113138() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 57343, 1);
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1103);
    }

    @Test(timeout = 4000)
    public void test114139() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 35);
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
    }

    @Test(timeout = 4000)
    public void test115140() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACj.jd5R|eeb");
        byte[] byteArray0 = new byte[10];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 56319);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test115141() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACj.jd5R|eeb");
        byte[] byteArray0 = new byte[10];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 56319);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
    }

    @Test(timeout = 4000)
    public void test116142() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W`X6B.jd5R|eeb");
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 56319);
        byteArrayInputStream0.read();
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-507));
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test116143() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("W`X6B.jd5R|eeb");
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 56319);
        byteArrayInputStream0.read();
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-507));
    }

    @Test(timeout = 4000)
    public void test117144() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 500, (ObjectCodec) null, (OutputStream) null);
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, byteArrayInputStream0);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-65));
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test117145() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 500, (ObjectCodec) null, (OutputStream) null);
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, byteArrayInputStream0);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-65));
    }

    @Test(timeout = 4000)
    public void test118146() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 1);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-934));
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test118147() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, true);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 1);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-934));
    }

    @Test(timeout = 4000)
    public void test119148() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0._outputSurrogates(1, 56320);
        uTF8JsonGenerator0.getOutputBuffered();
    }
}
