/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:52:00 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("'", cSVFormat0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("W_wZ4mXfk|?ux", cSVFormat0);
        long long0 = cSVParser0.getCurrentLineNumber();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("S-TqUp'AF", cSVFormat0);
        cSVParser0.getHeaderMap();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
        NetworkHandling.createRemoteTextFile(evoSuiteURL0, "wc@b!2<Q/1!sf_U");
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("DjY0,'ov)U{4");
        CSVParser cSVParser0 = CSVParser.parse("DjY0,'ov)U{4", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c(G3x%7/Y~?k}*V");
        CSVParser cSVParser0 = CSVParser.parse("c(G3x%7/Y~?k}*V", cSVFormat1);
        cSVParser0.nextRecord();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("S-TqUp'AF", cSVFormat0);
        cSVParser0.close();
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("EOREC*RD", cSVFormat0);
        cSVParser0.getRecords();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("<vm-?~xph", cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("A.,{_", cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.csv.csvparser$1", "org.apache.commons.csv.csvparser$1");
        File file0 = MockFile.createTempFile("org.apache.commons.csv.csvparser$1", "org.apache.commons.csv.csvparser$1", (File) mockFile0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVParser cSVParser0 = CSVParser.parse("<vm-?~xph", cSVFormat2);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('z');
        CSVParser cSVParser0 = CSVParser.parse("zVb$/U%pN", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('z');
        CSVParser cSVParser0 = CSVParser.parse("zVb$/U%pN", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVParser0.getRecordNumber();
    }
}
