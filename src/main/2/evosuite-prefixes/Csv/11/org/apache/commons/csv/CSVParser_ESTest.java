/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:08:19 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        File file0 = MockFile.createTempFile("' must not be null!", "' must not be null!");
        CSVParser.parse(file0, (Charset) null, (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("Ae}Z7g", cSVFormat0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        URL uRL0 = MockURL.getFtpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("> >a4^Est#\u0002#J5", cSVFormat0);
        long long0 = cSVParser0.getCurrentLineNumber();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        PipedReader pipedReader0 = new PipedReader();
        CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(" *d>-wR");
        CSVParser cSVParser0 = CSVParser.parse("Delimiter=<q> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("(A?N}qe[[");
        CSVParser cSVParser0 = CSVParser.parse("(A?N}qe[[", cSVFormat1);
        cSVParser0.getRecords();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("*ndq-6r", cSVFormat0);
        cSVParser0.close();
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        stringArray0[0] = "vkqfvEt-kWV";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader(3);
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        stringArray0[0] = "vkqfvEt-kWV";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader(3);
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("> >a4^Est#\u0002#J5", cSVFormat0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("AeM},Z7zg", cSVFormat0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }
}
