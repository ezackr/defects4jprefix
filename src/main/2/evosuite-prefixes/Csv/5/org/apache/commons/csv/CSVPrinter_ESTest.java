/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:54:43 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLSyntaxErrorException;
import java.util.LinkedHashSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        cSVPrinter0.close();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockFile mockFile0 = new MockFile("YhAm`<", "YhAm`<");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        Appendable appendable0 = cSVPrinter0.getOut();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        cSVPrinter0.close();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        cSVPrinter0.flush();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        cSVPrinter0.flush();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("?3!r/pf]vhSQLKM");
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[1];
        cSVPrinter0.printRecords(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[9];
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        cSVPrinter0.print(cSVFormat0);
        cSVPrinter0.printRecords((Object[]) stringArray0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        cSVPrinter0.printRecords((Object[]) stringArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('0');
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
        sQLSyntaxErrorException0.getSQLState();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        Character character0 = Character.valueOf('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
        sQLSyntaxErrorException0.toString();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[6];
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Object[]) stringArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        Long long0 = new Long(2503L);
        LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
        linkedHashSet0.add(long0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        linkedHashSet0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Object[]) stringArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        cSVPrinter0.print(stringWriter0);
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
        sQLSyntaxErrorException0.toString();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"i_9:m\"UxZ(");
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[1];
        cSVPrinter0.printRecords(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[9];
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("]");
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Object[]) stringArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[9];
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Object[]) stringArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[9];
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("s1Q svl6{K1\"~ _<wJK");
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Object[]) stringArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
        sQLSyntaxErrorException0.getErrorCode();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String[] stringArray0 = new String[10];
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("5x-w Yz3,r*T ");
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Object[]) stringArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('?');
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.print(cSVFormat1);
        cSVPrinter0.printComment("\r\n");
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('n');
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printComment("\n");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('>');
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printComment("\r(H");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.printComment("\r");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) sQLSyntaxErrorException0;
        cSVPrinter0.printRecords(objectArray0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(1071).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
        doReturn(true, false, false, false, false).when(resultSet0).next();
        // Undeclared exception!
        cSVPrinter0.printRecords(resultSet0);
    }
}
