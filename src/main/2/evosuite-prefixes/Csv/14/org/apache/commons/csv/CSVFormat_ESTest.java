/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:14:24 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Object[] objectArray0 = new Object[0];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        cSVFormat0.RFC4180.print((Appendable) null);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Charset charset0 = Charset.defaultCharset();
        cSVFormat0.print((Path) null, charset0);
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[18];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[18];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[18];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test0313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[18];
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test0314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[18];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test0417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test0421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test0422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test0423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test0424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test0525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test0526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test0527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test0528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getTrim();
    }

    @Test(timeout = 4000)
    public void test0530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test0532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test0533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test0534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test0635() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test0636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test0637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test0739() throws Throwable {
        CSVFormat.valueOf("<");
    }

    @Test(timeout = 4000)
    public void test0840() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String string0 = cSVFormat0.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test0941() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test0942() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test0943() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test0944() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0945() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1046() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        cSVFormat0.withCommentMarker('\"');
    }

    @Test(timeout = 4000)
    public void test1147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Charset charset0 = Charset.defaultCharset();
        cSVFormat0.print((File) null, charset0);
    }

    @Test(timeout = 4000)
    public void test1248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test1256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test1258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        PipedReader pipedReader0 = new PipedReader();
        CSVParser cSVParser0 = cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
        cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test1460() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1461() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1462() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1463() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test1464() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1465() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test1466() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1467() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1468() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(",org.apache.commons.csv.CSVFormat@0000000002,");
        cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1569() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[12];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1570() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[12];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1571() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[12];
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test1572() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[12];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test1573() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[12];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1674() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1775() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String string0 = cSVFormat0.getNullString();
    }

    @Test(timeout = 4000)
    public void test1876() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1877() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1878() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test1879() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1880() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test1881() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test1882() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1883() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1884() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1885() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test1986() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test2087() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\r');
        cSVFormat0.withEscape(character0);
    }

    @Test(timeout = 4000)
    public void test2188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test2189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test2190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test2191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test2192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test2193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test2194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test2195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test2196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test2297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test2398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test2499() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        boolean boolean0 = cSVFormat0.equals(rowSetMetaDataImpl0);
    }

    @Test(timeout = 4000)
    public void test25100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test26101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test26102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test26103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test26104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test26105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test26106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test26107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test26108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test26109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test26110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test26111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test26112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test27113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test27114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test27115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test27116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test27117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test28118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test28119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test28120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test28121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test28122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test28123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test28124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test28125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test28126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test28127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test28128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test29129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test30130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test30131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test30132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test30133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test30134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test30135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test30136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test30137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test30138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test31139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test31140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test31141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test31142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test31143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test31144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test31145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test31146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test31147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test31148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test31149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test32150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test32151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test32152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test32153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test32154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test32155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test32156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test32157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test32158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test32159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test32160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test33161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test33162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test33163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test33164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test33165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test33166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test33167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test33168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test34169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test34170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test34171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test34172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test34173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test34174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test34175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test34176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test34177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test34178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test34179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test34180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test35181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test35182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test35183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test35184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test35185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test35186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test35187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test35188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test35189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test35190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test36191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test36192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test36193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test36194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test36195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test36196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test36197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test36198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test36199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test37200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test37201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test37202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test37203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test37204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test37205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test37206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test37207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test37208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test37209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test37210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test38211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test38212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test38213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test38214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test38215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test38216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test38217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test38218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test38219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getTrim();
    }

    @Test(timeout = 4000)
    public void test39220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test39221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test39222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test39223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test39224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test39225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test39226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test39227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test39228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test39229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test40230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        cSVFormat0.format((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test41231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.hashCode();
        cSVFormat0.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test41232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.hashCode();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test41233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test41234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test41235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test41236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.hashCode();
        cSVFormat0.getTrim();
    }

    @Test(timeout = 4000)
    public void test41237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.hashCode();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test42238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test42239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test42240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test42241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test42242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test42243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test42244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test42245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test42246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test42247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test42248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        cSVFormat1.hashCode();
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test43249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.hashCode();
    }

    @Test(timeout = 4000)
    public void test44250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test44251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test44252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test44253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test45254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test45255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test45256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test45257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test46258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test47259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n", false);
        cSVFormat0.MYSQL.print((Object) "\r\n", (Appendable) mockFileWriter0, false);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test48260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test48261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test48262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test48263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test48264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test48265() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test48266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test48267() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test49268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test49269() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test49270() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test49271() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test49272() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test49273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test49274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test49275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test50276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test50277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test50278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test50279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test50280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test50281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test50282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test50283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test50284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test50285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test51286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Double double0 = new Double((-914.292997019217));
        CharBuffer charBuffer0 = CharBuffer.allocate(96);
        cSVFormat1.print((Object) double0, (Appendable) charBuffer0, true);
        charBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test51287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Double double0 = new Double((-914.292997019217));
        CharBuffer charBuffer0 = CharBuffer.allocate(96);
        cSVFormat1.print((Object) double0, (Appendable) charBuffer0, true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test52288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[3];
        objectArray0[1] = (Object) "";
        String string0 = cSVFormat0.format(objectArray0);
        cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test52289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[3];
        objectArray0[1] = (Object) "";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test53290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) "";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test54291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Object[] objectArray0 = new Object[16];
        objectArray0[0] = (Object) "' must not b null!";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test55292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        MockFileWriter mockFileWriter0 = new MockFileWriter("8sJiy95R?", false);
        cSVFormat0.INFORMIX_UNLOAD_CSV.print((Object) "8sJiy95R?", (Appendable) mockFileWriter0, true);
        cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test56293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) "?url";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test57294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        String string0 = cSVFormat0.format(cSVFormat_PredefinedArray0);
    }

    @Test(timeout = 4000)
    public void test58295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Object[] objectArray0 = new Object[14];
        objectArray0[0] = (Object) "[;EGjpS3";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test59296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) "},x0=//tSk7";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test60297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[6];
        objectArray0[3] = (Object) "\rX\n";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test61298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test61299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test61300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test61301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test61302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test61303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test61304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test62305() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "Default\tExcel\tInformixUnload\tInformixUnloadCsv\tMySQL\tRFC4180\tTDF\r\norg.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Class@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Class@0000000004\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000006\tjava.lang.Class@0000000003\tjava.lang.Class@0000000004";
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        String string0 = cSVFormat0.format(stringArray0);
    }

    @Test(timeout = 4000)
    public void test63306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test63307() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test63308() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test63309() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test63310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test63311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test63312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test64313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[8];
        objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test65314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        Object[] objectArray0 = new Object[31];
        objectArray0[23] = (Object) "' in ";
        String string0 = cSVFormat0.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test66315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        String string0 = cSVFormat0.toString();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test66316() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        String string0 = cSVFormat0.toString();
        cSVFormat0.getTrim();
    }

    @Test(timeout = 4000)
    public void test66317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        String string0 = cSVFormat0.toString();
        cSVFormat0.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test66318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test67319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test68320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test68321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test68322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test68323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test69324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test69325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test70326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        String string0 = cSVFormat1.toString();
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test70327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test70328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test71329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test71330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test71331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test71332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test71333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test71334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test71335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test71336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test71337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test71338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test71339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test72340() throws Throwable {
        CSVFormat.newFormat('\r');
    }

    @Test(timeout = 4000)
    public void test73341() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.withQuote('T');
    }

    @Test(timeout = 4000)
    public void test74342() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.withDelimiter('\\');
    }

    @Test(timeout = 4000)
    public void test75343() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.withCommentMarker('T');
    }

    @Test(timeout = 4000)
    public void test76344() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        cSVFormat0.withCommentMarker('\\');
    }

    @Test(timeout = 4000)
    public void test77345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        cSVFormat0.withQuoteMode(quoteMode0);
    }

    @Test(timeout = 4000)
    public void test78346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        rowSetMetaDataImpl0.setColumnCount(30);
        cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    }

    @Test(timeout = 4000)
    public void test79347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Character character0 = new Character('\r');
        cSVFormat0.withCommentMarker(character0);
    }

    @Test(timeout = 4000)
    public void test80348() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        cSVFormat0.withDelimiter('\r');
    }

    @Test(timeout = 4000)
    public void test81349() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test81350() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test81351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test81352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test81353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test82354() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test82355() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test82356() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test82357() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test82358() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test82359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test82360() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test82361() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test82362() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test82363() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader((ResultSet) null);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test83364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test83365() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test83366() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getTrim();
    }

    @Test(timeout = 4000)
    public void test83367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getTrailingDelimiter();
    }

    @Test(timeout = 4000)
    public void test83368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getAllowMissingColumnNames();
    }
}
