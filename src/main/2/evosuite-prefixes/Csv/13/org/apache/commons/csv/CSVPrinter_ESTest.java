/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:11:40 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.sql.SQLDataException;
import java.sql.SQLTransientConnectionException;
import java.util.HashSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        char[] charArray0 = new char[2];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        Appendable appendable0 = cSVPrinter0.getOut();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.print(stringWriter0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.print(stringWriter0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
        cSVPrinter0.close();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        cSVPrinter0.close();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        char[] charArray0 = new char[2];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        cSVPrinter0.flush();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringWriter stringWriter0 = new StringWriter();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        cSVPrinter0.flush();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("}:");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        cSVPrinter0.printRecords(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        Object[] objectArray0 = new Object[8];
        cSVPrinter0.printRecord(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        sQLTransientConnectionException0.getSQLState();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
        StringWriter stringWriter0 = new StringWriter();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.print(cSVFormat1);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        StringWriter stringWriter0 = new StringWriter();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.print(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringWriter stringWriter0 = new StringWriter();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        Object[] objectArray0 = new Object[4];
        cSVPrinter0.printRecords(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('`');
        MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Token typJ: ");
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
        SQLDataException sQLDataException0 = new SQLDataException("Unexpected Token typJ: ");
        cSVPrinter0.print(sQLDataException0);
        sQLDataException0.getMessage();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringWriter stringWriter0 = new StringWriter();
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        sQLTransientConnectionException0.getMessage();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        Short short0 = new Short((short) (-3816));
        cSVPrinter0.print(short0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
        cSVPrinter0.print(cSVFormat0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(" EmptyLines:ignored");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        Object[] objectArray0 = new Object[8];
        cSVPrinter0.printRecord(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("9aU}MFyIF@~9wU");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        Object[] objectArray0 = new Object[1];
        cSVPrinter0.printRecords(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("<P<RmFWf3%Guh<k_&Vt");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        cSVPrinter0.print((Object) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("xa+OzBy\"*V;");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        Object[] objectArray0 = new Object[1];
        cSVPrinter0.printRecords(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
        StringWriter stringWriter0 = new StringWriter();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        cSVPrinter0.print(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote valuV: ");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        Object[] objectArray0 = new Object[1];
        cSVPrinter0.printRecord(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        cSVPrinter0.print(stringWriter0);
        cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> CommentStart=<!> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
        cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        HashSet<BufferedWriter> hashSet0 = new HashSet<BufferedWriter>(57);
        BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
        hashSet0.add(bufferedWriter0);
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        hashSet0.contains(bufferedWriter0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) sQLTransientConnectionException0;
        cSVPrinter0.printRecords(objectArray0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        doReturn(false).when(resultSet0).next();
        cSVPrinter0.printRecords(resultSet0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        doReturn(true, true, true, true, true).when(resultSet0).next();
        // Undeclared exception!
        cSVPrinter0.printRecords(resultSet0);
    }
}
