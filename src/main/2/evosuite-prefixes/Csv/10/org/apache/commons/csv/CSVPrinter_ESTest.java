/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:05:40 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLNonTransientConnectionException;
import java.util.ArrayDeque;
import java.util.PriorityQueue;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
        PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>(9);
        SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.csv.Assertions", "org.apache.commons.csv.Assertions");
        priorityQueue0.add(sQLNonTransientConnectionException0);
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        CharArrayWriter charArrayWriter1 = (CharArrayWriter) cSVPrinter0.getOut();
        charArrayWriter1.toString();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(2309);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        cSVPrinter0.close();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        cSVPrinter0.close();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(90);
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        cSVPrinter0.flush();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        cSVPrinter0.flush();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[1];
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[1];
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[1];
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[1];
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('A');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("')");
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
        Object[] objectArray0 = new Object[3];
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('A');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("')");
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
        Object[] objectArray0 = new Object[3];
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(75);
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(75);
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        ArrayDeque<Double> arrayDeque0 = new ArrayDeque<Double>();
        Double double0 = new Double(2779.385879157);
        arrayDeque0.add(double0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Object[] objectArray0 = new Object[5];
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        cSVPrinter0.printRecord(objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[8];
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(">):y]");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[8];
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(">):y]");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("#?]{FB*L\"");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("#?]{FB*L\"");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[8];
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("7viw#2tR'4@PH");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[8];
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("7viw#2tR'4@PH");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("]:e01l*");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("]:e01l*");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[36];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("}+?HfPD 3}cnR.");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1829() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[36];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("}+?HfPD 3}cnR.");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1930() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[48];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("eXN N{Otc\"M2");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1931() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[48];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("eXN N{Otc\"M2");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test2032() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("g>,F{");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test2033() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("g>,F{");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Object[] objectArray0 = new Object[44];
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test2235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        cSVPrinter0.printComment("')");
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('H');
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.print(charArrayWriter0);
        cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printComment("\rQd\n");
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test2438() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printComment("\rQd\n");
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2539() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printComment("\r");
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test2540() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printComment("\r");
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        ArrayDeque<Double> arrayDeque0 = new ArrayDeque<Double>();
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) arrayDeque0;
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test2642() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        ArrayDeque<Double> arrayDeque0 = new ArrayDeque<Double>();
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) arrayDeque0;
        cSVPrinter0.printRecords(objectArray0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2743() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(90);
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(90).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
        doReturn(true, false).when(resultSet0).next();
        cSVPrinter0.printRecords(resultSet0);
    }
}
