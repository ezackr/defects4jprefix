/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:57:20 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "", 1L);
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "", 1L);
        cSVRecord0.iterator();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1L));
        cSVRecord0.getComment();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        String[] stringArray0 = new String[5];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Index for header '%s' is %d but CSVRecord only has %d values!", (-6416L));
        cSVRecord0.toString();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        String[] stringArray0 = new String[5];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "@oDv3U,B u ", 0L);
        String[] stringArray1 = cSVRecord0.values();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ap[=w", 1L);
        cSVRecord0.get(1709);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "ta>.9}q6I", (-1L));
        long long0 = cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        String[] stringArray0 = new String[8];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "OT]\u0002qT+]g]C3zIRR", (-723L));
        cSVRecord0.size();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        String[] stringArray0 = new String[4];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 5);
        cSVRecord0.get("");
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "HEK;grpthJx3`?~O_#", 2600L);
        cSVRecord0.get("HEK;grpthJx3`?~O_#");
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("", integer0);
        String[] stringArray0 = new String[4];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0);
        String string0 = cSVRecord0.get("");
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 2794L);
        boolean boolean0 = cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 2794L);
        boolean boolean0 = cSVRecord0.isConsistent();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        String[] stringArray0 = new String[2];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, (String) null, 204L);
        boolean boolean0 = cSVRecord0.isConsistent();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        String[] stringArray0 = new String[2];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, (String) null, 204L);
        boolean boolean0 = cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        String[] stringArray0 = new String[8];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "OT]\u0002qT+]g]C3zIRR", 204L);
        boolean boolean0 = cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        String[] stringArray0 = new String[8];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "OT]\u0002qT+]g]C3zIRR", 204L);
        boolean boolean0 = cSVRecord0.isConsistent();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "HEK;grpthJx3`?~O_#", 2600L);
        boolean boolean0 = cSVRecord0.isSet("HEK;grpthJx3`?~O_#");
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "HEK;grpthJx3`?~O_#", 2600L);
        boolean boolean0 = cSVRecord0.isSet("HEK;grpthJx3`?~O_#");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "OT]\u0002qT+]g]C3zIRR", (-5870L));
        boolean boolean0 = cSVRecord0.isSet("OT]\u0002qT+]g]C3zIRR");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "OT]\u0002qT+]g]C3zIRR", (-5870L));
        boolean boolean0 = cSVRecord0.isSet("OT]\u0002qT+]g]C3zIRR");
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("", integer0);
        String[] stringArray0 = new String[4];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0);
        boolean boolean0 = cSVRecord0.isSet("");
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(36);
        hashMap0.put("", integer0);
        String[] stringArray0 = new String[4];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 36);
        boolean boolean0 = cSVRecord0.isSet("");
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(36);
        hashMap0.put("", integer0);
        String[] stringArray0 = new String[4];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 36);
        boolean boolean0 = cSVRecord0.isSet("");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("", integer0);
        String[] stringArray0 = new String[4];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0);
        Map<String, String> map0 = cSVRecord0.toMap();
        map0.size();
    }
}
