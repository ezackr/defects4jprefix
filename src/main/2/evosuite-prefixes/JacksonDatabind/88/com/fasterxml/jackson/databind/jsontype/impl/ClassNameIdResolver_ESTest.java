/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 22:33:20 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DatabindContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.ArrayDeque;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ClassNameIdResolver_ESTest extends ClassNameIdResolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<MapperFeature> class0 = MapperFeature.class;
        Class<String> class1 = String.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionType0, (TypeFactory) null);
        minimalClassNameIdResolver0.registerSubtype(class1, "Lcom/fasterxml/jackson/databind/MapperFeature;");
        minimalClassNameIdResolver0.getDescForKnownTypeIds();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
        String string0 = classNameIdResolver0.idFromBaseType();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumMap> class0 = EnumMap.class;
        Class<DefaultDeserializationContext.Impl> class1 = DefaultDeserializationContext.Impl.class;
        Class<DeserializationFeature> class2 = DeserializationFeature.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = classNameIdResolver0.getMechanism();
        jsonTypeInfo_Id0.getDefaultPropertyName();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        classNameIdResolver0.typeFromId((DatabindContext) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        String string0 = classNameIdResolver0.getDescForKnownTypeIds();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        List<JavaType> list0 = collectionType0.getInterfaces();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        String string0 = classNameIdResolver0.idFromValue(list0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JavaType javaType1 = minimalClassNameIdResolver0._typeFromId(".Arrays$.Arrays$ArrayList", serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        classNameIdResolver0._typeFromId("kC<;u", serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayDeque> class0 = ArrayDeque.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
        EnumMap<ObjectMapper.DefaultTyping, DefaultDeserializationContext.Impl> enumMap0 = new EnumMap<ObjectMapper.DefaultTyping, DefaultDeserializationContext.Impl>(class1);
        String string0 = classNameIdResolver0.idFromValue(enumMap0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        String string0 = classNameIdResolver0.idFromBaseType();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        String string0 = classNameIdResolver0.idFromValue(collectionType0);
    }
}
