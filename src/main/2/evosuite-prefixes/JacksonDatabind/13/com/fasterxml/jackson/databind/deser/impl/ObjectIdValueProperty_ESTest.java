/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:34:24 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectIdValueProperty_ESTest extends ObjectIdValueProperty_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Class<String> class0 = String.class;
        Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
        SimpleType simpleType0 = SimpleType.construct(class1);
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<Object> objectIdGenerator0 = (ObjectIdGenerator<Object>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(collectionType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        PropertyMetadata propertyMetadata0 = pOJOPropertyBuilder0.getMetadata();
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        AnnotatedMember annotatedMember0 = objectIdValueProperty0.getMember();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        PropertyName propertyName0 = new PropertyName("G}");
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, (ObjectIdResolver) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, "G}");
        objectIdValueProperty1.isRequired();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<DecimalNode> class1 = DecimalNode.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
        ObjectIdGenerator<JsonToken> objectIdGenerator0 = (ObjectIdGenerator<JsonToken>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        Class<Annotation> class2 = Annotation.class;
        Annotation annotation0 = objectIdValueProperty0.getAnnotation(class2);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        Class<Object> class0 = Object.class;
        ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        objectIdValueProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, class0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<DecimalNode> class1 = DecimalNode.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withSimpleName(" ';/3ip7E6U@S_");
        settableBeanProperty0.getCreatorIndex();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<DecimalNode> class1 = DecimalNode.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
        ObjectIdGenerator<JsonToken> objectIdGenerator0 = (ObjectIdGenerator<JsonToken>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectIdValueProperty objectIdValueProperty1 = objectIdValueProperty0.withValueDeserializer((JsonDeserializer<?>) null);
        objectIdValueProperty1.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        Class<Object> class0 = Object.class;
        Class<ObjectWriter> class1 = ObjectWriter.class;
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, typeFactory0);
        ObjectIdGenerator<Class<Integer>> objectIdGenerator0 = (ObjectIdGenerator<Class<Integer>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class2 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class2);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, propertyMetadata0);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        Class<Object> class0 = Object.class;
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, simpleObjectIdResolver0);
        ObjectIdGenerator<Class<Integer>> objectIdGenerator0 = (ObjectIdGenerator<Class<Integer>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer1 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer1).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        ObjectIdReader objectIdReader1 = new ObjectIdReader((JavaType) null, propertyName0, objectIdReader0.generator, jsonDeserializer1, objectIdValueProperty0, objectIdReader0.resolver);
        ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        objectIdValueProperty1.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, objectIdReader1);
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        Class<Object> class0 = Object.class;
        ObjectIdGenerator<Class<Integer>> objectIdGenerator0 = (ObjectIdGenerator<Class<Integer>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectIdGenerator<ObjectWriter> objectIdGenerator1 = (ObjectIdGenerator<ObjectWriter>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<DecimalNode> jsonDeserializer1 = (JsonDeserializer<DecimalNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        ObjectIdReader objectIdReader1 = new ObjectIdReader((JavaType) null, objectIdReader0.propertyName, objectIdGenerator1, jsonDeserializer1, objectIdValueProperty0, objectIdReader0.resolver);
        ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
        objectIdValueProperty1.set(class0, propertyMetadata0);
    }
}
