/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:43:13 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.SimpleType;
import java.time.format.ResolverStyle;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UntypedObjectDeserializer_ESTest extends UntypedObjectDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonDeserializer<Object> jsonDeserializer0 = untypedObjectDeserializer0.instance._clearIfStdImpl((JsonDeserializer<Object>) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<UntypedObjectDeserializer> class0 = UntypedObjectDeserializer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonDeserializer<?> jsonDeserializer0 = untypedObjectDeserializer0.instance._withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        PropertyName propertyName0 = new PropertyName("JSON");
        Class<ResolverStyle> class0 = ResolverStyle.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
        JsonDeserializer<?> jsonDeserializer0 = untypedObjectDeserializer0.createContextual(defaultDeserializationContext_Impl0, beanProperty_Std0);
        jsonDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Short) null, (Short) null, (Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        ObjectNode objectNode0 = arrayNode0.insertObject(56320);
        objectNode0.putNull("Hzw?{LY*`y:_!s]=T");
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        ObjectNode objectNode0 = arrayNode0.insertObject(11);
        objectNode0.put("v]J1)G", false);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ObjectNode objectNode0 = arrayNode0.addObject();
        byte[] byteArray0 = new byte[9];
        objectNode0.put("a7C6>s^Ar]", byteArray0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        untypedObjectDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ObjectNode objectNode0 = arrayNode0.addObject();
        objectNode0.put("JSON", "eL");
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        Short short0 = new Short((short) 1);
        JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Short) null, short0, short0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        ObjectNode objectNode0 = arrayNode0.insertObject((short) 1);
        objectNode0.put(".5a<'<hm", short0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Short) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        Float float0 = new Float((double) 10);
        arrayNode0.insert(10, float0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = untypedObjectDeserializer1.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Short) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        Float float0 = new Float((double) 10);
        arrayNode0.insert(10, float0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = untypedObjectDeserializer1.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Short) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer1.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
        untypedObjectDeserializer1.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
        JsonDeserializer<ResolverStyle> jsonDeserializer0 = (JsonDeserializer<ResolverStyle>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(resolverStyle0, resolverStyle0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, jsonDeserializer0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        Float float0 = new Float((-372.1));
        ArrayNode arrayNode1 = arrayNode0.insert(4, float0);
        JsonParser jsonParser0 = arrayNode1.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.withArray("");
        ObjectNode objectNode1 = arrayNode0.addObject();
        ObjectNode objectNode2 = objectNode1.put((String) null, true);
        objectNode2.put("", (-863.0F));
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        untypedObjectDeserializer0.mapObject(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ObjectNode objectNode0 = arrayNode0.addObject();
        objectNode0.put("JSON", 1421.0F);
        objectNode0.put("7svL\"2^Ip)zQ", 1421.0F);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ObjectNode objectNode0 = arrayNode0.addObject();
        ObjectNode objectNode1 = objectNode0.put("", (-411.0F));
        ObjectNode objectNode2 = objectNode1.put("a7C6>s^Ar]", (short) (-1));
        objectNode2.put("RZeD4?5dy&!B8", (-2044.0F));
        objectNode2.putArray("H");
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        filteringParserDelegate0.nextBooleanValue();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = untypedObjectDeserializer0.mapArrayToArray(filteringParserDelegate0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonDeserializer<UntypedObjectDeserializer> jsonDeserializer0 = (JsonDeserializer<UntypedObjectDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, jsonDeserializer0);
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
        untypedObjectDeserializer_Vanilla0.mapObject(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Short) null, (Short) null, (Short) null, (Short) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        ObjectNode objectNode0 = arrayNode0.insertObject(56320);
        objectNode0.put("v]J1)G", (-2353.0F));
        objectNode0.put("~RZ", 0.0F);
        objectNode0.putArray("v]J1)G");
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
        LinkedHashMap linkedHashMap0 = (LinkedHashMap) untypedObjectDeserializer_Vanilla0.mapObject(jsonParser0, defaultDeserializationContext_Impl0);
        linkedHashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
        untypedObjectDeserializer_Vanilla0.deserialize(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer_Vanilla0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
        JsonDeserializer<ResolverStyle> jsonDeserializer0 = (JsonDeserializer<ResolverStyle>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, jsonDeserializer0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
        untypedObjectDeserializer_Vanilla0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
    }
}
