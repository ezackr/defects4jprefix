/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:11:13 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectIdValueProperty_ESTest extends ObjectIdValueProperty_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        ObjectIdGenerator<ObjectIdResolver> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        AnnotatedMember annotatedMember0 = objectIdValueProperty0.getMember();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectIdValueProperty objectIdValueProperty1 = objectIdValueProperty0.withName(objectIdReader0.propertyName);
        objectIdValueProperty1.getManagedReferenceName();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        ObjectIdGenerator<ObjectIdResolver> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        objectIdValueProperty0.set(outputDecorator0, propertyName0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        ObjectIdGenerator<ObjectIdResolver> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = objectIdValueProperty0.getAnnotation(class0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<Integer> class0 = Integer.class;
        Class<InputStream> class1 = InputStream.class;
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, propertyName0);
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerators_StringIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        objectIdValueProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, objectIdGenerator_IdKey0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectIdValueProperty objectIdValueProperty1 = objectIdValueProperty0.withValueDeserializer((JsonDeserializer<?>) null);
        objectIdValueProperty1.hasValueDeserializer();
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(simpleObjectIdResolver0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        char[] charArray0 = new char[9];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerators_StringIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        JsonFactory jsonFactory1 = (JsonFactory) objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, jsonFactory0);
        jsonFactory1.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        ObjectIdGenerator<ObjectIdResolver> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        Object object0 = objectIdValueProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<InputStream> class1 = InputStream.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<Object> objectIdGenerator0 = (ObjectIdGenerator<Object>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
        Class<SimpleType> class2 = SimpleType.class;
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapLikeType0, classNameIdResolver0, "POJO", false, class2);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1222), mapLikeType0, propertyMetadata0);
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, creatorProperty0, simpleObjectIdResolver0);
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        objectIdValueProperty0.setAndReturn("fg&b7f';m}", typeFactory0);
    }
}
