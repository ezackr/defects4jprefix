/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:52:52 GMT 2024
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import java.lang.annotation.Annotation;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AnnotationMap_ESTest extends AnnotationMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        annotationMap0.add((Annotation) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = annotationMap0.get(class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Iterable<Annotation> iterable0 = annotationMap0.annotations();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        Iterable<Annotation> iterable0 = annotationMap0.annotations();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        Class<Annotation> class0 = Annotation.class;
        hashMap0.put(class0, (Annotation) null);
        annotationMap0._annotations = hashMap0;
        Iterable<Annotation> iterable0 = annotationMap0.annotations();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
        annotationMap1.size();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(annotation0).toString();
        doReturn(class0, (Class) null, (Class) null).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(annotation0).toString();
        doReturn(class0, (Class) null, (Class) null).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
        AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
        annotationMap1.size();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(annotation0).toString();
        doReturn(class0, (Class) null, (Class) null).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
        AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        Class<Annotation> class0 = Annotation.class;
        hashMap0.put(class0, (Annotation) null);
        AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, (AnnotationMap) null);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        Class<Annotation> class0 = Annotation.class;
        hashMap0.put(class0, (Annotation) null);
        AnnotationMap annotationMap1 = new AnnotationMap();
        AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap0, annotationMap1);
        annotationMap2.size();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        AnnotationMap annotationMap1 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        HashMap<Class<Annotation>, Annotation> hashMap1 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap1._annotations = hashMap1;
        hashMap0.put(class0, (Annotation) null);
        AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap0, annotationMap1);
        annotationMap2.size();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        int int0 = annotationMap0.size();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        int int0 = annotationMap0.size();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn(class0, (Class) null).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
        annotationMap0.size();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn(class0, (Class) null).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(annotation0).toString();
        doReturn(class0, class0).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0._add(annotation0);
        Annotation annotation1 = annotationMap0.get(class0);
        boolean boolean1 = annotationMap0.addIfNotPresent(annotation1);
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        HashMap<Class<Annotation>, Annotation> hashMap0 = new HashMap<Class<Annotation>, Annotation>();
        annotationMap0._annotations = hashMap0;
        String string0 = annotationMap0.toString();
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        String string0 = annotationMap0.toString();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(annotation0).toString();
        doReturn(class0, class0).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0._add(annotation0);
        Annotation annotation1 = annotationMap0.get(class0);
        boolean boolean1 = annotationMap0._add(annotation1);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(annotation0).annotationType();
        Annotation annotation1 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(annotation1).annotationType();
        annotationMap0._add(annotation1);
        boolean boolean0 = annotationMap0._add(annotation0);
    }
}
