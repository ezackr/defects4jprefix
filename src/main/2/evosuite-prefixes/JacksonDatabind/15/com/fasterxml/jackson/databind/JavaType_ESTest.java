/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:39:53 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<Throwable> class0 = Throwable.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<Throwable> class0 = Throwable.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.reader(javaType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.reader(javaType0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.reader(javaType0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.getGenericSignature();
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0.getErasedSignature();
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        JavaType javaType1 = collectionType0.widenContentsBy(class0);
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        JavaType javaType1 = collectionType0.widenContentsBy(class0);
        javaType1.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0.getContentType();
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        Class<Object> class0 = Object.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = javaType0.narrowBy(class0);
        javaType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        Class<Object> class0 = Object.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = javaType0.narrowBy(class0);
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        Class<String> class1 = String.class;
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(class1);
        Class<Throwable> class2 = Throwable.class;
        JavaType javaType0 = collectionType1.narrowBy(class2);
        javaType0.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        Class<String> class1 = String.class;
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(class1);
        Class<Throwable> class2 = Throwable.class;
        JavaType javaType0 = collectionType1.narrowBy(class2);
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<Object> class0 = Object.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(jsonFactory0);
        Class<String> class1 = String.class;
        JavaType javaType1 = collectionType1.narrowBy(class1);
        javaType1.isFinal();
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<Object> class0 = Object.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(jsonFactory0);
        Class<String> class1 = String.class;
        JavaType javaType1 = collectionType1.narrowBy(class1);
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0.forcedNarrowBy(class0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0.forcedNarrowBy(class0);
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        Class<String> class1 = String.class;
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(class1);
        Class<ObjectWriter> class2 = ObjectWriter.class;
        JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        Class<String> class1 = String.class;
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(class1);
        Class<ObjectWriter> class2 = ObjectWriter.class;
        JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
        javaType0.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<Throwable> class0 = Throwable.class;
        Class<Object> class1 = Object.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class1, javaType0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(jsonFactory0);
        JavaType javaType1 = collectionType1.forcedNarrowBy(class0);
        javaType1.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<Throwable> class0 = Throwable.class;
        Class<Object> class1 = Object.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class1, javaType0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(jsonFactory0);
        JavaType javaType1 = collectionType1.forcedNarrowBy(class0);
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1324() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.widenBy(class0);
        javaType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1325() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.widenBy(class0);
    }

    @Test(timeout = 4000)
    public void test1426() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        boolean boolean0 = simpleType0.hasRawClass(class0);
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        boolean boolean0 = simpleType0.hasRawClass(class0);
    }

    @Test(timeout = 4000)
    public void test1528() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0.isConcrete();
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1629() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
        boolean boolean0 = arrayType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test1630() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
        boolean boolean0 = arrayType0.hasGenericTypes();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1731() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        Object object0 = new Object();
        ArrayType arrayType0 = ArrayType.construct(collectionType0, collectionType0, object0);
        boolean boolean0 = arrayType0.hasGenericTypes();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1732() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        Object object0 = new Object();
        ArrayType arrayType0 = ArrayType.construct(collectionType0, collectionType0, object0);
        boolean boolean0 = arrayType0.hasGenericTypes();
        javaType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test1733() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        Object object0 = new Object();
        ArrayType arrayType0 = ArrayType.construct(collectionType0, collectionType0, object0);
        boolean boolean0 = arrayType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test1834() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
        JavaType javaType1 = arrayType0.containedTypeOrUnknown(0);
        javaType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
        JavaType javaType1 = arrayType0.containedTypeOrUnknown(0);
    }

    @Test(timeout = 4000)
    public void test1936() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0.containedTypeOrUnknown(0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1937() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0.containedTypeOrUnknown(0);
    }

    @Test(timeout = 4000)
    public void test2038() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.TYPE;
        javaType0.narrowBy(class0);
    }
}
