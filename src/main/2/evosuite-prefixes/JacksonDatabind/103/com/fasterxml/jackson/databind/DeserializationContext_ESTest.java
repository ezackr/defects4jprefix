/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 23:18:14 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.io.File;
import java.io.IOException;
import java.io.PushbackInputStream;
import java.math.BigInteger;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.Collection;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeserializationContext_ESTest extends DeserializationContext_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        BooleanNode booleanNode0 = BooleanNode.TRUE;
        Class<MapType> class0 = MapType.class;
        objectReader0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<String> class0 = String.class;
        Object[] objectArray0 = new Object[0];
        defaultDeserializationContext0.handleWeirdKey(class0, "JSON", "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Object[] objectArray0 = new Object[10];
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        BigInteger bigInteger0 = BigInteger.ZERO;
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigInteger0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, "ZFFH[", "!=");
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
        defaultDeserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonFactory jsonFactory0 = new JsonFactory();
        File file0 = MockFile.createTempFile("JSON", "PeRaL");
        JsonParser jsonParser0 = jsonFactory0.createParser(file0);
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonParser0, jsonToken0, "PeRaL", (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Vector<PropertyName> vector0 = new Vector<PropertyName>();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        objectMapper0.convertValue((Object) vector0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.constructCalendar((Date) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.reportInputMismatch((JavaType) null, "x5}?%~jFjM", (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.getAttribute(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        defaultDeserializationContext_Impl0.mappingException(class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ValueNode valueNode0 = jsonNodeFactory0.pojoNode(objectMapper0);
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<Locale> class0 = Locale.class;
        objectReader0.treeToValue((TreeNode) valueNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getLocale();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonToken jsonToken0 = JsonToken.END_OBJECT;
        Object[] objectArray0 = new Object[1];
        deserializationContext0.reportWrongTokenException((JavaType) null, jsonToken0, "NO_MATCH", objectArray0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[2];
        deserializationContext0.mappingException("H2^x;+q7a\"?j7", objectArray0);
        deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.findClass("]_3PnbrQL4Cy+{z:E_");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[1];
        deserializationContext0.reportMappingException("", objectArray0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        Object[] objectArray0 = new Object[2];
        defaultDeserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "QgErC7F@WDp>;X3JvV", objectArray0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.mappingException((String) null);
        deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, "JSON", (TypeIdResolver) null, "JSON");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext0.endOfInputException(class0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        Class<DoubleNode> class0 = DoubleNode.class;
        defaultDeserializationContext_Impl0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getBase64Variant();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Throwable> class0 = Throwable.class;
        defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) null, class0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<ArrayType> class0 = ArrayType.class;
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, (JsonParser) null, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Object[] objectArray0 = new Object[0];
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        defaultDeserializationContext0.handleWeirdStringValue(class0, "JSON", "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        defaultDeserializationContext_Impl0.instantiationException(class0, "");
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        Object[] objectArray0 = new Object[0];
        deserializationContext0.reportWrongTokenException(class0, jsonToken0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[9];
        defaultDeserializationContext_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ValueNode valueNode0 = jsonNodeFactory0.pojoNode(objectMapper0);
        Class<MapType> class0 = MapType.class;
        objectReader0.treeToValue((TreeNode) valueNode0, class0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[8];
        deserializationContext0.reportMissingContent("9!C9\f:", objectArray0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JavaType javaType0 = TypeFactory.unknownType();
        defaultDeserializationContext0.handleMissingTypeId(javaType0, (TypeIdResolver) null, "JSON");
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        defaultDeserializationContext0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[1];
        deserializationContext0.reportBadTypeDefinition((BeanDescription) null, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        deserializationFeatureArray0[5] = deserializationFeature0;
        deserializationFeatureArray0[6] = deserializationFeature0;
        deserializationFeatureArray0[7] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<?> class0 = defaultDeserializationContext0.getActiveView();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        DeserializerFactory deserializerFactory0 = deserializationContext0.getFactory();
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        DeserializerFactory deserializerFactory0 = deserializationContext0.getFactory();
        deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        defaultDeserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        JsonToken jsonToken0 = JsonToken.END_OBJECT;
        defaultDeserializationContext_Impl0.mappingException(class0, jsonToken0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        int int0 = defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext0.wrongTokenException(jsonParser0, jsonToken0, "JSON");
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.setAttribute(objectMapper0, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getNodeFactory();
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JavaType javaType0 = defaultDeserializationContext0.getContextualType();
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(4415);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(4415);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(2048);
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(2048);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures((-710));
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
        atomicReference0.toString();
    }

    @Test(timeout = 4000)
    public void test4954() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test5055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JavaType javaType0 = TypeFactory.unknownType();
        deserializationContext0.hasValueDeserializerFor(javaType0, (AtomicReference<Throwable>) null);
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JavaType javaType0 = TypeFactory.unknownType();
        defaultDeserializationContext0.readValue(jsonParser0, javaType0);
    }

    @Test(timeout = 4000)
    public void test5257() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JavaType javaType0 = TypeFactory.unknownType();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(javaType0, beanProperty_Bogus0);
    }

    @Test(timeout = 4000)
    public void test5358() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        deserializationFeatureArray0[5] = deserializationFeature0;
        deserializationFeatureArray0[6] = deserializationFeature0;
        deserializationFeatureArray0[7] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JavaType javaType0 = defaultDeserializationContext0.constructType((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test5459() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    }

    @Test(timeout = 4000)
    public void test5460() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5562() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        objectBuffer0.resetAndStart();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = new ObjectBuffer();
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5866() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getArrayBuilders();
        ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
    }

    @Test(timeout = 4000)
    public void test5867() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getArrayBuilders();
        ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5968() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test6069() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockDateFormat mockDateFormat0 = new MockDateFormat();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        objectMapper0.convertValue((Object) mockDateFormat0, class0);
    }

    @Test(timeout = 4000)
    public void test6170() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, (JsonDeserializer<?>) null, objectReader0, "JSON");
    }

    @Test(timeout = 4000)
    public void test6271() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        JavaType javaType0 = objectMapper0.constructType(class0);
        defaultDeserializationContext0.readValue(jsonParser0, javaType0);
    }

    @Test(timeout = 4000)
    public void test6372() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        Object[] objectArray0 = new Object[7];
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, jsonParser0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6473() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(4415);
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        objectMapper0.convertValue((Object) placeholderForType0, class0);
    }

    @Test(timeout = 4000)
    public void test6574() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<MockDateFormat> class0 = MockDateFormat.class;
        defaultDeserializationContext0.handleInstantiationProblem(class0, jsonFactory0, (Throwable) null);
    }

    @Test(timeout = 4000)
    public void test6675() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Object[] objectArray0 = new Object[10];
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6776() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<MockDateFormat> class0 = MockDateFormat.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, (Object) null);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test6777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<MockDateFormat> class0 = MockDateFormat.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test6878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test6879() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test6980() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, "G|d0%");
    }

    @Test(timeout = 4000)
    public void test6981() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, "G|d0%");
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test7082() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        Object[] objectArray0 = new Object[2];
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test7183() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[7];
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, "Invalid type definition for type %s: %s", objectArray0);
    }

    @Test(timeout = 4000)
    public void test7284() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        defaultDeserializationContext_Impl0.reportUnknownProperty(atomicReference0, "", (JsonDeserializer<?>) null);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test7385() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser(" type parameter");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        defaultDeserializationContext0.reportUnknownProperty((Object) null, "FK", (JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test7486() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser(" type parameter");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
        defaultDeserializationContext0.reportUnknownProperty(jsonParser0, "JSON", jsonDeserializer0);
    }

    @Test(timeout = 4000)
    public void test7587() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Throwable throwable0 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test7688() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        SQLException sQLException0 = new SQLException();
        defaultDeserializationContext0.handleInstantiationProblem(class0, jsonFactory0, sQLException0);
    }

    @Test(timeout = 4000)
    public void test7789() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "JSON");
        defaultDeserializationContext0.handleInstantiationProblem(class0, jsonFactory0, sQLInvalidAuthorizationSpecException0);
    }
}
