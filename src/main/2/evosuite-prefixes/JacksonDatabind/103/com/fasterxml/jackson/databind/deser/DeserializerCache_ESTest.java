/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 23:32:58 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerCache;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.time.chrono.ThaiBuddhistEra;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeserializerCache_ESTest extends DeserializerCache_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        int int0 = deserializerCache0.cachedDeserializersCount();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        Object object0 = deserializerCache0.writeReplace();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        deserializerCache0.flushCachedDeserializers();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<List> class0 = List.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<List> class0 = List.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        Class<HashMap> class1 = HashMap.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.canDeserialize((JavaType) mapType0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<List> class0 = List.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<NullNode> class1 = NullNode.class;
        Class<BuilderBasedDeserializer> class2 = BuilderBasedDeserializer.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        deserializerCache0._findCachedDeserializer((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<ArrayType> class0 = ArrayType.class;
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MapType mapType1 = mapType0.withKeyValueHandler(beanDeserializerFactory0);
        objectMapper0.readerFor((JavaType) mapType1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectIdReferenceProperty> class0 = ObjectIdReferenceProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) referenceType0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MissingNode> class0 = MissingNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MapType mapType1 = mapType0.withContentValueHandler(beanDeserializerFactory0);
        MapType mapType2 = mapType1.withContentTypeHandler(mapType1);
        objectMapper0.readerFor((JavaType) mapType2);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<Object> class0 = Object.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
        JsonDeserializer<Object> jsonDeserializer0 = deserializerCache0._findCachedDeserializer(collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<List> class0 = List.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        deserializerCache0._handleUnknownValueDeserializer(defaultDeserializationContext_Impl0, collectionType0);
    }
}
