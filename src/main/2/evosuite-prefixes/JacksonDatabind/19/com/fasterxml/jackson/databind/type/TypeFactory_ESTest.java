/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:59:34 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.HierarchicType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        collectionType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType[] javaTypeArray0 = new JavaType[0];
        typeFactory0.constructParametricType(class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeModifier[] typeModifierArray0 = new TypeModifier[10];
        TypeFactory typeFactory0 = new TypeFactory((TypeParser) null, typeModifierArray0);
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructMapType(class0, class0, class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<InputStream> class0 = InputStream.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        mapLikeType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        Class<?> class1 = collectionType0.getParameterSource();
        JavaType javaType0 = typeFactory0.constructType((Type) class1, (Class<?>) class0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(collectionLikeType0, class0);
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayType> class0 = ArrayType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        Class<?> class1 = TypeFactory.rawClass(arrayType0);
        Class<CollectionLikeType> class2 = CollectionLikeType.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class1, class2, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        mapType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        Class<SimpleType> class0 = SimpleType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, javaType0);
        collectionLikeType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Locale> class0 = Locale.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructFromCanonical("ESCAPE_NON_ASCII");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.class;
        typeFactory0.constructParametricType(class0, (Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Object> atomicReference0 = new AtomicReference<Object>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Annotation> class0 = Annotation.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        mapLikeType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        typeFactory1.equals((Object) typeFactory0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.isAnnotation();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, arrayType0);
        Class<?> class1 = TypeFactory.rawClass(arrayType0);
        typeFactory0.constructSpecializedType(typeBindings0.UNBOUND, class1);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BooleanNode> class0 = BooleanNode.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BooleanNode> class0 = BooleanNode.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        Class<Object> class1 = Object.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(javaType0, class1);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, arrayType0);
        JavaType javaType0 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, arrayType0);
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, (JavaType) null);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, simpleType0);
        JavaType javaType0 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, simpleType0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);
        javaType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        TypeFactory.rawClass((Type) null);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        JavaType javaType1 = typeFactory1.constructSpecializedType(javaType0, class0);
        javaType1.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<LinkedList> class0 = LinkedList.class;
        Class<ArrayList> class1 = ArrayList.class;
        CollectionType collectionType0 = typeFactory1.constructCollectionType(class1, class0);
        collectionType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeModifier[] typeModifierArray0 = new TypeModifier[10];
        TypeFactory typeFactory0 = new TypeFactory((TypeParser) null, typeModifierArray0);
        Class<NamedType> class1 = NamedType.class;
        typeFactory0.constructType((Type) class0, (Class<?>) class1);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
        typeFactory0.constructParametrizedType(class0, class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametrizedType(class0, class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        Class<?> class1 = TypeFactory.rawClass(arrayType0);
        Class<PipedInputStream> class2 = PipedInputStream.class;
        JavaType[] javaTypeArray0 = new JavaType[9];
        typeFactory0.constructParametrizedType(class1, class2, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType[] javaTypeArray0 = new JavaType[2];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType[] javaTypeArray0 = new JavaType[0];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        JavaType javaType0 = typeFactory0._constructType(class0, typeBindings0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Long> class0 = Long.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.instance;
        objectMapper0.setTypeFactory(typeFactory0);
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JsonEncoding> class0 = JsonEncoding.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        Class<?> class1 = TypeFactory.rawClass(arrayType0);
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        typeFactory0._fromParameterizedClass(class1, arrayList0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        Class<JsonEncoding> class0 = JsonEncoding.class;
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Vector<JavaType> vector0 = new Vector<JavaType>();
        vector0.add((JavaType) null);
        typeFactory0._fromParameterizedClass(class0, vector0);
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Vector<JavaType> vector0 = new Vector<JavaType>();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        vector0.add((JavaType) simpleType0);
        vector0.add((JavaType) null);
        typeFactory0._fromParameterizedClass(class0, vector0);
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        Class<Module> class0 = Module.class;
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = typeFactory0._unknownType();
        Vector<JavaType> vector0 = new Vector<JavaType>();
        vector0.add(javaType0);
        JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, vector0);
        javaType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test6061() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        vector0.add((JavaType) simpleType0);
        Class<Module> class0 = Module.class;
        typeFactory0._fromParameterizedClass(class0, vector0);
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, "ES`APE_NON_ASCII", (TypeBindings) null);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test6263() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CreatorProperty> class1 = CreatorProperty.class;
        typeFactory0.findTypeParameters(class1, class0);
    }

    @Test(timeout = 4000)
    public void test6364() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class1 = MapLikeType.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    }

    @Test(timeout = 4000)
    public void test6465() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    }

    @Test(timeout = 4000)
    public void test6466() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
        hierarchicType0.isGeneric();
    }

    @Test(timeout = 4000)
    public void test6567() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        HierarchicType hierarchicType0 = new HierarchicType(class0);
        ParameterizedType parameterizedType0 = hierarchicType0._genericType;
        typeFactory0._arrayListSuperInterfaceChain(hierarchicType0);
        typeFactory0._arrayListSuperInterfaceChain(hierarchicType0);
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.isConcrete();
    }
}
