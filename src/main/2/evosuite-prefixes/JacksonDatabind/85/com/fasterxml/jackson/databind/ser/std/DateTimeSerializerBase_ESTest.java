/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 22:27:41 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import java.lang.reflect.Type;
import java.sql.Date;
import java.text.DateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        dateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JsonSerializer<?> jsonSerializer0 = dateSerializer0.createContextual(serializerProvider0, beanProperty_Std0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<?> jsonSerializer0 = dateSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        boolean boolean0 = sqlDateSerializer0.isEmpty((Date) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        Date date0 = new Date((-935L));
        boolean boolean0 = sqlDateSerializer0.isEmpty(date0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        Date date0 = new Date(0L);
        boolean boolean0 = sqlDateSerializer0.isEmpty(date0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        boolean boolean0 = sqlDateSerializer0.isEmpty((SerializerProvider) null, (Date) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        Date date0 = new Date((-1L));
        boolean boolean0 = sqlDateSerializer0.isEmpty((SerializerProvider) null, date0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        Date date0 = new Date(0L);
        boolean boolean0 = sqlDateSerializer0.isEmpty((SerializerProvider) null, date0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<JsonParser.NumberType> class0 = JsonParser.NumberType.class;
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        Boolean boolean0 = new Boolean(false);
        DateSerializer dateSerializer0 = new DateSerializer(boolean0, dateFormat0);
        JsonNode jsonNode0 = dateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<JsonParser.NumberType> class0 = JsonParser.NumberType.class;
        JsonNode jsonNode0 = dateSerializer0.getSchema(serializerProvider0, (Type) class0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DateSerializer dateSerializer0 = DateSerializer.instance;
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        DateSerializer dateSerializer1 = dateSerializer0.withFormat((Boolean) null, dateFormat0);
        MockDate mockDate0 = new MockDate();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        dateSerializer1.serialize((java.util.Date) mockDate0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        sqlDateSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        sqlDateSerializer0.isUnwrappingSerializer();
    }
}
