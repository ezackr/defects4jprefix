/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:37:13 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
        deserializationConfig0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
        objectReader0.writeTree(uTF8JsonGenerator0, (TreeNode) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        objectReader0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeatureArray0[0];
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader objectReader1 = objectReader0.withView(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
        ObjectReader objectReader1 = objectReader0.withAttributes(concurrentHashMap0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        byte[] byteArray0 = new byte[7];
        objectReader0.readValues(byteArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0._reportUndetectableSource(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile("Bx`YgDfX`kC[");
        objectReader0._inputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectNode> class0 = ObjectNode.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
        ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader[] objectReaderArray0 = new ObjectReader[0];
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) null);
        LongNode longNode0 = LongNode.valueOf(0L);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) longNode0);
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        objectReader0.withFeatures((JsonParser.Feature[]) null);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) jsonFactory0);
        ObjectReader objectReader1 = objectReader0.withRootName("*g");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        deserializationFeatureArray0[5] = deserializationFeature0;
        deserializationFeatureArray0[6] = deserializationFeature0;
        deserializationFeatureArray0[7] = deserializationFeature0;
        deserializationFeatureArray0[8] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.withHandler((DeserializationProblemHandler) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedHashSet> class0 = LinkedHashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        objectReader0.readValue(jsonParser0, (ResolvedType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<MapType> class0 = MapType.class;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2327), pipedInputStream0, objectReader0, bytesToNameCanonicalizer0, (byte[]) null, (short) (-1), 4, false);
        objectReader0.readTree((JsonParser) uTF8StreamJsonParser0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        byte[] byteArray0 = new byte[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, (-814));
        objectReader0.readValues(jsonParser0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        Locale locale0 = new Locale("Y2K43y:u", "%Ih5^h'U-W^*", "");
        ObjectReader objectReader1 = objectReader0.with(locale0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) pipedInputStream0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        objectReader0.withoutFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader[] objectReaderArray0 = new ObjectReader[3];
        ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        NumericNode numericNode0 = jsonNodeFactory0.numberNode(1);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(numericNode0);
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        Class<CollectionLikeType> class1 = CollectionLikeType.class;
        objectReader0.readValue(jsonParser0, class1);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringReader stringReader0 = new StringReader("");
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) stringReader0);
        JsonNode jsonNode0 = objectReader0.createObjectNode();
        jsonNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        Class<LongNode> class1 = LongNode.class;
        ObjectReader objectReader1 = objectReader0.forType(class1);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[7];
        objectReaderArray0[0] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        dataFormatReaders0.with((DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) null);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        char[] charArray0 = new char[4];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-2294), (int) '5');
        Class<ShortNode> class0 = ShortNode.class;
        Iterator<ShortNode> iterator0 = objectReader0.readValues(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("No value type configured for ObjectReader");
        TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeatureArray0[0];
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        objectReader0.readValues(jsonParser0, (TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        URL uRL0 = MockURL.getFtpExample();
        objectReader0._inputStream(uRL0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        Class<ShortNode> class0 = ShortNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        objectReader0.readValue((JsonParser) null, (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        objectReader0.withFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        JsonFactory jsonFactory1 = objectReader0.getJsonFactory();
        jsonFactory1.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        Class<ObjectNode> class0 = ObjectNode.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<BinaryNode> class0 = BinaryNode.class;
        objectReader0.treeToValue((TreeNode) null, class0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringReader stringReader0 = new StringReader("");
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) stringReader0);
        ObjectReader objectReader1 = objectReader0.withAttribute("", objectMapper0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        LongNode longNode0 = LongNode.valueOf((-1L));
        ObjectReader objectReader1 = objectReader0.withoutAttribute(longNode0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        ObjectReader objectReader1 = objectReader0.with(timeZone0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
        objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) jsonFactory0);
        objectReader0.readTree("JSON");
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        Version version0 = objectReader0.version();
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BooleanNode> class0 = BooleanNode.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        ContextAttributes contextAttributes0 = objectReader0.getAttributes();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        TypeReference<LongNode> typeReference0 = (TypeReference<LongNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.forType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("c}M");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 665, objectReader0, mockFileOutputStream0);
        objectReader0.writeValue(uTF8JsonGenerator0, injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ArrayNode> class0 = ArrayNode.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[1];
        objectReaderArray0[0] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat((InputStream) null);
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1);
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
        ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeatureArray0[0];
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringReader stringReader0 = new StringReader("");
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) stringReader0);
        objectReader0.withValueToUpdate((Object) null);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        Class<ObjectNode> class0 = ObjectNode.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(bufferRecycler0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) pipedInputStream0);
        objectReader0.readValue((InputStream) pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        PipedReader pipedReader0 = new PipedReader();
        objectReader0.readValue((Reader) pipedReader0);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        objectReader0.readValue((String) null);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        byte[] byteArray0 = new byte[1];
        objectReader0.readValue(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile(" for format ", " for format ");
        objectReader0.readValue((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValue(uRL0);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        PipedInputStream pipedInputStream0 = new PipedInputStream(1);
        objectReader0.readTree((InputStream) pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        StringReader stringReader0 = new StringReader("Can not find a deserializer for type ");
        objectReader0.readTree((Reader) stringReader0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
        objectReader0.readValues((InputStream) pushbackInputStream0);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringReader stringReader0 = new StringReader("");
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) stringReader0);
        MappingIterator<CollectionType> mappingIterator0 = objectReader0.readValues((Reader) stringReader0);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        objectReader0.readValues("");
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URL uRL0 = MockURL.getHttpExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
        JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(jsonParser0);
        jsonNode0.shortValue();
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        BigInteger bigInteger0 = BigInteger.ONE;
        BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(arrayNode0);
        objectReader1.readValues("");
        objectReader1.readValue((JsonNode) bigIntegerNode0);
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[5];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        JavaType javaType0 = TypeFactory.unknownType();
        dataFormatReaders0.withType(javaType0);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[1];
        objectReaderArray0[0] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat((InputStream) null);
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[4];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReaderArray0[0];
        objectReaderArray0[2] = objectReader0;
        objectReaderArray0[3] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
        byte[] byteArray0 = new byte[5];
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        byte[] byteArray0 = new byte[1];
        TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(treeSet0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0._verifySchemaType((FormatSchema) null);
    }
}
