/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:24:00 GMT 2024
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<Error> class0 = Error.class;
        objectMapper1.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        Class<RuntimeException> class0 = RuntimeException.class;
        objectMapper1.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<Module> class0 = Module.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper1.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
        objectMapper0.configure(serializationFeature0, false);
        Class<Error> class0 = Error.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.USE_STATIC_TYPING;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeature1;
        mapperFeatureArray0[4] = mapperFeatureArray0[1];
        mapperFeatureArray0[5] = mapperFeatureArray0[1];
        mapperFeatureArray0[6] = mapperFeatureArray0[1];
        mapperFeatureArray0[7] = mapperFeatureArray0[5];
        mapperFeatureArray0[8] = mapperFeatureArray0[1];
        objectMapper0.enable(mapperFeatureArray0);
        Class<RuntimeException> class0 = RuntimeException.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<Module> class0 = Module.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        objectMapper0.mixInCount();
    }
}
