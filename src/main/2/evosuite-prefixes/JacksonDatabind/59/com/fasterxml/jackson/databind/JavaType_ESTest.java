/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:58:51 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.InputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
        JavaType javaType0 = referenceType0.containedTypeOrUnknown(1);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
        JavaType javaType0 = referenceType0.containedTypeOrUnknown(1);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
        JavaType javaType0 = referenceType0.containedTypeOrUnknown(1);
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Class<InputStream> class0 = InputStream.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<HashMap> class0 = HashMap.class;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.readerForUpdating(javaType0);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.readerForUpdating(javaType0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.readerForUpdating(javaType0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        JavaType javaType0 = simpleType0.getKeyType();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        simpleType0.getContentTypeHandler();
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Object object0 = javaType0.getContentValueHandler();
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        String string0 = javaType0.getGenericSignature();
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        collectionType0.getErasedSignature();
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
        arrayType0.getParameterSource();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.forcedNarrowBy(class0);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(class0);
        collectionType1.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(class0);
        Class<Object> class2 = Object.class;
        JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(class0);
        Class<Object> class2 = Object.class;
        JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(class0);
        Class<Object> class2 = Object.class;
        JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(class0);
        Class<Object> class2 = Object.class;
        JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(typeFactory0);
        Class<JsonDeserializer> class1 = JsonDeserializer.class;
        JavaType javaType0 = collectionLikeType0.forcedNarrowBy(class1);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(typeFactory0);
        Class<JsonDeserializer> class1 = JsonDeserializer.class;
        JavaType javaType0 = collectionLikeType0.forcedNarrowBy(class1);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(typeFactory0);
        Class<JsonDeserializer> class1 = JsonDeserializer.class;
        JavaType javaType0 = collectionLikeType0.forcedNarrowBy(class1);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(typeFactory0);
        Class<JsonDeserializer> class1 = JsonDeserializer.class;
        JavaType javaType0 = collectionLikeType0.forcedNarrowBy(class1);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        boolean boolean0 = javaType0.isTypeOrSubTypeOf(class0);
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        boolean boolean0 = javaType0.isTypeOrSubTypeOf(class0);
    }

    @Test(timeout = 4000)
    public void test1528() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
        Class<Object> class0 = Object.class;
        boolean boolean0 = arrayType0.isTypeOrSubTypeOf(class0);
    }

    @Test(timeout = 4000)
    public void test1529() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
        Class<Object> class0 = Object.class;
        boolean boolean0 = arrayType0.isTypeOrSubTypeOf(class0);
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1630() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<Object> class1 = Object.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
        boolean boolean0 = mapLikeType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test1731() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();
        objectMapper_DefaultTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, arrayDeque0);
    }

    @Test(timeout = 4000)
    public void test1832() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = javaType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test1933() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        boolean boolean0 = mapType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test2034() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<String> class0 = String.class;
        JavaType[] javaTypeArray0 = new JavaType[23];
        javaTypeArray0[5] = javaType0;
        ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[5]);
        JavaType javaType1 = referenceType0.containedTypeOrUnknown((-671));
        referenceType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2035() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<String> class0 = String.class;
        JavaType[] javaTypeArray0 = new JavaType[23];
        javaTypeArray0[5] = javaType0;
        ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[5]);
        JavaType javaType1 = referenceType0.containedTypeOrUnknown((-671));
    }

    @Test(timeout = 4000)
    public void test2136() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        boolean boolean0 = arrayType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2137() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        boolean boolean0 = arrayType0.hasValueHandler();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2238() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) arrayType0, javaType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(arrayType0);
        boolean boolean0 = referenceType1.hasValueHandler();
        referenceType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2239() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) arrayType0, javaType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(arrayType0);
        boolean boolean0 = referenceType1.hasValueHandler();
        referenceType1.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2240() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) arrayType0, javaType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(arrayType0);
        boolean boolean0 = referenceType1.hasValueHandler();
        referenceType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2241() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) arrayType0, javaType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(arrayType0);
        boolean boolean0 = referenceType1.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2342() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) class0, (Object) javaType0);
        boolean boolean0 = arrayType0.hasHandlers();
        arrayType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2343() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) class0, (Object) javaType0);
        boolean boolean0 = arrayType0.hasHandlers();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2344() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) class0, (Object) javaType0);
        boolean boolean0 = arrayType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2345() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) class0, (Object) javaType0);
        boolean boolean0 = arrayType0.hasHandlers();
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2446() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
        ArrayType arrayType1 = arrayType0.withContentValueHandler(javaType0);
        boolean boolean0 = arrayType1.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2447() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
        ArrayType arrayType1 = arrayType0.withContentValueHandler(javaType0);
        boolean boolean0 = arrayType1.hasHandlers();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2448() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
        ArrayType arrayType1 = arrayType0.withContentValueHandler(javaType0);
        boolean boolean0 = arrayType1.hasHandlers();
        arrayType0.hasHandlers();
    }
}
