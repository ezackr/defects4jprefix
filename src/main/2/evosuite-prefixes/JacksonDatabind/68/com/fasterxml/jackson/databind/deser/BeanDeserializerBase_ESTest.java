/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:37:35 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanDeserializerBase_ESTest extends BeanDeserializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[1] = mapperFeature1;
        mapperFeatureArray0[2] = mapperFeatureArray0[1];
        mapperFeatureArray0[3] = mapperFeatureArray0[1];
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        Class<InvocationTargetException> class0 = InvocationTargetException.class;
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ShortNode shortNode0 = new ShortNode((short) (-1006));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        LongNode longNode0 = LongNode.valueOf(2106L);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(longNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = TextNode.valueOf("mU5!f%gM43}n^");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(textNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DoubleNode doubleNode0 = DoubleNode.valueOf((-2988.282412815483));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FloatNode floatNode0 = new FloatNode((-1303.5023F));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(decimalNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.FALSE;
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readValue(jsonParser0, class0);
    }
}
