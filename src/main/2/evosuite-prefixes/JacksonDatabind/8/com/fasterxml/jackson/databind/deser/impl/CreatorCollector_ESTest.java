/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:20:06 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CreatorCollector_ESTest extends CreatorCollector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.addLongCreator((AnnotatedWithParams) null, true);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.addLongCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.verifyNonDup((AnnotatedWithParams) null, 127);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.addIntCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[0];
        creatorCollector0.addDelegatingCreator((AnnotatedWithParams) null, creatorPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.addBooleanCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[0];
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, creatorPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.addStringCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.addDoubleCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        creatorCollector0.addDoubleCreator((AnnotatedWithParams) null, true);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
        MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
        mapperFeatureArray0[3] = mapperFeature1;
        mapperFeatureArray0[4] = mapperFeatureArray0[3];
        mapperFeatureArray0[5] = mapperFeatureArray0[2];
        mapperFeatureArray0[6] = mapperFeature0;
        mapperFeatureArray0[7] = mapperFeatureArray0[0];
        mapperFeatureArray0[8] = mapperFeatureArray0[4];
        objectMapper0.disable(mapperFeatureArray0);
        Class<Object> class0 = Object.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(0);
        boolean boolean0 = creatorCollector_Vanilla0.canInstantiate();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        JsonFactory jsonFactory0 = new JsonFactory();
        CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[5];
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        Class<Method> class0 = Method.class;
        JavaType javaType0 = TypeFactory.unknownType();
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
        ArrayType arrayType0 = ArrayType.construct(mapLikeType0, jsonFactory0, deserializerFactoryConfig0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, annotationMap0, 4);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1493), annotationMap0, propertyMetadata0);
        creatorPropertyArray0[0] = creatorProperty0;
        creatorPropertyArray0[1] = creatorProperty0;
        creatorPropertyArray0[2] = creatorPropertyArray0[0];
        creatorPropertyArray0[3] = creatorProperty0;
        creatorPropertyArray0[4] = creatorPropertyArray0[0];
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, creatorPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
        CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[3];
        PropertyName propertyName0 = new PropertyName(").z'(z", "': expected '");
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        PropertyName propertyName1 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        Class<AnnotatedConstructor> class1 = AnnotatedConstructor.class;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "': expected '", false, class1, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "': expected '", (Integer) 3, "': expected '");
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName1, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2225, (Object) null, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName1);
        creatorPropertyArray0[0] = creatorProperty1;
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, creatorPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
        CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[3];
        PropertyName propertyName0 = new PropertyName(").z'(z", "': expected '");
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        Class<AnnotatedConstructor> class1 = AnnotatedConstructor.class;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "': expected '", false, class1, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "': expected '", (Integer) 3, "': expected '");
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2225, (Object) null, propertyMetadata0);
        creatorPropertyArray0[0] = creatorProperty0;
        creatorPropertyArray0[1] = creatorPropertyArray0[0];
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, creatorPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
        Class<JsonAutoDetect.Visibility> class0 = JsonAutoDetect.Visibility.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
        Class<?> class1 = mapType0.getParameterSource();
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class1, annotationMap0, 1644);
        creatorCollector0._incompleteParameter = annotatedParameter0;
        creatorCollector0.addIncompeteParameter(annotatedParameter0);
        annotatedParameter0.getName();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
        creatorCollector0.addIncompeteParameter((AnnotatedParameter) null);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(1);
        String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(19);
        String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(2);
        String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(3);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[3];
        creatorCollector_Vanilla0.createFromObjectWith(defaultDeserializationContext_Impl0, objectArray0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(1);
        ArrayList arrayList0 = (ArrayList) creatorCollector_Vanilla0.createUsingDefault(deserializationContext0);
        arrayList0.size();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla((-1));
        creatorCollector_Vanilla0.createUsingDefault((DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(2);
        LinkedHashMap linkedHashMap0 = (LinkedHashMap) creatorCollector_Vanilla0.createUsingDefault(deserializationContext0);
        linkedHashMap0.size();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(3);
        HashMap hashMap0 = (HashMap) creatorCollector_Vanilla0.createUsingDefault(deserializationContext0);
        hashMap0.isEmpty();
    }
}
