/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:52:16 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.format.TextStyle;
import java.util.Currency;
import java.util.Locale;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FromStringDeserializer_ESTest extends FromStringDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<URL> class0 = URL.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        RawValue rawValue0 = new RawValue(";86+2'(c)R_Jz'");
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        BinaryNode binaryNode0 = new BinaryNode(byteArray0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
        Class<URL> class0 = URL.class;
        URL uRL0 = objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<?>[] classArray0 = FromStringDeserializer.types();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigInteger bigInteger0 = BigInteger.TEN;
        BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
        Class<ReferenceType> class0 = ReferenceType.class;
        MappingIterator<ReferenceType> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<URI> class0 = URI.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<URL> class0 = URL.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Object> class0 = Object.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Currency> class0 = Currency.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Pattern> class0 = Pattern.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Locale> class0 = Locale.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        Locale locale0 = (Locale) fromStringDeserializer_Std0._deserializeFromEmptyString();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Charset> class0 = Charset.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<TimeZone> class0 = TimeZone.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<InetAddress> class0 = InetAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<URL> class0 = URL.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigInteger bigInteger0 = BigInteger.TEN;
        BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
        Class<URL> class0 = URL.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<URL> class0 = URL.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ValueNode valueNode0 = jsonNodeFactory0.rawValueNode((RawValue) null);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
        URL uRL0 = objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1);
        MockFile mockFile0 = (MockFile) fromStringDeserializer_Std0._deserialize(", cBluJn: ", (DeserializationContext) null);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
        fromStringDeserializer_Std0._deserialize("[]_", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 4);
        fromStringDeserializer_Std0._deserialize("v", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 5);
        fromStringDeserializer_Std0._deserialize(", cBluJn: ", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
        fromStringDeserializer_Std0._deserialize(" m: ", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 7);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        fromStringDeserializer_Std0._deserialize((String) null, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Object object0 = fromStringDeserializer_Std0._deserialize("[[W4|_", (DeserializationContext) null);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
        fromStringDeserializer_Std0._deserialize(".sE#?", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 10);
        ZoneInfo zoneInfo0 = (ZoneInfo) fromStringDeserializer_Std0._deserialize("[]_", (DeserializationContext) null);
        zoneInfo0.getID();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 11);
        Inet4Address inet4Address0 = (Inet4Address) fromStringDeserializer_Std0._deserialize((String) null, (DeserializationContext) null);
        inet4Address0.isLinkLocalAddress();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object object0 = fromStringDeserializer_Std0._deserialize("[]_", defaultDeserializationContext_Impl0);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Class<Integer> class0 = Integer.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-42305025));
        fromStringDeserializer_Std0._deserialize((String) null, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Class<URL> class0 = URL.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Locale locale0 = (Locale) fromStringDeserializer_Std0._deserialize("[]", (DeserializationContext) null);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object object0 = fromStringDeserializer_Std0._deserialize("[ and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )", defaultDeserializationContext_Impl0);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress) fromStringDeserializer_Std0._deserialize("JSON", defaultDeserializationContext_Impl0);
        mockInetSocketAddress0.isUnresolved();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        fromStringDeserializer_Std0._deserialize("[-Gb_MJ#K", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        fromStringDeserializer_Std0._deserialize("[$'*]vu:3[z*nxua;!", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress) fromStringDeserializer_Std0._deserialize("J D>9@pz;1TT:.I:o>U", (DeserializationContext) null);
        mockInetSocketAddress0.getPort();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Class<TextStyle> class0 = TextStyle.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        fromStringDeserializer_Std0._deserialize(", cBluJn: ", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Class<Integer> class0 = Integer.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
        URI uRI0 = (URI) fromStringDeserializer_Std0._deserializeFromEmptyString();
        uRI0.getScheme();
    }
}
