/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:59:59 GMT 2024
 */
package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.File;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectNode_ESTest extends ObjectNode_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.putAll(objectNode0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Iterator<String> iterator0 = objectNode0.fieldNames();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.hashCode();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonPointer jsonPointer0 = JsonPointer.valueOf("");
        JsonNode jsonNode0 = objectNode0._at(jsonPointer0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("{R>b", (short) 4125);
        objectNode1.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.removeAll();
        objectNode1.isInt();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        Iterator<JsonNode> iterator0 = objectNode0.elements();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        JsonNode jsonNode0 = objectNode0.without("USE_BIG_DECIMAL_FOR_FLOATS");
        jsonNode0.booleanValue();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonToken jsonToken0 = objectNode0.asToken();
        jsonToken0.isScalarValue();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.putObject("Can not map JSON null into type ");
        objectNode1.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.put("", 35);
        objectNode0.with("");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        String[] stringArray0 = new String[1];
        ObjectNode objectNode1 = objectNode0.retain(stringArray0);
        objectNode1.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
        ObjectNode objectNode1 = objectNode0.remove((Collection<String>) arrayDeque0);
        objectNode1.getNodeType();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.remove(",");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        boolean boolean0 = objectNode0.has(444);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("#uqW", 0L);
        objectNode1.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("com.fast!rxml.jackson.databind.node.ObjectNode", 0.0);
        objectNode1.withArray("com.fast!rxml.jackson.databind.node.ObjectNode");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode1 = new ObjectNode(jsonNodeFactory0, hashMap0);
        boolean boolean0 = objectNode0.equals(objectNode1);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put(")", false);
        objectNode1.isBigDecimal();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        ObjectNode objectNode1 = objectNode0.without((Collection<String>) linkedList0);
        objectNode1.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.path(4);
        jsonNode0.isBigDecimal();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectNode objectNode0 = new ObjectNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = objectNode0.traverse();
        jsonParser0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        JsonNode jsonNode0 = objectNode0.findValue("\"BH;VO)E0P%&");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.putPOJO("", hashMap0);
        objectNode1.asText();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("(,");
        ObjectNode objectNode1 = objectNode0.deepCopy();
        objectNode1.size();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("(,");
        ObjectNode objectNode1 = objectNode0.deepCopy();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.path("u<>OX@|z");
        jsonNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double((short) (-3127));
        objectNode0.put("/g7.E^|Yb", double0);
        JsonNode jsonNode0 = objectNode0.path("/g7.E^|Yb");
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.with("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
        ObjectNode objectNode2 = objectNode0.with("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.putArray(",");
        ArrayNode arrayNode1 = objectNode0.withArray(",");
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        JsonNode jsonNode0 = objectNode0.findValue("RhJ\"FsmOlw\")6VVe");
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("\"BH;VO)E0P%&", (Boolean) null);
        JsonNode jsonNode0 = objectNode1.findValue("\"BH;VO)E0P%&");
        jsonNode0.isInt();
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.putArray("");
        ObjectNode objectNode1 = arrayNode0.insertObject((-1625));
        ObjectNode objectNode2 = objectNode1.with("\"BH;VO)E0P%&");
        JsonNode jsonNode0 = objectNode0.findValue("\"BH;VO)E0P%&");
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put(",", ",");
        LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
        List<JsonNode> list0 = objectNode1.findValues("com.fasterxml.jackson.databind.ser.std.IterableSerializer", (List<JsonNode>) linkedList0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
        objectNode0.findValues("", (List<JsonNode>) linkedList0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.put("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap$Bucket", 44);
        List<JsonNode> list0 = objectNode0.findValues("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap$Bucket", (List<JsonNode>) null);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.put("}", (-1932963273));
        Stack<String> stack0 = new Stack<String>();
        objectNode0.findValuesAsText("}", (List<String>) stack0);
        stack0.toString();
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.put("}", (-1932963273));
        Stack<String> stack0 = new Stack<String>();
        objectNode0.findValuesAsText("}", (List<String>) stack0);
        stack0.size();
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("com.fast!rxml.jackson.databind.node.ObjectNode", 0.0);
        List<String> list0 = objectNode1.findValuesAsText("6yaxHwsMCs(t!f");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.put("@@]/5RA34e\"H7-(", 412.22467F);
        List<String> list0 = objectNode0.findValuesAsText("@@]/5RA34e\"H7-(");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        ObjectNode objectNode1 = objectNode0.findParent("Jv75-I");
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.putArray("");
        ObjectNode objectNode1 = arrayNode0.insertObject((-1885815433));
        ObjectNode objectNode2 = objectNode1.put("Jv75-I", ")");
        ObjectNode objectNode3 = objectNode0.findParent("Jv75-I");
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("{", (Double) null);
        ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
        List<JsonNode> list0 = objectNode1.findParents("' has value that is not of type ArrayNode (but ", (List<JsonNode>) arrayList0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putNull("' has value that is not of type ArrayNode (but ");
        ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
        objectNode0.findParents("' has value that is not of type ArrayNode (but ", (List<JsonNode>) arrayList0);
        arrayList0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test4146() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putNull("' has value that is not of type ArrayNode (but ");
        ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
        objectNode0.findParents("' has value that is not of type ArrayNode (but ", (List<JsonNode>) arrayList0);
        arrayList0.size();
    }

    @Test(timeout = 4000)
    public void test4247() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.withArray("] |a");
        List<JsonNode> list0 = objectNode0.findParents("] |a", (List<JsonNode>) null);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test4348() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double(196.88);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", double0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        MockFile mockFile0 = new MockFile("Ia*|beb'");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator) jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        objectNode1.serialize(writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test4449() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("");
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SZY", false);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "08Aq>}Oto{ o{}MYQv'");
        objectNode0.serializeWithType(jsonGeneratorDelegate0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.set("[Rg+1Xr7XPg)rWY", objectNode0);
        jsonNode0.asToken();
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.set("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap$Bucket", (JsonNode) null);
        jsonNode0.isInt();
    }

    @Test(timeout = 4000)
    public void test4752() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        JsonNode jsonNode0 = objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
        jsonNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test4853() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        hashMap0.put("{nJdaeO,t-:Zhr", (JsonNode) null);
        JsonNode jsonNode0 = objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
        jsonNode0.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test4954() throws Throwable {
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.putArray(",");
        JsonNode jsonNode0 = objectNode0.replace("^sQ6|h=&\"", arrayNode0);
    }

    @Test(timeout = 4000)
    public void test5055() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.replace("{}", (JsonNode) null);
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.put("b,DN~dP@vg*14", (JsonNode) null);
    }

    @Test(timeout = 4000)
    public void test5257() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Short short0 = new Short((short) (-1));
        ObjectNode objectNode1 = objectNode0.put("{", short0);
        objectNode1.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test5358() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put(" OL+", (Short) null);
        objectNode1.isShort();
    }

    @Test(timeout = 4000)
    public void test5459() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Integer integer0 = new Integer(1);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", integer0);
        objectNode1.isLong();
    }

    @Test(timeout = 4000)
    public void test5560() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("com.fast!rxml.jackson.databind.node.ObjectNode", (Integer) null);
        objectNode1.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Long long0 = new Long(172L);
        ObjectNode objectNode1 = objectNode0.put("6<v;\"na3/E/)sX^", long0);
        objectNode1.asToken();
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("|oLX&p", (Long) null);
        objectNode1.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test5863() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Float float0 = new Float((-1166.0));
        ObjectNode objectNode1 = objectNode0.put("{", float0);
        objectNode1.numberType();
    }

    @Test(timeout = 4000)
    public void test5964() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.node.ObjectNode", (Float) null);
        objectNode1.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test6065() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        ObjectNode objectNode1 = objectNode0.put("_SnTiTTpJ/9}", bigDecimal0);
        objectNode1.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        ObjectNode objectNode0 = new ObjectNode((JsonNodeFactory) null);
        objectNode0.put("6(*2%5P<-LYx#", (BigDecimal) null);
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put((String) null, (String) null);
        objectNode1.isLong();
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Boolean boolean0 = Boolean.valueOf("com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase");
        ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.node.ObjectNode", boolean0);
        objectNode1.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        byte[] byteArray0 = new byte[2];
        ObjectNode objectNode1 = objectNode0.put("DaYws*k*Y-k*yC6vutN", byteArray0);
        objectNode1.asToken();
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("' found, can't remove", (byte[]) null);
        objectNode1.asText();
    }

    @Test(timeout = 4000)
    public void test6671() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        boolean boolean0 = objectNode0.equals(objectNode0);
    }

    @Test(timeout = 4000)
    public void test6772() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        boolean boolean0 = objectNode0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test6873() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ArrayNode arrayNode0 = objectNode0.putArray("");
        boolean boolean0 = objectNode0.equals(arrayNode0);
    }

    @Test(timeout = 4000)
    public void test6974() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double(196.88);
        objectNode0.put("Ia*|beb'", double0);
        String string0 = objectNode0.toString();
    }

    @Test(timeout = 4000)
    public void test7075() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double(196.88);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", double0);
        objectNode1.put("{", (JsonNode) objectNode1);
        // Undeclared exception!
        objectNode0.toString();
    }
}
