/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 00:10:53 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.DataInput;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
        boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
        deserializationConfig0.requiresFullValue();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
        objectReader0.writeTree(filteringGeneratorDelegate0, (TreeNode) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        objectReader0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
        ObjectReader objectReader1 = objectReader0.withView(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        HashMap<CoreXMLDeserializers.Std, ArrayType> hashMap0 = new HashMap<CoreXMLDeserializers.Std, ArrayType>();
        ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        byte[] byteArray0 = new byte[2];
        objectReader0.readValues(byteArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        byte[] byteArray0 = new byte[0];
        LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
        linkedList0.add(objectReader0);
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
        dataFormatReaders_Match0.getMatchStrength();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        objectReader0._reportUndetectableSource(fileSystemHandling0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
        ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        objectReader0._inputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
        ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonReadFeature0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withoutRootName();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
        byte[] byteArray0 = new byte[12];
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
        objectReader0.withFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        PropertyName propertyName0 = new PropertyName("ZtbPCiDeu^5AK", "ZtbPCiDeu^5AK");
        ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withRootName("");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        JavaType javaType0 = TypeFactory.unknownType();
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
        objectReader0.readValue(jsonParser0, (ResolvedType) referenceType0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        objectReader0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        Locale locale0 = new Locale("Non-standard token '", "Non-standard token '", "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate");
        ObjectReader objectReader1 = objectReader0.with(locale0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1018, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-2049), 12, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        objectReader0.readValues((JsonParser) filteringParserDelegate0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        objectReader0.readValue((JsonNode) arrayNode0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
        objectReader0.withoutFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        ObjectReader[] objectReaderArray0 = new ObjectReader[4];
        ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
        objectReader1.equals((Object) objectReader0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ShortNode> class0 = ShortNode.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        Class<SimpleType> class1 = SimpleType.class;
        ObjectReader objectReader1 = objectReader0.withType(class1);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        Class<SimpleModule> class0 = SimpleModule.class;
        objectReader0.treeToValue((TreeNode) arrayNode0, class0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.createObjectNode();
        jsonNode0.isBigInteger();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.with((DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Object object0 = new Object();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
        objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        objectReader0.withFeatures((FormatFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<SimpleType> class0 = SimpleType.class;
        Iterator<SimpleType> iterator0 = objectReader0.readValues((JsonParser) null, class0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
        JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 66, 3127);
        objectReader0.readValue(jsonParser0, (TypeReference<BeanDeserializer>) null);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        objectReader0.readValues((JsonParser) null, (TypeReference<BeanDeserializer>) null);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URL uRL0 = MockURL.getFileExample();
        objectReader0._inputStream(uRL0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        char[] charArray0 = new char[2];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        objectReader0.readValue(jsonParser0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.at(";TX:)Ei))i");
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<ReferenceType> class0 = ReferenceType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        InjectableValues injectableValues0 = objectReader0.getInjectableValues();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        objectReader0.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        jsonNode0.isObject();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.withAttribute(deserializationFeature0, deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectReader objectReader1 = objectReader0.withType((Type) javaType0);
        objectReader1.equals((Object) objectReader0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
        JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        byte[] byteArray0 = new byte[0];
        JsonNode jsonNode0 = objectReader0.readTree(byteArray0, 3614, (-369));
        ObjectReader objectReader1 = objectReader0.withoutAttribute(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
        JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        TimeZone timeZone0 = TimeZone.getTimeZone("'; ctors: ");
        ObjectReader objectReader1 = objectReader0.with(timeZone0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
        objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeReference<DoubleNode> typeReference0 = (TypeReference<DoubleNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.withType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Object object0 = new Object();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
        Version version0 = objectReader0.version();
        version0.isUnknownVersion();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_YAML_COMMENTS;
        ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ContextAttributes contextAttributes0 = objectReader0.getAttributes();
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer(false);
        ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
        objectReader1.equals((Object) objectReader0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Object object0 = new Object();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3949, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
        Class<TextNode> class0 = TextNode.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 55296);
        objectReader0.writeValue(jsonGeneratorDelegate0, coreXMLDeserializers_Std0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValue((byte[]) null, (-790), (-790));
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-126));
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(locale_FilteringMode0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        PipedReader pipedReader0 = new PipedReader();
        objectReader0.readValue((Reader) pipedReader0);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValue("ZC (bWRw;");
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ShortNode> class0 = ShortNode.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        objectReader0.readValue((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValue((File) null);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValue(uRL0);
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValue((DataInput) null);
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
        jsonNode0.isBigDecimal();
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        StringReader stringReader0 = new StringReader("");
        JsonNode jsonNode0 = objectReader0.readTree((Reader) stringReader0);
        jsonNode0.isMissingNode();
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        objectReader0.readTree("Non-standard token '");
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        byte[] byteArray0 = new byte[1];
        objectReader0.readTree(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues((Reader) null);
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues("");
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues((File) null);
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test8383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues((DataInput) null);
    }

    @Test(timeout = 4000)
    public void test8484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        NullNode nullNode0 = jsonNodeFactory0.nullNode();
        Class<SimpleModule> class0 = SimpleModule.class;
        objectReader0.treeToValue((TreeNode) nullNode0, class0);
        SimpleModule simpleModule0 = objectReader0.treeToValue((TreeNode) nullNode0, class0);
    }

    @Test(timeout = 4000)
    public void test8585() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        objectReader0._bindAndClose((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test8686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        objectReader0._bindAndCloseAsTree((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test8787() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = new TextNode("4:V})E[");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(textNode0);
        ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
        objectReader0._bindAndCloseAsTree(jsonParser0);
        jsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test8788() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = new TextNode("4:V})E[");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(textNode0);
        ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
        objectReader0._bindAndCloseAsTree(jsonParser0);
        jsonParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test8889() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        char[] charArray0 = new char[9];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-1), 1);
        Class<Module> class0 = Module.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
        JavaType[] javaTypeArray0 = new JavaType[8];
        javaTypeArray0[0] = (JavaType) mapLikeType0;
        javaTypeArray0[7] = (JavaType) mapLikeType0;
        MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapLikeType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[7]);
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1281));
        objectReader0._unwrapAndDeserialize(jsonParser0, (DeserializationContext) null, mapType0, coreXMLDeserializers_Std0);
    }

    @Test(timeout = 4000)
    public void test8990() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
        objectReader1.readValue((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test9091() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectReader0._context;
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        char[] charArray0 = new char[1];
        charArray0[0] = '[';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test9192() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-126));
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, placeholderForType0);
    }

    @Test(timeout = 4000)
    public void test9293() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        byte[] byteArray0 = new byte[0];
        LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
    }

    @Test(timeout = 4000)
    public void test9394() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0._verifySchemaType((FormatSchema) null);
    }
}
