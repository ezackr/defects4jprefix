/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:13:13 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.URL;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTransientException;
import java.text.DateFormat;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MissingNode> class0 = MissingNode.class;
        MutableConfigOverride mutableConfigOverride0 = objectMapper0.configOverride(class0);
        mutableConfigOverride0.getIsIgnoredType();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<ArrayType> class0 = ArrayType.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
        SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 3, (Throwable) null);
        SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 3, sQLIntegrityConstraintViolationException0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLTransientException0);
        objectMapper0.canDeserialize((JavaType) referenceType0, atomicReference0);
        atomicReference0.toString();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        Version version0 = jsonFactory0.version();
        SimpleModule simpleModule0 = new SimpleModule("5cd~22o^5TY2i/", version0);
        Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
        SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class0, class0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
        objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.canDeserialize((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
        objectMapper0.readValue((byte[]) null, (JavaType) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        objectMapper0.readValue("", class0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DecimalNode>[] classArray0 = (Class<DecimalNode>[]) Array.newInstance(Class.class, 8);
        objectMapper0.registerSubtypes(classArray0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        byte[] byteArray0 = new byte[0];
        Class<DataOutputStream> class0 = DataOutputStream.class;
        objectMapper0.readValue(byteArray0, 1, 1, class0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<Throwable> class0 = Throwable.class;
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class1, class1);
        objectMapper0.convertValue((Object) class0, (JavaType) mapType0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockPrintStream> class0 = MockPrintStream.class;
        objectMapper0.readValue((Reader) null, class0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        objectMapper0.writer(serializationFeature0, (SerializationFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        objectMapper0.readValue(byteArray0, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("");
        Class<ReferenceType> class0 = ReferenceType.class;
        objectMapper0.readValue((File) mockFile0, class0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1684, "com.fasterxml.jackson.databind.node.BinaryNode");
        ObjectMapper objectMapper1 = objectMapper0.setTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 870, (-991));
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        Class<MapType> class0 = MapType.class;
        objectMapper0.readValue((DataInput) dataInputStream0, class0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerFor((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ReferenceType> class0 = ReferenceType.class;
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        Class<Integer> class1 = Integer.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        objectMapper0.readValue((DataInput) dataInputStream0, (JavaType) resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper_DefaultTyping0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateInstance();
        ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) simpleFilterProvider0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MockFileWriter> class0 = MockFileWriter.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        objectMapper0.readValue("r#LEh{XR,,z|V", (JavaType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        objectMapper0.setFilters(simpleFilterProvider0);
        simpleFilterProvider0.willFailOnUnknownId();
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile((String) null, "tHjWmA*\"v");
        objectMapper0.writeValue((File) mockFile0, (Object) "tHjWmA*\"v");
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<MapLikeType> class1 = MapLikeType.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) mapType0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<StringReader> class0 = StringReader.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<FilterOutputStream> typeReference0 = (TypeReference<FilterOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue((byte[]) null, 4, 4, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ValueNode valueNode0 = jsonNodeFactory0.pojoNode(objectMapper0);
        Class<ArrayNode> class0 = ArrayNode.class;
        objectMapper0.treeToValue((TreeNode) valueNode0, class0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringReader stringReader0 = new StringReader("l.M.[4 [rE,EBR:'TO(");
        objectMapper0.readValue((Reader) stringReader0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        objectMapper0.disable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<LineNumberReader> typeReference0 = (TypeReference<LineNumberReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.reader(typeReference0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<MockPrintWriter> typeReference0 = (TypeReference<MockPrintWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((JsonParser) null, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("h", "com.fasterxml.jackson.databind.node.BooleanNode");
        URL uRL0 = mockFile0.toURL();
        objectMapper0.readValue(uRL0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("zMC*Y@pv4<=M2C");
        objectMapper0.readValue((File) mockFile0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = objectMapper0.writeValueAsBytes((Object) null);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValues((JsonParser) null, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = objectMapper0.version();
        SimpleModule simpleModule0 = new SimpleModule((String) null, version0);
        Module[] moduleArray0 = new Module[2];
        moduleArray0[0] = (Module) simpleModule0;
        objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy propertyNamingStrategy0 = objectMapper0.getPropertyNamingStrategy();
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
        objectMapper0.writeValue((OutputStream) mockPrintStream0, (Object) mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringWriter stringWriter0 = new StringWriter();
        objectMapper0.writeValue((Writer) stringWriter0, (Object) stringWriter0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(560);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        objectMapper0.writeValue((DataOutput) dataOutputStream0, (Object) serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("/kqMf?l");
        ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BooleanNode> class0 = BooleanNode.class;
        objectMapper0.addMixInAnnotations(class0, class0);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        char[] charArray0 = new char[7];
        CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
        JsonParser jsonParser0 = jsonFactory0.createParser((Reader) charArrayReader0);
        objectMapper0.readValue(jsonParser0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        POJONode pOJONode0 = new POJONode(pipedOutputStream0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        JsonParser jsonParser0 = objectReader0.treeAsTokens(pOJONode0);
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        MappingIterator<AbstractDeserializer> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
        ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy) PropertyNamingStrategy.KEBAB_CASE;
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_KebabCaseStrategy0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ShortNode> class0 = ShortNode.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
        Object object0 = objectMapper0.setHandlerInstantiator(handlerInstantiator0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockPrintStream> class0 = MockPrintStream.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "$VALUES");
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 34;
        objectMapper0.readTree(byteArray0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        objectMapper0.readValue((InputStream) pipedInputStream0, class0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
        ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) jsonpCharacterEscapes0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DateFormat dateFormat0 = objectMapper0.getDateFormat();
        dateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
        objectMapper0.readValue((JsonParser) filteringParserDelegate0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        MappingIterator<CoreXMLDeserializers.Std> mappingIterator0 = objectMapper0.readValues(jsonParser0, (ResolvedType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        int int0 = objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
        objectMapper0.writeValueAsString(sequenceInputStream0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.booleanValue();
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<BeanDeserializer> typeReference0 = (TypeReference<BeanDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue((URL) null, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[9];
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        objectMapper0.readValue(byteArray0, (int) (-69), (int) 2, (JavaType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
        objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues injectableValues0 = objectMapper0.getInjectableValues();
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        objectMapper0.readValue((URL) null, class0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[6];
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        objectMapper0.readValue(byteArray0, class0);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        Class<?> class1 = objectMapper0.findMixInClassFor(class0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        objectMapper0.enable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((SerializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        Version version0 = jsonFactory0.version();
        SimpleModule simpleModule0 = new SimpleModule("com.fasterxml.jackson.databind.ObjectMapper$1", version0);
        NamedType[] namedTypeArray0 = new NamedType[2];
        SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("Module without defined version");
        TypeReference<OutputStreamWriter> typeReference0 = (TypeReference<OutputStreamWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue((File) mockFile0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.constructType((Type) null);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedReader pipedReader0 = new PipedReader();
        TypeReference<InputStreamReader> typeReference0 = (TypeReference<InputStreamReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((Reader) pipedReader0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        Class<InputStreamReader> class0 = InputStreamReader.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, (AtomicReference<Throwable>) null);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 5);
        TypeReference<FilterOutputStream> typeReference0 = (TypeReference<FilterOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.convertValue((Object) bufferedOutputStream0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ReferenceType> typeReference0 = (TypeReference<ReferenceType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((InputStream) null, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<ArrayType> class0 = ArrayType.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) simpleType0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readValue((InputStream) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<CollectionLikeType> typeReference0 = (TypeReference<CollectionLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue("!q,2t:", (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        serializerProvider0.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, jacksonAnnotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("h'Xkw='No'\u0002");
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        simpleModule0.setKeySerializers(simpleSerializers0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[9];
        Version version0 = Version.unknownVersion();
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends ResolvedRecursiveType>) jsonDeserializer0);
        moduleArray0[0] = (Module) simpleModule0;
        objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
        simpleModule0.setValueInstantiators(simpleValueInstantiators0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-550), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
        objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-550), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1rH", version0);
        moduleArray0[0] = (Module) simpleModule0;
        Class<MockFileWriter> class0 = MockFileWriter.class;
        JsonSerializer<MockFileWriter> jsonSerializer0 = (JsonSerializer<MockFileWriter>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        simpleModule0.addSerializer((Class<? extends MockFileWriter>) class0, jsonSerializer0);
        objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-550), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        simpleModule0.setSerializerModifier(beanSerializerModifier0);
        objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        objectMapper0.convertValue((Object) class0, class0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        objectMapper0.convertValue((Object) objectMapper0, class0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<String> class0 = String.class;
        ObjectWriter objectWriter0 = objectMapper1.writerWithType(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        JavaType javaType0 = TypeFactory.unknownType();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(referenceType0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "I`");
        Class<ShortNode> class0 = ShortNode.class;
        ObjectWriter objectWriter0 = objectMapper1.writerFor(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        objectMapper1.equals((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<IntNode> class0 = IntNode.class;
        objectMapper0._checkInvalidCopy(class0);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule(";`fW.w2S", (Version) null);
        objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-550), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        moduleArray0[1] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        LinkedList<Module> linkedList0 = new LinkedList<Module>();
        Version version0 = Version.unknownVersion();
        SimpleModule simpleModule0 = new SimpleModule("", version0);
        linkedList0.offer(simpleModule0);
        ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) linkedList0);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        List<Module> list0 = ObjectMapper.findModules(classLoader0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        jsonParser_FeatureArray0[3] = jsonParser_FeatureArray0[2];
        jsonParser_FeatureArray0[4] = jsonParser_FeatureArray0[0];
        jsonParser_FeatureArray0[5] = jsonParser_FeatureArray0[0];
        jsonParser_FeatureArray0[6] = jsonParser_FeatureArray0[3];
        jsonParser_FeatureArray0[7] = jsonParser_FeatureArray0[1];
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_FeatureArray0[0];
        jsonParser_FeatureArray0[3] = jsonParser_Feature0;
        jsonParser_FeatureArray0[4] = jsonParser_FeatureArray0[2];
        jsonParser_FeatureArray0[5] = jsonParser_Feature0;
        jsonParser_FeatureArray0[6] = jsonParser_FeatureArray0[4];
        jsonParser_FeatureArray0[7] = jsonParser_FeatureArray0[6];
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[4] = jsonGenerator_FeatureArray0[2];
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_FeatureArray0[2];
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 34;
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        BinaryNode binaryNode0 = objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 34;
        byteArray0[1] = (byte) 34;
        JsonNode jsonNode0 = objectMapper0.readTree(byteArray0);
        jsonNode0.isLong();
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.valueToTree((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
        POJONode pOJONode0 = new POJONode(jsonpCharacterEscapes0);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) pOJONode0);
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
        IntNode intNode0 = IntNode.valueOf(56319);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) intNode0);
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
        IntNode intNode0 = new IntNode(56319);
        objectMapper0.writeTree(jsonGenerator0, (JsonNode) intNode0);
    }

    @Test(timeout = 4000)
    public void test169169() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        Class<ArrayNode> class0 = ArrayNode.class;
        ArrayNode arrayNode1 = objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
    }

    @Test(timeout = 4000)
    public void test170170() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        NullNode nullNode0 = NullNode.getInstance();
        Class<CollectionType> class0 = CollectionType.class;
        CollectionType collectionType0 = objectMapper0.treeToValue((TreeNode) nullNode0, class0);
    }

    @Test(timeout = 4000)
    public void test171171() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        byte[] byteArray0 = new byte[2];
        Class<ArrayNode> class0 = ArrayNode.class;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.withArray((String) null);
        BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
        objectMapper0.treeToValue((TreeNode) binaryNode0, class0);
    }

    @Test(timeout = 4000)
    public void test172172() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ValueNode valueNode0 = jsonNodeFactory0.pojoNode((Object) null);
        Class<ArrayNode> class0 = ArrayNode.class;
        ArrayNode arrayNode0 = objectMapper0.treeToValue((TreeNode) valueNode0, class0);
    }

    @Test(timeout = 4000)
    public void test173173() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MissingNode missingNode0 = objectMapper0.valueToTree((Object) null);
    }

    @Test(timeout = 4000)
    public void test174174() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test175175() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.writerFor(typeReference0);
    }

    @Test(timeout = 4000)
    public void test176176() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectWriter objectWriter0 = objectMapper0.writerFor((TypeReference<?>) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test177177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("Current token not FIELD_NAME (to contain expected root name '");
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test178178() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test179179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<PipedReader> typeReference0 = (TypeReference<PipedReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.writerWithType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test180180() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test181181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        BufferedInputStream bufferedInputStream0 = objectMapper0.convertValue((Object) null, class0);
    }

    @Test(timeout = 4000)
    public void test182182() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        objectMapper0.convertValue((Object) typeFactory0, (JavaType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test183183() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MissingNode> class0 = MissingNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MapLikeType mapLikeType0 = objectMapper0.convertValue((Object) null, (JavaType) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test184184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
        TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
        JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
        Object object0 = objectMapper0._convert(doubleNode0, javaType0);
    }

    @Test(timeout = 4000)
    public void test185185() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        NullNode nullNode0 = NullNode.instance;
        BufferedInputStream bufferedInputStream0 = objectMapper0.convertValue((Object) nullNode0, class0);
    }

    @Test(timeout = 4000)
    public void test186186() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
        objectMapper0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }
}
