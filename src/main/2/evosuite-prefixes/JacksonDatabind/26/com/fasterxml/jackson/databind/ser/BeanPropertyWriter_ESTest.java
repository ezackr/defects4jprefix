/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:25:32 GMT 2024
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getMember();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getViews();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.assignTypeSerializer((TypeSerializer) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isVirtual();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isVirtual();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isUnwrapping();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isUnwrapping();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getWrapperName();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getFullName();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getSerializedName();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getMetadata();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter(nameTransformer0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getTypeSerializer();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("D3V#6U39;RXr%K", "D3V#6U39;RXr%K");
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
        beanPropertyWriter2.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("D3V#6U39;RXr%K", "D3V#6U39;RXr%K");
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
        beanPropertyWriter2.getName();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("ADpDGRW0UB", "ADpDGRW0UB");
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedField annotatedField0 = new AnnotatedField((AnnotatedClass) null, (Field) null, annotationMap0);
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        ArrayType arrayType0 = ArrayType.construct(simpleType0, objectIdGenerators_IntSequenceGenerator0, (Object) null);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, arrayType0);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionLikeType0, (Object) collectionLikeType0, (Object) simpleType0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
        AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, beanPropertyWriter0);
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, referenceType0, (JsonSerializer<?>) null, asArrayTypeSerializer0, collectionLikeType0, false, classNameIdResolver0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName((String) null, "c$zx ");
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        beanPropertyWriter0._internalSettings = hashMap0;
        BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0._new(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DOMSerializer dOMSerializer0 = new DOMSerializer();
        beanPropertyWriter0.setInternalSetting(dOMSerializer0, dOMSerializer0);
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
        beanPropertyWriter2.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<AnnotatedField> jsonSerializer0 = (JsonSerializer<AnnotatedField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonSerializer0).toString();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, annotationIntrospector1);
        JsonSerializer<Object> jsonSerializer1 = beanPropertyWriter0.getSerializer();
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<AnnotatedField> jsonSerializer0 = (JsonSerializer<AnnotatedField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonSerializer0).toString();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, annotationIntrospector1);
        JsonSerializer<Object> jsonSerializer1 = beanPropertyWriter0.getSerializer();
        beanPropertyWriter0.assignSerializer(jsonSerializer1);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<AnnotatedField> jsonSerializer0 = (JsonSerializer<AnnotatedField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.hasNullSerializer();
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
        beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        BeanPropertyWriter beanPropertyWriter1 = (BeanPropertyWriter) beanPropertyWriter0.readResolve();
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.readResolve();
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, true, (Object) null);
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = beanPropertyWriter0.findAnnotation(class0);
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Class<Annotation> class0 = Annotation.class;
        beanPropertyWriter0.findAnnotation(class0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2632() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        beanPropertyWriter0._internalSettings = hashMap0;
        beanPropertyWriter0.getInternalSetting((Object) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getInternalSetting(beanPropertyWriter0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.setInternalSetting(beanPropertyWriter0, beanPropertyWriter0);
        JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include) BeanPropertyWriter.MARKER_FOR_EMPTY;
        Object object0 = beanPropertyWriter0.setInternalSetting(jsonInclude_Include0, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.setInternalSetting(beanPropertyWriter0, beanPropertyWriter0);
        JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include) BeanPropertyWriter.MARKER_FOR_EMPTY;
        Object object0 = beanPropertyWriter0.setInternalSetting(jsonInclude_Include0, jsonInclude_Include0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3140() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include) BeanPropertyWriter.MARKER_FOR_EMPTY;
        beanPropertyWriter0.removeInternalSetting(jsonInclude_Include0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        beanPropertyWriter0.setInternalSetting(coreXMLSerializers_XMLGregorianCalendarSerializer0, beanPropertyWriter0);
        Object object0 = beanPropertyWriter0.removeInternalSetting(serializedString0);
    }

    @Test(timeout = 4000)
    public void test3242() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        beanPropertyWriter0.setInternalSetting(coreXMLSerializers_XMLGregorianCalendarSerializer0, beanPropertyWriter0);
        Object object0 = beanPropertyWriter0.removeInternalSetting(serializedString0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3343() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        beanPropertyWriter0._internalSettings = hashMap0;
        beanPropertyWriter0.removeInternalSetting((Object) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3444() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.hasSerializer();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3546() throws Throwable {
        PropertyName propertyName0 = PropertyName.construct((String) null);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<AnnotatedField> jsonSerializer0 = (JsonSerializer<AnnotatedField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        boolean boolean0 = beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test3647() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
    }

    @Test(timeout = 4000)
    public void test3648() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3749() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
        boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
    }

    @Test(timeout = 4000)
    public void test3850() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.construct("L8CQU<ttm-qB6", "L8CQU<ttm-qB6");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3953() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.construct("L8CQU<ttm-qB6", "L8CQU<ttm-qB6");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test4054() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test4055() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test4156() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        Class<Module> class1 = Module.class;
        Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        JsonSerializer<DOMSerializer> jsonSerializer0 = (JsonSerializer<DOMSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Std0, "BQLAy;VU'YX5/+b]:+");
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, mapType0, jsonSerializer0, asExternalTypeSerializer0, mapType0, false, (Object) null);
        Class<?> class3 = beanPropertyWriter0.getRawSerializationType();
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test4157() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        Class<Module> class1 = Module.class;
        Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        JsonSerializer<DOMSerializer> jsonSerializer0 = (JsonSerializer<DOMSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Std0, "BQLAy;VU'YX5/+b]:+");
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, mapType0, jsonSerializer0, asExternalTypeSerializer0, mapType0, false, (Object) null);
        Class<?> class3 = beanPropertyWriter0.getRawSerializationType();
    }

    @Test(timeout = 4000)
    public void test4258() throws Throwable {
        PropertyName propertyName0 = PropertyName.construct((String) null);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<AnnotatedField> jsonSerializer0 = (JsonSerializer<AnnotatedField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        beanPropertyWriter0.getRawSerializationType();
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test4359() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getPropertyType();
    }

    @Test(timeout = 4000)
    public void test4460() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsField((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test4561() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsOmittedField(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsElement(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test4763() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsPlaceholder((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test4864() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        beanPropertyWriter0.serializeAsPlaceholder(simpleObjectIdResolver0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test4965() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5066() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (JavaType) null, true, propertyName0);
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
        beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test5167() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<Locale> class0 = Locale.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, simpleType0, true, pOJOPropertyBuilder0);
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test5268() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<TypeIdResolver> jsonSerializer0 = (JsonSerializer<TypeIdResolver>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonSerializer0).toString();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, true, (Object) null);
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test5369() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForRootValues();
        Class<String> class0 = String.class;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test5470() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        beanPropertyWriter0.setNonTrivialBaseType(collectionLikeType0);
        Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0._findAndAddDynamic((PropertySerializerMap) null, class1, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test5571() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.get(beanPropertyWriter0);
    }

    @Test(timeout = 4000)
    public void test5672() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        boolean boolean0 = beanPropertyWriter0._handleSelfReference((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5673() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        boolean boolean0 = beanPropertyWriter0._handleSelfReference((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test5774() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        JsonSerializer<Annotation> jsonSerializer0 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(jsonSerializer0).usesObjectId();
        boolean boolean0 = beanPropertyWriter0._handleSelfReference(beanSerializerFactory0, (JsonGenerator) null, defaultSerializerProvider_Impl1, jsonSerializer0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5775() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        JsonSerializer<Annotation> jsonSerializer0 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(jsonSerializer0).usesObjectId();
        boolean boolean0 = beanPropertyWriter0._handleSelfReference(beanSerializerFactory0, (JsonGenerator) null, defaultSerializerProvider_Impl1, jsonSerializer0);
    }

    @Test(timeout = 4000)
    public void test5876() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
    }

    @Test(timeout = 4000)
    public void test5877() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5978() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        Class<Locale.Category> class0 = Locale.Category.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        beanPropertyWriter0.assignSerializer(beanSerializer0);
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test5979() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        Class<Locale.Category> class0 = Locale.Category.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        beanPropertyWriter0.assignSerializer(beanSerializer0);
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
    }
}
