/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 17:20:40 GMT 2024
 */
package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SimplexOptimizer_ESTest extends SimplexOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(72, 72);
        OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
        simplexOptimizer0.optimize(optimizationDataArray0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-502.0), (-502.0));
        OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-502.0);
        MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
        optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
        InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
        optimizationDataArray0[1] = (OptimizationData) initialGuess0;
        simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
        simplexOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(32);
        SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(32, 32);
        OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
        SimpleBounds simpleBounds0 = SimpleBounds.unbounded(32);
        optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
        optimizationDataArray0[1] = (OptimizationData) multiDirectionalSimplex0;
        simplexOptimizer0.optimize(optimizationDataArray0);
    }
}
