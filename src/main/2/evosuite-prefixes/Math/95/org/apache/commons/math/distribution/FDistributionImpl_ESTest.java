/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:13:25 GMT 2024
 */
package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FDistributionImpl_ESTest extends FDistributionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        fDistributionImpl0.inverseCumulativeProbability(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        double double0 = fDistributionImpl0.cumulativeProbability(0.0, Double.POSITIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        double double0 = fDistributionImpl0.cumulativeProbability(0.0, Double.POSITIVE_INFINITY);
        fDistributionImpl0.getDenominatorDegreesOfFreedom();
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        double double0 = fDistributionImpl0.cumulativeProbability(0.0, Double.POSITIVE_INFINITY);
        fDistributionImpl0.getNumeratorDegreesOfFreedom();
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.5, 0.5);
        double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
        fDistributionImpl0.getDenominatorDegreesOfFreedom();
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.5, 0.5);
        double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
        fDistributionImpl0.getNumeratorDegreesOfFreedom();
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.5, 0.5);
        double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
        fDistributionImpl0.getNumeratorDegreesOfFreedom();
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
        fDistributionImpl0.getDenominatorDegreesOfFreedom();
    }

    @Test(timeout = 4000)
    public void test410() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.POSITIVE_INFINITY, 4.652362892704858E-5);
        fDistributionImpl0.setNumeratorDegreesOfFreedom(0.0);
    }

    @Test(timeout = 4000)
    public void test511() throws Throwable {
        FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.5, 0.5);
        fDistributionImpl0.setDenominatorDegreesOfFreedom(0.0);
    }
}
