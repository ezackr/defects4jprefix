/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 16:32:28 GMT 2024
 */
package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.NaN;
        List<Complex> list0 = complex0.I.nthRoot(140);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.NaN;
        List<Complex> list0 = complex0.I.nthRoot(140);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.pow(2947.6516350528);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.pow(2947.6516350528);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.NaN;
        ComplexField complexField0 = complex0.I.getField();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex((-1.4672600326020399E299));
        Complex complex1 = complex0.acos();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex((-1.4672600326020399E299));
        Complex complex1 = complex0.acos();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-1.4672600326020399E299));
        Complex complex1 = complex0.acos();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-1.4672600326020399E299));
        Complex complex1 = complex0.acos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        String string0 = complex0.INF.toString();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        String string0 = complex0.INF.toString();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        String string0 = complex0.INF.toString();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        String string0 = complex0.INF.toString();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        String string0 = complex0.INF.toString();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        Complex complex0 = Complex.valueOf((-1914.57746));
        Complex complex1 = complex0.pow(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        Complex complex0 = Complex.valueOf((-1914.57746));
        Complex complex1 = complex0.pow(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        Complex complex0 = Complex.I;
        boolean boolean0 = complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.sqrt();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.sqrt();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.sqrt();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        Complex complex0 = Complex.NaN;
        double double0 = complex0.abs();
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        Complex complex0 = Complex.ZERO;
        double double0 = complex0.abs();
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.asin();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.acos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.acos();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.add(Double.NaN);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add((-1.0));
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1428() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add((-1.0));
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1429() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add((-1.0));
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add((-1.0));
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1531() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.conjugate();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1532() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.conjugate();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1533() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.conjugate();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1634() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.conjugate();
    }

    @Test(timeout = 4000)
    public void test1735() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.divide(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1836() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1837() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1838() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1839() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1940() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2043() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2044() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ONE.divide(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2145() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.INF.atan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2246() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.divide(1913.93332888289);
    }

    @Test(timeout = 4000)
    public void test2347() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(Double.NaN);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2448() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2449() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test2550() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.divide(0.0);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2651() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.divide(550.19);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2652() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.divide(550.19);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2653() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.divide(550.19);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2654() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.divide(550.19);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2755() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2856() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2857() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2858() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2859() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2960() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.reciprocal();
    }

    @Test(timeout = 4000)
    public void test3061() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3062() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3063() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test3064() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3065() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test3066() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3167() throws Throwable {
        Complex complex0 = Complex.ONE;
        boolean boolean0 = complex0.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test3268() throws Throwable {
        Complex complex0 = Complex.valueOf(402.968600877703);
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test3269() throws Throwable {
        Complex complex0 = Complex.valueOf(402.968600877703);
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3270() throws Throwable {
        Complex complex0 = Complex.valueOf(402.968600877703);
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test3271() throws Throwable {
        Complex complex0 = Complex.valueOf(402.968600877703);
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test3272() throws Throwable {
        Complex complex0 = Complex.valueOf(402.968600877703);
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3373() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test3374() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3475() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.asin();
        Complex complex2 = complex0.multiply(0.0);
        boolean boolean0 = complex2.equals(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3476() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.asin();
        Complex complex2 = complex0.multiply(0.0);
        boolean boolean0 = complex2.equals(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3477() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.asin();
        Complex complex2 = complex0.multiply(0.0);
        boolean boolean0 = complex2.equals(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3478() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.asin();
        Complex complex2 = complex0.multiply(0.0);
        boolean boolean0 = complex2.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test3479() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.asin();
        Complex complex2 = complex0.multiply(0.0);
        boolean boolean0 = complex2.equals(complex1);
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test3480() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.asin();
        Complex complex2 = complex0.multiply(0.0);
        boolean boolean0 = complex2.equals(complex1);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3581() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3582() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3583() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test3684() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.I.hashCode();
    }

    @Test(timeout = 4000)
    public void test3785() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ONE.multiply(complex0);
    }

    @Test(timeout = 4000)
    public void test3886() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ONE.multiply(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3987() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf((-1.4672600326020399E299), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.ZERO.multiply(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3988() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf((-1.4672600326020399E299), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.ZERO.multiply(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3989() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf((-1.4672600326020399E299), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.ZERO.multiply(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3990() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf((-1.4672600326020399E299), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.ZERO.multiply(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4091() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-4212));
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4092() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-4212));
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4093() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-4212));
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test4094() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-4212));
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4195() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.multiply(1702);
    }

    @Test(timeout = 4000)
    public void test4296() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.multiply((-786));
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4397() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.multiply(1702);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4398() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.multiply(1702);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4399() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.multiply(1702);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test43100() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.multiply(1702);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test44101() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.multiply(2.0);
    }

    @Test(timeout = 4000)
    public void test45102() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.multiply(Double.NaN);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test46103() throws Throwable {
        Complex complex0 = Complex.valueOf(26.27464638928531, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(26.27464638928531);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test46104() throws Throwable {
        Complex complex0 = Complex.valueOf(26.27464638928531, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(26.27464638928531);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test46105() throws Throwable {
        Complex complex0 = Complex.valueOf(26.27464638928531, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(26.27464638928531);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test46106() throws Throwable {
        Complex complex0 = Complex.valueOf(26.27464638928531, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(26.27464638928531);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test47107() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test48108() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
        complex2.isNaN();
    }

    @Test(timeout = 4000)
    public void test48109() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
    }

    @Test(timeout = 4000)
    public void test48110() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test48111() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test48112() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test48113() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test49114() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.subtract(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test50115() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test50116() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test51117() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.subtract((-284.5248018489));
    }

    @Test(timeout = 4000)
    public void test52118() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ONE.subtract(Double.NaN);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test53119() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.subtract((-284.5248018489));
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test53120() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.subtract((-284.5248018489));
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test53121() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.subtract((-284.5248018489));
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test53122() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.subtract((-284.5248018489));
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test54123() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.acos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test55124() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.NaN.asin();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test56125() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test56126() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test56127() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test56128() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test57129() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.cos();
    }

    @Test(timeout = 4000)
    public void test58130() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.cosh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test58131() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.cosh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test58132() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.cosh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test58133() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.cosh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test59134() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.exp();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test60135() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test61136() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sinh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test62137() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.acos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test62138() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.acos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test63139() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.tan();
    }

    @Test(timeout = 4000)
    public void test64140() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test64141() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.tan();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test64142() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.tan();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test64143() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.tan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test64144() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.tan();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test64145() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
        Complex complex1 = complex0.I.tan();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test65146() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test66147() throws Throwable {
        Complex complex0 = new Complex(3.5309958122633854E135, 3.5309958122633854E135);
        Complex complex1 = complex0.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test66148() throws Throwable {
        Complex complex0 = new Complex(3.5309958122633854E135, 3.5309958122633854E135);
        Complex complex1 = complex0.tan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test66149() throws Throwable {
        Complex complex0 = new Complex(3.5309958122633854E135, 3.5309958122633854E135);
        Complex complex1 = complex0.tan();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test66150() throws Throwable {
        Complex complex0 = new Complex(3.5309958122633854E135, 3.5309958122633854E135);
        Complex complex1 = complex0.tan();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test67151() throws Throwable {
        Complex complex0 = new Complex((-2175.5405600181025), (-2175.5405600181025));
        Complex complex1 = complex0.tan();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test67152() throws Throwable {
        Complex complex0 = new Complex((-2175.5405600181025), (-2175.5405600181025));
        Complex complex1 = complex0.tan();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test67153() throws Throwable {
        Complex complex0 = new Complex((-2175.5405600181025), (-2175.5405600181025));
        Complex complex1 = complex0.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test67154() throws Throwable {
        Complex complex0 = new Complex((-2175.5405600181025), (-2175.5405600181025));
        Complex complex1 = complex0.tan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test68155() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.tanh();
    }

    @Test(timeout = 4000)
    public void test69156() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test69157() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test69158() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test69159() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test70160() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test71161() throws Throwable {
        Complex complex0 = new Complex(4769.553993);
        Complex complex1 = complex0.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test71162() throws Throwable {
        Complex complex0 = new Complex(4769.553993);
        Complex complex1 = complex0.tanh();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test71163() throws Throwable {
        Complex complex0 = new Complex(4769.553993);
        Complex complex1 = complex0.tanh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test71164() throws Throwable {
        Complex complex0 = new Complex(4769.553993);
        Complex complex1 = complex0.tanh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test72165() throws Throwable {
        Complex complex0 = new Complex((-2152.884662036), (-2152.884662036));
        Complex complex1 = complex0.tanh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test72166() throws Throwable {
        Complex complex0 = new Complex((-2152.884662036), (-2152.884662036));
        Complex complex1 = complex0.tanh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test72167() throws Throwable {
        Complex complex0 = new Complex((-2152.884662036), (-2152.884662036));
        Complex complex1 = complex0.tanh();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test72168() throws Throwable {
        Complex complex0 = new Complex((-2152.884662036), (-2152.884662036));
        Complex complex1 = complex0.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test73169() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.ONE.nthRoot((-1253));
    }

    @Test(timeout = 4000)
    public void test74170() throws Throwable {
        Complex complex0 = Complex.ONE;
        List<Complex> list0 = complex0.NaN.nthRoot(4943);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test74171() throws Throwable {
        Complex complex0 = Complex.ONE;
        List<Complex> list0 = complex0.NaN.nthRoot(4943);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test75172() throws Throwable {
        Complex complex0 = Complex.INF;
        List<Complex> list0 = complex0.nthRoot(1);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test76173() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test77174() throws Throwable {
        Complex complex0 = Complex.valueOf((-2257.817), Double.NaN);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test78175() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        complex0.getImaginary();
    }
}
