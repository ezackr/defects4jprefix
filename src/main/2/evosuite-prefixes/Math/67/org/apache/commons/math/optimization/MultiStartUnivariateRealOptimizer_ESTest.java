/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:09:21 GMT 2024
 */
package org.apache.commons.math.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer;
import org.apache.commons.math.optimization.UnivariateRealOptimizer;
import org.apache.commons.math.random.JDKRandomGenerator;
import org.apache.commons.math.random.MersenneTwister;
import org.apache.commons.math.random.RandomAdaptor;
import org.apache.commons.math.random.RandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MultiStartUnivariateRealOptimizer_ESTest extends MultiStartUnivariateRealOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 11, jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.setRelativeAccuracy(2185.6);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
        multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getRelativeAccuracy();
        MersenneTwister mersenneTwister0 = new MersenneTwister(2073);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2073, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getRelativeAccuracy();
        multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getRelativeAccuracy();
        MersenneTwister mersenneTwister0 = new MersenneTwister(2073);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2073, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getRelativeAccuracy();
        multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getRelativeAccuracy();
        MersenneTwister mersenneTwister0 = new MersenneTwister(2073);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2073, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getRelativeAccuracy();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 0, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.setAbsoluteAccuracy(0.0);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getAbsoluteAccuracy();
        MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-3430), mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getAbsoluteAccuracy();
        multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getAbsoluteAccuracy();
        MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-3430), mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getAbsoluteAccuracy();
        multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getAbsoluteAccuracy();
        MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-3430), mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getAbsoluteAccuracy();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 1342, jDKRandomGenerator0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 1342, jDKRandomGenerator0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 1342, jDKRandomGenerator0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getResult();
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-699), jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.getResult();
        multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getResult();
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-699), jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.getResult();
        multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0.0).when(univariateRealOptimizer0).getResult();
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-699), jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.getResult();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister(722L);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 2028, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.resetRelativeAccuracy();
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 3032, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getIterationCount();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 3032, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getIterationCount();
        multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 3032, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        double[] doubleArray0 = new double[5];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 1, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (double) 1984, (-1.0), 0.0);
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.resetMaximalIterationCount();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.resetMaximalIterationCount();
        multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.resetMaximalIterationCount();
        multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, (-1080), jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.resetAbsoluteAccuracy();
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(jDKRandomGenerator0);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 243, randomAdaptor0);
        multiStartUnivariateRealOptimizer0.getFunctionValue();
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getIterationCount();
    }

    @Test(timeout = 4000)
    public void test1329() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getMaximalIterationCount();
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister((-1088));
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 2470, mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(80, 80, 80, 72, 51).when(univariateRealOptimizer0).getIterationCount();
        doReturn(76, (-664), 51, (-664), 76).when(univariateRealOptimizer0).getEvaluations();
        doReturn((double) 51, (-1688.9910437744), (double) 80, (-1.0), (-2.0)).when(univariateRealOptimizer0).getFunctionValue();
        doReturn((-2175.04964), (-2.0), (-2.0), 2900.7, (-1.0)).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        double[] doubleArray0 = new double[3];
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 1990, jDKRandomGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (-1743.636239440636), (-1743.636239440636));
        multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getFunctionValue();
    }

    @Test(timeout = 4000)
    public void test1532() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(jDKRandomGenerator0);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 1990, randomAdaptor0);
        multiStartUnivariateRealOptimizer0.getOptima();
    }

    @Test(timeout = 4000)
    public void test1633() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(1737, 1737, 1737, 1737, 1737).when(univariateRealOptimizer0).getIterationCount();
        doReturn(1737, 1984, 1, 1737, 1984).when(univariateRealOptimizer0).getEvaluations();
        doReturn((-1871.875), 553.852565922, (-1871.875), (double) 1, (-1871.875)).when(univariateRealOptimizer0).getFunctionValue();
        doReturn(1.0, (double) 1, 553.852565922, 131.0, (double) 1737).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        double[] doubleArray0 = new double[8];
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 1737, jDKRandomGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (double) (-2193), 1.0);
        multiStartUnivariateRealOptimizer0.getOptimaValues();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test1734() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-699), jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.getOptimaValues();
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(627, 627, (-1000), 627, (-1000)).when(univariateRealOptimizer0).getIterationCount();
        doReturn((-1000), 19650218, 19650218, 16, 16).when(univariateRealOptimizer0).getEvaluations();
        doReturn((double) 16, Double.NaN, Double.NaN, (double) 627, (double) 16).when(univariateRealOptimizer0).getFunctionValue();
        doReturn((double) 19650218, (-1145.5183768670233), (-1145.5183768670233), Double.NaN, 0.5).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        double[] doubleArray0 = new double[6];
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 1990, jDKRandomGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, 2.0, (-2767.536809));
    }

    @Test(timeout = 4000)
    public void test1936() throws Throwable {
        UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(1737, 1737, 1737, 1737, 1737).when(univariateRealOptimizer0).getIterationCount();
        doReturn(1737, 1984, 1, 1737, 1984).when(univariateRealOptimizer0).getEvaluations();
        doReturn((-1871.875), 553.852565922, (-1871.875), (double) 1, (-1871.875)).when(univariateRealOptimizer0).getFunctionValue();
        doReturn(1.0, (double) 1, 553.852565922, 131.0, (double) 1737).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        double[] doubleArray0 = new double[8];
        MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 1737, jDKRandomGenerator0);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        // Undeclared exception!
        multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, 0.0);
    }
}
