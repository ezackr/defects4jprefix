/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 22:46:10 GMT 2024
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[2] = 1.2675934823758863E-8;
        MathUtils.round(0.0F, (-2789), 6);
        MathUtils.binomialCoefficient(13, 998);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        MathUtils.pow(21, 15);
        MathUtils.addAndCheck((long) (-590110467), 0L);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) (-590110467L);
        doubleArray0[1] = (double) 21;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = (double) 21;
        doubleArray0[4] = (double) 15;
        doubleArray0[5] = (double) (-590110467);
        MathUtils.distanceInf(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        MathUtils.factorialLog(0);
        MathUtils.pow(0, 0);
        MathUtils.sign((short) 646);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        MathUtils.subAndCheck(0L, 0L);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        MathUtils.pow(132, 77);
        MathUtils.factorialDouble(3798);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 54302.0;
        MathUtils.normalizeArray(doubleArray0, 54302.0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        MathUtils.sign(0.0F);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 0.0F;
        doubleArray0[1] = (double) 0.0F;
        doubleArray0[2] = (double) 0.0F;
        MathUtils.normalizeArray(doubleArray0, 0.0);
        short short0 = (short) 840;
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double[] doubleArray0 = new double[4];
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.lcm(14, Integer.MAX_VALUE);
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        boolean boolean0 = true;
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 4061.2371117112;
        doubleArray0[1] = 1.1102230246251565E-16;
        doubleArray0[3] = (-2123.1);
        doubleArray0[4] = 0.0;
        MathUtils.subAndCheck(199L, 0L);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        MathUtils.binomialCoefficientDouble(0, 0);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 1.0;
        doubleArray0[5] = 1.0;
        MathUtils.sinh(Double.NEGATIVE_INFINITY);
        MathUtils.gcd(0, 0);
        MathUtils.cosh(0.0);
        MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = 0;
        MathUtils.sign((float) 0);
        MathUtils.indicator((-1283.14649294507));
        MathUtils.addAndCheck(0, (-2745));
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = (double) 0.0F;
        doubleArray0[2] = (double) 0;
        doubleArray0[3] = (double) (-2745);
        MathUtils.indicator((short) (-5460));
        MathUtils.sign((double) 0);
        doubleArray0[4] = (double) 0;
        MathUtils.gcd((-2745), 0);
        MathUtils.equalsIncludingNaN(641.3542621, (double) 0.0F);
        MathUtils.indicator((-2745));
        MathUtils.lcm((long) (-1), (long) (-2745));
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        MathUtils.pow(bigInteger0, 0);
        int[] intArray0 = new int[0];
        MathUtils.distance1(intArray0, intArray0);
        MathUtils.factorialLog(0);
        MathUtils.pow(bigInteger0, 0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        MathUtils.round((float) 6, (-2778), 6);
        MathUtils.sign((long) (-2778));
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        MathUtils.sign(8.0E298);
        MathUtils.round(8.0E298, 91);
        MathUtils.round(0.0, 56, (-2848));
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        MathUtils.addAndCheck(2692, 709);
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 0L;
        doubleArray0[1] = (-403.65);
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        double[] doubleArray0 = new double[4];
        MathUtils.pow(886, 2530);
        MathUtils.gcd((long) 2530, 720L);
        MathUtils.addAndCheck((-2232), 2509);
        MathUtils.safeNorm(doubleArray0);
        MathUtils.cosh((-2232));
        MathUtils.checkOrder(doubleArray0);
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        boolean boolean0 = false;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        int int0 = 145;
        MathUtils.round((-3.966847F), 1080, 145);
        MathUtils.sign((long) int0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        MathUtils.sign(8);
        MathUtils.subAndCheck((long) 1, (long) 1);
        MathUtils.equalsIncludingNaN((double) 26142769L, 0.13333332538604736, (double) 5113L);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.13333332538604736;
        doubleArray0[1] = (double) 26142769L;
        doubleArray0[2] = (double) 8;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        double[] doubleArray0 = new double[4];
        MathUtils.gcd(6722166367014452304L, 6722166367014452304L);
        MathUtils.addAndCheck(1629, 1629);
        MathUtils.safeNorm(doubleArray0);
        MathUtils.lcm(1629, 3258);
        MathUtils.binomialCoefficientLog(3258, (-3));
        MathUtils.mulAndCheck((long) 3258, (-3265L));
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        MathUtils.equals(448.524, 448.524);
        MathUtils.pow(2332L, 0);
        MathUtils.pow(1L, 9218868437227405312L);
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (double) 9218868437227405312L;
        doubleArray0[1] = (double) 9218868437227405312L;
        doubleArray0[2] = (double) 9218868437227405312L;
        MathUtils.equals((double) 1L, (double) 1L);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        MathUtils.equals((double) 2523, 327184.0, 2523);
        MathUtils.round(16.826F, 6, 13);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        MathUtils.equals((-1.0), 1702.2574341, 2523);
        MathUtils.round(0.0F, 2523, 6);
        MathUtils.sign((long) 6);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        MathUtils.round(1.0F, 6, 6);
        MathUtils.sign((long) 6);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        MathUtils.addAndCheck(6, (-2287));
        MathUtils.round(0.0F, (-2287), (-2281));
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        MathUtils.indicator((byte) (-39));
        long long0 = 0L;
        MathUtils.gcd((long) (byte) (-1), 0L);
        MathUtils.gcd(0L, 0L);
        MathUtils.cosh(0L);
        MathUtils.factorialDouble((byte) (-39));
        int int0 = (-1823);
        int int1 = 18;
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = 0;
        MathUtils.sign((float) 0);
        MathUtils.sign((double) 0.0F);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 0;
        doubleArray0[2] = (double) 202;
        doubleArray0[3] = (double) (-1);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.gcd((long) 0, 362880L);
        MathUtils.OrderDirection.valueOf("");
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        MathUtils.lcm((-1571L), (-1571L));
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) (-1571L);
        doubleArray0[1] = (double) 1571L;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.gcd(396L, 2090L);
        MathUtils.binomialCoefficientLog(2145834274, 4);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        MathUtils.indicator((-2041.7932F));
        MathUtils.indicator((-1571L));
        MathUtils.sinh((-1423.4893661));
        MathUtils.cosh((-1.0F));
        MathUtils.lcm((-453L), (-1L));
        MathUtils.equals((double) (-1L), 1.3245471311735498E-8);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        MathUtils.indicator((byte) (-39));
        MathUtils.gcd((int) (byte) (-1), 961);
        MathUtils.equals((double) (-241), (double) 961);
        MathUtils.subAndCheck((-425), 20);
        MathUtils.sign((-745));
        MathUtils.subAndCheck(503L, (long) (byte) (-1));
        MathUtils.OrderDirection.valueOf("");
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        MathUtils.gcd(940L, (long) 2186);
        MathUtils.gcd((long) 2186, 0L);
        MathUtils.cosh((-2286.0965440085));
        MathUtils.factorialDouble(2186);
        MathUtils.binomialCoefficientDouble(12, 5);
        MathUtils.pow((long) 2186, 2147483573);
        MathUtils.sign(1.63312393531947E16);
        MathUtils.gcd(2147483573, 2147483573);
        MathUtils.equalsIncludingNaN((double) 2147483573, Double.POSITIVE_INFINITY);
        MathUtils.scalb(1.0, 6);
        MathUtils.factorialLog(2147483573);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double double0 = (-3.940510424527919E-20);
        MathUtils.round((-3.940510424527919E-20), 0);
        int int0 = (-2695);
        MathUtils.factorial((-2695));
        double[] doubleArray0 = new double[5];
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        MathUtils.equals((-1.0), 1702.2574341, 2523);
        MathUtils.indicator(63L);
        MathUtils.binomialCoefficient(6, (-2244));
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        int int0 = (-1195);
        MathUtils.scalb(1.0, (-1195));
        int[] intArray0 = new int[0];
        MathUtils.distanceInf(intArray0, intArray0);
        int int1 = 1438;
        MathUtils.binomialCoefficientLog(1438, 1438);
        int int2 = 4194304;
        MathUtils.factorialLog(4194304);
        double double0 = 1.0;
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        MathUtils.sign((-241));
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (byte) (-39);
        doubleArray0[1] = (double) (byte) (-39);
        doubleArray0[2] = (double) 961;
        MathUtils.sinh(0.0036);
        MathUtils.scalb(0.0036000077760051097, (-241));
        MathUtils.factorialLog(3285);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        MathUtils.indicator((-1138L));
        MathUtils.sinh((-489.6846859536196));
        int int0 = (-4032);
        MathUtils.round((float) 63, (-380), (-4032));
        MathUtils.sign((long) int0);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign(8);
        MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.equalsIncludingNaN((double) 5113L, (double) 8, 0.13333332538604736);
        MathUtils.sign(8);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        MathUtils.equals((-1.0), (-1.0), 2523);
        MathUtils.round(1.0116099F, 2523, 4330);
        long long0 = (-2644281811660520851L);
        MathUtils.sign(long0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        long long0 = MathUtils.indicator(479001599L);
        MathUtils.sign((float) 479001599L);
        int int0 = MathUtils.compareTo(1.0F, (-2744.09477963), 479001599L);
        double[] doubleArray0 = null;
        MathUtils.distance((double[]) null, (double[]) null);
        MathUtils.normalizeAngle(long0, long0);
        MathUtils.round((float) long0, int0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        MathUtils.lcm((-1571L), (-1571L));
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) (-1571L);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.sign((float) (-1185));
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Object object0 = new Object();
        bigInteger0.equals(object0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.andNot(bigInteger0);
        MathUtils.sign(109L);
        double[] doubleArray0 = new double[0];
        MathUtils.hash(doubleArray0);
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        MathUtils.equalsIncludingNaN(797.00671587763, 0.0);
        int[] intArray0 = new int[6];
        intArray0[0] = (-1704);
        intArray0[1] = 189;
        intArray0[2] = 2153;
        intArray0[3] = 0;
        intArray0[4] = 0;
        intArray0[5] = 0;
        MathUtils.distance(intArray0, intArray0);
        MathUtils.hash((double[]) null);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        MathUtils.sign((short) 1898);
        MathUtils.sign((int) (short) 1898);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        MathUtils.gcd(2186, 12);
        MathUtils.sign(2);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 2;
        doubleArray0[1] = 543.590923799;
        doubleArray0[2] = (double) 2186;
        doubleArray0[3] = (double) 2;
        doubleArray0[4] = (double) 2186;
        MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
        MathUtils.sinh(2186.0);
        MathUtils.distance((int[]) null, (int[]) null);
        MathUtils.distance(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = 0;
        MathUtils.sign((float) 0);
        MathUtils.distanceInf(intArray0, intArray0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign(2636);
        BigInteger bigInteger1 = BigInteger.TEN;
        bigInteger1.byteValueExact();
        MathUtils.pow(bigInteger1, bigInteger0);
        MathUtils.equals(1327.0, (double) 1);
        MathUtils.round(1103.8633F, (-2244), 219);
        long long0 = 0L;
        MathUtils.sign(long0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        MathUtils.equals((-0.7663109121487408), 1702.2574341, 2523);
        MathUtils.round(0.0F, 2523, 6);
        MathUtils.factorial(2523);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        int[] intArray0 = new int[4];
        intArray0[0] = (-1436);
        int int0 = 18;
        intArray0[1] = 18;
        intArray0[2] = 222;
        int int1 = (-1953);
        intArray0[3] = (-1953);
        int[] intArray1 = new int[1];
        intArray1[0] = 1811;
        MathUtils.distance1(intArray0, intArray1);
        int int2 = 512;
        int int3 = 99;
        MathUtils.binomialCoefficientDouble(int2, int3);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        MathUtils.addAndCheck(1681, 17);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 2235;
        short short0 = (short) 1898;
        MathUtils.sign((short) (-7));
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        int int0 = 8;
        MathUtils.sign((-2254));
        bigInteger0.byteValueExact();
        MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.pow(bigInteger0, (-5L));
        double double0 = 5769.73758794;
        double double1 = (-1946.3217327);
        double double2 = 984.2529635;
        MathUtils.equalsIncludingNaN(double0, double1, double2);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        byte byte0 = (byte) 0;
        MathUtils.sign((byte) 0);
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.setBit(0);
        BigInteger bigInteger1 = null;
        bigInteger0.min((BigInteger) null);
        MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        MathUtils.sinh(26142769L);
        MathUtils.cosh(2058.214065011687);
        MathUtils.indicator((double) (short) 1898);
        MathUtils.lcm((-679L), (long) (short) 1898);
        MathUtils.subAndCheck((-1328L), 994L);
        MathUtils.sign((float) 5113L);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign(8);
        bigInteger0.byteValueExact();
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.pow(bigInteger1, 26142769L);
        MathUtils.equalsIncludingNaN((double) 5113L, (double) 8, 0.13333332538604736);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        long long0 = MathUtils.indicator(479001599L);
        MathUtils.sign((float) 479001599L);
        int int0 = MathUtils.hash((double) 479001599L);
        double[] doubleArray0 = null;
        MathUtils.distance((double[]) null, (double[]) null);
        MathUtils.normalizeAngle(long0, long0);
        MathUtils.round((float) long0, int0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        MathUtils.equals(4.203949609097564E37, (-8382.33836711458), (-796));
        int int0 = 15;
        int int1 = 2944;
        MathUtils.gcd(int0, int1);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-50.77037737);
        doubleArray0[1] = 83.6575;
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = 83.6575;
        doubleArray1[1] = (-1556.02911);
        doubleArray1[2] = (-50.77037737);
        doubleArray1[3] = 83.6575;
        doubleArray1[4] = (-50.77037737);
        doubleArray1[5] = (-50.77037737);
        doubleArray1[6] = (-50.77037737);
        doubleArray1[7] = 83.6575;
        MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        short short0 = MathUtils.sign((short) 1898);
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign(8);
        bigInteger0.byteValueExact();
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.pow(bigInteger1, 26142769L);
        MathUtils.log((-2983.006472814), 26142769L);
        MathUtils.pow(46, Integer.MIN_VALUE);
        MathUtils.indicator((float) short0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        MathUtils.pow(2235, (-3355L));
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 303.843506778;
        doubleArray0[2] = (-447.3222261678);
        doubleArray0[3] = 3395.73595123;
        doubleArray0[4] = Double.NaN;
        MathUtils.normalizeArray(doubleArray0, (-2415.7));
        MathUtils.sign(0.0F);
        MathUtils.sign(0.0F);
        MathUtils.addAndCheck(0, 249);
        int[] intArray0 = new int[5];
        intArray0[0] = 0;
        intArray0[1] = 249;
        intArray0[2] = 0;
        intArray0[3] = 249;
        intArray0[4] = 249;
        MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        MathUtils.sign(4034.0F);
        MathUtils.factorial(3208);
        long long0 = 0L;
        int int0 = 0;
        MathUtils.pow(long0, int0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        MathUtils.lcm((-1571L), (-1571L));
        int int0 = 0;
        MathUtils.pow(0, 0);
        long long0 = MathUtils.gcd(1571L, 1571L);
        MathUtils.addAndCheck(2145834274, 2145834274);
        int int1 = 2568;
        MathUtils.round((float) long0, int0, int1);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        MathUtils.lcm(129L, (-1188L));
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 5113L;
        doubleArray0[1] = (double) 129L;
        doubleArray0[3] = (double) 129L;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.gcd(51084L, 129L);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        MathUtils.indicator((byte) (-39));
        int int0 = 961;
        MathUtils.gcd((int) (byte) (-1), 961);
        MathUtils.sign(1);
        BigInteger bigInteger0 = BigInteger.ONE;
        int int1 = (-493);
        BigInteger bigInteger1 = bigInteger0.shiftLeft((-493));
        bigInteger0.andNot(bigInteger1);
        MathUtils.normalizeAngle((byte) (-39), (-2629.390332503347));
        MathUtils.round((float) 1, 961);
        MathUtils.subAndCheck((long) 1, (long) 61);
        MathUtils.lcm(2137853676, (-2359));
        int int2 = 1652;
        MathUtils.binomialCoefficientLog(int2, int1);
        long long0 = (-679L);
        MathUtils.mulAndCheck(long0, (long) int0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        MathUtils.binomialCoefficientDouble(0, 0);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 1.0;
        doubleArray0[5] = 1.0;
        doubleArray0[6] = 1.0;
        doubleArray0[7] = 1.0;
        MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        MathUtils.sign((short) 1898);
        MathUtils.indicator(0.0);
        MathUtils.sign((int) (short) 1898);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.lcm((-65535), (-966));
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        MathUtils.sign((-528.4569F));
        MathUtils.sign((-966));
        MathUtils.normalizeArray(doubleArray0, (-4934.3312187));
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        MathUtils.equals(1311.6, 0.11111095942313305);
        MathUtils.addAndCheck((-2147483646), (-1998));
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        MathUtils.hash((-1.0));
        MathUtils.indicator((double) (-1074790400));
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) (-2745);
        doubleArray0[1] = (-1.0);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.gcd((long) (-1074790400), 396L);
        MathUtils.binomialCoefficientLog(2145834274, (-1074790400));
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        MathUtils.lcm((-1571L), (-1571L));
        MathUtils.pow(0, 0);
        MathUtils.gcd(1571L, 1571L);
        MathUtils.addAndCheck(0, 1629);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (double) 1;
        MathUtils.safeNorm(doubleArray0);
        MathUtils.lcm(0, (-636));
        MathUtils.binomialCoefficientLog(1629, (-2359));
        MathUtils.mulAndCheck((long) 0, 1268L);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        MathUtils.lcm((-1571L), (-1571L));
        MathUtils.pow(0, 0);
        MathUtils.gcd(1283, (-1197));
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) (-1571L);
        doubleArray0[4] = (double) (-1571L);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.sign((-1.0F));
        MathUtils.equalsIncludingNaN(0.0734929963946, 0.0, (-1267.463));
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Object object0 = new Object();
        bigInteger0.getLowestSetBit();
        bigInteger0.equals(object0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.andNot(bigInteger0);
        bigInteger0.max(bigInteger1);
        bigInteger1.longValue();
        bigInteger0.compareTo(bigInteger1);
        MathUtils.pow(bigInteger0, 1728L);
        MathUtils.addAndCheck((-1), (-1));
        MathUtils.lcm((-1), (-1710));
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 0L;
        doubleArray0[1] = (double) (-1);
        doubleArray0[2] = (double) 1710;
        doubleArray0[3] = (double) 1L;
        doubleArray0[4] = (double) (-1);
        doubleArray0[5] = (double) 1710;
        doubleArray0[6] = (double) 1L;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = BigInteger.TEN;
        bigInteger0.mod(bigInteger1);
        MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 488.245925;
        doubleArray0[2] = 1.2675934823758863E-8;
        doubleArray0[3] = 321.8273894407114;
        MathUtils.normalizeArray(doubleArray0, 0.0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.indicator(3644L);
        MathUtils.binomialCoefficient(2212, 2212);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        MathUtils.indicator((byte) (-39));
        MathUtils.gcd((int) (byte) (-1), 961);
        MathUtils.sign((-241));
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = bigInteger0.shiftLeft((-493));
        bigInteger0.andNot(bigInteger1);
        MathUtils.normalizeAngle((byte) (-39), (-2629.390332503347));
        MathUtils.subAndCheck((-241), (-1));
        MathUtils.sign((int) (byte) (-1));
        MathUtils.subAndCheck((long) (-1), (long) 961);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Object object0 = new Object();
        bigInteger0.getLowestSetBit();
        bigInteger0.equals(object0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.shiftLeft((-1650));
        bigInteger1.andNot(bigInteger0);
        MathUtils.normalizeAngle(448.524, 448.524);
        MathUtils.round(0.73493F, (-1));
        MathUtils.subAndCheck(994L, 6L);
        MathUtils.lcm(836, 0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        MathUtils.gcd(940L, (long) 12);
        MathUtils.gcd((long) 2186, 0L);
        MathUtils.cosh((-2286.0965440085));
        double double0 = MathUtils.factorialDouble(12);
        MathUtils.binomialCoefficientDouble(12, 5);
        MathUtils.pow((long) 12, 2147483573);
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = BigInteger.TEN;
        BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
        MathUtils.pow(bigInteger2, (long) (-1823));
        bigInteger1.min(bigInteger2);
        long long0 = (-975L);
        MathUtils.pow(bigInteger0, long0);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = double0;
        double double1 = 1663.0;
        doubleArray0[1] = double1;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        boolean boolean0 = false;
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) (-116);
        byteArray0[1] = (byte) (-61);
        byteArray0[2] = (byte) 66;
        byte byte0 = (byte) (-22);
        byteArray0[3] = (byte) (-22);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        MathUtils.pow(bigInteger0, (int) (byte) (-61));
        int[] intArray0 = new int[0];
        MathUtils.distance1(intArray0, intArray0);
        MathUtils.factorialLog(byte0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        MathUtils.indicator((-1138L));
        MathUtils.sinh((-489.6846859536196));
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = (-489.6846859536196);
        doubleArray0[2] = (double) (-1L);
        doubleArray0[3] = (double) (-1138L);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.sign((-1372.9655F));
        MathUtils.normalizeArray(doubleArray0, (-1138L));
        MathUtils.round(Double.POSITIVE_INFINITY, 2147481599, 2055);
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        MathUtils.sign((byte) (-39));
        MathUtils.gcd((int) (byte) (-1), 961);
        MathUtils.sign((-241));
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (byte) (-39);
        doubleArray0[1] = (double) (byte) (-39);
        doubleArray0[2] = (double) 961;
        doubleArray0[3] = (double) (byte) (-39);
        doubleArray0[4] = (double) (byte) (-1);
        doubleArray0[5] = (double) 0L;
        MathUtils.round((float) (byte) (-39), 961, (-2789));
        long long0 = (-1250L);
        MathUtils.sign(long0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.indicator((short) (-2616));
        MathUtils.sign((double) 26142769L);
        MathUtils.gcd((int) (short) (-5460), (int) (short) (-1));
        MathUtils.equalsIncludingNaN(333.4195, (double) 5113L);
        MathUtils.indicator(1);
        MathUtils.pow((long) (short) (-5460), (long) (short) (-2616));
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        MathUtils.indicator(0.73493F);
        MathUtils.indicator((-1138L));
        MathUtils.sinh((-489.6846859536196));
        MathUtils.cosh((-1L));
        MathUtils.indicator((-5094.0));
        MathUtils.lcm(2147483647L, (-1L));
        MathUtils.equals((-489.6846859536196), (-2.3244862765956838E212));
        MathUtils.indicator((-2789));
        MathUtils.lcm(4208363204685324176L, 11L);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        MathUtils.equals(448.524, 448.524);
        MathUtils.pow(2332L, 0);
        MathUtils.pow(0L, 9218868437227405312L);
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (double) 9218868437227405312L;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.normalizeArray(doubleArray0, 448.524);
        MathUtils.sign((byte) 97);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        int[] intArray0 = new int[1];
        int int0 = 0;
        intArray0[0] = 0;
        MathUtils.sign((float) 0);
        MathUtils.equals((double) 0.0F, (double) 0, 1431655765);
        float float0 = 0.0F;
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 1558.234019615;
        doubleArray0[1] = (-84.230041);
        doubleArray0[2] = (-1856.6619);
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 1.0;
        doubleArray0[5] = (-651.4657703215);
        doubleArray0[6] = 0.0;
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.pow(0L, 0L);
        BigInteger bigInteger0 = BigInteger.TEN;
        MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.gcd(313, 313);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 488.245925;
        doubleArray0[2] = 1.2675934823758863E-8;
        long long0 = 546L;
        long long1 = MathUtils.mulAndCheck(0L, 546L);
        long long2 = MathUtils.pow(0L, 100);
        MathUtils.indicator(100);
        int int0 = 0;
        int int1 = 449;
        MathUtils.round(2268524.0, 0, 449);
        MathUtils.gcd(long2, (long) int1);
        MathUtils.equalsIncludingNaN((double) long0, (double) long1, int0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        MathUtils.pow(171, 886);
        MathUtils.gcd(720L, (-4562166837246930178L));
        int int0 = 84;
        MathUtils.addAndCheck(84, (-2145811343));
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) (-4562166837246930178L);
        MathUtils.safeNorm(doubleArray0);
        MathUtils.cosh((-2745.0));
        MathUtils.checkOrder(doubleArray0);
        MathUtils.round((float) (-2145811343), 252505257, (-2145811343));
        MathUtils.sign((long) int0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        int int0 = (-67);
        MathUtils.factorialLog((-67));
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign(8);
        MathUtils.gcd((-823L), (long) 1);
        MathUtils.compareTo(6.283185307179586, 2577.2585575316266, 6.283185307179586);
        MathUtils.lcm(2508, (-1));
        MathUtils.gcd(2508, 1);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        MathUtils.scalb((-1195), 77);
        MathUtils.indicator((double) 77);
        MathUtils.addAndCheck((-1047), (-1195));
        MathUtils.indicator((short) 20);
        MathUtils.sign((double) (-2745));
        MathUtils.gcd((int) (short) (-5460), (-3907));
        MathUtils.equalsIncludingNaN((-4086.71645988), 1.0);
        MathUtils.indicator(1);
        MathUtils.pow((long) 1, 77);
        MathUtils.indicator((float) (-2242));
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        MathUtils.indicator((-1138L));
        MathUtils.sign((short) 82);
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign((-5460));
        bigInteger0.byteValueExact();
        MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.pow(bigInteger0, (-4476599424386072576L));
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        MathUtils.scalb((-1195), 77);
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distanceInf(intArray0, intArray0);
        MathUtils.binomialCoefficientLog(77, (-2244));
        MathUtils.factorialLog((-1195));
        int int1 = 3285;
        int int2 = (-2146713939);
        MathUtils.round((double) int0, int1, int2);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        MathUtils.equals((double) 10, (-2078.33836711458));
        int int0 = (-3167);
        MathUtils.addAndCheck(10, (-3167));
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 10;
        doubleArray0[1] = (-2078.33836711458);
        doubleArray0[2] = (double) (-3157);
        doubleArray0[3] = (double) 10;
        doubleArray0[4] = (double) (-3167);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1573.0);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.lcm(1030, 726);
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
        MathUtils.sign((float) int0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 4061.2371117112;
        doubleArray0[1] = 1.1102230246251565E-16;
        doubleArray0[3] = (-2123.1);
        double double0 = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 307.00562;
        MathUtils.addAndCheck(2687, (-1975));
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        double double1 = 4061.2371117112;
        MathUtils.equalsIncludingNaN(double0, double1);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        MathUtils.indicator(0.73493F);
        MathUtils.indicator((-1138L));
        MathUtils.sinh((-489.6846859536196));
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 0.73493F;
        MathUtils.equalsIncludingNaN((double) 0.73493F, 0.875);
        MathUtils.indicator(1217);
        MathUtils.round(0.0, 1);
        double[] doubleArray1 = new double[0];
        MathUtils.equals(doubleArray1, doubleArray0);
        MathUtils.normalizeArray(doubleArray1, (-665.4056281438));
        byte byte0 = (byte) 66;
        MathUtils.sign(byte0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        MathUtils.pow(2147483648L, 0L);
        MathUtils.sign(1118.482F);
        MathUtils.mulAndCheck((-9223372036854775808L), 0L);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 0L;
        doubleArray0[1] = (double) 1L;
        doubleArray0[2] = (double) 1L;
        doubleArray0[3] = (double) (-9223372036854775808L);
        doubleArray0[4] = Double.NEGATIVE_INFINITY;
        doubleArray0[5] = (-289.06);
        doubleArray0[6] = (double) 1L;
        doubleArray0[7] = 4061.2371117112;
        MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 4061.2371117112;
        doubleArray0[3] = 4061.2371117112;
        doubleArray0[4] = 0.0;
        MathUtils.indicator((short) (-5460));
        MathUtils.sign(4061.2371117112);
        int int0 = MathUtils.gcd(4194304, 2147483643);
        MathUtils.equalsIncludingNaN((double) 2147483643, 0.0);
        MathUtils.indicator(231);
        MathUtils.pow((-6163L), (-2224));
        MathUtils.indicator((float) int0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        MathUtils.equalsIncludingNaN((-2078.33836711458), (-2078.33836711458), 10);
        MathUtils.addAndCheck(10, (-3167));
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 10;
        int int0 = 1073741786;
        MathUtils.round(0.0F, 1073741786, 140);
        MathUtils.sign((long) int0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        MathUtils.indicator((-1138L));
        MathUtils.sinh((-489.6846859536196));
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 0.73493F;
        doubleArray0[1] = (-489.6846859536196);
        doubleArray0[2] = (double) (-1L);
        doubleArray0[3] = (double) (-1138L);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.sign((-1372.9655F));
        MathUtils.equalsIncludingNaN(0.0, Double.NEGATIVE_INFINITY, (double) 0.73493F);
        MathUtils.log(0.7349299788475037, Double.NaN);
        MathUtils.pow(31, 4604794880303038464L);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        MathUtils.equalsIncludingNaN((-2078.33836711458), (-2078.33836711458), 10);
        MathUtils.addAndCheck(10, (-3167));
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 10;
        doubleArray0[1] = (-2078.33836711458);
        MathUtils.sign((double) (-3157));
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.gcd(1874L, (long) (-1));
        MathUtils.OrderDirection.valueOf("");
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        MathUtils.subAndCheck((-2425L), 479001600L);
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.longValue();
        bigInteger0.nextProbablePrime();
        BigInteger bigInteger1 = BigInteger.ZERO;
        MathUtils.equalsIncludingNaN((double) 15L, 427.0627);
        int int0 = MathUtils.indicator(2147483135);
        MathUtils.round(226.9000000000001, 1);
        MathUtils.equals((double[]) null, (double[]) null);
        MathUtils.normalizeArray((double[]) null, 479001600L);
        byte byte0 = (byte) (-90);
        MathUtils.sign(byte0);
        double double0 = 2879.82277667133;
        int int1 = 712;
        MathUtils.equals((double) int0, double0, int1);
        MathUtils.binomialCoefficient(int1, int1);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        MathUtils.lcm((-1571L), (-1571L));
        int int0 = 0;
        int int1 = MathUtils.pow(0, 0);
        MathUtils.gcd(1571L, 1571L);
        int int2 = 1629;
        MathUtils.addAndCheck(0, 1629);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 0;
        MathUtils.round((double) (-636), 61);
        MathUtils.equals(doubleArray0, (double[]) null);
        MathUtils.normalizeArray((double[]) null, (-2461.671226045));
        byte byte0 = (byte) 95;
        MathUtils.sign(byte0);
        double double0 = (-2709.872);
        MathUtils.equals(double0, (double) int0, int2);
        MathUtils.binomialCoefficient(int1, int1);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        MathUtils.mulAndCheck(5113L, 5113L);
        MathUtils.sinh(26142769L);
        MathUtils.cosh(2058.214065011687);
        MathUtils.indicator((double) (short) 1898);
        MathUtils.lcm((-679L), (long) (short) 1898);
        MathUtils.subAndCheck((-1328L), 994L);
        MathUtils.lcm(909690957, 0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        MathUtils.lcm((-1571L), (-1571L));
        MathUtils.pow(0, 0);
        MathUtils.gcd(1283, (-1197));
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) (-1571L);
        doubleArray0[4] = (double) (-1571L);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.sign((-1.0F));
        double double0 = 299.0;
        MathUtils.equals(299.0, 1182.64, 1283);
        MathUtils.binomialCoefficientLog((-5), (-1209));
        int int0 = 135;
        int int1 = 10;
        MathUtils.binomialCoefficientLog(int0, int1);
        MathUtils.equalsIncludingNaN(double0, doubleArray0[4]);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 488.245925;
        doubleArray0[2] = 1.2675934823758863E-8;
        double[] doubleArray1 = new double[4];
        doubleArray1[0] = 21.0;
        doubleArray1[1] = 1.2675934823758863E-8;
        doubleArray1[2] = (double) 0.0F;
        doubleArray1[3] = (double) 0.0F;
        MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        MathUtils.sinh(0.0);
        MathUtils.gcd(1, 69);
        MathUtils.cosh(1.2675934823758863E-8);
        MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
        MathUtils.equals(1571.0, (-2284.59423), (-480));
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 4061.2371117112;
        MathUtils.round(Float.NaN, (-2789), 6);
        MathUtils.sign((long) 6);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        MathUtils.indicator((byte) (-39));
        MathUtils.gcd((int) (byte) (-1), 961);
        MathUtils.sign((-241));
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (byte) (-39);
        doubleArray0[1] = (double) (byte) (-39);
        doubleArray0[2] = (double) 961;
        doubleArray0[4] = (double) (byte) (-1);
        MathUtils.sinh(0.0036);
        MathUtils.scalb(Double.NaN, (-241));
        MathUtils.factorialLog(524287);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (double) 2523;
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = 1702.2574341;
        doubleArray0[3] = 1702.2574341;
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 1702.2574341;
        doubleArray0[6] = 12.0;
        doubleArray0[7] = (double) 2523;
        doubleArray0[8] = 1702.2574341;
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.sign(0.0F);
        MathUtils.equalsIncludingNaN(1702.2574341, (-1.0), (-1.0));
        MathUtils.log(1702.2574341, (-1.0));
        MathUtils.pow((-3478), 338L);
        MathUtils.sign((short) 0);
        MathUtils.indicator(1702.2574341);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        int int0 = 2186;
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-1830.6426242794616);
        doubleArray0[1] = (double) 12;
        doubleArray0[2] = (double) 12;
        MathUtils.normalizeArray(doubleArray0, 1017.7826711194);
        MathUtils.equals(2.0, 2.0, 186.14196);
        MathUtils.normalizeArray(doubleArray0, (-1830.6426242794616));
        MathUtils.round((-0.5), 12, 2055);
        double double0 = 265.6019718;
        MathUtils.equals((double) int0, double0);
        int int1 = (-1);
        int int2 = 2097542167;
        MathUtils.subAndCheck(int1, int2);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        MathUtils.equals((double) 10, (-2078.33836711458));
        int int0 = (-3167);
        MathUtils.addAndCheck(10, (-3167));
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 10;
        doubleArray0[1] = (-2078.33836711458);
        doubleArray0[2] = (double) (-3157);
        doubleArray0[3] = (double) 10;
        doubleArray0[4] = (double) (-3167);
        double double0 = 1573.0;
        MathUtils.normalizeArray(doubleArray0, 1573.0);
        int int1 = 123;
        MathUtils.binomialCoefficient(414, 123);
        MathUtils.equals(double0, (double) int1, int0);
        MathUtils.sign(int1);
        double double1 = (-3663.8932577174987);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 4061.2371117112;
        doubleArray0[1] = 1.1102230246251565E-16;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 307.00562;
        MathUtils.gcd(484, 484);
        MathUtils.equalsIncludingNaN(1382.0, 1.1102230246251565E-16);
        MathUtils.round(0.0, 3129);
        MathUtils.equals((double[]) null, doubleArray0);
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = (double) 484;
        doubleArray1[1] = (double) 484;
        doubleArray1[2] = 0.0;
        doubleArray1[3] = 1382.0;
        doubleArray1[4] = (-2123.1);
        MathUtils.normalizeArray(doubleArray1, (-2123.1));
        MathUtils.sign((byte) 66);
        MathUtils.equals(1.1102230246251565E-16, 10.0, (int) (byte) 1);
        MathUtils.binomialCoefficient((byte) 66, 75);
        long long0 = 299L;
        long long1 = (-3512299194304650054L);
        MathUtils.gcd(long0, long1);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        MathUtils.cosh(2235.0);
        MathUtils.indicator(1.375);
        long long0 = (-4616189618054758400L);
        MathUtils.lcm(2147483647L, (-4616189618054758400L));
        double double0 = (-1371.26024216515);
        MathUtils.equals(double0, (double) long0);
        MathUtils.sign(long0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        MathUtils.indicator((-1138L));
        MathUtils.sinh((-1138L));
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) (-1138L);
        doubleArray0[1] = Double.NEGATIVE_INFINITY;
        doubleArray0[2] = (double) (-1138L);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.sign((-926.0F));
        MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (-7.44321345601866E-11), (-1138.0));
        MathUtils.compareTo((-3780.84194), (-4023.645999528221), (-2852.893617806));
        MathUtils.gcd(1, 1);
        MathUtils.OrderDirection.valueOf("DpoM-as|6AmfaJ[$`'");
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        MathUtils.sign(2819561105158720014L);
        MathUtils.indicator((byte) 13);
        MathUtils.indicator(2395.91885002);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        MathUtils.mulAndCheck((-1571L), (-4795L));
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign(2519);
        bigInteger0.byteValueExact();
        MathUtils.pow(bigInteger0, bigInteger0);
        BigInteger bigInteger1 = BigInteger.ZERO;
        MathUtils.pow(bigInteger1, 444L);
        MathUtils.equalsIncludingNaN(7.549789948768648E-8, (-180.52103600732), (double) 7532945L);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        long long0 = 479001600L;
        MathUtils.subAndCheck((-2425L), 479001600L);
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.doubleValue();
        bigInteger0.longValue();
        bigInteger0.longValue();
        bigInteger0.nextProbablePrime();
        BigInteger bigInteger1 = BigInteger.ZERO;
        MathUtils.equalsIncludingNaN((double) 15L, 427.0627);
        MathUtils.indicator(2147483135);
        MathUtils.round(226.9000000000001, 1);
        double[] doubleArray0 = null;
        MathUtils.normalizeArray((double[]) null, Double.NaN);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.normalizeArray(doubleArray0, long0);
        byte byte0 = (byte) (-90);
        MathUtils.sign(byte0);
        double double0 = 2879.82277667133;
        int int0 = 712;
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        double[] doubleArray0 = new double[8];
        MathUtils.gcd((-1097L), 131071L);
        long long0 = 703L;
        MathUtils.gcd((-1097L), 703L);
        MathUtils.cosh(3877.0);
        MathUtils.factorialDouble(2738);
        MathUtils.binomialCoefficientDouble(2738, 12);
        MathUtils.pow(828L, 2738);
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = BigInteger.TEN;
        BigInteger bigInteger2 = BigInteger.valueOf(0L);
        bigInteger1.mod(bigInteger2);
        long long1 = 353L;
        BigInteger bigInteger3 = MathUtils.pow(bigInteger0, long1);
        bigInteger2.min(bigInteger1);
        long long2 = (-1461L);
        MathUtils.pow(bigInteger3, long2);
        MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.toByteArray();
        MathUtils.sign(1);
        bigInteger0.byteValueExact();
        MathUtils.pow(bigInteger0, bigInteger0);
        MathUtils.equals(0.0, (double) (byte) 0);
        MathUtils.round((float) 1, (-2789), 1);
        MathUtils.sign((long) (byte) 0);
        MathUtils.gcd(1481, (-172));
        MathUtils.lcm(0L, 3952090531849364496L);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 4061.2371117112;
        doubleArray0[2] = 1.1102230246251565E-16;
        doubleArray0[3] = (-2123.1);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 307.00562;
        doubleArray0[6] = 0.0;
        doubleArray0[7] = 0.0;
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.scalb(0.0, 217);
        MathUtils.factorialLog(524287);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        MathUtils.indicator((-1138L));
        double double0 = (-489.6846859536196);
        MathUtils.sinh((-489.6846859536196));
        MathUtils.sinh((-191.8245046910995));
        MathUtils.cosh((-489.6846859536196));
        MathUtils.indicator(0.058823529411764705);
        MathUtils.lcm((-1138L), (-4267615245585081135L));
        double double1 = 1873.1340266652328;
        MathUtils.equals(double0, double1);
        int int0 = (-1178);
        int int1 = (-2789);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = Double.NaN;
        doubleArray0[1] = 395.614;
        doubleArray0[2] = 34.69767;
        doubleArray0[3] = 171.0;
        doubleArray0[4] = 1594.0;
        doubleArray0[5] = (-883.9528494016408);
        doubleArray0[6] = 2245.1427317112;
        MathUtils.safeNorm(doubleArray0);
        MathUtils.OrderDirection.values();
        MathUtils.gcd(432L, (-411L));
        MathUtils.OrderDirection.values();
        MathUtils.sign((-2223));
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        MathUtils.gcd(940L, (long) 2186);
        MathUtils.gcd((long) 2186, 0L);
        MathUtils.cosh((-2286.0965440085));
        MathUtils.factorialDouble(2186);
        MathUtils.binomialCoefficientDouble(12, 5);
        MathUtils.pow((long) 2186, 2147483573);
        MathUtils.sign(1.63312393531947E16);
        MathUtils.gcd(2147483573, 2502);
        MathUtils.lcm((long) 2186, 0L);
        MathUtils.pow(0L, 232);
        MathUtils.indicator(1103.8633F);
        MathUtils.sign((short) (-1749));
    }
}
