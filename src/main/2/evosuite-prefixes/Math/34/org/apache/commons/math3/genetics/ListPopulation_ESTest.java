/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:41:53 GMT 2024
 */
package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ElitisticListPopulation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ListPopulation_ESTest extends ListPopulation_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.getChromosomes();
        elitisticListPopulation0.getPopulationLimit();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(85, 0.0);
        elitisticListPopulation0.toString();
        elitisticListPopulation0.getPopulationLimit();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.nextGeneration();
        elitisticListPopulation0.getPopulationLimit();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.spliterator();
        elitisticListPopulation0.getPopulationLimit();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.getPopulationSize();
        elitisticListPopulation0.getPopulationLimit();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = null;
        elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) null, (-533), (-533));
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = null;
        elitisticListPopulation0 = new ElitisticListPopulation((-8), (-8));
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.add((Chromosome) null);
        linkedList0.add((Chromosome) null);
        ElitisticListPopulation elitisticListPopulation0 = null;
        elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 1, 1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.setChromosomes((List<Chromosome>) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.add((Chromosome) null);
        linkedList0.addLast((Chromosome) null);
        elitisticListPopulation0.setChromosomes(linkedList0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        elitisticListPopulation0.addChromosomes(linkedList0);
        elitisticListPopulation0.getPopulationLimit();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.addChromosome((Chromosome) null);
        List<Chromosome> list0 = elitisticListPopulation0.getChromosomeList();
        elitisticListPopulation0.addChromosomes(list0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.addChromosome((Chromosome) null);
        elitisticListPopulation0.addChromosome((Chromosome) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.addChromosome((Chromosome) null);
        elitisticListPopulation0.getFittestChromosome();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        elitisticListPopulation0.setPopulationLimit((-2482));
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.add((Chromosome) null);
        elitisticListPopulation0.setPopulationLimit(297);
        linkedList0.addLast((Chromosome) null);
        elitisticListPopulation0.setChromosomes(linkedList0);
        elitisticListPopulation0.setPopulationLimit(1);
    }
}
