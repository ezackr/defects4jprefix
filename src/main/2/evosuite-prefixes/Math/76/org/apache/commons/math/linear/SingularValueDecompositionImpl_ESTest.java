/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:27:38 GMT 2024
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SingularValueDecompositionImpl_ESTest extends SingularValueDecompositionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        singularValueDecompositionImpl0.getConditionNumber();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[4];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[] doubleArray0 = new double[1];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 3573);
        singularValueDecompositionImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = 3.0;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getU();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = 3.0;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getU();
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        singularValueDecompositionImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = 3.0;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getU();
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        singularValueDecompositionImpl0.getRank();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = 3.0;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getU();
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        decompositionSolver0.isNonSingular();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        double[] doubleArray0 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getUT();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.3646901265934897;
        double[][] doubleArray1 = new double[4][2];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getU();
        singularValueDecompositionImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        double[] doubleArray0 = new double[19];
        doubleArray0[0] = (double) 2981;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2981);
        singularValueDecompositionImpl0.getSolver();
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        singularValueDecompositionImpl0.getRank();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        double[] doubleArray0 = new double[19];
        doubleArray0[0] = (double) 2981;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2981);
        singularValueDecompositionImpl0.getSolver();
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        singularValueDecompositionImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        double[] doubleArray0 = new double[19];
        doubleArray0[0] = (double) 2981;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2981);
        singularValueDecompositionImpl0.getSolver();
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        decompositionSolver0.isNonSingular();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        double[] doubleArray0 = new double[12];
        doubleArray0[0] = (double) 3587;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 3587);
        singularValueDecompositionImpl0.getS();
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getS();
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        double[] doubleArray0 = new double[12];
        doubleArray0[0] = (double) 3587;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 3587);
        singularValueDecompositionImpl0.getS();
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getS();
        singularValueDecompositionImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        double[][] doubleArray0 = new double[4][9];
        BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(blockRealMatrix0);
        singularValueDecompositionImpl0.getV();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 0.3646901265934897;
        double[][] doubleArray1 = new double[4][9];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(blockRealMatrix0);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getV();
        realMatrix0.getColumnDimension();
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 0.3646901265934897;
        double[][] doubleArray1 = new double[4][9];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(blockRealMatrix0);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getV();
        singularValueDecompositionImpl0.getConditionNumber();
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3587;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 3587);
        singularValueDecompositionImpl0.getVT();
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getCovariance(3587);
        realMatrix0.equals((Object) array2DRowRealMatrix0);
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 2981;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2981);
        singularValueDecompositionImpl0.getCovariance(4519.16044);
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        double[] doubleArray0 = new double[4];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(Double.POSITIVE_INFINITY);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        decompositionSolver0.isNonSingular();
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        double[] doubleArray0 = new double[4];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(Double.POSITIVE_INFINITY);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        singularValueDecompositionImpl0.getRank();
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 2981;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2981);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        decompositionSolver0.isNonSingular();
    }
}
