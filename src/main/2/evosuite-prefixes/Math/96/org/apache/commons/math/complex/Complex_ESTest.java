/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:16:07 GMT 2024
 */
package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        double double0 = complex1.abs();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        double double0 = complex1.abs();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        double double0 = complex1.abs();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        double double0 = complex1.abs();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), 1.0);
        Complex complex1 = complex0.atan();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), 1.0);
        Complex complex1 = complex0.atan();
        complex1.abs();
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), 1.0);
        Complex complex1 = complex0.atan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), 1.0);
        Complex complex1 = complex0.atan();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        complex1.abs();
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.conjugate();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.conjugate();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.conjugate();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.conjugate();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.conjugate();
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.divide(complex0);
    }

    @Test(timeout = 4000)
    public void test0516() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.divide(complex0);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0517() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.divide(complex0);
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0518() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.divide(complex0);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0619() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.divide(complex1);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0620() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.divide(complex1);
    }

    @Test(timeout = 4000)
    public void test0621() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.divide(complex1);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0622() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.divide(complex1);
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0623() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.divide(complex1);
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test0724() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0726() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        complex1.abs();
    }

    @Test(timeout = 4000)
    public void test0827() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.divide(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0828() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.divide(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0829() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.divide(complex1);
        complex2.abs();
    }

    @Test(timeout = 4000)
    public void test0930() throws Throwable {
        Complex complex0 = Complex.INF;
        boolean boolean0 = complex0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test1031() throws Throwable {
        Complex complex0 = Complex.INF;
        boolean boolean0 = complex0.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test1132() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
        complex1.abs();
    }

    @Test(timeout = 4000)
    public void test1133() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1134() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1135() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test1136() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
        complex0.equals((Object) complex1);
    }

    @Test(timeout = 4000)
    public void test1237() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.I;
        boolean boolean0 = complex1.equals(complex0);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test1238() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.I;
        boolean boolean0 = complex1.equals(complex0);
        complex0.equals((Object) complex1);
    }

    @Test(timeout = 4000)
    public void test1239() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.I;
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test1340() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.I;
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test1341() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.I;
        boolean boolean0 = complex1.equals(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1442() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1443() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test1544() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.ONE.hashCode();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test1545() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.ONE.hashCode();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test1646() throws Throwable {
        Complex complex0 = Complex.NaN;
        complex0.hashCode();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test1747() throws Throwable {
        Complex complex0 = new Complex((-1.0), Double.NaN);
        Complex complex1 = complex0.acos();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test1748() throws Throwable {
        Complex complex0 = new Complex((-1.0), Double.NaN);
        Complex complex1 = complex0.acos();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1849() throws Throwable {
        Complex complex0 = Complex.NaN;
        boolean boolean0 = complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1850() throws Throwable {
        Complex complex0 = Complex.NaN;
        boolean boolean0 = complex0.isInfinite();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test1951() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.multiply(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1952() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.multiply(complex1);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test2053() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2054() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2055() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2056() throws Throwable {
        Complex complex0 = new Complex((-4.9E-324), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2157() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.multiply(complex1);
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test2258() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.pow(complex0);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2259() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.pow(complex0);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2260() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.pow(complex0);
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test2261() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.pow(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2262() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.pow(complex0);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2263() throws Throwable {
        Complex complex0 = new Complex((-1898.2222128948454), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.pow(complex0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2364() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.negate();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2365() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.negate();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test2466() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.subtract(complex0);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2567() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test2568() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2569() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2570() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2671() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.asin();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2672() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.asin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2773() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.asin();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2774() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.asin();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test2875() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.atan();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2976() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.cos();
        complex1.abs();
    }

    @Test(timeout = 4000)
    public void test2977() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.cos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2978() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.cos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3079() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.NaN.cos();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3080() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.NaN.cos();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test3181() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.cosh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3182() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.cosh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3183() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.cosh();
        complex1.abs();
    }

    @Test(timeout = 4000)
    public void test3284() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.cosh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test3285() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.cosh();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test3386() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.exp();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test3387() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.exp();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test3488() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.pow((Complex) null);
    }

    @Test(timeout = 4000)
    public void test3589() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.sin();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test3590() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.sin();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test3691() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sin();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test3692() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.sin();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test3793() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.sinh();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test3794() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.sinh();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test3895() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.sinh();
    }

    @Test(timeout = 4000)
    public void test3996() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3997() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4098() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.tan();
        complex1.abs();
    }

    @Test(timeout = 4000)
    public void test4099() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test40100() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.tan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test41101() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.NaN.tan();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test41102() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.NaN.tan();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test42103() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test42104() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.tanh();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test43105() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.tanh();
        complex0.abs();
    }

    @Test(timeout = 4000)
    public void test43106() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.tanh();
        complex1.isNaN();
    }
}
