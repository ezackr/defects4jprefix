/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:44:52 GMT 2024
 */
package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NormalDistributionImpl_ESTest extends NormalDistributionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getInitialDomain((-2.1026444172410488E-4));
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getInitialDomain((-2.1026444172410488E-4));
        normalDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.0, 3873.0);
        normalDistributionImpl0.setStandardDeviation(0.0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.0, 3873.0);
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.5);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
        normalDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
        normalDistributionImpl0.getStandardDeviation();
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
        normalDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
        normalDistributionImpl0.getStandardDeviation();
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
    }

    @Test(timeout = 4000)
    public void test510() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getDomainLowerBound(Double.NEGATIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test511() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getDomainLowerBound(Double.NEGATIVE_INFINITY);
        normalDistributionImpl0.getStandardDeviation();
    }

    @Test(timeout = 4000)
    public void test512() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getDomainLowerBound(Double.NEGATIVE_INFINITY);
        normalDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test613() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getDomainUpperBound(0.0);
        normalDistributionImpl0.getStandardDeviation();
    }

    @Test(timeout = 4000)
    public void test614() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getDomainUpperBound(0.0);
    }

    @Test(timeout = 4000)
    public void test715() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(6.8, 0.5);
        double double0 = normalDistributionImpl0.getInitialDomain(6.8);
    }
}
