/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:47:47 GMT 2024
 */
package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.I.readResolve();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.I.readResolve();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.I.readResolve();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.I.readResolve();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.NaN;
        String string0 = complex0.toString();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-1914.57746));
        Complex complex1 = complex0.pow(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf((-1914.57746));
        Complex complex1 = complex0.pow(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf((-1914.57746));
        Complex complex1 = complex0.pow(complex0);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.I;
        ComplexField complexField0 = complex0.getField();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.ZERO;
        boolean boolean0 = complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.pow(2947.6516350528);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.pow(2947.6516350528);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        Complex complex0 = Complex.ZERO;
        List<Complex> list0 = complex0.ZERO.nthRoot(59);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        Complex complex0 = Complex.ZERO;
        List<Complex> list0 = complex0.ZERO.nthRoot(59);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        Complex complex0 = Complex.ZERO;
        List<Complex> list0 = complex0.ZERO.nthRoot(59);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.sqrt();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.sqrt();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.sqrt();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        Complex complex0 = Complex.valueOf(2.9621181706527444E172);
        Complex complex1 = complex0.acos();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        Complex complex0 = Complex.valueOf(2.9621181706527444E172);
        Complex complex1 = complex0.acos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        Complex complex0 = Complex.valueOf(2.9621181706527444E172);
        Complex complex1 = complex0.acos();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        Complex complex0 = Complex.NaN;
        double double0 = complex0.abs();
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.asin();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.asin();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.acos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.acos();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.add(247.63547);
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        Complex complex0 = Complex.valueOf(4769.553993);
        Complex complex1 = complex0.add(Double.NaN);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        Complex complex0 = Complex.valueOf(4769.553993);
        Complex complex1 = complex0.add(Double.NaN);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1329() throws Throwable {
        Complex complex0 = Complex.valueOf(4769.553993);
        Complex complex1 = complex0.add(Double.NaN);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        Complex complex0 = Complex.valueOf(4769.553993);
        Complex complex1 = complex0.add(Double.NaN);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        Complex complex0 = Complex.valueOf(4769.553993);
        Complex complex1 = complex0.add(Double.NaN);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add(0.0);
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add(0.0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add(0.0);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.add(0.0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.conjugate();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1537() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.conjugate();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1538() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.conjugate();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1539() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.conjugate();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1640() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.conjugate();
    }

    @Test(timeout = 4000)
    public void test1741() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.divide(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1842() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex0.equals(complex1);
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test1843() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1844() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test1945() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.divide(complex1);
    }

    @Test(timeout = 4000)
    public void test2046() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test2047() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        boolean boolean0 = complex1.equals(complex0);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2048() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        boolean boolean0 = complex1.equals(complex0);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2149() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.divide(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2150() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.divide(complex1);
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test2251() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.divide(9.396000024637834E-209);
    }

    @Test(timeout = 4000)
    public void test2352() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(1.4379095864E-313);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2353() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(1.4379095864E-313);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2354() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(1.4379095864E-313);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2455() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(Double.NaN);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2556() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.divide(0.0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2657() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2759() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2860() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2861() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2862() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2863() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.reciprocal();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2964() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.reciprocal();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2965() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.reciprocal();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test2966() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.reciprocal();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2967() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.reciprocal();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test3068() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.reciprocal();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3169() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test3170() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex1.equals(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3171() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex1.equals(complex0);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test3172() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex1.equals(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3273() throws Throwable {
        Complex complex0 = Complex.NaN;
        boolean boolean0 = complex0.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test3374() throws Throwable {
        Complex complex0 = Complex.INF;
        boolean boolean0 = complex0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test3475() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.ZERO;
        boolean boolean0 = complex0.equals(complex1);
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test3476() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.ZERO;
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test3577() throws Throwable {
        Complex complex0 = Complex.ONE;
        complex0.INF.hashCode();
    }

    @Test(timeout = 4000)
    public void test3678() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.NaN.hashCode();
    }

    @Test(timeout = 4000)
    public void test3779() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.multiply(complex1);
    }

    @Test(timeout = 4000)
    public void test3880() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.multiply(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3981() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = new Complex(834.2270936055504, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.I.multiply(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3982() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = new Complex(834.2270936055504, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.I.multiply(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3983() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = new Complex(834.2270936055504, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.I.multiply(complex1);
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3984() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = new Complex(834.2270936055504, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.I.multiply(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4085() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2142089729);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4086() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2142089729);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4087() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2142089729);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test4088() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2142089729);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4189() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.multiply(2736);
    }

    @Test(timeout = 4000)
    public void test4290() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.multiply((-269666976));
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4391() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2.9621181706527444E172);
        Complex complex2 = complex1.multiply(2.9621181706527444E172);
        Complex complex3 = complex2.multiply(2142089729);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4392() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2.9621181706527444E172);
        Complex complex2 = complex1.multiply(2.9621181706527444E172);
        Complex complex3 = complex2.multiply(2142089729);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4393() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2.9621181706527444E172);
        Complex complex2 = complex1.multiply(2.9621181706527444E172);
        Complex complex3 = complex2.multiply(2142089729);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4394() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2.9621181706527444E172);
        Complex complex2 = complex1.multiply(2.9621181706527444E172);
        Complex complex3 = complex2.multiply(2142089729);
        complex3.getReal();
    }

    @Test(timeout = 4000)
    public void test4395() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.multiply(2.9621181706527444E172);
        Complex complex2 = complex1.multiply(2.9621181706527444E172);
        Complex complex3 = complex2.multiply(2142089729);
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4496() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.multiply(1.57);
    }

    @Test(timeout = 4000)
    public void test4597() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.multiply(Double.NaN);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test4698() throws Throwable {
        Complex complex0 = Complex.valueOf((-139.54), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-139.54));
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4699() throws Throwable {
        Complex complex0 = Complex.valueOf((-139.54), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-139.54));
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test46100() throws Throwable {
        Complex complex0 = Complex.valueOf((-139.54), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-139.54));
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test46101() throws Throwable {
        Complex complex0 = Complex.valueOf((-139.54), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-139.54));
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test47102() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test48103() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.negate();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test49104() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.subtract(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test50105() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test50106() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test51107() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.subtract((double) 2531);
    }

    @Test(timeout = 4000)
    public void test52108() throws Throwable {
        Complex complex0 = Complex.valueOf((double) 2531, (double) 2531);
        Complex complex1 = complex0.subtract((double) 2531);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test52109() throws Throwable {
        Complex complex0 = Complex.valueOf((double) 2531, (double) 2531);
        Complex complex1 = complex0.subtract((double) 2531);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test52110() throws Throwable {
        Complex complex0 = Complex.valueOf((double) 2531, (double) 2531);
        Complex complex1 = complex0.subtract((double) 2531);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test52111() throws Throwable {
        Complex complex0 = Complex.valueOf((double) 2531, (double) 2531);
        Complex complex1 = complex0.subtract((double) 2531);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test53112() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.I.subtract(Double.NaN);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test54113() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.acos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test55114() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.asin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test56115() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.atan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test57116() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.cos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test57117() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.cos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test57118() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.cos();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test57119() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.cos();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test58120() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cosh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test58121() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cosh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test58122() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cosh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test58123() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cosh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test59124() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.cosh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test60125() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.exp();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test61126() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sin();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test61127() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sin();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test61128() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sin();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test61129() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test62130() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.I.sinh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test62131() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.I.sinh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test62132() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.I.sinh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test62133() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.I.sinh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test63134() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test63135() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test63136() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test63137() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test64138() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sqrt();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test64139() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sqrt();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test64140() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sqrt();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test64141() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sqrt();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test65142() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.tan();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test65143() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.tan();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test65144() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test66145() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.tan();
    }

    @Test(timeout = 4000)
    public void test67146() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.I.tanh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test67147() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.I.tanh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test67148() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.I.tanh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test67149() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.I.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test68150() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test69151() throws Throwable {
        Complex complex0 = Complex.ONE;
        complex0.NaN.nthRoot((-2226));
    }

    @Test(timeout = 4000)
    public void test70152() throws Throwable {
        Complex complex0 = Complex.ZERO;
        List<Complex> list0 = complex0.NaN.nthRoot(2798);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test70153() throws Throwable {
        Complex complex0 = Complex.ZERO;
        List<Complex> list0 = complex0.NaN.nthRoot(2798);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test71154() throws Throwable {
        Complex complex0 = Complex.INF;
        List<Complex> list0 = complex0.nthRoot(1);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test72155() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test73156() throws Throwable {
        Complex complex0 = Complex.valueOf((double) (-1076165048), Double.NaN);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test74157() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        complex0.getImaginary();
    }
}
