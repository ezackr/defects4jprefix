/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:30:45 GMT 2024
 */
package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
        int int0 = levenbergMarquardtEstimator0.getCostEvaluations();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
        int int0 = levenbergMarquardtEstimator0.getJacobianEvaluations();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
        LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
        levenbergMarquardtEstimator0.setMaxCostEval((-60));
        levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
        LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
        double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
        simpleEstimationProblem0.addMeasurement((WeightedMeasurement) null);
        LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
        levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
        LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
        LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
        EstimatedParameter estimatedParameter0 = new EstimatedParameter("ftK}gu'^K:?^", 0.8049445726397427);
        WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
        doReturn(0.8049445726397427, 0.8049445726397427, 0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
        doReturn(0.8049445726397427, 0.0, 0.0).when(weightedMeasurement0).getResidual();
        doReturn(0.8049445726397427, 1.0, 2.0, 2.0, 0.0).when(weightedMeasurement0).getWeight();
        WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0).when(weightedMeasurement1).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
        doReturn(0.0, 0.0, 0.0).when(weightedMeasurement1).getResidual();
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedMeasurement1).getWeight();
        simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
        simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
        simpleEstimationProblem0.addParameter(estimatedParameter0);
        levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
    }
}
