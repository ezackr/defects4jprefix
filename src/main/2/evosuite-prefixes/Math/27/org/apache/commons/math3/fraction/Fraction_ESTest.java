/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:27:50 GMT 2024
 */
package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.add(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.add(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        double double0 = fraction0.MINUS_ONE.percentageValue();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        double double0 = fraction0.MINUS_ONE.percentageValue();
        fraction0.byteValue();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2104), (-2104));
        int int0 = fraction0.getDenominator();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2104), (-2104));
        int int0 = fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = fraction0.TWO_QUARTERS.add((-691));
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = fraction0.TWO_QUARTERS.add((-691));
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2147483642), (-2147483642));
        Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-2147483642));
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2147483642), (-2147483642));
        Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-2147483642));
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2147483642), (-2147483642));
        Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-2147483642));
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        FractionField fractionField0 = fraction0.ONE_THIRD.getField();
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction((-2188.95), (-2188.95), (-943));
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        Fraction fraction0 = new Fraction(944, 944);
        long long0 = fraction0.longValue();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        Fraction fraction0 = new Fraction(944, 944);
        long long0 = fraction0.longValue();
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        Fraction fraction0 = new Fraction(944, 944);
        long long0 = fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test0918() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = fraction0.ZERO.divide(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        Fraction fraction0 = new Fraction(424.41070566607084);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
        Fraction fraction1 = fraction0.ONE_QUARTER.subtract(Integer.MAX_VALUE);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
        Fraction fraction1 = fraction0.ONE_QUARTER.subtract(Integer.MAX_VALUE);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
        Fraction fraction1 = fraction0.ONE_QUARTER.subtract(Integer.MAX_VALUE);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        int int0 = fraction0.intValue();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        int int0 = fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test1325() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        fraction0.hashCode();
    }

    @Test(timeout = 4000)
    public void test1426() throws Throwable {
        Fraction fraction0 = new Fraction(3631, 3631);
        int int0 = fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        Fraction fraction0 = new Fraction(3631, 3631);
        int int0 = fraction0.getNumerator();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test1528() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        float float0 = fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test1629() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test1730() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(2.85040095144011776E17, 100);
    }

    @Test(timeout = 4000)
    public void test1831() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction((-943), (-943), (-943));
    }

    @Test(timeout = 4000)
    public void test1932() throws Throwable {
        Fraction fraction0 = new Fraction(2729.961900258808, 1);
        fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test2033() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(0, 0);
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(5247, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test2235() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        Fraction fraction0 = new Fraction((-2145965990), (-2145965990));
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test2337() throws Throwable {
        Fraction fraction0 = new Fraction((-2145965990), (-2145965990));
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test2438() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = fraction0.MINUS_ONE.abs();
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = fraction0.MINUS_ONE.abs();
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test2540() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.TWO_THIRDS.abs();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-1310), (-1310));
        int int0 = fraction0.compareTo(fraction0);
    }

    @Test(timeout = 4000)
    public void test2642() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-1310), (-1310));
        int int0 = fraction0.compareTo(fraction0);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test2643() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-1310), (-1310));
        int int0 = fraction0.compareTo(fraction0);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test2744() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(5269203, 5269203);
        Fraction fraction1 = new Fraction(5269203, 5269203, (-1310));
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test2745() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(5269203, 5269203);
        Fraction fraction1 = new Fraction(5269203, 5269203, (-1310));
        int int0 = fraction0.compareTo(fraction1);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test2746() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(5269203, 5269203);
        Fraction fraction1 = new Fraction(5269203, 5269203, (-1310));
        int int0 = fraction0.compareTo(fraction1);
        fraction1.byteValue();
    }

    @Test(timeout = 4000)
    public void test2847() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-1310), (-1310));
        Fraction fraction1 = new Fraction((-1310), Double.POSITIVE_INFINITY, (-1310));
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test2848() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-1310), (-1310));
        Fraction fraction1 = new Fraction((-1310), Double.POSITIVE_INFINITY, (-1310));
        int int0 = fraction0.compareTo(fraction1);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test2949() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2145949730), (-2145949730));
        Object object0 = new Object();
        boolean boolean0 = fraction0.equals(object0);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test2950() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2145949730), (-2145949730));
        Object object0 = new Object();
        boolean boolean0 = fraction0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test2951() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2145949730), (-2145949730));
        Object object0 = new Object();
        boolean boolean0 = fraction0.equals(object0);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test3052() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        boolean boolean0 = fraction0.equals(fraction0);
    }

    @Test(timeout = 4000)
    public void test3153() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = Fraction.ONE_HALF;
        boolean boolean0 = fraction1.equals(fraction0);
    }

    @Test(timeout = 4000)
    public void test3254() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = Fraction.THREE_QUARTERS;
        boolean boolean0 = fraction0.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test3355() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.ONE_HALF;
        boolean boolean0 = fraction1.equals(fraction0);
        fraction0.equals((Object) fraction1);
    }

    @Test(timeout = 4000)
    public void test3356() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.ONE_HALF;
        boolean boolean0 = fraction1.equals(fraction0);
    }

    @Test(timeout = 4000)
    public void test3457() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2145949730), Integer.MIN_VALUE);
        Fraction fraction1 = new Fraction((-2145949730));
        Fraction fraction2 = fraction1.divide(fraction0);
        fraction2.negate();
    }

    @Test(timeout = 4000)
    public void test3558() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        fraction0.add((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test3659() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.add(fraction0);
    }

    @Test(timeout = 4000)
    public void test3760() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test3861() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test3862() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test3963() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test3964() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test4065() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.add(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test4066() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.add(fraction0);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test4167() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.getReducedFraction(Integer.MAX_VALUE, 3938);
        fraction0.add(fraction1);
    }

    @Test(timeout = 4000)
    public void test4268() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        fraction0.ONE_QUARTER.multiply((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test4369() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.TWO.multiply(fraction1);
        fraction2.doubleValue();
    }

    @Test(timeout = 4000)
    public void test4470() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        fraction0.divide((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test4571() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        fraction0.ZERO.divide(fraction0);
    }

    @Test(timeout = 4000)
    public void test4672() throws Throwable {
        Fraction.getReducedFraction(0, 0);
    }

    @Test(timeout = 4000)
    public void test4773() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, (-943));
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test4874() throws Throwable {
        Fraction.getReducedFraction((-2147483635), Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test4975() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1318));
    }

    @Test(timeout = 4000)
    public void test5076() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        String string0 = fraction0.toString();
    }
}
