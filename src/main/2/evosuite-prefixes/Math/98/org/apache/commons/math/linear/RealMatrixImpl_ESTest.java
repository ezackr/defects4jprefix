/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:24:42 GMT 2024
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RealMatrixImpl_ESTest extends RealMatrixImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.getRowDimension();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[][] doubleArray1 = new double[8][9];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        doubleArray1[4] = doubleArray0;
        doubleArray1[5] = doubleArray0;
        doubleArray1[6] = doubleArray0;
        doubleArray1[7] = doubleArray0;
        RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, false);
        RealMatrix realMatrix0 = realMatrixImpl1.solve((RealMatrix) realMatrixImpl0);
        realMatrixImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[][] doubleArray1 = new double[8][9];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        doubleArray1[4] = doubleArray0;
        doubleArray1[5] = doubleArray0;
        doubleArray1[6] = doubleArray0;
        doubleArray1[7] = doubleArray0;
        RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, false);
        RealMatrix realMatrix0 = realMatrixImpl1.solve((RealMatrix) realMatrixImpl0);
        realMatrix0.getColumnDimension();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[][] doubleArray1 = new double[8][9];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        doubleArray1[4] = doubleArray0;
        doubleArray1[5] = doubleArray0;
        doubleArray1[6] = doubleArray0;
        doubleArray1[7] = doubleArray0;
        RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, false);
        RealMatrix realMatrix0 = realMatrixImpl1.solve((RealMatrix) realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[][] doubleArray1 = new double[8][9];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        doubleArray1[4] = doubleArray0;
        doubleArray1[5] = doubleArray0;
        doubleArray1[6] = doubleArray0;
        doubleArray1[7] = doubleArray0;
        RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, false);
        RealMatrix realMatrix0 = realMatrixImpl1.solve((RealMatrix) realMatrixImpl0);
        realMatrix0.getNorm();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        realMatrixImpl0.copy();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        double[][] doubleArray0 = new double[4][1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.inverse();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.isSquare();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
        realMatrixImpl0.inverse();
        realMatrixImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        realMatrixImpl0.getPermutation();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl((-1), (-1));
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(9, 9);
        realMatrixImpl0.getSubMatrix(9, 9, (-814), 9);
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl(2145198021, (-4));
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        double[][] doubleArray0 = new double[19][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, true);
        realMatrixImpl0.getColumnDimension();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl((double[][]) null, false);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        double[] doubleArray0 = new double[0];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.inverse();
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        double[][] doubleArray0 = new double[1][0];
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[][] doubleArray1 = new double[3][6];
        doubleArray1[0] = doubleArray0;
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl(doubleArray1, false);
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        double[][] doubleArray0 = new double[2][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.transpose();
        realMatrixImpl0.add(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.add((RealMatrix) realMatrixImpl0);
        realMatrix0.getNorm();
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        double[][] doubleArray0 = new double[15][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(1);
        realMatrixImpl0.add(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        double[][] doubleArray0 = new double[3][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.getColumnMatrix(2);
        realMatrixImpl0.subtract(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        double[][] doubleArray0 = new double[6][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(1);
        realMatrixImpl0.subtract(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(31, 31);
        RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(31);
        realMatrix0.getColumnDimension();
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(31, 31);
        RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(31);
        realMatrix0.getNorm();
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        double[][] doubleArray0 = new double[4][1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-1645.855237378296));
        realMatrix0.equals((Object) realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        double[][] doubleArray0 = new double[4][1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-1645.855237378296));
        realMatrix0.getNorm();
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        double[][] doubleArray0 = new double[4][1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-1645.855237378296));
        realMatrix0.isSquare();
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        double[][] doubleArray0 = new double[4][1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-1645.855237378296));
        realMatrix0.getRowDimension();
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[][] doubleArray1 = new double[4][1];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
        RealMatrix realMatrix0 = realMatrixImpl0.multiply((RealMatrix) realMatrixImpl0);
        realMatrix0.equals((Object) realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        double[] doubleArray0 = new double[8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.multiply((RealMatrix) realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        double[][] doubleArray0 = new double[19][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double double0 = realMatrixImpl0.getNorm();
    }

    @Test(timeout = 4000)
    public void test2434() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        realMatrixImpl0.getSubMatrix((-1085), (-1085), (-1085), (-1085));
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(0, 0, 0, 0);
        realMatrix0.isSquare();
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        realMatrixImpl0.getSubMatrix(31, 0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        double[][] doubleArray0 = new double[1][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.getSubMatrix(758, 758, 758, (-2073));
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2170, 2170);
        realMatrixImpl0.getSubMatrix(2170, 2170, 2170, (-270));
    }

    @Test(timeout = 4000)
    public void test2939() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2170, 2170);
        realMatrixImpl0.getSubMatrix(2170, 2170, 2170, 3666);
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        int[] intArray0 = new int[0];
        realMatrixImpl0.getSubMatrix(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
        int[] intArray0 = new int[1];
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        realMatrixImpl0.isSquare();
    }

    @Test(timeout = 4000)
    public void test3142() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
        int[] intArray0 = new int[1];
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        realMatrix0.getRowDimension();
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        double[][] doubleArray0 = new double[12][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.setSubMatrix(doubleArray0, (-348), (-348));
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        double[][] doubleArray0 = new double[4][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.setSubMatrix(doubleArray0, 3681, (-1));
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        double[][] doubleArray0 = new double[0][4];
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test3546() throws Throwable {
        double[][] doubleArray0 = new double[2][0];
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test3647() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[][] doubleArray1 = new double[4][0];
        doubleArray1[0] = doubleArray0;
        RealMatrixImpl realMatrixImpl0 = null;
        realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test3748() throws Throwable {
        double[] doubleArray0 = new double[3];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[][] doubleArray1 = new double[1][2];
        realMatrixImpl0.setSubMatrix(doubleArray1, 2, 2024);
    }

    @Test(timeout = 4000)
    public void test3849() throws Throwable {
        double[][] doubleArray0 = new double[17][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        realMatrixImpl0.setSubMatrix(doubleArray0, 31, 31);
    }

    @Test(timeout = 4000)
    public void test3950() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        double[][] doubleArray0 = new double[1][7];
        realMatrixImpl0.setSubMatrix(doubleArray0, 0, 360);
    }

    @Test(timeout = 4000)
    public void test4051() throws Throwable {
        double[][] doubleArray0 = new double[5][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.setSubMatrix(doubleArray0, 838, 838);
    }

    @Test(timeout = 4000)
    public void test4152() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1384, 1384);
        realMatrixImpl0.getRowMatrix(1384);
    }

    @Test(timeout = 4000)
    public void test4253() throws Throwable {
        double[][] doubleArray0 = new double[9][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.getColumnMatrix((-197));
    }

    @Test(timeout = 4000)
    public void test4354() throws Throwable {
        double[][] doubleArray0 = new double[20][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[] doubleArray1 = realMatrixImpl0.getRow(17);
    }

    @Test(timeout = 4000)
    public void test4455() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
        realMatrixImpl0.getRow((-2527));
    }

    @Test(timeout = 4000)
    public void test4556() throws Throwable {
        double[][] doubleArray0 = new double[1][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[] doubleArray1 = realMatrixImpl0.getColumn(6);
    }

    @Test(timeout = 4000)
    public void test4657() throws Throwable {
        double[][] doubleArray0 = new double[1][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.getColumn(25);
    }

    @Test(timeout = 4000)
    public void test4758() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.isSquare();
    }

    @Test(timeout = 4000)
    public void test4759() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double double0 = realMatrixImpl0.getDeterminant();
    }

    @Test(timeout = 4000)
    public void test4860() throws Throwable {
        double[][] doubleArray0 = new double[1][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.getDeterminant();
    }

    @Test(timeout = 4000)
    public void test4961() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double double0 = realMatrixImpl0.getDeterminant();
    }

    @Test(timeout = 4000)
    public void test5062() throws Throwable {
        double[][] doubleArray0 = new double[1][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.getTrace();
    }

    @Test(timeout = 4000)
    public void test5163() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2170, 2170);
        realMatrixImpl0.isSquare();
    }

    @Test(timeout = 4000)
    public void test5164() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2170, 2170);
        double double0 = realMatrixImpl0.getTrace();
    }

    @Test(timeout = 4000)
    public void test5265() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test5367() throws Throwable {
        double[] doubleArray0 = new double[3];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.operate(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test5468() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test5570() throws Throwable {
        double[] doubleArray0 = new double[4];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
        realMatrixImpl0.preMultiply(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test5671() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        double[] doubleArray1 = new double[0];
        realMatrixImpl0.solve(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test5772() throws Throwable {
        double[][] doubleArray0 = new double[2][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.transpose();
        realMatrixImpl0.solve(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test5873() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[][] doubleArray1 = new double[4][1];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
        realMatrixImpl0.inverse();
    }

    @Test(timeout = 4000)
    public void test5974() throws Throwable {
        double[] doubleArray0 = new double[3];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        boolean boolean0 = realMatrixImpl0.isSingular();
    }

    @Test(timeout = 4000)
    public void test6075() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1645.855237378296);
        double[][] doubleArray1 = new double[4][1];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
        RealMatrix realMatrix0 = realMatrixImpl0.transpose();
        RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl) realMatrixImpl0.subtract(realMatrix0);
        realMatrixImpl1.luDecompose();
    }

    @Test(timeout = 4000)
    public void test6176() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        String string0 = realMatrixImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test6277() throws Throwable {
        double[][] doubleArray0 = new double[10][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        String string0 = realMatrixImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test6378() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.inverse();
        boolean boolean0 = realMatrixImpl0.equals(realMatrix0);
        realMatrix0.equals((Object) realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test6379() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.inverse();
        boolean boolean0 = realMatrixImpl0.equals(realMatrix0);
        realMatrix0.getNorm();
    }

    @Test(timeout = 4000)
    public void test6380() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.inverse();
        boolean boolean0 = realMatrixImpl0.equals(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test6481() throws Throwable {
        double[][] doubleArray0 = new double[1][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test6582() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        Object object0 = new Object();
        boolean boolean0 = realMatrixImpl0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test6683() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1409, 1409);
        double[] doubleArray0 = new double[3];
        RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
        boolean boolean0 = realMatrixImpl1.equals(realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test6784() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl();
        double[][] doubleArray1 = new double[4][3];
        doubleArray1[0] = doubleArray0;
        realMatrixImpl1.data = doubleArray1;
        boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
    }

    @Test(timeout = 4000)
    public void test6885() throws Throwable {
        double[][] doubleArray0 = new double[1][8];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.subtract(realMatrixImpl0);
        boolean boolean0 = realMatrixImpl1.equals(realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test6986() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.hashCode();
    }

    @Test(timeout = 4000)
    public void test7087() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 920.529;
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        realMatrixImpl0.solve(doubleArray0);
        RealMatrix realMatrix0 = realMatrixImpl0.getLUMatrix();
        realMatrix0.getColumnDimension();
    }

    @Test(timeout = 4000)
    public void test7188() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        realMatrixImpl0.getLUMatrix();
    }
}
