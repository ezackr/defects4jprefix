/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:45:59 GMT 2024
 */
package org.apache.commons.math.stat.regression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.stat.regression.SimpleRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SimpleRegression_ESTest extends SimpleRegression_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getIntercept();
        simpleRegression0.getSumSquaredErrors();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getIntercept();
        simpleRegression0.getSlope();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getIntercept();
        simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getR();
        simpleRegression0.getTotalSumSquares();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getR();
        simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getR();
        simpleRegression0.getSumSquaredErrors();
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getR();
        simpleRegression0.getSlope();
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.predict(Double.NaN);
        simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.predict(Double.NaN);
        simpleRegression0.getSlope();
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.predict(Double.NaN);
        simpleRegression0.getSumSquaredErrors();
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double double0 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double double0 = simpleRegression0.getRegressionSumSquares();
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double double0 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.getSumSquaredErrors();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.clear();
        simpleRegression0.getSumSquaredErrors();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.clear();
        simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        long long0 = simpleRegression0.getN();
        simpleRegression0.getSumSquaredErrors();
    }

    @Test(timeout = 4000)
    public void test0516() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        long long0 = simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getInterceptStdErr();
        simpleRegression0.getSumSquaredErrors();
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getInterceptStdErr();
        simpleRegression0.getMeanSquareError();
    }

    @Test(timeout = 4000)
    public void test0619() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getInterceptStdErr();
        simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test0720() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double[][] doubleArray0 = new double[4][2];
        simpleRegression0.addData(doubleArray0);
        simpleRegression0.getSignificance();
        simpleRegression0.getTotalSumSquares();
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getSlopeConfidenceInterval();
    }

    @Test(timeout = 4000)
    public void test0922() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double[][] doubleArray0 = new double[2][3];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = 1.5;
        doubleArray0[0] = doubleArray1;
        simpleRegression0.addData(doubleArray0);
        double double0 = simpleRegression0.getR();
        simpleRegression0.getRegressionSumSquares();
    }

    @Test(timeout = 4000)
    public void test0923() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double[][] doubleArray0 = new double[2][3];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = 1.5;
        doubleArray0[0] = doubleArray1;
        simpleRegression0.addData(doubleArray0);
        double double0 = simpleRegression0.getR();
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double[][] doubleArray0 = new double[2][3];
        double[] doubleArray1 = new double[9];
        doubleArray1[1] = 309.41478;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[4];
        doubleArray2[0] = 309.41478;
        doubleArray0[1] = doubleArray2;
        simpleRegression0.addData(doubleArray0);
        double double0 = simpleRegression0.getR();
        simpleRegression0.getN();
    }

    @Test(timeout = 4000)
    public void test1025() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        double[][] doubleArray0 = new double[2][3];
        double[] doubleArray1 = new double[9];
        doubleArray1[1] = 309.41478;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[4];
        doubleArray2[0] = 309.41478;
        doubleArray0[1] = doubleArray2;
        simpleRegression0.addData(doubleArray0);
        double double0 = simpleRegression0.getR();
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getSlopeConfidenceInterval(2.0);
    }

    @Test(timeout = 4000)
    public void test1227() throws Throwable {
        SimpleRegression simpleRegression0 = new SimpleRegression();
        simpleRegression0.getSlopeConfidenceInterval((-2906.469767645384));
    }
}
