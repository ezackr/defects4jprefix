/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 17:52:50 GMT 2024
 */
package org.apache.commons.math3.optim.nonlinear.vector.jacobian;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.nonlinear.vector.Weight;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractLeastSquaresOptimizer_ESTest extends AbstractLeastSquaresOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.setCost(0.0);
        levenbergMarquardtOptimizer0.getChiSquare();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double[] doubleArray0 = new double[7];
        levenbergMarquardtOptimizer0.computeSigma(doubleArray0, 0.0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.getRMS();
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        double[] doubleArray0 = new double[7];
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
        Weight weight0 = new Weight(doubleArray0);
        optimizationDataArray0[0] = (OptimizationData) weight0;
        levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.getWeightSquareRoot();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double[] doubleArray0 = new double[6];
        levenbergMarquardtOptimizer0.computeCost(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
        levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);
    }
}
