/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:20:37 GMT 2024
 */
package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.sampling.FixedStepHandler;
import org.apache.commons.math.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, 0.2, 100.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, 0.2, 100.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, 0.2, 100.0);
        double double0 = dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, 0.2, 100.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, 0.2, 100.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, 0.2, 100.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0419047619047619, 0.0419047619047619, 0.0419047619047619, 8.616285269798619);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0419047619047619, 0.0419047619047619, 0.0419047619047619, 8.616285269798619);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0419047619047619, 0.0419047619047619, 0.0419047619047619, 8.616285269798619);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2.8267928200000085), 0.19999999999999984, (-694.1940216711625), (-147.02679282));
        highamHall54Integrator0.integrate(firstOrderConverter0, (-694.1940216711625), doubleArray0, (-147.02679282), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(503.82111, 503.82111, doubleArray0, doubleArray0);
        double[] doubleArray1 = new double[0];
        // Undeclared exception!
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 5.551115123125783E-17, doubleArray0, 2, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2, 0.2, 0.2, 0.2);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(900.2882, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double[] doubleArray0 = new double[4];
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 2, doubleArray0, 0.2, doubleArray0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2, 0.2, 0.2, 0.2);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(900.2882, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double[] doubleArray0 = new double[4];
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 2, doubleArray0, 0.2, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2, 0.2, 0.2, 0.2);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(eventHandler0).eventOccurred(anyDouble(), any(double[].class), anyBoolean());
        doReturn(0.2, (-147.02679282), (-147.02679282), (double) 2, (-147.02679282)).when(eventHandler0).g(anyDouble(), any(double[].class));
        dormandPrince54Integrator0.addEventHandler(eventHandler0, 2, 2, 2);
        double[] doubleArray0 = new double[4];
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 2, doubleArray0, 0.2, doubleArray0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1.0, 4312.054505394287, 3320.2);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        highamHall54Integrator0.integrate(firstOrderConverter0, (-1149.81200018), doubleArray0, (-3518.382), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(19, 2, 0.2, 0.2);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(eventHandler0).eventOccurred(anyDouble(), any(double[].class), anyBoolean());
        doReturn(0.2, (-147.02679282), (-147.02679282), (double) 2, (-147.02679282)).when(eventHandler0).g(anyDouble(), any(double[].class));
        dormandPrince54Integrator0.addEventHandler(eventHandler0, 2, 2, 2);
        double[] doubleArray0 = new double[4];
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 2, doubleArray0, 0.2, doubleArray0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(19, 2, 0.2, 0.2);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(eventHandler0).eventOccurred(anyDouble(), any(double[].class), anyBoolean());
        doReturn(0.2, (-147.02679282), (-147.02679282), (double) 2, (-147.02679282)).when(eventHandler0).g(anyDouble(), any(double[].class));
        dormandPrince54Integrator0.addEventHandler(eventHandler0, 2, 2, 2);
        double[] doubleArray0 = new double[4];
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 2, doubleArray0, 0.2, doubleArray0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(19, 2, 0.2, 0.2);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(eventHandler0).eventOccurred(anyDouble(), any(double[].class), anyBoolean());
        doReturn(0.2, (-147.02679282), (-147.02679282), (double) 2, (-147.02679282)).when(eventHandler0).g(anyDouble(), any(double[].class));
        dormandPrince54Integrator0.addEventHandler(eventHandler0, 2, 2, 2);
        double[] doubleArray0 = new double[4];
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 2, doubleArray0, 0.2, doubleArray0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0918() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2, 31.40459380030398, 31.40459380030398, 31.40459380030398);
        double[] doubleArray0 = new double[4];
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 2, doubleArray0, 31.40459380030398, doubleArray0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2, 0.2, 0.2, 0.2);
        double[] doubleArray0 = new double[4];
        // Undeclared exception!
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.2, doubleArray0, (-275.30509825597903), doubleArray0);
    }
}
