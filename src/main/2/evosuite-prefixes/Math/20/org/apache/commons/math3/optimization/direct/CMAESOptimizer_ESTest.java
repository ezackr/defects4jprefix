/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:10:25 GMT 2024
 */
package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0);
        List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[] doubleArray0 = new double[0];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2017), doubleArray0);
        List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = (double) 2;
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(10, doubleArray1, 9, 0, true, 4, 1, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(9989, microsphereInterpolatingFunction0, goalType0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(9);
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 9, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray1, 30000, (-7), true, 30000, (-7), cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        cMAESOptimizer1.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray1, 30000, 30000, true, 30000, 30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray1, 30000, 30000, true, 30000, 30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2);
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = (double) 0;
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        unitSphereRandomVectorGenerator0.nextVector();
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = (double) 30000;
        cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray2);
        int int0 = CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT;
        // Undeclared exception!
        cMAESOptimizer0.optimize((-3403), microsphereInterpolatingFunction0, goalType0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = (double) (-1459778660);
        GoalType goalType0 = GoalType.MINIMIZE;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray2, 0, 0, unitSphereRandomVectorGenerator0);
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray2, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer0.optimize(1747, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, (double[]) null, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        cMAESOptimizer0.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
        double[] doubleArray2 = new double[5];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(253, doubleArray2);
        GoalType goalType0 = GoalType.MAXIMIZE;
        cMAESOptimizer0.optimize(0, microsphereInterpolatingFunction0, goalType0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = (double) (-1459778660);
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray1);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer1.optimize((-1459778660), microsphereInterpolatingFunction0, goalType0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = (double) 2;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(30000, doubleArray1, 30000, 0, false, 30000, 2, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, false);
        GoalType goalType0 = GoalType.MAXIMIZE;
        cMAESOptimizer1.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(23, doubleArray1, 23, 0, true, 1, 1350, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 244, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray1, 80, 0, false, 0, 80, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(244, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[1];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
        double[] doubleArray2 = new double[5];
        GoalType goalType0 = GoalType.MAXIMIZE;
        // Undeclared exception!
        cMAESOptimizer0.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray2);
    }
}
