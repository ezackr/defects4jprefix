/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:01:18 GMT 2024
 */
package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.analysis.MultivariateMatrixFunction;
import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractLeastSquaresOptimizer_ESTest extends AbstractLeastSquaresOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getMaxEvaluations();
        levenbergMarquardtOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getIterations();
        levenbergMarquardtOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getIterations();
        levenbergMarquardtOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getIterations();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getMaxIterations();
        levenbergMarquardtOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getEvaluations();
        levenbergMarquardtOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getEvaluations();
        levenbergMarquardtOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        int int0 = levenbergMarquardtOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
        int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();
        gaussNewtonOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
        int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
        int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();
        gaussNewtonOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.getConvergenceChecker();
        levenbergMarquardtOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.getConvergenceChecker();
        levenbergMarquardtOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        double[][] doubleArray0 = new double[7][1];
        MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
        doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
        double[] doubleArray1 = new double[7];
        DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
        doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
        doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
        GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.setMaxIterations((-364));
        levenbergMarquardtOptimizer0.incrementIterationsCounter();
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        double[][] doubleArray0 = new double[8][1];
        MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
        doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
        double[] doubleArray1 = new double[7];
        DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
        doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
        doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
        GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test0918() throws Throwable {
        double[][] doubleArray0 = new double[7][1];
        MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
        doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
        double[] doubleArray1 = new double[7];
        DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
        doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
        doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
        GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
        double[] doubleArray2 = new double[0];
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.setMaxEvaluations((-18));
        levenbergMarquardtOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
        double[] doubleArray0 = new double[6];
        DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
        doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();
        doReturn((double[]) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double[] doubleArray1 = new double[0];
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1221() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double double0 = levenbergMarquardtOptimizer0.getRMS();
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double double0 = levenbergMarquardtOptimizer0.getRMS();
        levenbergMarquardtOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double double0 = levenbergMarquardtOptimizer0.getRMS();
        levenbergMarquardtOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test1324() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.rows = 100;
        levenbergMarquardtOptimizer0.getRMS();
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double double0 = levenbergMarquardtOptimizer0.getChiSquare();
        levenbergMarquardtOptimizer0.getMaxIterations();
    }

    @Test(timeout = 4000)
    public void test1426() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        double double0 = levenbergMarquardtOptimizer0.getChiSquare();
        levenbergMarquardtOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test1528() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.rows = 100;
        levenbergMarquardtOptimizer0.guessParametersErrors();
    }

    @Test(timeout = 4000)
    public void test1629() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.guessParametersErrors();
    }

    @Test(timeout = 4000)
    public void test1730() throws Throwable {
        GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[1];
        gaussNewtonOptimizer0.optimize((DifferentiableMultivariateVectorialFunction) null, doubleArray0, doubleArray1, doubleArray0);
    }
}
