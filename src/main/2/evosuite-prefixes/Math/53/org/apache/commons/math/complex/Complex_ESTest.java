/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:26:20 GMT 2024
 */
package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.readResolve();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.readResolve();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.readResolve();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = (Complex) complex0.readResolve();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.isNaN();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.isNaN();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.isNaN();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ONE.sqrt1z();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ONE.sqrt1z();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        String string0 = complex0.toString();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        String string0 = complex0.toString();
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        String string0 = complex0.toString();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        complex0.getField();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        complex0.getField();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        complex0.getField();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        complex0.getField();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0517() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        Complex complex2 = complex1.exp();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0518() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        Complex complex2 = complex1.exp();
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0519() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        Complex complex2 = complex1.exp();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0520() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        Complex complex2 = complex1.exp();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0521() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        Complex complex2 = complex1.exp();
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test0622() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.conjugate();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0623() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.conjugate();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0624() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.conjugate();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        double double0 = complex1.abs();
    }

    @Test(timeout = 4000)
    public void test0726() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        double double0 = complex1.abs();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0727() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        double double0 = complex1.abs();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test0728() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        double double0 = complex1.abs();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0729() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        double double0 = complex1.abs();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0730() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        double double0 = complex1.abs();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0731() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        double double0 = complex1.abs();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0832() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0833() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test0834() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0835() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0936() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.conjugate();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1037() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.divide(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1138() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.divide(complex1);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1139() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.divide(complex1);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1140() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.divide(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.divide(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1142() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.divide(complex1);
        complex2.equals((Object) complex1);
    }

    @Test(timeout = 4000)
    public void test1143() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.divide(complex1);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1244() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.divide(complex1);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1245() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.divide(complex1);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1246() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.divide(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1247() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.divide(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1248() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.divide(complex1);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1249() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.divide(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1350() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1351() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.atan();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test1452() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.I.divide(complex1);
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test1453() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.I.divide(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1554() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.atan();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1555() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.atan();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1656() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.equals((Object) null);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1657() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.equals((Object) null);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test1658() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.equals((Object) null);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1659() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.equals((Object) null);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1660() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        boolean boolean0 = complex0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test1761() throws Throwable {
        Complex complex0 = Complex.ZERO;
        boolean boolean0 = complex0.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test1862() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.negate();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1863() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.negate();
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test1864() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.negate();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1865() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.negate();
        boolean boolean0 = complex0.equals(complex1);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1866() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.negate();
        boolean boolean0 = complex0.equals(complex1);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1867() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.negate();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1968() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.NaN;
        boolean boolean0 = complex0.equals(complex1);
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test1969() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.NaN;
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test2070() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = new Complex(1200.13818, 1200.13818);
        boolean boolean0 = complex0.equals(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2071() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = new Complex(1200.13818, 1200.13818);
        boolean boolean0 = complex0.equals(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2072() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = new Complex(1200.13818, 1200.13818);
        boolean boolean0 = complex0.equals(complex1);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2073() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = new Complex(1200.13818, 1200.13818);
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test2074() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = new Complex(1200.13818, 1200.13818);
        boolean boolean0 = complex0.equals(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2175() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        boolean boolean0 = complex1.equals(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2176() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        boolean boolean0 = complex1.equals(complex0);
        complex0.equals((Object) complex1);
    }

    @Test(timeout = 4000)
    public void test2177() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        boolean boolean0 = complex1.equals(complex0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2178() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        boolean boolean0 = complex1.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test2179() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        Complex complex1 = complex0.ONE.multiply(1200.13818);
        boolean boolean0 = complex1.equals(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2280() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        complex0.ZERO.hashCode();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2281() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        complex0.ZERO.hashCode();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2282() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        complex0.ZERO.hashCode();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test2283() throws Throwable {
        Complex complex0 = new Complex(1200.13818, 1200.13818);
        complex0.ZERO.hashCode();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2384() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.hashCode();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2385() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.hashCode();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2386() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.hashCode();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test2387() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.hashCode();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2388() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.hashCode();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2389() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.hashCode();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2490() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex0.I.pow(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2491() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex0.I.pow(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2492() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex0.I.pow(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2593() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = new Complex((-3824.3065442), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-127257.72171798858));
        Complex complex3 = complex2.multiply(complex0);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2594() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = new Complex((-3824.3065442), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-127257.72171798858));
        Complex complex3 = complex2.multiply(complex0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2595() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = new Complex((-3824.3065442), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-127257.72171798858));
        Complex complex3 = complex2.multiply(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2596() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = new Complex((-3824.3065442), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-127257.72171798858));
        Complex complex3 = complex2.multiply(complex0);
    }

    @Test(timeout = 4000)
    public void test2597() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = new Complex((-3824.3065442), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-127257.72171798858));
        Complex complex3 = complex2.multiply(complex0);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2598() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = new Complex((-3824.3065442), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-127257.72171798858));
        Complex complex3 = complex2.multiply(complex0);
        complex3.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2699() throws Throwable {
        Complex complex0 = new Complex((-2.356194490192345), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.asin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test26100() throws Throwable {
        Complex complex0 = new Complex((-2.356194490192345), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.asin();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test26101() throws Throwable {
        Complex complex0 = new Complex((-2.356194490192345), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.asin();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test26102() throws Throwable {
        Complex complex0 = new Complex((-2.356194490192345), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.asin();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test27103() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex2.equals((Object) complex1);
    }

    @Test(timeout = 4000)
    public void test27104() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test27105() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test28106() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.multiply((-2.356194490192345));
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test28107() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.multiply((-2.356194490192345));
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test28108() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.multiply((-2.356194490192345));
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test28109() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.multiply((-2.356194490192345));
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test28110() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.multiply((-2.356194490192345));
    }

    @Test(timeout = 4000)
    public void test28111() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.multiply((-2.356194490192345));
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test29112() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(Double.NaN);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test29113() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(Double.NaN);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test29114() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(Double.NaN);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test29115() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(Double.NaN);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test29116() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.multiply(Double.NaN);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test30117() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.multiply(1638.45972);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test31118() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test32119() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
        complex2.isNaN();
    }

    @Test(timeout = 4000)
    public void test32120() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test32121() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.negate();
    }

    @Test(timeout = 4000)
    public void test33122() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.subtract(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test34123() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.I.acos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test35124() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.acos();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test35125() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.acos();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test35126() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.acos();
    }

    @Test(timeout = 4000)
    public void test35127() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.acos();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test35128() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.acos();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test36129() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.asin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test37130() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.atan();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test37131() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.atan();
        complex2.isNaN();
    }

    @Test(timeout = 4000)
    public void test37132() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.atan();
    }

    @Test(timeout = 4000)
    public void test38133() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.cos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test38134() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.cos();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test38135() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.cos();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test38136() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.cos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test39137() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex1.cos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test39138() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex1.cos();
        complex2.isNaN();
    }

    @Test(timeout = 4000)
    public void test39139() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex1.cos();
    }

    @Test(timeout = 4000)
    public void test39140() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex1.cos();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test40141() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.cosh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test40142() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.cosh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test40143() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.cosh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test40144() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.cosh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test41145() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.sin();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test41146() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.sin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test41147() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.sin();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test41148() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.sin();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test41149() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.sin();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test42150() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.sin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test43151() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.sinh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test43152() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.sinh();
        Complex complex2 = complex1.sinh();
        complex2.isNaN();
    }

    @Test(timeout = 4000)
    public void test44153() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tan();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test44154() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test44155() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test44156() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tan();
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test44157() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tan();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test45158() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.tan();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test45159() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.tan();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test45160() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.tan();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test45161() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.tan();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test45162() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        Complex complex1 = complex0.NaN.sqrt1z();
        Complex complex2 = complex1.tan();
    }

    @Test(timeout = 4000)
    public void test46163() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.tanh();
    }

    @Test(timeout = 4000)
    public void test46164() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.tanh();
        complex2.isNaN();
    }

    @Test(timeout = 4000)
    public void test46165() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.tanh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test47166() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        List<Complex> list0 = complex0.nthRoot(3735);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test47167() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        List<Complex> list0 = complex0.nthRoot(3735);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test47168() throws Throwable {
        Complex complex0 = new Complex(2.404307984052299E-9, 2.404307984052299E-9);
        List<Complex> list0 = complex0.nthRoot(3735);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test48169() throws Throwable {
        Complex complex0 = Complex.ONE;
        complex0.nthRoot((-1));
    }

    @Test(timeout = 4000)
    public void test49170() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        List<Complex> list0 = complex1.nthRoot(872);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test49171() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        List<Complex> list0 = complex1.nthRoot(872);
        list0.contains(complex1);
    }

    @Test(timeout = 4000)
    public void test49172() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.pow(complex0);
        List<Complex> list0 = complex1.nthRoot(872);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test50173() throws Throwable {
        Complex complex0 = Complex.INF;
        List<Complex> list0 = complex0.nthRoot(3712);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test50174() throws Throwable {
        Complex complex0 = Complex.INF;
        List<Complex> list0 = complex0.nthRoot(3712);
        list0.size();
    }
}
