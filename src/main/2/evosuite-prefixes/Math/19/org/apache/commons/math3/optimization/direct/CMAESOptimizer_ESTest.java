/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:07:26 GMT 2024
 */
package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0);
        List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[] doubleArray0 = new double[0];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2017), doubleArray0);
        List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000);
        double[][] doubleArray1 = new double[1][4];
        doubleArray1[0] = doubleArray0;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 30000, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 0, 30000, true, 0, 0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(559936947, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[2];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(2, doubleArray0, 22, 0, true, 2, (-1324), cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer1.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 2;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0);
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 389, 0.2655676563059404, true, 0, 389, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        double[] doubleArray2 = new double[2];
        doubleArray2[0] = (double) 30000;
        doubleArray2[1] = (double) 2;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        double[][] doubleArray0 = new double[2][4];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = (double) 30000;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[2];
        doubleArray0[1] = doubleArray2;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 2, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2);
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        double[][] doubleArray0 = new double[2][4];
        double[] doubleArray1 = new double[2];
        doubleArray1[1] = (double) 2;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[2];
        doubleArray0[1] = doubleArray2;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 2, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 2;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2);
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(2, doubleArray0, 30000, 30000, true, 0, 0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        // Undeclared exception!
        cMAESOptimizer1.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double[] doubleArray0 = new double[2];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2);
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, (double[]) null, 3100, 34, true, 30000, 34, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true, (ConvergenceChecker<PointValuePair>) null);
        // Undeclared exception!
        cMAESOptimizer1.optimize(3100, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 2;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2);
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 2, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 30000, 2.0, true, 620, 0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(620, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2);
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        unitSphereRandomVectorGenerator0.nextVector();
        double[][] doubleArray1 = new double[1][8];
        doubleArray1[0] = doubleArray0;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 2, 0, unitSphereRandomVectorGenerator0);
        microsphereInterpolatingFunction0.value(doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        cMAESOptimizer0.optimize(1443, microsphereInterpolatingFunction0, goalType0, doubleArray0);
        cMAESOptimizer0.optimize(2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 2;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0);
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        Well44497b well44497b0 = new Well44497b();
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(2, doubleArray0, 1273, 0, true, 2, 1273, well44497b0, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(1273, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2);
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        double[][] doubleArray1 = new double[1][4];
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 30000, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer0.optimize(2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, (double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000);
        double[][] doubleArray1 = new double[1][4];
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        cMAESOptimizer0.optimize(9983, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        double[][] doubleArray1 = new double[1][4];
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 30000, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 30000, 0, true, 0, 30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        double[] doubleArray2 = new double[0];
        cMAESOptimizer1.optimize(0, microsphereInterpolatingFunction0, goalType0, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) (-6);
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-6), doubleArray0);
        double[][] doubleArray1 = new double[2][6];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, (-1477), 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer0.optimize(1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 2;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0);
        double[][] doubleArray1 = new double[2][6];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, (-1477), 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer0.optimize(1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 2, unitSphereRandomVectorGenerator0);
        MersenneTwister mersenneTwister0 = new MersenneTwister(2);
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0, 2, 30000, true, 2, 2, mersenneTwister0, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        double[] doubleArray0 = new double[2];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 2, (-3.356118100840571E-7), true, 1, 0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(900, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        double[] doubleArray0 = new double[2];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(2, doubleArray0, 30000, 30000, false, 0, 0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, false);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer1.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2);
        double[][] doubleArray0 = new double[2][4];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = (double) 2;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[2];
        doubleArray0[1] = doubleArray2;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 2, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[][] doubleArray1 = new double[2][6];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2);
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(27);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 2, unitSphereRandomVectorGenerator0);
        double[] doubleArray2 = unitSphereRandomVectorGenerator0.nextVector();
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(27, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2, doubleArray2, doubleArray0);
    }
}
