/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:04:29 GMT 2024
 */
package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 0, 0.0, true, 0, 30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer((-24), doubleArray0, 30000, 0, true, 0, (-24), cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        cMAESOptimizer1.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1281;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 16, 16, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(1281, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1284);
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 1, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 30000, 1284.0, true, 0, 1284, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(1284, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1284;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 1, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 30000, 2147483646, true, 1284, 1284, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(5, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        GoalType goalType0 = GoalType.MINIMIZE;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = (double) 30000;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1281;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(2, doubleArray0, 577363174, 1281, true, 2, 1281, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(6713288, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer0.optimize(2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, (double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 0, 0.0, true, 0, 30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        cMAESOptimizer1.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 1, unitSphereRandomVectorGenerator0);
        double[] doubleArray2 = unitSphereRandomVectorGenerator0.nextVector();
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer((-2524), doubleArray2, 1, 0, true, 0, (-2524), cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        cMAESOptimizer1.optimize(175, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1257;
        double[][] doubleArray1 = new double[1][7];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
        GoalType goalType0 = GoalType.MAXIMIZE;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(5, doubleArray0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 3119, unitSphereRandomVectorGenerator0);
        cMAESOptimizer0.optimize(5, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 30000, 0, true, 2, 0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 402, 0, true, 1, 1901, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(402, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 489.676);
        CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 8, 0, false, 0, 0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, false, simpleValueChecker0);
        GoalType goalType0 = GoalType.MINIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(8, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1281;
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        doubleArray1[0] = doubleArray0;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
        double[] doubleArray2 = unitSphereRandomVectorGenerator0.nextVector();
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 16, 16, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(1281, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray2, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        double[] doubleArray0 = new double[1];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[1][7];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        // Undeclared exception!
        cMAESOptimizer0.optimize(30000, microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
    }
}
