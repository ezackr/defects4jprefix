/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:13:34 GMT 2024
 */
package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = (Complex) complex0.INF.readResolve();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = (Complex) complex0.INF.readResolve();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = (Complex) complex0.INF.readResolve();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        String string0 = complex0.toString();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        String string0 = complex0.toString();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        String string0 = complex0.toString();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.NaN;
        ComplexField complexField0 = complex0.getField();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.ONE;
        boolean boolean0 = complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.ONE.pow((-3978.5754894326005));
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.I;
        List<Complex> list0 = complex0.I.nthRoot(1863);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        Complex complex0 = Complex.I;
        List<Complex> list0 = complex0.I.nthRoot(1863);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(Double.NEGATIVE_INFINITY);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(Double.NEGATIVE_INFINITY);
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(Double.NEGATIVE_INFINITY);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(Double.NEGATIVE_INFINITY);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0720() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(Double.NEGATIVE_INFINITY);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test0721() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(Double.NEGATIVE_INFINITY);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        Complex complex0 = Complex.NaN;
        double double0 = complex0.abs();
    }

    @Test(timeout = 4000)
    public void test0923() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.asin();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test0924() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.asin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0925() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.asin();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1026() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.acos();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test1027() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.acos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1128() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.add((-361.59993));
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.add((-2834.78041));
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.add((-2834.78041));
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1231() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.add((-2834.78041));
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1232() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.add((-2834.78041));
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1333() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ZERO.add(Double.NaN);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.conjugate();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.conjugate();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1436() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.conjugate();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test1437() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.conjugate();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1538() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.divide(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1639() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ZERO.atan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1640() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ZERO.atan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1741() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.INF.divide(complex1);
    }

    @Test(timeout = 4000)
    public void test1842() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.atan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test1943() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test1944() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.atan();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2045() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.ONE.divide(complex1);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2046() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.ONE.divide(complex1);
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test2147() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.divide(1.633123935319537E16);
    }

    @Test(timeout = 4000)
    public void test2248() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2249() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2250() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2251() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2352() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(Double.NaN);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test2453() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(0.0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2554() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(5.562684646268003E-309);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2555() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(5.562684646268003E-309);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2556() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(5.562684646268003E-309);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2657() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2659() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2660() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test2661() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test2662() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test2663() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2764() throws Throwable {
        Complex complex0 = Complex.I;
        boolean boolean0 = complex0.equals(complex0);
    }

    @Test(timeout = 4000)
    public void test2865() throws Throwable {
        Complex complex0 = Complex.ONE;
        boolean boolean0 = complex0.equals("2N=S)B2ci+GE6EAjj");
    }

    @Test(timeout = 4000)
    public void test2966() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test2967() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test2968() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test2969() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test3070() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3071() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test3072() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3073() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3174() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.ZERO;
        boolean boolean0 = complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test3175() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.ZERO;
        boolean boolean0 = complex0.equals(complex1);
        complex1.equals((Object) complex0);
    }

    @Test(timeout = 4000)
    public void test3276() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.hashCode();
    }

    @Test(timeout = 4000)
    public void test3377() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.ZERO.pow(complex1);
    }

    @Test(timeout = 4000)
    public void test3478() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf(3.145894820876798E-6, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3479() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf(3.145894820876798E-6, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test3480() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf(3.145894820876798E-6, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3481() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.valueOf(3.145894820876798E-6, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3582() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.multiply(complex1);
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3683() throws Throwable {
        Complex complex0 = Complex.valueOf((-1069.480196482228));
        Complex complex1 = new Complex((-1.7147801320855138E19), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test3684() throws Throwable {
        Complex complex0 = Complex.valueOf((-1069.480196482228));
        Complex complex1 = new Complex((-1.7147801320855138E19), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test3685() throws Throwable {
        Complex complex0 = Complex.valueOf((-1069.480196482228));
        Complex complex1 = new Complex((-1.7147801320855138E19), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3686() throws Throwable {
        Complex complex0 = Complex.valueOf((-1069.480196482228));
        Complex complex1 = new Complex((-1.7147801320855138E19), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3687() throws Throwable {
        Complex complex0 = Complex.valueOf((-1069.480196482228));
        Complex complex1 = new Complex((-1.7147801320855138E19), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        complex2.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3788() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.multiply(Double.NaN);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3889() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.I.multiply(Double.NaN);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test3990() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4091() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4192() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.negate();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test4293() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.subtract(complex0);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4394() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4395() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.sqrt1z();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4496() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.subtract((-282.0));
    }

    @Test(timeout = 4000)
    public void test4597() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.subtract(4.684682624303406E-10);
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4598() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.subtract(4.684682624303406E-10);
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test4599() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.subtract(4.684682624303406E-10);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test45100() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.subtract(4.684682624303406E-10);
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test46101() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.subtract(Double.NaN);
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test47102() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.acos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test48103() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.asin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test49104() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test49105() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test49106() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test49107() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cos();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test50108() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.cos();
    }

    @Test(timeout = 4000)
    public void test51109() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.cosh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test51110() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.cosh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test52111() throws Throwable {
        Complex complex0 = new Complex((-98.64), (-98.64));
        Complex complex1 = complex0.NaN.cosh();
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test52112() throws Throwable {
        Complex complex0 = new Complex((-98.64), (-98.64));
        Complex complex1 = complex0.NaN.cosh();
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test52113() throws Throwable {
        Complex complex0 = new Complex((-98.64), (-98.64));
        Complex complex1 = complex0.NaN.cosh();
        complex0.getImaginary();
    }

    @Test(timeout = 4000)
    public void test52114() throws Throwable {
        Complex complex0 = new Complex((-98.64), (-98.64));
        Complex complex1 = complex0.NaN.cosh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test52115() throws Throwable {
        Complex complex0 = new Complex((-98.64), (-98.64));
        Complex complex1 = complex0.NaN.cosh();
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test53116() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sin();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test53117() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test53118() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sin();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test53119() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.sin();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test54120() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.sin();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test55121() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.sinh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test55122() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.sinh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test55123() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.sinh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test55124() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.sinh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test56125() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.sinh();
    }

    @Test(timeout = 4000)
    public void test57126() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tan();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test57127() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tan();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test57128() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tan();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test57129() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tan();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test58130() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.tan();
    }

    @Test(timeout = 4000)
    public void test59131() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test59132() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test59133() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test59134() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.tanh();
        complex1.getReal();
    }

    @Test(timeout = 4000)
    public void test60135() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.NaN.tanh();
        complex1.getImaginary();
    }

    @Test(timeout = 4000)
    public void test61136() throws Throwable {
        Complex complex0 = new Complex((-694.155543338));
        complex0.nthRoot((-1313));
    }

    @Test(timeout = 4000)
    public void test62137() throws Throwable {
        Complex complex0 = Complex.I;
        List<Complex> list0 = complex0.NaN.nthRoot(7);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test62138() throws Throwable {
        Complex complex0 = Complex.I;
        List<Complex> list0 = complex0.NaN.nthRoot(7);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test63139() throws Throwable {
        Complex complex0 = Complex.ONE;
        List<Complex> list0 = complex0.INF.nthRoot(37);
        list0.contains(complex0);
    }

    @Test(timeout = 4000)
    public void test63140() throws Throwable {
        Complex complex0 = Complex.ONE;
        List<Complex> list0 = complex0.INF.nthRoot(37);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test64141() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        complex0.isNaN();
    }

    @Test(timeout = 4000)
    public void test65142() throws Throwable {
        Complex complex0 = Complex.valueOf(7.0, Double.NaN);
        complex0.getReal();
    }

    @Test(timeout = 4000)
    public void test66143() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        complex0.getImaginary();
    }
}
