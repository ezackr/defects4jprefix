/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:52:38 GMT 2024
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DenseRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.RealVectorImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CholeskyDecompositionImpl_ESTest extends CholeskyDecompositionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(5, 5);
        CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(denseRealMatrix0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
        CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0, (-1685), (-1685));
        DecompositionSolver decompositionSolver0 = choleskyDecompositionImpl0.getSolver();
        decompositionSolver0.isNonSingular();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        double[][] doubleArray0 = new double[1][7];
        RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        RealVectorImpl realVectorImpl0 = new RealVectorImpl(12, 12);
        RealMatrix realMatrix0 = realVectorImpl0.outerProduct(realVectorImpl0);
        realMatrix0.setRowVector(7, realVectorImpl0);
        CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        double[] doubleArray0 = new double[6];
        RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = realVectorImpl0.outerProduct((RealVector) realVectorImpl0);
        CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, 0.0, Double.NEGATIVE_INFINITY);
        choleskyDecompositionImpl0.getL();
        RealMatrix realMatrix1 = choleskyDecompositionImpl0.getL();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        double[] doubleArray0 = new double[6];
        RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = realVectorImpl0.outerProduct((RealVector) realVectorImpl0);
        CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, 0.0, Double.NEGATIVE_INFINITY);
        choleskyDecompositionImpl0.getLT();
        RealMatrix realMatrix1 = choleskyDecompositionImpl0.getL();
        realMatrix1.getFrobeniusNorm();
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        double[] doubleArray0 = new double[6];
        RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0);
        RealMatrix realMatrix0 = realVectorImpl0.outerProduct((RealVector) realVectorImpl0);
        CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, 0.0, Double.NEGATIVE_INFINITY);
        double double0 = choleskyDecompositionImpl0.getDeterminant();
    }
}
