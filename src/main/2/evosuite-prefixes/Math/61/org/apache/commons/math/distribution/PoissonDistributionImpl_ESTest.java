/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 21:57:07 GMT 2024
 */
package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PoissonDistributionImpl_ESTest extends PoissonDistributionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2944.346);
        poissonDistributionImpl0.cumulativeProbability(0);
        poissonDistributionImpl0.sample();
        poissonDistributionImpl0.probability(0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2944.346);
        double double0 = poissonDistributionImpl0.cumulativeProbability(0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2944.346);
        double double0 = poissonDistributionImpl0.cumulativeProbability(0);
        int int0 = poissonDistributionImpl0.sample();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2944.346);
        double double0 = poissonDistributionImpl0.cumulativeProbability(0);
        int int0 = poissonDistributionImpl0.sample();
        double double1 = poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2944.346);
        double double0 = poissonDistributionImpl0.cumulativeProbability(0);
        int int0 = poissonDistributionImpl0.sample();
        double double1 = poissonDistributionImpl0.getMean();
        double double2 = poissonDistributionImpl0.probability(2955);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2944.346);
        double double0 = poissonDistributionImpl0.cumulativeProbability(0);
        int int0 = poissonDistributionImpl0.sample();
        double double1 = poissonDistributionImpl0.getMean();
        double double2 = poissonDistributionImpl0.probability(2955);
        int int1 = poissonDistributionImpl0.getDomainUpperBound(40.0);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.6299605249474366, 0.6299605249474366);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        double double0 = poissonDistributionImpl0.probability((-2342));
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.6299605249474366, 0.6299605249474366);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        double double0 = poissonDistributionImpl0.probability((-2342));
        int int0 = poissonDistributionImpl0.getDomainLowerBound(1419.1162628977);
        double double1 = poissonDistributionImpl0.normalApproximateProbability(0);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.6299605249474366, 0.6299605249474366);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        double double0 = poissonDistributionImpl0.probability((-2342));
        int int0 = poissonDistributionImpl0.getDomainLowerBound(1419.1162628977);
        double double1 = poissonDistributionImpl0.normalApproximateProbability(0);
        int int1 = poissonDistributionImpl0.sample();
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.6299605249474366, 0.6299605249474366);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        double double0 = poissonDistributionImpl0.probability((-2342));
        int int0 = poissonDistributionImpl0.getDomainLowerBound(1419.1162628977);
        double double1 = poissonDistributionImpl0.normalApproximateProbability(0);
        int int1 = poissonDistributionImpl0.sample();
        poissonDistributionImpl0.getDomainUpperBound(0);
        poissonDistributionImpl0.getMean();
        int int2 = poissonDistributionImpl0.getDomainUpperBound(1.5);
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.6299605249474366, 0.6299605249474366);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        poissonDistributionImpl0.reseedRandomGenerator(0L);
        double double0 = poissonDistributionImpl0.probability((-2342));
        int int0 = poissonDistributionImpl0.getDomainLowerBound(1419.1162628977);
        double double1 = poissonDistributionImpl0.normalApproximateProbability(0);
        int int1 = poissonDistributionImpl0.sample();
        poissonDistributionImpl0.getDomainUpperBound(0);
        poissonDistributionImpl0.getMean();
        int int2 = poissonDistributionImpl0.getDomainUpperBound(1.5);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2007.6846679, 2007.6846679);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(855.7424007881, 33);
        double double0 = poissonDistributionImpl0.probability(1635);
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(855.7424007881, 33);
        double double0 = poissonDistributionImpl0.probability(1635);
        double double1 = poissonDistributionImpl0.normalApproximateProbability(589);
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5);
        double double0 = poissonDistributionImpl0.cumulativeProbability((-771));
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5);
        double double0 = poissonDistributionImpl0.cumulativeProbability((-771));
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(395.380252670402);
        poissonDistributionImpl0.cumulativeProbability(2512);
        double double0 = poissonDistributionImpl0.cumulativeProbability(1270);
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(395.380252670402);
        poissonDistributionImpl0.cumulativeProbability(2512);
        double double0 = poissonDistributionImpl0.cumulativeProbability(1270);
        int int0 = poissonDistributionImpl0.getDomainLowerBound(1270);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(395.380252670402);
        poissonDistributionImpl0.cumulativeProbability(2512);
        double double0 = poissonDistributionImpl0.cumulativeProbability(1270);
        int int0 = poissonDistributionImpl0.getDomainLowerBound(1270);
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1637.9716, 0);
        int int0 = poissonDistributionImpl0.getDomainLowerBound(0);
    }

    @Test(timeout = 4000)
    public void test0720() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1637.9716, 0);
        int int0 = poissonDistributionImpl0.getDomainLowerBound(0);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1512.0);
        int int0 = poissonDistributionImpl0.getDomainUpperBound(1512.0);
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1512.0);
        int int0 = poissonDistributionImpl0.getDomainUpperBound(1512.0);
        int int1 = poissonDistributionImpl0.getDomainLowerBound(0.0);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test0823() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1512.0);
        int int0 = poissonDistributionImpl0.getDomainUpperBound(1512.0);
        int int1 = poissonDistributionImpl0.getDomainLowerBound(0.0);
    }

    @Test(timeout = 4000)
    public void test0924() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1772.554882, 1772.554882, 172);
        int int0 = poissonDistributionImpl0.sample();
    }

    @Test(timeout = 4000)
    public void test1025() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5, (-1));
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        int int0 = 0;
        PoissonDistributionImpl poissonDistributionImpl0 = null;
        poissonDistributionImpl0 = new PoissonDistributionImpl((-793.0), 0);
    }

    @Test(timeout = 4000)
    public void test1227() throws Throwable {
        double double0 = 0.0;
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0, 0.0);
        int int0 = Integer.MAX_VALUE;
        poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
        double double1 = (-1853.023719731909);
        poissonDistributionImpl0.probability((-1853.023719731909));
        // Undeclared exception!
        poissonDistributionImpl0.sample(Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.08713622391223907, 629.07210998);
        int int0 = 166;
        poissonDistributionImpl0.sample(166);
        poissonDistributionImpl0.normalApproximateProbability(166);
        poissonDistributionImpl0.cumulativeProbability(2113929215);
        poissonDistributionImpl0.inverseCumulativeProbability(1.0);
        poissonDistributionImpl0.sample();
        poissonDistributionImpl0.probability(Integer.MAX_VALUE);
        poissonDistributionImpl0.probability(0);
        int int1 = 129;
        double double0 = 1433.879;
        PoissonDistributionImpl poissonDistributionImpl1 = null;
        poissonDistributionImpl1 = new PoissonDistributionImpl((-491.750552973), 1433.879, 2147483639);
    }
}
