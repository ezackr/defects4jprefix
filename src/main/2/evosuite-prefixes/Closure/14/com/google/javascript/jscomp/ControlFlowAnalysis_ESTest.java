/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 00:13:47 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ControlFlowAnalysis_ESTest extends ControlFlowAnalysis_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jsc>p.PassConfig$State", "com.google.javascript.jsc>p.PassConfig$State");
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(125);
        Node node1 = new Node(77, node0, node0);
        controlFlowAnalysis0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Node node0 = new Node(8193, 8193, 8193);
        Node node1 = new Node(49, node0, node0);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1wK\"_E", "1wK\"_E");
        Node node1 = new Node(112, node0, node0, node0, node0, 44, 2);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.goo}le.jaascript.jscomp.ControlFlowAnalyses$AsjControlFlowGraph$2", "com.goo}le.jaascript.jscomp.ControlFlowAnalyses$AsjControlFlowGraph$2");
        Node node1 = new Node(114, node0, node0, 35, 2);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "d", "d");
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node0, node0);
        node0.isAssignAdd();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Node node0 = new Node(105);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        controlFlowAnalysis0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(105, 105, 105);
        controlFlowAnalysis0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(8, node0, node0);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        controlFlowAnalysis0.process(node0, node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        Node node0 = new Node(104, 104, 104);
        Node node1 = new Node(4, node0, node0, node0, node0, 37, 104);
        controlFlowAnalysis0.process(node0, node1);
        node1.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(125);
        Node node1 = new Node(110, node0, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(113, 113, 113);
        Node node1 = new Node(113, node0, node0);
        controlFlowAnalysis0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1wK\"_", "1wK\"_");
        Node node1 = new Node(116, node0, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "{rw", "{rw");
        Node node1 = new Node(117, node0, node0, node0, node0, 4095, 38);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("1wK\"_");
        Node node1 = new Node(118, node0, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        controlFlowAnalysis0.process(node1, node1);
        node1.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(119, 119, 119);
        Node node1 = new Node(119, node0, node0);
        controlFlowAnalysis0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(120, 120, 120);
        Node node1 = new Node(120, node0, node0);
        controlFlowAnalysis0.process(node1, node1);
        node1.isNE();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "comgooge.javascript.jscomp.ControlFlowAn:lysis$AstControllowGraphA2", "comgooge.javascript.jscomp.ControlFlowAn:lysis$AstControllowGraphA2");
        Node node1 = new Node(126, node0, node0, node0, node0, 36, 50);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(125);
        Node node1 = compiler0.parseTestCode("FI:Qiea*0ek?kO");
        Node node2 = new Node(115, node0, node0, node0, node1, 0, 36);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node0, node2);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(125);
        Node node1 = Node.newString("L0}ekBd)<98IVW");
        Node node2 = new Node(108, node1, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node0, node2);
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(125);
        Node node1 = Node.newString("L0}ekBd)<98IVW");
        Node node2 = new Node(110, node1, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node2, node2);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = Node.newNumber((double) 51, 40, 0);
        Node node2 = new Node(77, node1, node0, node0, node0);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node2, node2);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, syntacticScopeCreator0);
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node2);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1wK\"_", "1wK\"_");
        Node node1 = new Node(105, node0, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        Node node0 = new Node(111);
        Node node1 = new Node(111, node0, node0);
        Node node2 = new Node(45, node1, node1, 1, 16);
        controlFlowAnalysis0.process(node0, node1);
        node0.isAssign();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node0, node0);
        node0.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "O(eI<gd0tRY(s", "O(eI<gd0tRY(s");
        Node node1 = new Node(111, node0, node0, 35, 2);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node0, node0);
        node0.isAnd();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Node node0 = new Node(125);
        Node node1 = new Node(47, node0, node0);
        Compiler compiler0 = new Compiler();
        node0.setIsSyntheticBlock(true);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process((Node) null, node1);
        node1.isSetterDef();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1wK\"_", "1wK\"_");
        Node node1 = new Node(116, node0, node0);
        node1.removeFirstChild();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(116);
        Node node1 = new Node(35, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(117, 117, 117);
        Node node1 = new Node(29, node0, node0);
        controlFlowAnalysis0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1wK\"_E", "1wK\"_E");
        Node node1 = new Node(4, 12, 39);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        controlFlowAnalysis0.process(node0, node1);
        node1.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1$K\"_", "1$K\"_");
        Node node1 = new Node(105, node0, node0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "O(eI<gd0tRY(s", "O(eI<gd0tRY(s");
        Node node1 = new Node(114, node0, node0, 35, 2);
        Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "O(eI<gd0tRY(s", "O(eI<gd0tRY(s");
        Node node1 = new Node(114, node0, node0, 35, 2);
        Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = new Node(111, node0, node0, node0, node0, 1652, 2);
        Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        Node node1 = new Node(113, node0, node0);
        Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        Node node1 = new Node(113, node0, node0);
        Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
        node2.getLineno();
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "comgoogle.javascript.jscomp.ControlFlowAn:lysis$AstControllowGraphA2", "comgoogle.javascript.jscomp.ControlFlowAn:lysis$AstControllowGraphA2");
        Node node1 = compiler0.parseTestCode("comgoogle.javascript.jscomp.ControlFlowAn:lysis$AstControllowGraphA2");
        Node node2 = new Node(132, node1, node0, node1, node1, 8, 46);
        Node node3 = ControlFlowAnalysis.computeFollowNode(node0);
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(52, ".", 52, 52);
        Node node1 = new Node(77, node0, node0, node0, node0, 31, 43);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        Node node0 = Node.newString(115, "7zs4ozE$T");
        ControlFlowAnalysis.isBreakTarget(node0, "7zs4ozE$T");
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = new Node(36, node0, node0, node0);
        boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "");
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "d", "d");
        Node node1 = new Node(114, node0, node0, node0, node0, 132, 47);
        boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node1, (String) null);
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(30, 30, 1609);
        controlFlowAnalysis0.process(node0, node0);
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        Node node0 = new Node(2875);
        Node node1 = new Node(35, node0, node0);
        boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        Node node0 = new Node(8233, 8233, 8233);
        Node node1 = new Node(37, node0, node0);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        controlFlowAnalysis0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        Node node0 = Node.newString(86, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph");
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
        controlFlowAnalysis0.process(node0, node0);
        node0.isExprResult();
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        Node node0 = Node.newString(102, "com.gmogle.javas4ript.jsc>mp.PassConfig$State", 102, 102);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
        controlFlowAnalysis0.process(node0, node0);
        node0.isFunction();
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        Node node0 = new Node(103, 103, 103);
        controlFlowAnalysis0.process(node0, node0);
        node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis");
        boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        Node node0 = new Node(77, 1106, 1367);
        ControlFlowAnalysis.isBreakTarget(node0, "CNhm]J'Z/VC");
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        Node node0 = Node.newString(108, "com.google.javascript.jscomp.DefaultPassConfig$7");
        ControlFlowAnalysis.isBreakTarget(node0, "com.google.javascript.jscomp.DefaultPassConfig$7");
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        Node node0 = Node.newString(110, "7zs4ozE$T");
        ControlFlowAnalysis.isBreakTarget(node0, "7zs4ozE$T");
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        Node node0 = new Node(113);
        ControlFlowAnalysis.isBreakTarget(node0, " ?cn@Ao.GPY:");
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1wK\"_E", "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
        Node node1 = new Node(114, node0, node0, node0, node0, 36, 47);
        boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        Node node0 = Node.newString("1wK\"d");
        Node node1 = new Node(115, node0, node0);
        boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.jaascript.jscomp.ControlFlowAnalyses$AsjControlFlowGrap$2", "com.google.jaascript.jscomp.ControlFlowAnalyses$AsjControlFlowGrap$2");
        Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        Node node0 = new Node(125, 487, 77);
        Node node1 = new Node(77, node0, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.getExceptionHandler(node0);
    }

    @Test(timeout = 4000)
    public void test5860() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = new Node(36, node0, node0, node0);
        ControlFlowAnalysis.getExceptionHandler(node0);
    }
}
