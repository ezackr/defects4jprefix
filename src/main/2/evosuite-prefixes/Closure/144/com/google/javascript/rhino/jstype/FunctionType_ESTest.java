/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:58:43 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        functionType0.getLeastSupertype(noObjectType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.getGreatestSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.getGreatestSubtype(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.getGreatestSubtype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.hasEqualCallType((FunctionType) null);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
        boolean boolean0 = parameterizedType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getLeastSupertype(functionType0);
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getLeastSupertype(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getLeastSupertype(functionType0);
        functionType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getLeastSupertype(functionType0);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "=]/v", (Node) null);
        functionType0.setSource((Node) null);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        List<FunctionType> list0 = noType0.getSubTypes();
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(0, (-1727629628), 1);
        jSTypeRegistry0.createConstructorType("Not declared as a constructor", node0, node0, (JSType) noType0);
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(105);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, noType0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Unknown class name", node0, arrowType0, noType0, "Not declared as a constructor", false, false);
        functionType0.getTemplateTypeName();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(105);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, noType0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Unknown class name", node0, arrowType0, noType0, "Not declared as a constructor", false, false);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        jSTypeRegistry0.createInterfaceType("fJ]r&Dn[D.)vsI6v", node0);
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        Node node1 = new Node(105, node0, node0, node0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("fJ]r&Dn[D.)vsI6v", node1);
        functionType0.getPropertyType("fJ]r&Dn[D.)vsI6v");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType.forInterface(jSTypeRegistry0, (String) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        functionType0.getLeastSupertype(errorFunctionType0);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        functionType0.getLeastSupertype(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        functionType0.getLeastSupertype(errorFunctionType0);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1423() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        functionType0.getLeastSupertype(errorFunctionType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1524() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        int int0 = errorFunctionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMinArguments();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        Node node0 = new Node(0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, node0);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1930() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        Node node0 = new Node(0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, node0);
        int int0 = functionType0.getMaxArguments();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "cO[NSTRUCTO&");
        int int0 = errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
        ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
        noType0.setPrototypeBasedOn(objectType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.defineInferredProperty("prototype", functionType0, true);
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.defineInferredProperty("prototype", functionType0, true);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
        errorFunctionType0.setInstanceType(functionPrototypeType0);
        boolean boolean0 = errorFunctionType0.setPrototype(functionPrototypeType0);
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("this:", (Node) null);
        functionType0.getTopMostDefiningType("this:");
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getAllImplementedInterfaces();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2739() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "cO[NSTRUCTO&");
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("cO[NSTRUCTO&", errorFunctionType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        linkedList0.add(objectType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        Iterable<ObjectType> iterable0 = errorFunctionType0.getAllImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test2840() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "cO[NSTRUCTO&");
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) errorFunctionType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        Iterable<ObjectType> iterable0 = errorFunctionType0.getAllImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Hf5y@?>N%p");
        boolean boolean0 = errorFunctionType0.hasProperty("Hf5y@?>N%p");
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.hasOwnProperty("prototype");
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        errorFunctionType0.getPropertyType("apply");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".prototype");
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, errorFunctionType0, noType0, true);
        boolean boolean0 = errorFunctionType0.setPrototype(functionPrototypeType0);
        boolean boolean1 = errorFunctionType0.defineProperty("prototype", functionPrototypeType0, true, true);
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("prototype");
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "|NTE!FACE");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("|NTE!FACE");
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getGreatestSubtype(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3750() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3751() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test3752() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test3753() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test3854() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3855() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test3956() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3957() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType0);
        jSType0.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test4058() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getGreatestSubtype(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test4263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
        JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4365() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
        JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4466() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getSuperClassConstructor();
    }

    @Test(timeout = 4000)
    public void test4567() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn((ObjectType) null);
        boolean boolean0 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test4668() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Tw! PG&&7", (Node) null);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4669() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Tw! PG&&7", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test4670() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Tw! PG&&7", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test4771() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test4872() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "0%ttsOi#|H<");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "0%ttsOi#|H<", "Not declared as a type name", 1, 1);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Not declared as a type name", namedType0, false);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, errorFunctionType0, prototypeObjectType0);
        boolean boolean0 = errorFunctionType0.setPrototype(functionPrototypeType0);
        boolean boolean1 = errorFunctionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test4974() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.getTopMostDefiningType("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test5075() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        errorFunctionType0.setPrototype(functionPrototypeType0);
        JSType jSType0 = errorFunctionType0.getTopMostDefiningType("prototype");
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test5176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
        functionPrototypeType0.defineProperty("Unknown class name", noType0, true, true);
        JSType jSType0 = errorFunctionType0.getTopMostDefiningType("Unknown class name");
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5277() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType jSType0 = functionType1.getLeastSupertype(functionType0);
    }

    @Test(timeout = 4000)
    public void test5278() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType jSType0 = functionType1.getLeastSupertype(functionType0);
        jSType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test5279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType jSType0 = functionType1.getLeastSupertype(functionType0);
        functionType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test5380() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test5381() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test5382() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5383() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test5384() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "cO[4STRUCT^~P", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getLeastSupertype(functionType1);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test5485() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test5486() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test5487() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test5588() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("call", (Node) null);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(functionType0);
        boolean boolean0 = functionType0.isSubtype(jSType0);
    }

    @Test(timeout = 4000)
    public void test5589() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("call", (Node) null);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(functionType0);
        boolean boolean0 = functionType0.isSubtype(jSType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test5690() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test5791() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5892() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "e1SF/q}q&t}r<7Rk", (Node) null);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5993() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        linkedList0.add((JSType) errorFunctionType0);
        linkedList0.offer(noType0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) errorFunctionType0, (JSType) errorFunctionType0, (List<JSType>) linkedList0);
        ((FunctionType) jSType0).toString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6094() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        linkedList0.add((JSType) errorFunctionType0);
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) errorFunctionType0, (JSType) errorFunctionType0, (List<JSType>) linkedList0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        boolean boolean0 = functionType1.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test6196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test6197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        functionType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test6298() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6299() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
    }

    @Test(timeout = 4000)
    public void test63100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test63101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test64102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test64103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
    }

    @Test(timeout = 4000)
    public void test65104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "|NTE!FACE");
        boolean boolean0 = errorFunctionType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test66105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = new Node(105, 105, 371);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.JSDocInfo", node0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test66106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = new Node(105, 105, 371);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.JSDocInfo", node0);
        functionType0.getInstanceType();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test67107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getInstanceType();
    }

    @Test(timeout = 4000)
    public void test68108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        errorFunctionType0.setImplicitPrototype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test69109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) errorFunctionType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        errorFunctionType0.setImplicitPrototype(functionType0);
    }

    @Test(timeout = 4000)
    public void test70110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = noType0.getSuperClassConstructor();
        EmptyScope emptyScope0 = new EmptyScope();
        functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        noType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test71111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "mul");
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "mul", "Named type with empty name component", 0, 1);
        linkedList0.add((ObjectType) namedType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test72112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "mul");
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) errorFunctionType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test73113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test74114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test75115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[9];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
        functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test76116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "71ZWta7~&:9wr\"");
        errorFunctionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test77117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.toDebugHashCodeString();
        noObjectType0.hasCachedValues();
    }
}
