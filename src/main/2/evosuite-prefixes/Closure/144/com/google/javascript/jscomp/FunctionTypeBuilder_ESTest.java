/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:53:01 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&hrSvA");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&hrSvA", compiler0, node0, "&hrSvA", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(">tbWL");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(">tbWL", compiler0, node0, ">tbWL", (Scope) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSType[] jSTypeArray0 = new JSType[19];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode((String) null, "msg.jsdoc.noalias");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "msg.jsdoc.noalias", (Scope) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("<RhLhPu!");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("<RhLhPu!", compiler0, node0, "<RhLhPu!", (Scope) null);
        functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("k");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("k", compiler0, node0, "k", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&hrSvA");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&hrSvA", compiler0, node0, "&hrSvA", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
        functionTypeBuilder1.buildAndRegister();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("VIe/8DWU:v-/");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("VIe/8DWU:v-/", compiler0, node0, "VIe/8DWU:v-/", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("&", "&");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&", compiler0, node0, "&", (Scope) null);
        functionTypeBuilder0.inferInheritance(jSDocInfo0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&hrSvA");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&hrSvA", compiler0, node0, "&hrSvA", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&", compiler0, node0, "&", (Scope) null);
        functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        functionTypeBuilder0.inferThisType((JSDocInfo) null, functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&", compiler0, node0, "&", (Scope) null);
        functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        functionTypeBuilder0.inferThisType(jSDocInfo0, functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&", compiler0, node0, "&", (Scope) null);
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCaZl", "com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCaZl");
        Node node1 = new Node(42, node0, node0, node0, node0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCaZl", compiler0, node1, "com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCaZl", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("wAJ}E*M]", compiler0, node0, "wAJ}E*M]", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&hrSvA");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&hrSvA", compiler0, node0, "&hrSvA", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("iE");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("iE", compiler0, node0, "iE", (Scope) null);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[6];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("6", "6");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("6", compiler0, node0, "6", (Scope) null);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[3];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("msg.jsdoc.noalias");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("msg.jsdoc.noalias", compiler0, node0, "msg.jsdoc.noalias", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&hrSvA");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("&hrSvA", compiler0, node0, "&hrSvA", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(">tbp+L");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(">tbp+L", compiler0, node0, ">tbp+L", (Scope) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSType[] jSTypeArray0 = new JSType[19];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], (Node) null);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(">tbp+L");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(">tbp+L", compiler0, node0, ">tbp+L", (Scope) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSType[] jSTypeArray0 = new JSType[19];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], (Node) null);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
    }
}
