/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:55:46 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeSubstituteAlternateSyntax_ESTest extends PeepholeSubstituteAlternateSyntax_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(113, 113, 113);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.areMatchingExits(node0, node0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Node node0 = new Node(8201);
        Node node1 = new Node(4, node0, node0, 4095, 1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isNull();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Node node0 = new Node((-236));
        Node node1 = new Node(26, node0, node0, 1, 55);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Node node0 = new Node((-236));
        Node node1 = new Node(26, node0, node0, 1, 55);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Node node1 = new Node(43, node0, node0, 15, 2);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Node node0 = new Node(44);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isAnd();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newString("", 63, 63);
        Node node1 = new Node(63, node0);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        node2.isAnd();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Node node0 = new Node(16, 16, 16);
        Node node1 = new Node(115, node0, node0, 51, 51);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Node node0 = new Node(4);
        Node node1 = new Node(4, node0, node0, 0, 52);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Node node0 = new Node(30);
        Compiler compiler0 = new Compiler();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isReturn();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Node node0 = new Node(37);
        Compiler compiler0 = new Compiler();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Node node0 = new Node(115);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        node0.addChildrenToFront(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Node node0 = new Node(65156);
        Node node1 = new Node(37, node0, node0, node0, 51, 48);
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("ScopeCleanupPassFactory");
        compiler0.parse(sourceFile0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(31, node0, node0, 8, 8);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(31, node0, node0, 8, 8);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(125, 125, 125);
        Node node1 = new Node(125, node0, node0, 54, 125);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Compiler compiler0 = new Compiler();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isLabel();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Node node0 = new Node(4, 4, 4);
        Node node1 = new Node(15, 46, 54);
        Node node2 = new Node(12, node0, node1, 8, 52);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        Node node0 = new Node(4);
        Node node1 = new Node(4, node0, node0, 40, 12);
        node1.removeChildren();
        Node node2 = new Node(16, node0, node1, 4, 2480);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure((Node) null);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        Node node0 = new Node(4);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        Node node0 = Node.newNumber((double) 40, 40, 40);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.areMatchingExits(node0, node0);
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        Node node0 = new Node(4, 4, 4);
        Node node1 = new Node(4, node0, node0, 0, 52);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isExceptionPossible(node1);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = new Node(12, node0, node0, node0, node0, 46, 38);
        node0.addChildrenToFront(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        Node node0 = new Node(13, 13, 13);
        Node node1 = new Node(26, node0, node0, 12, 55);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = new Node(108, node0, node0, 47, 30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = new Node(108, node0, node0, 47, 30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        Node node1 = new Node(71, 71, 71);
        Node node2 = new Node(108, node1, node0, 47, 30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        Node node0 = new Node(26);
        node0.addChildrenToFront(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        Node node0 = new Node(98);
        node0.addChildrenToFront(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        Node node1 = new Node(26, node0, node0, 16, 1);
        Node node2 = new Node(130, node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        node3.isTry();
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        Node node0 = new Node(43, 43, 3377);
        Node node1 = new Node(108, node0, node0, 49, 54);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(44);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newNumber((double) 63, 63, 63);
        Node node1 = new Node(63, node0, node0, 51, 39);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(63);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isFalse();
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        boolean boolean0 = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("nd[>]pAj!Ch*kc!*");
    }
}
