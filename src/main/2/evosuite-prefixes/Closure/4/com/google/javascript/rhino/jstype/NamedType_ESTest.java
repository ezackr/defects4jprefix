/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:41:57 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.Property;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 5, 5);
        boolean boolean0 = namedType0.isNamedType();
        namedType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 5, 5);
        boolean boolean0 = namedType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 0, 1);
        String string0 = namedType0.toString();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "0MR3", "0MR3", (-1884), (-1884));
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Not declared as a constructor", namedType0);
        namedType0.setReferencedType(prototypeObjectType0);
        namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a constructor", 1, 1);
        namedType0.getLeastSupertype(noResolvedType0);
        namedType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a constructor", 1, 1);
        namedType0.getLeastSupertype(noResolvedType0);
        namedType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a constructor", 1, 1);
        jSTypeRegistry0.registerPropertyOnType("Unknown class name", namedType0);
        namedType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a constructor", 1, 1);
        jSTypeRegistry0.registerPropertyOnType("Unknown class name", namedType0);
        namedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "-X,at+!,h:Y'i.0O{,", (String) null, 1886, 1886);
        namedType0.hashCode();
        namedType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Not declared as a constructor", 0, 0);
        Node node0 = Node.newString(0, "Named type with empty name component");
        namedType0.defineSynthesizedProperty("Array", noResolvedType0, node0);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, ".?#7b`4XDE[>+9B'o{x", ".?#7b`4XDE[>+9B'o{x", 0, 0);
        ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
        Node node0 = new Node(1, 1, 0);
        namedType0.defineProperty("Not declared as a constructor", objectType0, true, node0);
        boolean boolean0 = namedType0.defineProperty("Named type with empty name component", objectType0, true, node0);
        namedType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, ".?#7b`4XDE[>+9B'o{x", ".?#7b`4XDE[>+9B'o{x", 0, 0);
        ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
        Node node0 = new Node(1, 1, 0);
        namedType0.defineProperty("Not declared as a constructor", objectType0, true, node0);
        boolean boolean0 = namedType0.defineProperty("Named type with empty name component", objectType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "number", "Not declared as a constructor", 1024, 1);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        jSTypeRegistry0.forwardDeclareType("Unknown class name");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 1);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        jSTypeRegistry0.setLastGeneration(false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        jSTypeRegistry0.declareType("Not declared as a constructor", noResolvedType0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        jSTypeRegistry0.setLastGeneration(false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Not declared as a type name", 0, 0);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        Node node0 = Node.newString(1, "Not declared as a constructor");
        errorFunctionType0.defineInferredProperty("Unknown class name", errorFunctionType0, node0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 40, 16);
        namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "Named type with empty name component", 1, 1);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(1);
        Node node0 = Node.newString(1, "Not declared as a constructor");
        errorFunctionType0.defineInferredProperty("Unknown class name", functionType0, node0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 40, 16);
        namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 0);
        errorFunctionType0.defineInferredProperty("Unknown class name", noObjectType0, node0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 31, 16);
        namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 65535, 65535);
        namedType0.resolveInternal(simpleErrorReporter0, namedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        Node node0 = Node.newString(0, "Named type with empty name component");
        errorFunctionType0.defineInferredProperty("Unknown class name", (JSType) null, node0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 40, 16);
        namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ">Gg:^iYMmh8u~}D");
        Node node0 = new Node(1, 0, 0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        errorFunctionType0.defineInferredProperty("position (", jSType0, node0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "position (", "Not declared as a constructor", 32, 30);
        namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Named type with empty name component");
        errorFunctionType0.defineInferredProperty("Unknown class name", noType0, node0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 40, 16);
        namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 1, 0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        namedType0.setValidator(predicate0);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        jSTypeRegistry0.forwardDeclareType("Not declared as a type name");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a constructor", 1, 0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        namedType0.setValidator(predicate0);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "CONSTRUCTOR", "CONSTRUCTOR", 1104, 1104);
        Node node0 = Node.newString("CONSTRUCTOR");
        Property property0 = new Property("Unknown class name", (JSType) null, false, node0);
        namedType0.getTypedefType(simpleErrorReporter0, property0, "Not declared as a constructor");
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 1);
        namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        namedType0.setValidator((Predicate<JSType>) null);
    }
}
