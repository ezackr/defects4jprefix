/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 03:24:14 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        NodeUtil.getNodeTypeReferenceCount((Node) null, 60, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = new Node(156, 19, 1157);
        NodeUtil.getArgumentForCallOrNew(node0, 21);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = Node.newNumber((-994.64256921881), 99, 99);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = new Node(75, 110, 75);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 32, 32);
        NodeUtil.getPrototypePropertyName(node0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Node node0 = Node.newString("ET:pzQP8[`= (Z*");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Node node0 = Node.newString("*");
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString("RegExp", 1536, 14);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "RegExp", node0, "RegExp");
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString("RegExp", 1536, 14);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "RegExp", node0, "RegExp");
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Node node0 = Node.newString("*");
        NodeUtil.getArgumentForFunction(node0, 3);
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(1687);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "zOF3~)kx^$<MFG|", node0, "zOF3~)kx^$<MFG|");
        NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        NodeUtil.isNameReferenced((Node) null, "p;");
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ">>>=", (-14), 912);
        Node node1 = new Node(105, node0, node0, node0);
        NodeUtil.isLiteralValue(node1, true);
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        Node node0 = Node.newNumber(2.0, 97, 750);
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        Node node0 = Node.newString("lm,4}]J");
        NodeUtil.getFunctionBody(node0);
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        Node node0 = Node.newString((-214748364), "case expression doesn't match switch", (-214748364), (-214748364));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        Node node0 = Node.newString((-214748364), "case expression doesn't match switch", (-214748364), (-214748364));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Node node0 = Node.newString("_U'.Rs[jqi", (-1173), (-965));
        Node node1 = NodeUtil.newVarNode("_U'.Rs[jqi", node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        Node node0 = Node.newString("_U'.Rs[jqi", (-1173), (-965));
        Node node1 = NodeUtil.newVarNode("_U'.Rs[jqi", node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test01923() throws Throwable {
        Node node0 = Node.newString("_U'.Rs[jqi", (-1173), (-965));
        Node node1 = NodeUtil.newVarNode("_U'.Rs[jqi", node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node1);
    }

    @Test(timeout = 4000)
    public void test02024() throws Throwable {
        Node node0 = Node.newString(100, "~r0B^|Rk<{GI'y|");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test02125() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    }

    @Test(timeout = 4000)
    public void test02226() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    }

    @Test(timeout = 4000)
    public void test02327() throws Throwable {
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 63724, 4188);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02429() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 63724, 4188);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02430() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 63724, 4188);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02531() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02632() throws Throwable {
        Node node0 = Node.newNumber((double) 19);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02733() throws Throwable {
        Node node0 = Node.newString("*");
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02834() throws Throwable {
        Node node0 = new Node(192);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02935() throws Throwable {
        Node node0 = Node.newString("", 459, 459);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03036() throws Throwable {
        Node node0 = new Node(75);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03137() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test03138() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        String string0 = NodeUtil.arrayToString(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03139() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        String string0 = NodeUtil.arrayToString(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03140() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        String string0 = NodeUtil.arrayToString(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03241() throws Throwable {
        Node node0 = Node.newNumber((-2.147483648E9), 45, 97);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03342() throws Throwable {
        Node node0 = Node.newString("*");
        Node node1 = new Node(7, node0, node0, node0, node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test03444() throws Throwable {
        String string0 = NodeUtil.getStringValue(Double.POSITIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test03545() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test03646() throws Throwable {
        Node node0 = Node.newNumber((double) 152, 1539, 750);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test03747() throws Throwable {
        Node node0 = Node.newString("NUp");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test03849() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("");
    }

    @Test(timeout = 4000)
    public void test03951() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("infinity");
    }

    @Test(timeout = 4000)
    public void test04052() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" of ");
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(9);
    }

    @Test(timeout = 4000)
    public void test04255() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(10);
    }

    @Test(timeout = 4000)
    public void test04356() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(11);
    }

    @Test(timeout = 4000)
    public void test04457() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(12);
    }

    @Test(timeout = 4000)
    public void test04558() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(13);
    }

    @Test(timeout = 4000)
    public void test04659() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(8200);
    }

    @Test(timeout = 4000)
    public void test04760() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test04861() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test04962() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test05063() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-966), (-14));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test05064() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-966), (-14));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05165() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node0 = new Node(105, (-2290), 53);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test05266() throws Throwable {
        Node node0 = Node.newString("");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test05367() throws Throwable {
        Node node0 = Node.newString("Infinity");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test05468() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
    }

    @Test(timeout = 4000)
    public void test05569() throws Throwable {
        Node node0 = Node.newString(11, "case expression doesn't match switch");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test05670() throws Throwable {
        Node node0 = new Node(12, 3417, 1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test05771() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", (-214748364), (-214748364));
        Node node1 = new Node(14, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test05872() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
    }

    @Test(timeout = 4000)
    public void test05973() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
    }

    @Test(timeout = 4000)
    public void test06074() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
    }

    @Test(timeout = 4000)
    public void test06175() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
    }

    @Test(timeout = 4000)
    public void test06276() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
    }

    @Test(timeout = 4000)
    public void test06377() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
    }

    @Test(timeout = 4000)
    public void test06478() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
    }

    @Test(timeout = 4000)
    public void test06579() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
    }

    @Test(timeout = 4000)
    public void test06680() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
    }

    @Test(timeout = 4000)
    public void test06781() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
    }

    @Test(timeout = 4000)
    public void test06882() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    }

    @Test(timeout = 4000)
    public void test06983() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    }

    @Test(timeout = 4000)
    public void test07084() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
    }

    @Test(timeout = 4000)
    public void test07185() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    }

    @Test(timeout = 4000)
    public void test07286() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
    }

    @Test(timeout = 4000)
    public void test07387() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(33);
    }

    @Test(timeout = 4000)
    public void test07488() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(35);
    }

    @Test(timeout = 4000)
    public void test07589() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(36);
    }

    @Test(timeout = 4000)
    public void test07690() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    }

    @Test(timeout = 4000)
    public void test07791() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
    }

    @Test(timeout = 4000)
    public void test07892() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
    }

    @Test(timeout = 4000)
    public void test07993() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
    }

    @Test(timeout = 4000)
    public void test08094() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    }

    @Test(timeout = 4000)
    public void test08195() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
    }

    @Test(timeout = 4000)
    public void test08296() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(54);
    }

    @Test(timeout = 4000)
    public void test08397() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(68);
    }

    @Test(timeout = 4000)
    public void test08498() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(76);
    }

    @Test(timeout = 4000)
    public void test08599() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
    }

    @Test(timeout = 4000)
    public void test086100() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
    }

    @Test(timeout = 4000)
    public void test087101() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
    }

    @Test(timeout = 4000)
    public void test088102() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(87);
    }

    @Test(timeout = 4000)
    public void test089103() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
    }

    @Test(timeout = 4000)
    public void test090104() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
    }

    @Test(timeout = 4000)
    public void test091105() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
    }

    @Test(timeout = 4000)
    public void test092106() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(93);
    }

    @Test(timeout = 4000)
    public void test093107() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
    }

    @Test(timeout = 4000)
    public void test094108() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(95);
    }

    @Test(timeout = 4000)
    public void test095109() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    }

    @Test(timeout = 4000)
    public void test096110() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(99);
    }

    @Test(timeout = 4000)
    public void test097111() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    }

    @Test(timeout = 4000)
    public void test098112() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    }

    @Test(timeout = 4000)
    public void test099113() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    }

    @Test(timeout = 4000)
    public void test100114() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = new Node(107, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node1);
    }

    @Test(timeout = 4000)
    public void test101115() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    }

    @Test(timeout = 4000)
    public void test102116() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    }

    @Test(timeout = 4000)
    public void test103117() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(111);
    }

    @Test(timeout = 4000)
    public void test104118() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
    }

    @Test(timeout = 4000)
    public void test105119() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
    }

    @Test(timeout = 4000)
    public void test106120() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(115);
    }

    @Test(timeout = 4000)
    public void test107121() throws Throwable {
        Node node0 = Node.newString((-1), "Vuqh");
        Node node1 = NodeUtil.newVarNode("Vuqh", node0);
        NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test108122() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
    }

    @Test(timeout = 4000)
    public void test109123() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
    }

    @Test(timeout = 4000)
    public void test110124() throws Throwable {
        Node node0 = new Node(122);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test111125() throws Throwable {
        Node node0 = Node.newString(2633, "v Y_iQ;Xp8%,'<c1QJ", 132, 132);
        Node node1 = new Node(30, node0, node0, node0, 31, 39);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test112126() throws Throwable {
        Node node0 = Node.newString(34, "Infinity");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test113127() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(1687);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "zOF3~)kx^$<MFG|", node0, "zOF3~)kx^$<MFG|");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test113128() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(1687);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "zOF3~)kx^$<MFG|", node0, "zOF3~)kx^$<MFG|");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test114129() throws Throwable {
        Node node0 = Node.newNumber((double) 4, 0, 25);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test115130() throws Throwable {
        Node node0 = Node.newString(42, "case expression doesn't match switch");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test116131() throws Throwable {
        Node node0 = new Node(46, 8232, 2365);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test117132() throws Throwable {
        Node node0 = new Node(50, 36, 23);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
    }

    @Test(timeout = 4000)
    public void test118133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test119134() throws Throwable {
        Node node0 = Node.newString(98, "e[&On([q45K", 98, (-1057));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test120135() throws Throwable {
        Node node0 = Node.newString(100, "~r0B^|Rk<{GI'y|");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test121136() throws Throwable {
        Node node0 = new Node(101, 3, (-3883));
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
    }

    @Test(timeout = 4000)
    public void test122137() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("", linkedList0, node0, 39, 115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test122138() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("", linkedList0, node0, 39, 115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test122139() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("", linkedList0, node0, 39, 115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test122140() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("", linkedList0, node0, 39, 115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test123141() throws Throwable {
        Node node0 = Node.newString(110, "Infinity", 103, (-2742));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test124142() throws Throwable {
        Node node0 = Node.newString(117, "infinity", 85, 117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test125143() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test125144() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test125145() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test125146() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test126147() throws Throwable {
        Node node0 = new Node(122, 15, 122);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test127148() throws Throwable {
        Node node0 = Node.newString(123, "com.google.javascript.jscomp.CheckMissingReturn", 123, 1536);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test128149() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("*");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test129150() throws Throwable {
        Node node0 = new Node(37);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test130151() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(90, "infinity", 90, 90);
        Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Fz0Be)@'Ri[Usl", (-1), 0);
        node0.addChildrenToBack(node1);
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test130152() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(90, "infinity", 90, 90);
        Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Fz0Be)@'Ri[Usl", (-1), 0);
        node0.addChildrenToBack(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test130153() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(90, "infinity", 90, 90);
        Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Fz0Be)@'Ri[Usl", (-1), 0);
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test131154() throws Throwable {
        Node node0 = new Node(192);
        NodeUtil.callHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test132155() throws Throwable {
        Node node0 = new Node(37);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test133156() throws Throwable {
        Node node0 = Node.newString("M#SL`,!L");
        NodeUtil.newHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test134157() throws Throwable {
        Node node0 = new Node(37);
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test135158() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\\t", (-238), 4130);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test135159() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\\t", (-238), 4130);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test135160() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\\t", (-238), 4130);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test136161() throws Throwable {
        Node node0 = new Node(37);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
    }

    @Test(timeout = 4000)
    public void test137162() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test138163() throws Throwable {
        NodeUtil.precedence((-1386));
    }

    @Test(timeout = 4000)
    public void test139164() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test140165() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test141166() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test142167() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test143168() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test144169() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test145170() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test146171() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test147172() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test148173() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test149174() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test150175() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test151176() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test152177() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test153178() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test154179() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test155180() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test156181() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test157182() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test158183() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test159184() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test160185() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test161186() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test162187() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test163188() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test164189() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test165190() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test166191() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test167192() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test168193() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test169194() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test170195() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test171196() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test172197() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test173198() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test174199() throws Throwable {
        NodeUtil.precedence(54);
    }

    @Test(timeout = 4000)
    public void test175200() throws Throwable {
        NodeUtil.precedence(61);
    }

    @Test(timeout = 4000)
    public void test176201() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test177202() throws Throwable {
        NodeUtil.precedence(73);
    }

    @Test(timeout = 4000)
    public void test178203() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test179204() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test180205() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test181206() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test182207() throws Throwable {
        NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test183208() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test184209() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test185210() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test186211() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test187212() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test188213() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test189214() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test190215() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test191216() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test192217() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test193218() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test194219() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test195220() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test196221() throws Throwable {
        NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test197222() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test198223() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test199224() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test200225() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test201226() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test202227() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test203228() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test204229() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test205230() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test206231() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test207232() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test208233() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.isNumericResult(node0);
    }

    @Test(timeout = 4000)
    public void test209234() throws Throwable {
        Node node0 = Node.newString("~4]yT+su");
        Node node1 = new Node(13, node0, 22, 489);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test210235() throws Throwable {
        Node node0 = new Node(16, 43, 5);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test211236() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = new Node(19, node0, 33, 132);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test212237() throws Throwable {
        Node node0 = Node.newString(20, "typeof", 1, 2633);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test213238() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test214239() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = new Node(41, node0, 30, 29);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test215240() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test216241() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch");
        Node node1 = new Node(45, node0, 4390, 176);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test217242() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test218243() throws Throwable {
        Node node0 = Node.newString("~4]yT+su");
        Node node1 = new Node(48, node0, 24, 2);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test219244() throws Throwable {
        Node node0 = Node.newString(98, "e[&On([q45K", 98, (-1057));
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test220245() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 32, 32);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
    }

    @Test(timeout = 4000)
    public void test221246() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
    }

    @Test(timeout = 4000)
    public void test222247() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(2432);
    }

    @Test(timeout = 4000)
    public void test223248() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
    }

    @Test(timeout = 4000)
    public void test224249() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(15);
    }

    @Test(timeout = 4000)
    public void test225250() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
    }

    @Test(timeout = 4000)
    public void test226251() throws Throwable {
        Node node0 = Node.newString("+o_K4", 1513, 1513);
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test227252() throws Throwable {
        Node node0 = Node.newString("Infinity", 95, 59);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test228253() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 32, 32);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
    }

    @Test(timeout = 4000)
    public void test229254() throws Throwable {
        Node node0 = new Node(1536, 1580, 1536);
        boolean boolean0 = NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test230255() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "TqR.IW??y", 98, (-2661));
        Node[] nodeArray0 = new Node[7];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test231256() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        boolean boolean0 = NodeUtil.isName(node0);
    }

    @Test(timeout = 4000)
    public void test232257() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.isVar(node0);
    }

    @Test(timeout = 4000)
    public void test233258() throws Throwable {
        Node node0 = Node.newNumber((-3279.213), 33, (-3356));
        Node node1 = NodeUtil.newVarNode("E@nI9Jv/E&SAd:Wre", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
    }

    @Test(timeout = 4000)
    public void test233259() throws Throwable {
        Node node0 = Node.newNumber((-3279.213), 33, (-3356));
        Node node1 = NodeUtil.newVarNode("E@nI9Jv/E&SAd:Wre", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test234260() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Infinity", "9Hw]@kd)e\"|B/wHW6^N");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
    }

    @Test(timeout = 4000)
    public void test235261() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = new Node(1, node0, node0);
        boolean boolean0 = NodeUtil.isString(node1);
    }

    @Test(timeout = 4000)
    public void test236262() throws Throwable {
        Node node0 = Node.newString("");
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test237263() throws Throwable {
        Node node0 = Node.newString("*");
        boolean boolean0 = NodeUtil.isAssign(node0);
    }

    @Test(timeout = 4000)
    public void test238264() throws Throwable {
        Node node0 = Node.newString("", 18, 55);
        boolean boolean0 = NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test239265() throws Throwable {
        Node node0 = Node.newString("*");
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test240266() throws Throwable {
        Node node0 = Node.newString("Infinity");
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test241267() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test242268() throws Throwable {
        Node node0 = Node.newString("/3{*C@E5*7O^_4#|");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test243269() throws Throwable {
        Node node0 = Node.newString("+o_K4", 1513, 1513);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test244270() throws Throwable {
        Node node0 = Node.newString(90, "infinity", 90, 90);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test245271() throws Throwable {
        Node node0 = new Node(75);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test246272() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "YM\"%^ftzn$'j?>|VI@", "YM\"%^ftzn$'j?>|VI@");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
    }

    @Test(timeout = 4000)
    public void test247273() throws Throwable {
        Node node0 = new Node(75, 110, 75);
        boolean boolean0 = NodeUtil.isStatementParent(node0);
    }

    @Test(timeout = 4000)
    public void test248274() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "L;[", 8506, (-1214));
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
    }

    @Test(timeout = 4000)
    public void test248275() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "L;[", 8506, (-1214));
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test248276() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "L;[", 8506, (-1214));
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test249277() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
    }

    @Test(timeout = 4000)
    public void test250278() throws Throwable {
        Node node0 = Node.newString("Infinity");
        boolean boolean0 = NodeUtil.isLabelName(node0);
    }

    @Test(timeout = 4000)
    public void test251279() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test251280() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test252281() throws Throwable {
        Node node0 = Node.newString("case Jp'ession doesn't match Gwitch", 1536, 1536);
        NodeUtil.maybeAddFinally(node0);
    }

    @Test(timeout = 4000)
    public void test253282() throws Throwable {
        Node node0 = NodeUtil.newVarNode("case expression doesn't match switch", (Node) null);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test254283() throws Throwable {
        Node node0 = new Node(37);
        PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
        Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test255284() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("0v", linkedList0, node0, 21, 4095);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test255285() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("0v", linkedList0, node0, 21, 4095);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test255286() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("0v", linkedList0, node0, 21, 4095);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test255287() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("0v", linkedList0, node0, 21, 4095);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test256288() throws Throwable {
        Node node0 = Node.newString("*");
        boolean boolean0 = NodeUtil.isThis(node0);
    }

    @Test(timeout = 4000)
    public void test257289() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
    }

    @Test(timeout = 4000)
    public void test258290() throws Throwable {
        Node node0 = Node.newString("*");
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test259291() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("", linkedList0, node0, 39, 115);
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Logger logger0 = Logger.getLogger("=a8-_ze");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test260292() throws Throwable {
        Node node0 = Node.newString("*");
        Compiler compiler0 = new Compiler();
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test261293() throws Throwable {
        Node node0 = Node.newString("6@v5-X");
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test262294() throws Throwable {
        Node node0 = Node.newString("ET:pzQP8[`= (Z*");
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test263295() throws Throwable {
        Node node0 = Node.newString(")G");
        Node node1 = NodeUtil.newVarNode("1*I!dK2kEAPWU", node0);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
    }

    @Test(timeout = 4000)
    public void test263296() throws Throwable {
        Node node0 = Node.newString(")G");
        Node node1 = NodeUtil.newVarNode("1*I!dK2kEAPWU", node0);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test264297() throws Throwable {
        Node node0 = Node.newString("Infinity");
        NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test265298() throws Throwable {
        Node node0 = Node.newString("+o_K4", 1536, 1536);
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test266299() throws Throwable {
        Node node0 = new Node(1536);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test267300() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test268301() throws Throwable {
        Node node0 = new Node(1536);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test269302() throws Throwable {
        Node node0 = Node.newString(100, "~r0B^|Rk<{GI'y|");
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test270303() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(9);
    }

    @Test(timeout = 4000)
    public void test271304() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
    }

    @Test(timeout = 4000)
    public void test272305() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test273306() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test274307() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test275308() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(15);
    }

    @Test(timeout = 4000)
    public void test276309() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
    }

    @Test(timeout = 4000)
    public void test277310() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(17);
    }

    @Test(timeout = 4000)
    public void test278311() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
    }

    @Test(timeout = 4000)
    public void test279312() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(21);
    }

    @Test(timeout = 4000)
    public void test280313() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
    }

    @Test(timeout = 4000)
    public void test281314() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
    }

    @Test(timeout = 4000)
    public void test282315() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
    }

    @Test(timeout = 4000)
    public void test283316() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test284317() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test285319() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
    }

    @Test(timeout = 4000)
    public void test286320() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
    }

    @Test(timeout = 4000)
    public void test287321() throws Throwable {
        String string0 = NodeUtil.opToStr(32);
    }

    @Test(timeout = 4000)
    public void test288322() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
    }

    @Test(timeout = 4000)
    public void test289323() throws Throwable {
        NodeUtil.opToStrNoFail(36);
    }

    @Test(timeout = 4000)
    public void test290324() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
    }

    @Test(timeout = 4000)
    public void test291325() throws Throwable {
        NodeUtil.opToStrNoFail(38);
    }

    @Test(timeout = 4000)
    public void test292326() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
    }

    @Test(timeout = 4000)
    public void test293327() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
    }

    @Test(timeout = 4000)
    public void test294328() throws Throwable {
        NodeUtil.opToStrNoFail(44);
    }

    @Test(timeout = 4000)
    public void test295329() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
    }

    @Test(timeout = 4000)
    public void test296330() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
    }

    @Test(timeout = 4000)
    public void test297332() throws Throwable {
        NodeUtil.opToStrNoFail(47);
    }

    @Test(timeout = 4000)
    public void test298333() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
    }

    @Test(timeout = 4000)
    public void test299334() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
    }

    @Test(timeout = 4000)
    public void test300335() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
    }

    @Test(timeout = 4000)
    public void test301336() throws Throwable {
        String string0 = NodeUtil.opToStr(79);
    }

    @Test(timeout = 4000)
    public void test302337() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
    }

    @Test(timeout = 4000)
    public void test303338() throws Throwable {
        String string0 = NodeUtil.opToStr(88);
    }

    @Test(timeout = 4000)
    public void test304339() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(90);
    }

    @Test(timeout = 4000)
    public void test305340() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
    }

    @Test(timeout = 4000)
    public void test306341() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
    }

    @Test(timeout = 4000)
    public void test307342() throws Throwable {
        NodeUtil.opToStrNoFail(102);
    }

    @Test(timeout = 4000)
    public void test308343() throws Throwable {
        NodeUtil.opToStrNoFail(105);
    }

    @Test(timeout = 4000)
    public void test309344() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
    }

    @Test(timeout = 4000)
    public void test310345() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
    }

    @Test(timeout = 4000)
    public void test311346() throws Throwable {
        String string0 = NodeUtil.opToStr(111);
    }

    @Test(timeout = 4000)
    public void test312347() throws Throwable {
        NodeUtil.opToStrNoFail(112);
    }

    @Test(timeout = 4000)
    public void test313348() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
    }

    @Test(timeout = 4000)
    public void test314349() throws Throwable {
        String string0 = NodeUtil.opToStr(121);
    }

    @Test(timeout = 4000)
    public void test315350() throws Throwable {
        String string0 = NodeUtil.opToStr((-1404));
    }

    @Test(timeout = 4000)
    public void test316351() throws Throwable {
        Node node0 = Node.newString("case exression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case exression doesn't match switch", node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
    }

    @Test(timeout = 4000)
    public void test317352() throws Throwable {
        Node node0 = Node.newString("Infinity");
        NodeUtil.copyNameAnnotations(node0, node0);
    }

    @Test(timeout = 4000)
    public void test318353() throws Throwable {
        Node node0 = Node.newString("Infinity");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        linkedList0.add(node0);
        NodeUtil.newFunctionNode("Infinity", linkedList0, node0, (-3858), (-319));
    }

    @Test(timeout = 4000)
    public void test319354() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.InstrumentFunctions$RemoveCallback", 8, 112);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test319355() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.InstrumentFunctions$RemoveCallback", 8, 112);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test320356() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\\t", (-238), 4130);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test320357() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\\t", (-238), 4130);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test321358() throws Throwable {
        Node node0 = new Node(1687);
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test322359() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("RegExp");
    }

    @Test(timeout = 4000)
    public void test323360() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("");
    }

    @Test(timeout = 4000)
    public void test324361() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("finally");
    }

    @Test(timeout = 4000)
    public void test325362() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "L;[", 8506, (-1214));
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test325363() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "L;[", 8506, (-1214));
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test325364() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "L;[", 8506, (-1214));
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test326365() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 4, 23);
        Node node2 = new Node(1, node0, node1);
        NodeUtil.redeclareVarsInsideBranch(node2);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test326366() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 4, 23);
        Node node2 = new Node(1, node0, node1);
        NodeUtil.redeclareVarsInsideBranch(node2);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test326367() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 4, 23);
        Node node2 = new Node(1, node0, node1);
        NodeUtil.redeclareVarsInsideBranch(node2);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test327368() throws Throwable {
        Node node0 = new Node((-3491));
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test328369() throws Throwable {
        Node node0 = Node.newString("!==", 1700, 113);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test329370() throws Throwable {
        Node node0 = Node.newNumber(623.31299468, (-3263), (-3263));
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test330371() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test330372() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test331373() throws Throwable {
        Node node0 = new Node((-444));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test332374() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Fz0Be)@'Ri[Usl", (-1), 0);
        int int0 = NodeUtil.getNameReferenceCount(node0, "y}ZODm @;m9nn");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test332375() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Fz0Be)@'Ri[Usl", (-1), 0);
        int int0 = NodeUtil.getNameReferenceCount(node0, "y}ZODm @;m9nn");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test332376() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Fz0Be)@'Ri[Usl", (-1), 0);
        int int0 = NodeUtil.getNameReferenceCount(node0, "y}ZODm @;m9nn");
    }

    @Test(timeout = 4000)
    public void test333377() throws Throwable {
        Node node0 = Node.newString("case expression doesn'tjmatch switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn'tjmatch switch", node0);
        node0.addChildrenToBack(node1);
        // Undeclared exception!
        NodeUtil.getNameReferenceCount(node0, "case expression doesn'tjmatch switch");
    }

    @Test(timeout = 4000)
    public void test334378() throws Throwable {
        Node node0 = Node.newString("3i!]!u@[fWD*)$c&)B", (-1403), (-1403));
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test335379() throws Throwable {
        Node node0 = Node.newString("lm,4}]J");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test336380() throws Throwable {
        Node node0 = new Node(1536, 1580, 1536);
        Node node1 = NodeUtil.newVarNode("Q", node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test336381() throws Throwable {
        Node node0 = new Node(1536, 1580, 1536);
        Node node1 = NodeUtil.newVarNode("Q", node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test336382() throws Throwable {
        Node node0 = new Node(1536, 1580, 1536);
        Node node1 = NodeUtil.newVarNode("Q", node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test336383() throws Throwable {
        Node node0 = new Node(1536, 1580, 1536);
        Node node1 = NodeUtil.newVarNode("Q", node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test337384() throws Throwable {
        Node node0 = Node.newString("+o_K4", 1513, 1513);
        Node node1 = NodeUtil.newVarNode("+o_K4", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test337385() throws Throwable {
        Node node0 = Node.newString("+o_K4", 1513, 1513);
        Node node1 = NodeUtil.newVarNode("+o_K4", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
    }

    @Test(timeout = 4000)
    public void test337386() throws Throwable {
        Node node0 = Node.newString("+o_K4", 1513, 1513);
        Node node1 = NodeUtil.newVarNode("+o_K4", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test337387() throws Throwable {
        Node node0 = Node.newString("+o_K4", 1513, 1513);
        Node node1 = NodeUtil.newVarNode("+o_K4", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test338388() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = new Node(1729, node0);
        boolean boolean0 = NodeUtil.containsCall(node1);
    }

    @Test(timeout = 4000)
    public void test339389() throws Throwable {
        Node node0 = Node.newString("*");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(115);
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test340390() throws Throwable {
        Node node0 = Node.newString("case Jp'ession doesn't match Gwitch", 1536, 1536);
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test341391() throws Throwable {
        Node node0 = Node.newString("Infinity");
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test342392() throws Throwable {
        Node node0 = Node.newString("/v0");
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test343393() throws Throwable {
        Logger logger0 = Logger.getLogger("OZ3gX+p&");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "<=", "4");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test344394() throws Throwable {
        Node node0 = Node.newNumber(623.31299468, (-3263), (-3263));
        NodeUtil.getFunctionParameters(node0);
    }

    @Test(timeout = 4000)
    public void test345395() throws Throwable {
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate", "*");
    }

    @Test(timeout = 4000)
    public void test346396() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test347397() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        NodeUtil.getInfoForNameNode(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test347398() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        NodeUtil.getInfoForNameNode(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test348399() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("#", linkedList0, node0, 185, 6);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test348400() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("#", linkedList0, node0, 185, 6);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test348401() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("#", linkedList0, node0, 185, 6);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test348402() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("#", linkedList0, node0, 185, 6);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test348403() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "noa", (-966), (-966));
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("#", linkedList0, node0, 185, 6);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test349404() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test349405() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test349406() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test349407() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test350408() throws Throwable {
        Node node0 = new Node(27);
        NodeUtil.getFunctionJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test351409() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test352410() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test353411() throws Throwable {
        Node node0 = new Node(42, 1, 2);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test354412() throws Throwable {
        Node node0 = Node.newString(90, "infinity", 90, 90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test355413() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 63743, (-2661));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test355414() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 63743, (-2661));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test355415() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Vuqh", 63743, (-2661));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getLineno();
    }
}
