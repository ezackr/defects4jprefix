/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 01:21:33 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExportTestFunctions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceAst;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.jscomp.WhitelistWarningsGuard;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.protobuf.ByteString;
import java.io.File;
import java.io.PrintStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        compiler0.toSource(jSModule0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Node node0 = Node.newNumber((double) (-42));
        compiler0.toSource(compiler_CodeBuilder0, (-42), node0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Compiler.setLoggingLevel((Level) null);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.parse();
        SourceFile sourceFile0 = SourceFile.fromFile("fontsize");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addNewScript(jsAst0);
        compiler0.addNewSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getPropertyMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        Callable<ExportTestFunctions> callable0 = (Callable<ExportTestFunctions>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        ExportTestFunctions exportTestFunctions0 = Compiler.runCallableWithLargeStack(callable0);
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getVariableMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.getFunctionalInformationMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("pI:L");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("pI:L", "pI:L");
        String string0 = compiler0.toSource(node0);
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("pI:L");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("pI:L", "pI:L");
        String string0 = compiler0.toSource(node0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("pI:L");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("pI:L", "pI:L");
        String string0 = compiler0.toSource(node0);
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("pI:L");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("pI:L", "pI:L");
        String string0 = compiler0.toSource(node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test02529() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Table");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[8];
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test02630() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getModuleGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("unexpect prop id ");
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
        sourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test02732() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("unexpect prop id ");
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getInputsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        JSModule[] jSModuleArray0 = new JSModule[0];
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
        compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03338() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getInputsById();
    }

    @Test(timeout = 4000)
    public void test03439() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(false);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03540() throws Throwable {
        VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter((SourceExcerptProvider) null);
        ByteString.Output byteString_Output0 = ByteString.newOutput();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0, true);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(verboseMessageFormatter0, mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("?f\"u,W}X\"g_d)6x", sourceFile_Generator0);
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03641() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test03742() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getExternsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03843() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test03944() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.parse();
        compiler0.buildKnownSymbolTable();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03945() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.parse();
        compiler0.buildKnownSymbolTable();
        SourceFile sourceFile0 = SourceFile.fromFile("fontsize");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addNewScript(jsAst0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04248() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test04349() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test04450() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04551() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
        JSModule[] jSModuleArray0 = new JSModule[2];
        JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator");
        jSModuleArray0[0] = jSModule0;
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test04652() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("vrSS", "base");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        vector0.add(sourceFile0);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test04653() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("vrSS", "base");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        vector0.add(sourceFile0);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04754() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        JSModule jSModule0 = new JSModule(">)tPK");
        arrayList0.add(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test04855() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test04956() throws Throwable {
        Compiler.runCallable((Callable<Object>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test05057() throws Throwable {
        Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        Object object0 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        Compiler.runCallable((Callable<Object>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test05259() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.createPassConfigInternal();
        compiler0.setPassConfig(passConfig0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05360() throws Throwable {
        Compiler compiler0 = new Compiler();
        DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
        compiler0.setPassConfig(defaultPassConfig0);
    }

    @Test(timeout = 4000)
    public void test05461() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.parse();
        compiler0.check();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05562() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("_gR!>M?ATDT0q3C", "_gR!>M?ATDT0q3C");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.stripCode(compilerOptions0.stripTypePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test05663() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.startPass((String) null);
        compiler0.optimize();
    }

    @Test(timeout = 4000)
    public void test05764() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test05865() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("013QP@OL", "base");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        compiler0.parseSyntheticCode("base", "JSC_INVALID_DEFINE_TYPE_ERROR");
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05966() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("a", "a");
        compiler0.areNodesEqualForInlining(node0, node0);
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test05967() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("a", "a");
        compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05968() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("a", "a");
        compiler0.areNodesEqualForInlining(node0, node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test06069() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.getSynthesizedExternsInput();
    }

    @Test(timeout = 4000)
    public void test06170() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        MockFile mockFile0 = new MockFile("mqj&\u0005Y8Ty!hP");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.newExternInput("mqj&\u0005Y8Ty!hP");
    }

    @Test(timeout = 4000)
    public void test06271() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        MockFile mockFile0 = new MockFile("Aon8", "// Input %num%");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test06372() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.parse();
        MockFile mockFile0 = new MockFile("", "// Input %num%");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addNewScript(jsAst0);
        JsAst jsAst1 = new JsAst(sourceFile0);
        compiler0.replaceIncrementalSourceAst(jsAst1);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06473() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        MockFile mockFile0 = new MockFile("R");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addNewScript(jsAst0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06574() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getDegenerateModuleGraph();
    }

    @Test(timeout = 4000)
    public void test06675() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("a", "a");
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test06676() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("a", "a");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test06677() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("a", "a");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
        defaultPassConfig0.makeTypeCheck(compiler0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06678() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("a", "a");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
        defaultPassConfig0.makeTypeCheck(compiler0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06779() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("LE", "LE");
        DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06780() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("LE", "LE");
        DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
        defaultPassConfig0.regenerateGlobalTypedScope(compiler0, node0);
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test06781() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("LE", "LE");
        DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
        defaultPassConfig0.regenerateGlobalTypedScope(compiler0, node0);
        defaultPassConfig0.makeTypeCheck(compiler0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06882() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        node0.isExprResult();
    }

    @Test(timeout = 4000)
    public void test06983() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("oS<:^7b?D/?+", (Charset) null);
        vector0.add((SourceFile) jSSourceFile0);
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) stack0, compilerOptions0);
        compiler0.parse();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06984() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("oS<:^7b?D/?+", (Charset) null);
        vector0.add((SourceFile) jSSourceFile0);
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) stack0, compilerOptions0);
        compiler0.parse();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07085() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(true);
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.parse();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07186() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSourceMapOutputPath("TYPE_UINT64_VALUE");
        compiler0.disableThreads();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07287() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        Node node0 = compiler0.parseSyntheticCode("013QP@OL", "013QP@OL");
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test07288() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        Node node0 = compiler0.parseSyntheticCode("013QP@OL", "013QP@OL");
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.processAMDAndCommonJSModules();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07389() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) vector0, compilerOptions0);
        compiler0.parseTestCode((String) null);
    }

    @Test(timeout = 4000)
    public void test07490() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("R.[M");
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07491() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("R.[M");
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test07592() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("\n");
    }

    @Test(timeout = 4000)
    public void test07693() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("he&EK5.`GLdr`n7g ");
    }

    @Test(timeout = 4000)
    public void test07794() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("he&EK5.`GLdr`n7g ");
        compiler_CodeBuilder0.append("he&EK5.`GLdr`n7g ");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("he&EK5.`GLdr`n7g ");
    }

    @Test(timeout = 4000)
    public void test07895() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("4/<r`h5t`xyU$hMAon8");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("s2w1");
    }

    @Test(timeout = 4000)
    public void test07996() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        Stack<JSModule> stack1 = new Stack<JSModule>();
        compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) stack1, compilerOptions0);
        compiler0.parse();
        compiler0.optimize();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test08097() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test08098() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test08099() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test081100() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test081101() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
    }

    @Test(timeout = 4000)
    public void test082102() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        String[] stringArray0 = new String[3];
        JSError jSError0 = JSError.make("5GA@u.=WE:|W!bF;a4r", (-1955668510), (-1955668510), checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
    }

    @Test(timeout = 4000)
    public void test083103() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(".yB(7c)}", ".yB(7c)}");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make((String) null, node0, compilerOptions0.checkGlobalThisLevel, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test083104() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(".yB(7c)}", ".yB(7c)}");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make((String) null, node0, compilerOptions0.checkGlobalThisLevel, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test083105() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(".yB(7c)}", ".yB(7c)}");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make((String) null, node0, compilerOptions0.checkGlobalThisLevel, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
    }

    @Test(timeout = 4000)
    public void test084106() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        WhitelistWarningsGuard.WhitelistBuilder whitelistWarningsGuard_WhitelistBuilder0 = new WhitelistWarningsGuard.WhitelistBuilder();
        compilerOptions0.setErrorHandler(whitelistWarningsGuard_WhitelistBuilder0);
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.ensureLibraryInjected((String) null);
    }

    @Test(timeout = 4000)
    public void test085107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("J5@>,{:v", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test086108() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compilerOptions0.setIdeMode(true);
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        Result result0 = compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test087109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceRegion((String) null, 25);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test088110() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("013QP@OL", "013QP@OL");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        Node node0 = compiler0.parseSyntheticCode("013QP@OL", "013QP@OL");
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test088111() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("013QP@OL", "013QP@OL");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        Node node0 = compiler0.parseSyntheticCode("013QP@OL", "013QP@OL");
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test088112() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("013QP@OL", "013QP@OL");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        Node node0 = compiler0.parseSyntheticCode("013QP@OL", "013QP@OL");
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test089113() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceRegion("K6*E{[AecO}vf/a", (-1176));
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test090114() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("8");
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test091115() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test092116() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("8");
        CompilerInput compilerInput0 = new CompilerInput((SourceAst) null, (String) null, true);
        jSModule0.addAndOverrideModule(compilerInput0);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test093117() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getAstDotGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test094118() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.parse();
        String string0 = compiler0.getAstDotGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test094119() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.parse();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test095120() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("_ase", "_ase");
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test095121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("_ase", "_ase");
        compiler0.getErrorManager();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test096122() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test096123() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test097124() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("=JF}Uh#c", "=JF}Uh#c");
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(hashMap0, node0);
    }

    @Test(timeout = 4000)
    public void test098125() throws Throwable {
        Compiler compiler0 = new Compiler();
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Node node0 = new Node(108, 108, 108);
        compiler0.updateGlobalVarReferences(hashMap0, node0);
    }

    @Test(timeout = 4000)
    public void test099126() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
        SymbolTable symbolTable1 = compiler0.buildKnownSymbolTable();
    }

    @Test(timeout = 4000)
    public void test100127() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test100128() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress(338.5060573056903);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test101129() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress((-4789.581522405));
        compiler0.getProgress();
    }
}
