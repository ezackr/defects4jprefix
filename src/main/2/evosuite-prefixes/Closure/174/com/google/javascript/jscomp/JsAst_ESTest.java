/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:30:36 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsAst_ESTest extends JsAst_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("Using the debugger statement can halt your application if the user has a JavaScript debugger running.");
        JsAst jsAst0 = new JsAst(sourceFile0);
        jsAst0.clearAst();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("Using the debugger statement can halt your application if the user has a JavaScript debugger running.");
        JsAst jsAst0 = new JsAst(sourceFile0);
        jsAst0.setSourceFile(sourceFile0);
        sourceFile0.getOriginalPath();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile(".prototype");
        JsAst jsAst0 = new JsAst(sourceFile0);
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
        jsAst0.getAstRoot(compiler0);
        jsAst0.getAstRoot(compiler0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("$n");
        SourceFile sourceFile1 = SourceFile.fromCode("$n", "$n");
        JsAst jsAst0 = new JsAst(sourceFile1);
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, sourceFile1, compilerOptions0);
        Node node0 = jsAst0.getAstRoot(compiler0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("$n");
        SourceFile sourceFile1 = SourceFile.fromCode("$n", "$n");
        JsAst jsAst0 = new JsAst(sourceFile1);
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, sourceFile1, compilerOptions0);
        Node node0 = jsAst0.getAstRoot(compiler0);
        node0.hasChildren();
    }
}
