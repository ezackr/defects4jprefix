/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 06:17:37 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.Multimap;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DisambiguateProperties_ESTest extends DisambiguateProperties_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DisambiguateProperties$FindExternProperties", "com.google.javascript.jscomp.DisambiguateProperties$FindExternProperties");
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node0, node0);
        disambiguateProperties0.process(node0, node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DisambiguateProperties$FindExternProperties", "com.google.javascript.jscomp.DisambiguateProperties$FindExternProperties");
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        disambiguateProperties0.process(node0, node0);
        Multimap<String, Collection<ConcreteType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        ConcreteType concreteType0 = ConcreteType.ALL;
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType[] concreteTypeArray0 = new ConcreteType[6];
        concreteTypeArray0[1] = concreteType0;
        ConcreteType.ConcreteUnionType concreteType_ConcreteUnionType0 = new ConcreteType.ConcreteUnionType(concreteTypeArray0);
        disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType_ConcreteUnionType0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(33, node0, node0, 29, 21);
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("com.google.javascript.jscomp.DisambiguateProperties$FindExternProperties");
        Node node1 = new Node(64, node0, node0, 0, 1);
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(64, 12, 28);
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.DisambiguateProperties$FindExternProperties");
        Node node1 = new Node(64, node0, node0, 0, 536870936);
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        JSType jSType0 = disambiguateProperties0.getTypeWithProperty("prototype", objectType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty("Not declared as a constructor", jSType0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
        JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty("g7WnlJX/N", jSType0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "TightenTypes pass appears to be stuck in an infinite loop.", "Not declared as a type name", 1, 1);
        NamedType namedType1 = (NamedType) disambiguateProperties0.getTypeWithProperty("}`g7Gha=@sVFVmp", namedType0);
        namedType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType.ConcreteInstanceType concreteType_ConcreteInstanceType0 = tightenTypes0.createConcreteInstance(objectType0);
        ConcreteType concreteType0 = disambiguateProperties0.getTypeWithProperty("Unknown class name", concreteType_ConcreteInstanceType0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType concreteType0 = ConcreteType.NONE;
        ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType concreteType0 = ConcreteType.ALL;
        ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType0);
    }
}
