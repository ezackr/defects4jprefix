/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:14:56 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        char[] charArray0 = new char[5];
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, true, (VariableMap) null, charArray0, compilerOptions0.aliasableStrings);
        VariableMap variableMap0 = renameVars0.getVariableMap();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
        VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
        char[] charArray0 = new char[0];
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        RenameVars renameVars0 = new RenameVars(compiler0, "", false, true, true, variableMap0, charArray0, linkedHashSet0);
        RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment("", (CompilerInput) null);
        renameVars_Assignment0.newName = "";
        renameVars_Assignment0.setNewName("");
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        RenameVars renameVars0 = new RenameVars(compiler0, "com.google.javascript.jscomp.RenameVars$1", true, true, true, (VariableMap) null, (char[]) null, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        char[] charArray0 = new char[13];
        CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
        RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, false, (VariableMap) null, charArray0, compilerOptions0.stripTypes);
        Node node0 = compiler0.parseSyntheticCode("L com.google.javascript.jscomp.mozilla.rhino.Node", "uR$g&+]jh6@L|:6`%[");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[1];
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) recordType0, (List<JSType>) arrayList0);
        JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
        jSTypeArray0[0] = jSType1;
        Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        renameVars0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        char[] charArray0 = new char[4];
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, false, (VariableMap) null, charArray0, compilerOptions0.stripTypes);
        Node node0 = compiler0.parseSyntheticCode((String) null, "TYPE_GROUP");
        renameVars0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        RenameVars renameVars0 = new RenameVars(compiler0, "", false, true, true, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
        Node node0 = compiler0.parseSyntheticCode("", "_");
        renameVars0.process(node0, node0);
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        char[] charArray0 = new char[28];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("", (Charset) null);
        CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
        RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, charArray0, compilerOptions0.aliasableStrings);
        RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
        renameVars_ProcessVars0.incCount("", compilerInput0);
        renameVars_ProcessVars0.incCount("", compilerInput0);
        compilerInput0.getName();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        char[] charArray0 = new char[10];
        CompilerOptions compilerOptions0 = compiler0.options_;
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("", (Charset) null);
        CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
        RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, charArray0, compilerOptions0.aliasableStrings);
        RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
        renameVars_ProcessVars0.incCount("", compilerInput0);
        Node node0 = compiler0.parseTestCode("");
        renameVars0.process(node0, node0);
        renameVars0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        char[] charArray0 = new char[4];
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, charArray0, compilerOptions0.stripTypes);
        Node node0 = compiler0.parseSyntheticCode((String) null, "TYPE_GROUP");
        RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
        renameVars_ProcessVars0.incCount("TYPE_GROUP", (CompilerInput) null);
        renameVars0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
        RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
        Node node0 = compiler0.parseSyntheticCode((String) null, "// Input %num%");
        RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
        renameVars_ProcessVars0.incCount("L ;ieL-:~03e", (CompilerInput) null);
        renameVars0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
        VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
        char[] charArray0 = new char[0];
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        RenameVars renameVars0 = new RenameVars(compiler0, "Y", true, true, true, variableMap0, charArray0, linkedHashSet0);
        RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Y", "Y");
        CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
        renameVars_ProcessVars0.incCount("S", compilerInput0);
        renameVars_ProcessVars0.incCount("Y", compilerInput0);
        Node node0 = new Node(3584, (-957), (-957));
        renameVars0.process(node0, node0);
    }
}
