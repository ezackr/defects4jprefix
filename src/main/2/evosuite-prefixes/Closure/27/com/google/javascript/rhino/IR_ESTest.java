/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 01:09:53 GMT 2024
 */
package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.IR;
import com.google.javascript.rhino.Node;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class IR_ESTest extends IR_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = IR.empty();
        IR.and(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Node node0 = IR.block();
        IR.doNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = new Node(78);
        IR.comma(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = IR.trueNode();
        IR.catchNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = IR.breakNode();
        IR.tryFinally(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Node node0 = new Node(62);
        IR.voidNode(node0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Node node0 = new Node(94);
        Node node1 = IR.returnNode(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Node[] nodeArray0 = new Node[1];
        IR.paramList(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Node node0 = IR.falseNode();
        IR.breakNode(node0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Node node0 = IR.returnNode();
        IR.eq(node0, node0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        Node node0 = IR.nullNode();
        IR.function(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        Node node0 = IR.thisNode();
        IR.ifNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Node node0 = new Node(111);
        IR.exprResult(node0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        Node node0 = new Node(115);
        IR.sheq(node0, node0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Node node0 = IR.string("vZjFD7B0#QbMI");
        node0.isFunction();
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        Node node0 = IR.falseNode();
        IR.regexp(node0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Node node0 = IR.trueNode();
        IR.label(node0, node0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Node node0 = IR.block();
        IR.tryCatchFinally(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = IR.not(node0);
        node1.isNot();
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        Node node0 = IR.breakNode();
        IR.ifNode(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = IR.assign(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        Node node0 = new Node(58);
        IR.getelem(node0, node0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        Node node0 = IR.number(2);
        node0.isLabel();
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        IR.or(node0, node0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        Node node0 = IR.name("");
        IR.var(node0, node0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        Node node0 = IR.continueNode();
        IR.getprop(node0, node0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.sub(node0, node0);
        Node node2 = IR.hook(node1, node1, node1);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test02728() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.sub(node0, node0);
        Node node2 = IR.hook(node1, node1, node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.sub(node0, node0);
        Node node2 = IR.hook(node1, node1, node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        Node node0 = new Node(19);
        Node node1 = IR.pos(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        Node node0 = new Node(92);
        IR.caseNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        Node node0 = IR.stringKey("$B.%4=-Y8i|fX");
        IR.propdef(node0, node0);
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        Node node0 = IR.empty();
        IR.throwNode(node0);
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        Node node0 = IR.trueNode();
        IR.continueNode(node0);
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        Node node0 = IR.falseNode();
        IR.defaultCase(node0);
    }

    @Test(timeout = 4000)
    public void test03436() throws Throwable {
        Node node0 = IR.breakNode();
        IR.regexp(node0, node0);
    }

    @Test(timeout = 4000)
    public void test03537() throws Throwable {
        Node node0 = IR.nullNode();
        IR.paramList(node0);
    }

    @Test(timeout = 4000)
    public void test03638() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.paramList(nodeArray0);
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test03739() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = IR.paramList((List<Node>) linkedList0);
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test03840() throws Throwable {
        Node node0 = IR.falseNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        linkedList0.add(node0);
        IR.paramList((List<Node>) linkedList0);
    }

    @Test(timeout = 4000)
    public void test03941() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.block(nodeArray0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04042() throws Throwable {
        Node[] nodeArray0 = new Node[8];
        IR.block(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.script(nodeArray0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04244() throws Throwable {
        Node[] nodeArray0 = new Node[3];
        IR.script(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test04345() throws Throwable {
        Node node0 = IR.breakNode();
        IR.var(node0, node0);
    }

    @Test(timeout = 4000)
    public void test04446() throws Throwable {
        Node node0 = IR.name("");
        node0.addChildToFront(node0);
        IR.var(node0, node0);
    }

    @Test(timeout = 4000)
    public void test04547() throws Throwable {
        Node node0 = new Node(118);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04648() throws Throwable {
        Node node0 = new Node(84);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04749() throws Throwable {
        Node node0 = new Node(95);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        Node node0 = new Node(118);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04951() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05052() throws Throwable {
        Node node0 = new Node(28);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        Node node0 = new Node(20);
        Node[] nodeArray0 = new Node[0];
        Node node1 = IR.switchNode(node0, nodeArray0);
        node1.isSwitch();
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        Node node0 = IR.trueNode();
        Node[] nodeArray0 = new Node[1];
        Node node1 = new Node(111);
        nodeArray0[0] = node1;
        Node node2 = IR.switchNode(node0, nodeArray0);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test05255() throws Throwable {
        Node node0 = IR.trueNode();
        Node[] nodeArray0 = new Node[1];
        Node node1 = new Node(111);
        nodeArray0[0] = node1;
        Node node2 = IR.switchNode(node0, nodeArray0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05256() throws Throwable {
        Node node0 = IR.trueNode();
        Node[] nodeArray0 = new Node[1];
        Node node1 = new Node(111);
        nodeArray0[0] = node1;
        Node node2 = IR.switchNode(node0, nodeArray0);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        Node node0 = IR.falseNode();
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        IR.switchNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        IR.labelName("");
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        Node node0 = IR.labelName("0T'");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        Node node0 = IR.block();
        Node[] nodeArray0 = new Node[0];
        Node node1 = IR.call(node0, nodeArray0);
        node1.isCall();
    }

    @Test(timeout = 4000)
    public void test05661() throws Throwable {
        Node node0 = IR.block();
        Node[] nodeArray0 = new Node[0];
        Node node1 = IR.call(node0, nodeArray0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05762() throws Throwable {
        Node node0 = IR.empty();
        Node[] nodeArray0 = new Node[1];
        IR.call(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test05863() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.breakNode();
        Node node1 = IR.newNode(node0, nodeArray0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test05864() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.breakNode();
        Node node1 = IR.newNode(node0, nodeArray0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05965() throws Throwable {
        Node[] nodeArray0 = new Node[1];
        Node node0 = IR.breakNode();
        IR.newNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test06066() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.objectlit(nodeArray0);
        Node node1 = IR.hook(node0, node0, node0);
        node1.isHook();
    }

    @Test(timeout = 4000)
    public void test06067() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.objectlit(nodeArray0);
        Node node1 = IR.hook(node0, node0, node0);
        node0.isObjectLit();
    }

    @Test(timeout = 4000)
    public void test06168() throws Throwable {
        Node node0 = IR.stringKey("0n/");
        Node[] nodeArray0 = new Node[5];
        nodeArray0[0] = node0;
        IR.objectlit(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test06269() throws Throwable {
        Node node0 = new Node(148);
        Node[] nodeArray0 = new Node[7];
        nodeArray0[0] = node0;
        IR.objectlit(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test06370() throws Throwable {
        Node node0 = new Node(147);
        Node[] nodeArray0 = new Node[10];
        nodeArray0[0] = node0;
        IR.objectlit(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        Node node0 = IR.empty();
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        IR.objectlit(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test06572() throws Throwable {
        Node node0 = IR.stringKey("");
        node0.addChildToFront(node0);
        IR.propdef(node0, node0);
    }

    @Test(timeout = 4000)
    public void test06673() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.arraylit(nodeArray0);
        Node node1 = IR.sheq(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test06674() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = IR.arraylit(nodeArray0);
        Node node1 = IR.sheq(node0, node0);
        node0.isArrayLit();
    }

    @Test(timeout = 4000)
    public void test06775() throws Throwable {
        Node[] nodeArray0 = new Node[4];
        IR.arraylit(nodeArray0);
    }

    @Test(timeout = 4000)
    public void test06876() throws Throwable {
        Node node0 = IR.empty();
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06977() throws Throwable {
        Node node0 = IR.name("^#K#iuzK>{Wq#*zv");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test06978() throws Throwable {
        Node node0 = IR.name("^#K#iuzK>{Wq#*zv");
        Node node1 = IR.assign(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test07079() throws Throwable {
        Node node0 = IR.trueNode();
        IR.assign(node0, node0);
    }

    @Test(timeout = 4000)
    public void test07180() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = new Node(35, node0, node0, 31, 8);
        IR.assign(node1, node0);
    }

    @Test(timeout = 4000)
    public void test07281() throws Throwable {
        Node node0 = IR.returnNode();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test07282() throws Throwable {
        Node node0 = IR.returnNode();
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test07383() throws Throwable {
        Node node0 = new Node(49);
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test07484() throws Throwable {
        Node node0 = new Node(77);
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test07585() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test07686() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test07888() throws Throwable {
        Node node0 = new Node(114);
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test07989() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test08090() throws Throwable {
        Node node0 = IR.breakNode();
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test08091() throws Throwable {
        Node node0 = IR.breakNode();
        Node node1 = IR.block(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test08192() throws Throwable {
        Node node0 = IR.continueNode();
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test08193() throws Throwable {
        Node node0 = IR.continueNode();
        Node node1 = IR.block(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test08294() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test08395() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test08496() throws Throwable {
        Node node0 = IR.empty();
        Node node1 = IR.block(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test08497() throws Throwable {
        Node node0 = IR.empty();
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test08598() throws Throwable {
        Node node0 = IR.block();
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test08599() throws Throwable {
        Node node0 = IR.block();
        Node node1 = IR.block(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test085100() throws Throwable {
        Node node0 = IR.block();
        Node node1 = IR.block(node0);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test086101() throws Throwable {
        Node node0 = new Node(126);
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test087102() throws Throwable {
        Node node0 = new Node(130);
        Node node1 = IR.block(node0);
        node1.isBlock();
    }

    @Test(timeout = 4000)
    public void test088103() throws Throwable {
        Node node0 = new Node(149);
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test089104() throws Throwable {
        Node node0 = new Node(152);
        Node node1 = IR.block(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test090105() throws Throwable {
        Node node0 = IR.nullNode();
        IR.block(node0);
    }

    @Test(timeout = 4000)
    public void test091106() throws Throwable {
        Node node0 = IR.returnNode();
        node0.setType(9);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test092107() throws Throwable {
        Node node0 = new Node(10);
        Node node1 = IR.voidNode(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test093108() throws Throwable {
        Node node0 = new Node(11);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test094109() throws Throwable {
        Node node0 = IR.falseNode();
        Node node1 = new Node(12);
        IR.forNode(node0, node1, node1, node1);
    }

    @Test(timeout = 4000)
    public void test095110() throws Throwable {
        Node node0 = new Node(13);
        Node node1 = IR.sheq(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test096111() throws Throwable {
        Node node0 = new Node(14);
        Node node1 = IR.voidNode(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test097112() throws Throwable {
        Node node0 = IR.empty();
        node0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test097113() throws Throwable {
        Node node0 = IR.empty();
        node0.setType(15);
        Node node1 = IR.hook(node0, node0, node0);
        node1.isHook();
    }

    @Test(timeout = 4000)
    public void test098114() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = new Node(16);
        IR.forIn(node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test099115() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(17, nodeArray0, 45, 45);
        Node[] nodeArray1 = new Node[0];
        Node node1 = IR.switchNode(node0, nodeArray1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test100116() throws Throwable {
        Node node0 = new Node(18, 18, 18);
        Node node1 = IR.or(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test101117() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.add(node0, node0);
        IR.forNode(node1, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test102118() throws Throwable {
        Node node0 = new Node(23);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test103119() throws Throwable {
        Node node0 = new Node(24, 24, 24);
        Node node1 = IR.or(node0, node0);
        node1.isOr();
    }

    @Test(timeout = 4000)
    public void test104120() throws Throwable {
        Node node0 = IR.falseNode();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test104121() throws Throwable {
        Node node0 = IR.falseNode();
        node0.setType(25);
        Node node1 = IR.neg(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test105122() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.not(node0);
        IR.forNode(node0, node1, node0, node0);
    }

    @Test(timeout = 4000)
    public void test106123() throws Throwable {
        Node node0 = IR.thisNode();
        Node node1 = new Node(27);
        Node node2 = IR.or(node0, node1);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test106124() throws Throwable {
        Node node0 = IR.thisNode();
        Node node1 = new Node(27);
        Node node2 = IR.or(node0, node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test106125() throws Throwable {
        Node node0 = IR.thisNode();
        Node node1 = new Node(27);
        Node node2 = IR.or(node0, node1);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test107126() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.neg(node0);
        IR.forIn(node1, node1, node1);
    }

    @Test(timeout = 4000)
    public void test108127() throws Throwable {
        Node node0 = IR.returnNode();
        node0.setType(30);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test109128() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = new Node(31, node0, node0, node0, node0, 32, 42);
        IR.or(node1, node0);
    }

    @Test(timeout = 4000)
    public void test110129() throws Throwable {
        Node node0 = IR.falseNode();
        Node node1 = new Node(32, node0, node0, 39, 12);
        IR.forIn(node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test111130() throws Throwable {
        Node node0 = IR.nullNode();
        Node node1 = new Node(34, node0, node0);
        IR.switchNode(node1, (Node[]) null);
    }

    @Test(timeout = 4000)
    public void test112131() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = new Node(35, node0, node0, 31, 8);
        IR.forNode(node1, node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test113132() throws Throwable {
        Node node0 = IR.returnNode();
        node0.setType(36);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test114133() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = IR.neg(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test115134() throws Throwable {
        Node node0 = new Node(39);
        Node node1 = IR.add(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test116135() throws Throwable {
        Node node0 = new Node(40);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test117136() throws Throwable {
        Node node0 = IR.nullNode();
        Node node1 = new Node(45, 32, 51);
        Node node2 = IR.hook(node0, node0, node1);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test117137() throws Throwable {
        Node node0 = IR.nullNode();
        Node node1 = new Node(45, 32, 51);
        Node node2 = IR.hook(node0, node0, node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test117138() throws Throwable {
        Node node0 = IR.nullNode();
        Node node1 = new Node(45, 32, 51);
        Node node2 = IR.hook(node0, node0, node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test118139() throws Throwable {
        Node node0 = IR.falseNode();
        Node node1 = new Node(46, node0, node0, node0, 37, 0);
        Node node2 = IR.exprResult(node1);
        node2.isExprResult();
    }

    @Test(timeout = 4000)
    public void test118140() throws Throwable {
        Node node0 = IR.falseNode();
        Node node1 = new Node(46, node0, node0, node0, 37, 0);
        Node node2 = IR.exprResult(node1);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test119142() throws Throwable {
        Node node0 = IR.falseNode();
        node0.type = 47;
        Node node1 = IR.not(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test120143() throws Throwable {
        Node node0 = IR.falseNode();
        Node node1 = new Node(48, node0, node0, node0, node0, 36, 1);
        IR.not(node1);
    }

    @Test(timeout = 4000)
    public void test121144() throws Throwable {
        Node node0 = IR.falseNode();
        node0.setType(49);
        IR.neg(node0);
    }

    @Test(timeout = 4000)
    public void test122145() throws Throwable {
        Node node0 = IR.paramList();
        Node node1 = new Node(50);
        IR.forIn(node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test123146() throws Throwable {
        Node node0 = IR.trueNode();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test123147() throws Throwable {
        Node node0 = IR.trueNode();
        node0.setType(51);
        Node node1 = IR.pos(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test124148() throws Throwable {
        Node node0 = new Node(52);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test125149() throws Throwable {
        Node node0 = IR.trueNode();
        node0.setType(53);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test126150() throws Throwable {
        Node node0 = IR.thisNode();
        Node node1 = new Node(54);
        IR.hook(node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test127151() throws Throwable {
        Node node0 = new Node(55);
        IR.or(node0, node0);
    }

    @Test(timeout = 4000)
    public void test128152() throws Throwable {
        Node node0 = new Node(56);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test129153() throws Throwable {
        Node node0 = new Node(57);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test130154() throws Throwable {
        Node node0 = new Node(59);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test131155() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        IR.getelem(node0, node0);
    }

    @Test(timeout = 4000)
    public void test132156() throws Throwable {
        Node node0 = new Node(61, 61, 61);
        IR.or(node0, node0);
    }

    @Test(timeout = 4000)
    public void test133157() throws Throwable {
        Node node0 = new Node(65);
        IR.returnNode(node0);
    }

    @Test(timeout = 4000)
    public void test134158() throws Throwable {
        Node node0 = new Node(66);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test135159() throws Throwable {
        Node node0 = new Node(67);
        IR.voidNode(node0);
    }

    @Test(timeout = 4000)
    public void test136160() throws Throwable {
        Node node0 = new Node(69);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test137161() throws Throwable {
        Node node0 = new Node(71);
        IR.switchNode(node0, (Node[]) null);
    }

    @Test(timeout = 4000)
    public void test138162() throws Throwable {
        Node node0 = new Node(72);
        IR.comma(node0, node0);
    }

    @Test(timeout = 4000)
    public void test139163() throws Throwable {
        Node node0 = new Node(73);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test140164() throws Throwable {
        Node node0 = new Node(74);
        IR.exprResult(node0);
    }

    @Test(timeout = 4000)
    public void test141165() throws Throwable {
        Node node0 = IR.falseNode();
        node0.setType(75);
        IR.or(node0, node0);
    }

    @Test(timeout = 4000)
    public void test142166() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        IR.not(node0);
    }

    @Test(timeout = 4000)
    public void test143167() throws Throwable {
        Node node0 = new Node(77);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test144168() throws Throwable {
        Node node0 = new Node(79, 79, 79);
        IR.hook(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test145169() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        IR.or(node0, node0);
    }

    @Test(timeout = 4000)
    public void test146170() throws Throwable {
        Node node0 = new Node(81);
        IR.getelem(node0, node0);
    }

    @Test(timeout = 4000)
    public void test147171() throws Throwable {
        Node node0 = new Node(82);
        IR.voidNode(node0);
    }

    @Test(timeout = 4000)
    public void test148172() throws Throwable {
        Node node0 = IR.paramList();
        IR.not(node0);
    }

    @Test(timeout = 4000)
    public void test149173() throws Throwable {
        Node node0 = new Node(86);
        Node node1 = IR.getelem(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test150174() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = IR.or(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test151175() throws Throwable {
        Node[] nodeArray0 = new Node[12];
        Node node0 = new Node(88);
        IR.switchNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test152176() throws Throwable {
        Node node0 = new Node(89);
        Node node1 = IR.getelem(node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test153177() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        Node node1 = IR.hook(node0, node0, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test154178() throws Throwable {
        Node node0 = new Node(91);
        Node node1 = IR.add(node0, node0);
        node1.isAdd();
    }

    @Test(timeout = 4000)
    public void test155179() throws Throwable {
        Node node0 = new Node(93);
        IR.caseNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test156180() throws Throwable {
        Node node0 = new Node(96);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test157181() throws Throwable {
        Node node0 = new Node(97);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test158182() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.hook(node0, node0, node0);
        IR.forNode(node0, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test159183() throws Throwable {
        Node node0 = new Node(99);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test160184() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.or(node0, node0);
        Node node2 = IR.exprResult(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test160185() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.or(node0, node0);
        Node node2 = IR.exprResult(node1);
        node1.isOr();
    }

    @Test(timeout = 4000)
    public void test160186() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.or(node0, node0);
        Node node2 = IR.exprResult(node1);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test161187() throws Throwable {
        Node node0 = new Node(101);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test162188() throws Throwable {
        Node node0 = new Node(102);
        Node node1 = IR.or(node0, node0);
        node1.isOr();
    }

    @Test(timeout = 4000)
    public void test163189() throws Throwable {
        Node node0 = new Node(103);
        Node node1 = IR.getelem(node0, node0);
        node1.isGetElem();
    }

    @Test(timeout = 4000)
    public void test164190() throws Throwable {
        Node node0 = new Node(104);
        IR.returnNode(node0);
    }

    @Test(timeout = 4000)
    public void test165191() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = IR.exprResult(node0);
        node1.isExprResult();
    }

    @Test(timeout = 4000)
    public void test166192() throws Throwable {
        Node node0 = new Node(106);
        IR.getelem(node0, node0);
    }

    @Test(timeout = 4000)
    public void test167193() throws Throwable {
        Node node0 = new Node(107);
        IR.forNode(node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test168194() throws Throwable {
        Node node0 = new Node(108);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test169195() throws Throwable {
        Node node0 = new Node(109);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test170196() throws Throwable {
        Node node0 = new Node(110);
        IR.forIn(node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test171197() throws Throwable {
        Node node0 = new Node(112);
        IR.exprResult(node0);
    }

    @Test(timeout = 4000)
    public void test172198() throws Throwable {
        Node node0 = new Node(113);
        IR.getelem(node0, node0);
    }

    @Test(timeout = 4000)
    public void test173199() throws Throwable {
        Node node0 = new Node(114);
        IR.add(node0, node0);
    }

    @Test(timeout = 4000)
    public void test174200() throws Throwable {
        Node node0 = new Node(119);
        IR.getelem(node0, node0);
    }

    @Test(timeout = 4000)
    public void test175201() throws Throwable {
        Node node0 = new Node(120);
        IR.or(node0, node0);
    }

    @Test(timeout = 4000)
    public void test176202() throws Throwable {
        Node node0 = new Node(121);
        IR.or(node0, node0);
    }

    @Test(timeout = 4000)
    public void test177203() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.voidNode(node0);
        node1.isVoid();
    }

    @Test(timeout = 4000)
    public void test177204() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.voidNode(node0);
        Node node2 = IR.not(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test177205() throws Throwable {
        Node node0 = IR.trueNode();
        Node node1 = IR.voidNode(node0);
        Node node2 = IR.not(node1);
        node2.isNot();
    }
}
