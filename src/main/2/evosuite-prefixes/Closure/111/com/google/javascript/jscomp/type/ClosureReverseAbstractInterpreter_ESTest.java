/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 06:51:33 GMT 2024
 */
package com.google.javascript.jscomp.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ClosureReverseAbstractInterpreter_ESTest extends ClosureReverseAbstractInterpreter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Node node0 = new Node(1313, 1313, 1313);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Node node0 = new Node(42);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = new Node(37, node0, node0, node0, node0, 4095, 53);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Node node0 = new Node(42);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = new Node(33);
        Node node2 = new Node(37, node1, node0, node0, node0, 4095, 53);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node2, (FlowScope) null, true);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Node node0 = new Node(1283);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = new Node(1283);
        Node node2 = new Node(37, node1, node0, node0, node0, 4095, 53);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        FlowScope flowScope0 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node2, (FlowScope) null, false);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Node node0 = new Node(44);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = new Node(33);
        Node node2 = new Node(37, node1, node0, node0, node0, 4095, 53);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        FlowScope flowScope0 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node2, (FlowScope) null, false);
    }
}
