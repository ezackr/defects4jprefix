/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 06:24:40 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("(9xCKB^l");
        Node node1 = new Node(27, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("(9xCKB^l");
        Node node1 = new Node(27, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.process((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("SeDZQ'/_>]");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Node node0 = Node.newString("FfecTU*\"$N;P");
        Compiler compiler0 = new Compiler();
        Node node1 = new Node(32, node0, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
        MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(symbolTable0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, memoizedScopeCreator0);
        nodeTraversal0.traverse(node1);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
        Node node0 = new Node((-1088));
        Node node1 = new Node(32, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node1, node1);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString(1518, "OBJECT_FUNCTION_TYPE");
        Node node1 = new Node(39, 14, 4);
        Node node2 = new Node(32, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'/9>]a", 1487, 1487);
        Node node1 = new Node(41, 14, 4);
        Node node2 = new Node(32, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        Node node0 = Node.newString("FfecTU*\"$N;P");
        Node node1 = new Node(26, node0, node0);
        Compiler compiler0 = new Compiler();
        Node node2 = new Node(32, node1, node1);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
        MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(symbolTable0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, memoizedScopeCreator0);
        nodeTraversal0.traverse(node2);
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString(2663, "OBJECT_FUNCTION_TYPE");
        Node node1 = new Node(47, 14, 4);
        Node node2 = new Node(32, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        nodeTraversal0.traverse(node2);
        node2.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber((-2.1474836415752614E9));
        Node node1 = new Node(29, node0, node0);
        foldConstants0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(130, 130, 130);
        Node node1 = new Node(29, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        foldConstants0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(2988);
        Node node1 = new Node(29, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node1, node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("[].join()");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("SeDZQ'/_>]");
        Node node1 = new Node(4, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        nodeTraversal0.traverse(node1);
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
        Node node0 = Node.newString("rSc{~h7|#8f3,=UYKt", (-3131), (-3131));
        Node node1 = Node.newString("rSc{~h7|#8f3,=UYKt", 49, 43);
        Node node2 = new Node(108, node0, node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(38, 5, 4095);
        node1.setType(13);
        Node node2 = new Node(98, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
        Node node0 = new Node(41, 41, 41);
        Node node1 = new Node(13, 26, 24);
        Node node2 = new Node(114, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(112, 112, 112);
        Node node1 = new Node(38, 5, 4095);
        Node node2 = new Node(101, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
        Node node0 = Node.newString("4Xh+i^B", (-3130), (-3130));
        Node node1 = Node.newString("4Xh+i^B", 15, (-3130));
        Node node2 = new Node(100, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString(33, "OBJECT_FUNCTION_TYPE");
        Node node1 = new Node(113, (-1853), 17);
        Node node2 = new Node(9, node1, node0);
        ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, externExportsPass0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
        node2.equals((Object) node1);
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        Node node0 = Node.newString("(.\"Amt5Vxa");
        Compiler compiler0 = new Compiler((PrintStream) null);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newString("(.\"Amt5Vxa");
        Node node2 = new Node(11, node1, node0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'1/_>]a", 2967, 2967);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = compiler0.parseSyntheticCode("SeZQ'1/_>]a", "jntkI:T3");
        Node node2 = new Node(18, node0, node0, node0, node1);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node((-2560), (-2560), (-2560));
        Node node1 = new Node((-2560), (-2560), (-2560));
        Node node2 = new Node(19, node0, node1);
        nodeTraversal0.traverse(node2);
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) null);
        MockPrintStream mockPrintStream0 = new MockPrintStream("SeZ!/_>]a");
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("SeZ!/_>]a");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newNumber(174.9);
        Node node2 = new Node(20, node0, node1);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node((-920));
        Node node1 = Node.newString("", 39, 19);
        Node node2 = new Node(37, node0, node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
        Node node0 = Node.newString("rSc{~h7|#8f3,=UYKt", (-3131), (-3131));
        Node node1 = Node.newString("rSc{~h7|#8f3,=UYKt", 49, 43);
        Node node2 = new Node(46, node0, node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test02627() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(1522);
        Node node1 = Node.newString("", 29, 39);
        Node node2 = new Node(86, node0, node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        nodeTraversal0.traverse(node2);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test02728() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SZQ'/_X>qk", 2970, 2970);
        Node node1 = new Node(46, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node2 = Node.newString("SZQ'/_X>qk");
        Node node3 = new Node(30, node2, node1);
        foldConstants0.visit(nodeTraversal0, node3, node2);
    }

    @Test(timeout = 4000)
    public void test02829() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("b+J%W");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test02930() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'1/_>]a", 1515, 1515);
        Node node1 = new Node(27, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node2 = Node.newString("SeZQ'1/_>]a");
        Node node3 = new Node(14, node1, node2);
        foldConstants0.visit(nodeTraversal0, node3, node1);
        node1.equals((Object) node0);
    }

    @Test(timeout = 4000)
    public void test03031() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node((-3107), (-3107), (-3107));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(1, 43, 64336);
        Node node2 = new Node(16, node0, node1);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test03132() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", (-1427), (-1427));
        Node node1 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", 45, 44);
        Node node2 = new Node(21, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test03233() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("com.googl.javascript.jscomFoldConsants", (-39), 4);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newString("com.googl.javascript.jscomFoldConsants", (-39), 4);
        Node node2 = new Node(22, node0, node1);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'K1/_>]a", 1541, 1541);
        Node node1 = new Node(39, 14, 4);
        Node node2 = new Node(23, node0, node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test03435() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(41, 41, 41);
        Node node1 = Node.newString("length");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node2 = new Node(24, node0, node0, node1, 1, 21);
        foldConstants0.visit(nodeTraversal0, node2, (Node) null);
    }

    @Test(timeout = 4000)
    public void test03536() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("join", 22, 22);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newString("join");
        Node node2 = new Node(14, node1, node0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test03637() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", (-1467), (-1467));
        Node node1 = Node.newString("com.google.jUvascript.jscomp.mozilla.rhino.ast.XmlMemberGet", 45, 44);
        Node node2 = new Node(16, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        node2.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test03738() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
        Node node0 = Node.newString("defineProperty", 2108, 113);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        Node node1 = Node.newString("defineProperty");
        Node node2 = new Node(15, node1, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test03839() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
        Node node0 = Node.newString("4Xh+i^B", 86, 86);
        Node node1 = Node.newString("4Xh+i^B", 11, 48);
        Node node2 = new Node(12, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test03940() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("Fractional bitwise operand: {0}", 2958, 2958);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newString("a");
        Node node2 = new Node(13, node1, node0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test04041() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
        Node node0 = Node.newString("rSJ{~h7|#8f3,=UYKt", (-3131), (-3131));
        Node node1 = Node.newString("rSJ{~h7|#8f3,=UYKt", 15, (-3131));
        Node node2 = new Node(45, node0, node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("join", 8, 8);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newString("join");
        Node node2 = new Node(49, node1, node0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test04243() throws Throwable {
        Node node0 = Node.newString("(.\"At5Vxa");
        Compiler compiler0 = new Compiler((PrintStream) null);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
        Node node1 = new Node(39, 13, 2);
        Node node2 = new Node(35, node0, node1);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test04344() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("lntbh", "lntbh");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldBlock(nodeTraversal0, node0, (Node) null);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test04345() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("lntbh", "lntbh");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldBlock(nodeTraversal0, node0, (Node) null);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test04446() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = new Node((-113), (-113), (-2197));
        Node node1 = new Node(49, node0, node0, node0);
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test04547() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(1791, 163, 1791);
        Node node1 = Node.newString(".Y7-UgWaG~\"");
        Node node2 = new Node(108, node0, node1);
        foldConstants0.visit((NodeTraversal) null, node2, node0);
    }

    @Test(timeout = 4000)
    public void test04648() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = new Node(41, 41, 41);
        Node node1 = new Node(46, 12, 0);
        Node node2 = new Node(21, node1, node0);
        foldConstants0.tryFoldHookIf(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test04749() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SDZQ'/_>", 2967, 2967);
        Node node1 = new Node(44, 22, 4095);
        ConstCheck constCheck0 = new ConstCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, constCheck0);
        Node node2 = compiler0.parseSyntheticCode("SDZQ'/_>", "SDZQ'/_>");
        Node node3 = new Node(23, node1, node0, node2, 4, 14);
        foldConstants0.tryMinimizeIf(nodeTraversal0, node3, node3);
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(41, 41, 41);
        Node node1 = Node.newString("length");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node2 = new Node(24, node0, node0, node1, 1, 21);
        foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test04951() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SDZQ'/_>", 2967, 2967);
        Node node1 = new Node(98, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test05052() throws Throwable {
        Node node0 = new Node(101);
        Node node1 = new Node(122);
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldAndOr((NodeTraversal) null, node0, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber(2.147483647E9);
        foldConstants0.tryFoldAndOr((NodeTraversal) null, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node(122);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05355() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'/9>]a", 1522, 1522);
        Node node1 = compiler0.parseTestCode("?Rc{wWA1#^(qW");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node1, node1);
    }

    @Test(timeout = 4000)
    public void test05456() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'1/_x]a");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(115, node0, node0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test05557() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'1/_>]a", 2967, 2967);
        Node node1 = new Node(116, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test05658() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SDZQ'/_>", 2967, 2967);
        Node node1 = new Node(98, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test05759() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber((-1630.0795702));
        foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node0, node0, node0);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test05860() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node(115);
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05961() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'/9>]a", 1522, 1522);
        Node node1 = new Node(14, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test06062() throws Throwable {
        Node node0 = Node.newString("z[");
        Node node1 = new Node(10, node0, node0);
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test06163() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber(32.0);
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06264() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(63, 63, 63);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newNumber((double) 4);
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test06365() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(33, 33, 33);
        Node node1 = Node.newNumber((double) 5);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node1, node0, node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test06466() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber(2.1474836484295316E9);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06567() throws Throwable {
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06668() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber(1149.304303);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06769() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber(2.147483647E9);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06870() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber(Double.NaN);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06871() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber(Double.NaN);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06972() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("SeZQ'1/_>]a", 1514, 1514);
        Node node1 = Node.newNumber((double) 41);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldShift(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test07073() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 2, 10, 7);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test07174() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        Node node0 = Node.newNumber(2.147483647232417E9, 2145563344, 37);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07175() throws Throwable {
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        Node node0 = Node.newNumber(2.147483647232417E9, 2145563344, 37);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07276() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber((-2.147483648E9));
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07277() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber((-2.147483648E9));
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07378() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber(1149.304303);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07379() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber(1149.304303);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07480() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("ZQ='/>");
        VarCheck varCheck0 = new VarCheck(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
        Node node1 = new Node(122, node0, node0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test07581() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("ZQ='/>");
        VarCheck varCheck0 = new VarCheck(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
        Node node1 = new Node(122, node0, node0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test07682() throws Throwable {
        Node node0 = Node.newString("t;Cz__(GQwz4CX#L*");
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = new Node(38, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test07783() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node((-2560), (-2560), (-2560));
        Node node1 = Node.newNumber((double) 0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test07884() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
        Node node0 = new Node(41, 41, 41);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test07985() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(63, 63, 63);
        Node node1 = new Node(42, 26, 1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test08086() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(1945, (-720), (-720));
        Node node1 = new Node(43);
        foldConstants0.tryFoldComparison((NodeTraversal) null, node0, node1, node1, node1);
    }

    @Test(timeout = 4000)
    public void test08187() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(100, 100, 100);
        Node node1 = new Node(44);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test08288() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("SeZQ'/9>]a");
        VarCheck varCheck0 = new VarCheck(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
        Node node1 = new Node(122, node0, node0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08389() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node(44);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08490() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("^");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = new Node(32, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node1);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test08591() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newNumber((-2.147483648E9));
        Node node1 = new Node(17);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test08692() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node((-2560), (-2560), (-2560));
        Node node1 = new Node(13, node0, node0, 45, 6);
        Node node2 = Node.newNumber((double) 0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node2, node2, node1);
    }

    @Test(timeout = 4000)
    public void test08793() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("ZQ'/>", "ZQ'/>");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(38, node0, node0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08894() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(33, 117, 33);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldStringIndexOf((NodeTraversal) null, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08995() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(33, 117, 33);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        node0.addChildrenToFront(node0);
        Node node1 = Node.newNumber(3964.0555515432616);
        foldConstants0.tryFoldStringIndexOf((NodeTraversal) null, node0, node0, node1, node0);
        node0.equals((Object) node1);
    }

    @Test(timeout = 4000)
    public void test09096() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(33, 33, 33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldStringJoin(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test09197() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(33, 33, 33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newString("N9ngth");
        foldConstants0.tryFoldStringJoin(nodeTraversal0, node1, node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test09298() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(63, 63, 63);
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test09399() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(63, 63, 63);
        Node node1 = Node.newNumber(31.366593364048605);
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test094100() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(63, 63, 63);
        Node node1 = Node.newNumber((double) (-3));
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test095101() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(63, 63, 63);
        node0.addChildToBack(node0);
        Node node1 = Node.newNumber(1.0);
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test096102() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(1643);
        foldConstants0.tryFoldGetProp((NodeTraversal) null, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test097103() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString((-3110), ":0c_", (-3110), 321);
        Node node1 = Node.newString("length");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, syntacticScopeCreator0);
        foldConstants0.tryFoldGetProp(nodeTraversal0, node1, node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test098104() throws Throwable {
        FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
        Node node0 = Node.newString("length");
        foldConstants0.tryFoldGetProp((NodeTraversal) null, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test099105() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = compiler0.parseTestCode("lntbh");
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test100106() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("", 2958, 2958);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = Node.newString("");
        Node node2 = new Node(5, node1, node0, node0, node0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test101107() throws Throwable {
        Node node0 = Node.newString("FfecT*rH\";");
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node1 = Node.newString("FfecT*rH\";");
        Node node2 = compiler0.parseTestCode("a");
        Node node3 = new Node(24, node2, node1, node0, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node3, node3);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test101108() throws Throwable {
        Node node0 = Node.newString("FfecT*rH\";");
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node1 = Node.newString("FfecT*rH\";");
        Node node2 = compiler0.parseTestCode("a");
        Node node3 = new Node(24, node2, node1, node0, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node3, node3);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test102109() throws Throwable {
        Node node0 = Node.newString("FfecT*rH\";");
        Node node1 = new Node(113, 1319, 12);
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node2 = Node.newString("FfecT*rH\";");
        Node node3 = compiler0.parseTestCode("a");
        Node node4 = new Node(24, node3, node2, node0, node1);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node4, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test102110() throws Throwable {
        Node node0 = Node.newString("FfecT*rH\";");
        Node node1 = new Node(113, 1319, 12);
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node2 = Node.newString("FfecT*rH\";");
        Node node3 = compiler0.parseTestCode("a");
        Node node4 = new Node(24, node3, node2, node0, node1);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node4, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test103111() throws Throwable {
        Node node0 = Node.newString("FfecTU*rH\"$;");
        Node node1 = new Node(12, 40, 9);
        Compiler compiler0 = new Compiler();
        VarCheck varCheck0 = new VarCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
        Node node2 = Node.newString("FfecTU*rH\"$;");
        Node node3 = new Node(19, node2, node1, node1, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node3, node2);
    }

    @Test(timeout = 4000)
    public void test104112() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'/9>]a", (-324), (-324));
        Node node1 = new Node(1, 14, 4);
        Node node2 = new Node(32, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test105113() throws Throwable {
        String string0 = "\\u";
        boolean boolean0 = FoldConstants.containsUnicodeEscape(string0);
    }

    @Test(timeout = 4000)
    public void test106114() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("SeZQ'K1/_>]a", 1541, 1541);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test107115() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = new Node(113, 3, 45);
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test108116() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(100, 100, 100);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test109117() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node(115);
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test110118() throws Throwable {
        Compiler compiler0 = new Compiler();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
        Node node0 = Node.newString("rSc{~h7|#8f3,=UYKt", (-3131), (-3131));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test111119() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newString("&vO6h,<6rU0", 44, 44);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("SDZQ'/_>", "VZU5wdj");
        Node node1 = compiler0.parse(jSSourceFile0);
        Node node2 = new Node(114, node0, node1);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test112120() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(100, 100, 100);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test113121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("rSJ{~h7|#8f3,=UYKt", (-3131), (-3131));
        Node node1 = new Node(101, node0, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryMinimizeCondition((NodeTraversal) null, node1, node0);
    }

    @Test(timeout = 4000)
    public void test114122() throws Throwable {
        Node node0 = Node.newString(26, "o@JM`jDY5xIu Dz-", 26, 26);
        Node node1 = new Node(26, node0, node0);
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test115123() throws Throwable {
        Node node0 = Node.newString("FfcU*$N;P", 26, 26);
        Node node1 = new Node(26, node0, node0);
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test115124() throws Throwable {
        Node node0 = Node.newString("FfcU*$N;P", 26, 26);
        Node node1 = new Node(26, node0, node0);
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test116125() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber(1.0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test117126() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(3, 12, 7);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = compiler0.parseTestCode("k>GZQ'/_>8");
        Node node2 = new Node(49, node0, node1, node1, 49, 10);
        foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node0);
    }
}
