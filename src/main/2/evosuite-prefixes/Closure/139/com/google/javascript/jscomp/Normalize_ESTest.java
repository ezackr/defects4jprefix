/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:32:50 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(117);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[1];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        node0.addChildrenToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ConcreteType$ConcreteAll");
        Node node1 = new Node(1, node0, node0, node0);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(38);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber(0.0, 184, 184);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        Node node1 = new Node(2290, node0, 10, 0);
        normalize_VerifyConstants0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("cm.google.aaschipt.jRcomp.Concreteype$CocreteAl");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("cm.google.aaschipt.jRcomp.Concreteype$CocreteAl");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse(node0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("SVA");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(121, 121, 121);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(122);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Concreteype$CocreteAll");
        Node node1 = new Node(105, node0, node0, node0);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(113);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(114);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(115, 115, 115);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(116);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(117);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(118);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        Node node1 = new Node(123, node0, node0, node0);
        node0.addChildrenToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(124);
        Node node1 = new Node(126, node0, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        node0.addChildrenToBack(node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        Node node1 = new Node(29, node0, node0, node0);
        node0.addChildrenToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(115);
        Node node1 = compiler0.parseTestCode("");
        node1.addChildrenToBack(node0);
        node0.addChildToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(118);
        Node node1 = compiler0.parseTestCode("The name ");
        node1.addChildrenToBack(node0);
        node0.addChildToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(118);
        Node node1 = compiler0.parseTestCode("");
        node1.addChildToFront(node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = new Node(105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0);
        normalize0.process(node0, node1);
    }
}
