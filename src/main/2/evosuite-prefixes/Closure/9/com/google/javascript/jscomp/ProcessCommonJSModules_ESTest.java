/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:56:16 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module.exports");
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module.exports", "module.exports");
        processCommonJSModules0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "f,W8ZN/2l");
        JSModule jSModule0 = processCommonJSModules0.getModule();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ".`Fc:3/aKaO9/");
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "./", ".`Fc:3/aKaO9/");
        node0.setSourceFileForTesting(".`Fc:3/aKaO9/");
        processCommonJSModules0.process(node0, node0);
        node0.isAssignAdd();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ProcessCommonJSModules.toModuleName("./F%c:73/aKO9/", "./F%c:73/aKO9/");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("../", "../");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("F%c:73/aKO9/", "F%c:73/aKO9/");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "HkKc^$d2>X_");
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "./");
        Node node1 = new Node(37, node0, node0, node0, 32, 4);
        processCommonJSModules0.process(node1, node1);
        node1.isTrue();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "compiler.date");
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "");
        Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
        node0.addChildrenToBack(node1);
        processCommonJSModules0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "compiler.date");
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "compiler.date", false);
        processCommonJSModules0.process(node0, node0);
        node0.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ".`Fc:3/aKaO9/");
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "exports", "./");
        processCommonJSModules0.process(node0, node0);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "HkKc^$d2>X_");
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "./");
        processCommonJSModules0.process(node0, node0);
        node0.setSourceFileForTesting("compiler.date");
        processCommonJSModules0.process(node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "HkKc^$d2>X_");
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "compiler.date", "./");
        processCommonJSModules0.process(node0, node0);
        node0.setSourceFileForTesting("compiler.date");
        processCommonJSModules0.process(node0, node0);
        compiler0.hasErrors();
    }
}
