/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:04:05 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RenameLabels_ESTest extends RenameLabels_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("com.google.javascript.jscomp.An7lzeNameReferences");
        Node node1 = new Node(126, node0, node0, node0);
        node0.addChildToBack(node1);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        renameLabels0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("");
        Node node1 = new Node(116, node0, node0, node0);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        renameLabels0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(117);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        renameLabels0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("com.google.javascript.jscomp.RenameLabels$1");
        Node node1 = new Node(116, node0, node0, node0);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        renameLabels0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
        renameLabels_ProcessLabels0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("M7Lx3:(Z\"u=BpYN\"d0?");
        Node node1 = new Node(126, node0, node0, node0);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        Node node2 = new Node(20, node1);
        renameLabels0.process(node2, node2);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("M7Lx3:(Z\"u=BpYN\"d0?");
        Node node1 = new Node(126, node0, node0, node0);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        Node node2 = new Node(20, node1);
        renameLabels0.process(node2, node2);
        node1.getChildCount();
    }
}
