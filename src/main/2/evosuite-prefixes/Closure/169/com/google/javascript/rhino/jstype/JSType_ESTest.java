/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:05:08 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JSType_ESTest extends JSType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderShallowEquality(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderShallowEquality(noResolvedType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "Not declared as a type name", 0, (-92));
        JSType.safeResolve(jSType0, simpleErrorReporter0, noResolvedType0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "Not declared as a type name", 0, (-92));
        JSType.safeResolve(jSType0, simpleErrorReporter0, noResolvedType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "Not declared as a type name", 0, (-92));
        JSType.safeResolve(jSType0, simpleErrorReporter0, noResolvedType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0027() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0028() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0029() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test00314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00415() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.getJSDocInfo();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.getJSDocInfo();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00417() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.getJSDocInfo();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00418() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.getJSDocInfo();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00519() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        String string0 = parameterizedType0.toDebugHashCodeString();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00520() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        String string0 = parameterizedType0.toDebugHashCodeString();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00521() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        String string0 = parameterizedType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test00622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isRegexpType();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00623() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isRegexpType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00624() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isRegexpType();
    }

    @Test(timeout = 4000)
    public void test00625() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isRegexpType();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00626() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isRegexpType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00727() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.collapseUnion();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00728() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.collapseUnion();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00729() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.collapseUnion();
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00730() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.collapseUnion();
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00731() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.collapseUnion();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00832() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isString();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00833() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isString();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00834() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isString();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00835() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isString();
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00836() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isString();
    }

    @Test(timeout = 4000)
    public void test00937() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isDateType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00938() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isDateType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00939() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isDateType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00940() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isDateType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test00941() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isDateType();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00942() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isDateType();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00943() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isDateType();
    }

    @Test(timeout = 4000)
    public void test01044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.toAnnotationString();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01045() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.toAnnotationString();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01046() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.toAnnotationString();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01047() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.toAnnotationString();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test01152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test01153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01255() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getTypesUnderEquality(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01256() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getTypesUnderEquality(enumElementType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01357() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNullable();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01358() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNullable();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01359() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNullable();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01360() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNullable();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01361() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test01462() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.canTestForEqualityWith(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01463() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.canTestForEqualityWith(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test01564() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01565() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test01566() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
        instanceObjectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01567() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
        instanceObjectType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test01568() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01569() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
        instanceObjectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01570() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
        instanceObjectType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01571() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isNominalConstructor();
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01672() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isArrayType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01673() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isArrayType();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01674() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test01675() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isArrayType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01676() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isArrayType();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01777() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
        instanceObjectType0.setValidator((Predicate<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test01878() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isBooleanValueType();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01879() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isBooleanValueType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01880() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isBooleanValueType();
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01881() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test01882() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isBooleanValueType();
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01883() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isBooleanValueType();
        nullType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01984() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01985() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        boolean boolean0 = jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test02086() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getDisplayName();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02087() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getDisplayName();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02088() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getDisplayName();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNumber();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNumber();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNumber();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test02293() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test02294() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test02296() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02398() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.isNamedType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02399() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.isNamedType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test023100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.isNamedType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test023101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.isNamedType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test023102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test024103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.matchConstraint(noResolvedType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test024104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.matchConstraint(noResolvedType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test024105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.matchConstraint(noResolvedType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test025106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesInt32Context();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test025107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesInt32Context();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test025108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesInt32Context();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test025109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test026110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        boolean boolean0 = jSType0.hasProperty("Not declared as a constructor");
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test026111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        boolean boolean0 = jSType0.hasProperty("Not declared as a constructor");
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test026112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        boolean boolean0 = jSType0.hasProperty("Not declared as a constructor");
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test026113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        boolean boolean0 = jSType0.hasProperty("Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test027114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isInstanceType();
        stringType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test027115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isInstanceType();
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test027116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isInstanceType();
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test027117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test028118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isCheckedUnknownType();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test028119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test029120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isTheObjectType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test029121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isTheObjectType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test029122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test029123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isTheObjectType();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test030124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.matchesUint32Context();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test030125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.matchesUint32Context();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test030126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.matchesUint32Context();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test031127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isEnumType();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test031128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isEnumType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test031129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isEnumType();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test031130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test032131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isInvariant(numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test032132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isInvariant(numberType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test032133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isInvariant(numberType0);
    }

    @Test(timeout = 4000)
    public void test032134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isInvariant(numberType0);
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test033135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test033136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.isNumberValueType();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test033137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.isNumberValueType();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test033138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.isNumberValueType();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test034139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        instanceObjectType0.forceResolve(simpleErrorReporter0, noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test035140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.clearResolved();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test035141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.clearResolved();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test035142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.clearResolved();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test036143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isFunctionPrototypeType();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test036144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isFunctionPrototypeType();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test036145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isFunctionPrototypeType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test036146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test037147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        String string0 = unionType0.toStringHelper(true);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test037148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        String string0 = unionType0.toStringHelper(true);
        unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test037149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        String string0 = unionType0.toStringHelper(true);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test037150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        String string0 = unionType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test038151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasDisplayName();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test038152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test039153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, noResolvedType0);
        boolean boolean0 = indexedType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test039154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, noResolvedType0);
        boolean boolean0 = indexedType0.hasDisplayName();
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test040155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test040156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test040157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test040158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test040159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test041160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noObjectType0, noObjectType0);
        parameterizedType0.getTypesUnderInequality(noObjectType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test041161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noObjectType0, noObjectType0);
        parameterizedType0.getTypesUnderInequality(noObjectType0);
        noObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test042162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test042163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
        boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(jSType_TypePair0.typeB);
    }

    @Test(timeout = 4000)
    public void test043164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rRM lu");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(parameterizedType0);
        boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(functionType0);
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test043165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rRM lu");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(parameterizedType0);
        boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(functionType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test043166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rRM lu");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(parameterizedType0);
        boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(functionType0);
    }

    @Test(timeout = 4000)
    public void test044167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStruct();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test044168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test044169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStruct();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test044170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStruct();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test045171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isStruct();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test045172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test046173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test046174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test046175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test046176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test047177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test047178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test047179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test047180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test048181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isDict();
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test048182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isDict();
        stringType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test048183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isDict();
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test048184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isDict();
    }

    @Test(timeout = 4000)
    public void test049185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test049186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
    }

    @Test(timeout = 4000)
    public void test050187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test050188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test050189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
    }

    @Test(timeout = 4000)
    public void test050190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test051191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test051192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
    }

    @Test(timeout = 4000)
    public void test051193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test051194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a constructor");
        boolean boolean0 = enumElementType0.isDict();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test052195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isGlobalThisType();
    }

    @Test(timeout = 4000)
    public void test052196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isGlobalThisType();
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test052197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isGlobalThisType();
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test052198() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isGlobalThisType();
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test053199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.toMaybeFunctionType((JSType) noResolvedType0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test054200() throws Throwable {
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test055201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 1, 0, 1);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, enumElementType0);
        boolean boolean0 = enumType0.isEnumType();
        enumType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test055202() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 1, 0, 1);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, enumElementType0);
        boolean boolean0 = enumType0.isEnumType();
        enumType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test055203() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 1, 0, 1);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, enumElementType0);
        boolean boolean0 = enumType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test055204() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 1, 0, 1);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, enumElementType0);
        boolean boolean0 = enumType0.isEnumType();
        enumType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test056205() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test056206() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(recordType0);
    }

    @Test(timeout = 4000)
    public void test057207() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = unknownType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test057208() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = unknownType0.isParameterizedType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test057209() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = unknownType0.isParameterizedType();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test057210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = unknownType0.isParameterizedType();
        unknownType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test058211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(parameterizedType0);
        boolean boolean0 = jSType_TypePair0.typeB.isParameterizedType();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test058212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(parameterizedType0);
        boolean boolean0 = jSType_TypePair0.typeB.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test059213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType.toMaybeParameterizedType((JSType) numberType0);
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test059214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType.toMaybeParameterizedType((JSType) numberType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test059215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType.toMaybeParameterizedType((JSType) numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test060216() throws Throwable {
        ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test061217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test061218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
        templateType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test062219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType.toMaybeTemplateType((JSType) voidType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test062220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType.toMaybeTemplateType((JSType) voidType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test062221() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType.toMaybeTemplateType((JSType) voidType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test063222() throws Throwable {
        TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test064223() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test064224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test065225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test065226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test065227() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test065228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test065229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test066230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test066231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test067232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        errorFunctionType0.setSource(node0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test067233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test067234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test067235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test067236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test067237() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test068238() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.differsFrom(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test068239() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.differsFrom(jSType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test068240() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.differsFrom(jSType0);
    }

    @Test(timeout = 4000)
    public void test068241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.differsFrom(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test069242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) instanceObjectType0.getNativeType(jSTypeNative0);
        instanceObjectType0.getGreatestSubtype(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test069243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) instanceObjectType0.getNativeType(jSTypeNative0);
        instanceObjectType0.getGreatestSubtype(errorFunctionType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test070244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(unknownType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test070245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(unknownType0);
    }

    @Test(timeout = 4000)
    public void test070246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(unknownType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test070247() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(unknownType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test071248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "sYVUyi'~~Yc", "Error", (-1189), (-1189));
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.differsFrom(namedType0);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test071249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "sYVUyi'~~Yc", "Error", (-1189), (-1189));
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.differsFrom(namedType0);
    }

    @Test(timeout = 4000)
    public void test071250() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "sYVUyi'~~Yc", "Error", (-1189), (-1189));
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.differsFrom(namedType0);
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test071251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "sYVUyi'~~Yc", "Error", (-1189), (-1189));
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.differsFrom(namedType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test072252() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.checkEquivalenceHelper(unknownType0, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test072253() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.checkEquivalenceHelper(unknownType0, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test072254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.checkEquivalenceHelper(unknownType0, true);
        unknownType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test072255() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.checkEquivalenceHelper(unknownType0, true);
    }

    @Test(timeout = 4000)
    public void test073256() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.differsFrom(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test073257() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.differsFrom(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test074258() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        InstanceObjectType instanceObjectType1 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        JSType jSType0 = instanceObjectType1.getGreatestSubtype(instanceObjectType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test074259() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        InstanceObjectType instanceObjectType1 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        JSType jSType0 = instanceObjectType1.getGreatestSubtype(instanceObjectType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test074260() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        InstanceObjectType instanceObjectType1 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        JSType jSType0 = instanceObjectType1.getGreatestSubtype(instanceObjectType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test074261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        InstanceObjectType instanceObjectType1 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        JSType jSType0 = instanceObjectType1.getGreatestSubtype(instanceObjectType0);
        instanceObjectType1.equals((Object) instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test075262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "CharMatcher.JAVA_ISO_CONTROL", "I<=o", 1, (-11));
        instanceObjectType0.getGreatestSubtype(namedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test075263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "CharMatcher.JAVA_ISO_CONTROL", "I<=o", 1, (-11));
        instanceObjectType0.getGreatestSubtype(namedType0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test076264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test076265() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType0);
    }

    @Test(timeout = 4000)
    public void test076266() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test076267() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test076268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test077269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, noType0);
        ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(recordType0, indexedType0);
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test077270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, noType0);
        ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(recordType0, indexedType0);
        objectType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test077271() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, noType0);
        ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(recordType0, indexedType0);
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test077272() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, noType0);
        ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(recordType0, indexedType0);
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test078273() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(parameterizedType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test078274() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test079275() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.checkEquivalenceHelper(noResolvedType0, true);
    }

    @Test(timeout = 4000)
    public void test079276() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.checkEquivalenceHelper(noResolvedType0, true);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test080277() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        errorFunctionType0.getTypesUnderEquality(proxyObjectType0);
        proxyObjectType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test080278() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        errorFunctionType0.getTypesUnderEquality(proxyObjectType0);
        proxyObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test080279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        errorFunctionType0.getTypesUnderEquality(proxyObjectType0);
        proxyObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test080280() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        errorFunctionType0.getTypesUnderEquality(proxyObjectType0);
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test081281() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("Unknown class name", "Not declared as a type name", 1, 0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test081282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("Unknown class name", "Not declared as a type name", 1, 0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test081283() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("Unknown class name", "Not declared as a type name", 1, 0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test082284() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test083285() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
        boolean boolean0 = JSType.isEquivalent(errorFunctionType0, (JSType) null);
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test083286() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
        boolean boolean0 = JSType.isEquivalent(errorFunctionType0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test083287() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
        boolean boolean0 = JSType.isEquivalent(errorFunctionType0, (JSType) null);
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test083288() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
        boolean boolean0 = JSType.isEquivalent(errorFunctionType0, (JSType) null);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test083289() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
        boolean boolean0 = JSType.isEquivalent(errorFunctionType0, (JSType) null);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test084290() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType.isEquivalent(numberType0, numberType0);
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test084291() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType.isEquivalent(numberType0, numberType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test084292() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType.isEquivalent(numberType0, numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test085293() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test085294() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
    }

    @Test(timeout = 4000)
    public void test086295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.equals(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test086296() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.equals(noResolvedType0);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test087297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.findPropertyType("");
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test087298() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.findPropertyType("");
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test087299() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        allType0.findPropertyType("");
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test088300() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.findPropertyType("Named type with empty name component");
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test088301() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.findPropertyType("Named type with empty name component");
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test088302() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.findPropertyType("Named type with empty name component");
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test089303() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.canAssignTo(stringType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test089304() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.canAssignTo(stringType0);
    }

    @Test(timeout = 4000)
    public void test090305() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.canAssignTo(noResolvedType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test090306() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.canAssignTo(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test091307() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        ObjectType objectType0 = jSType0.dereference();
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test091308() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        ObjectType objectType0 = jSType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test091309() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        ObjectType objectType0 = jSType0.dereference();
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test091310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        ObjectType objectType0 = jSType0.dereference();
    }

    @Test(timeout = 4000)
    public void test092311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test092312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test092313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test092314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test093315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        noResolvedType0.getTypesUnderInequality(instanceObjectType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test094316() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
        AllType allType0 = new AllType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.testForEqualityHelper(allType0, errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test094317() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
        AllType allType0 = new AllType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.testForEqualityHelper(allType0, errorFunctionType0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test095318() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
        instanceObjectType0.getTypesUnderInequality(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test095319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
        instanceObjectType0.getTypesUnderInequality(noType0);
        noType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test096320() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderEquality(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test096321() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderEquality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test096322() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderEquality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test097323() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Wv+:b9hd?sO#");
        FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, false);
        errorFunctionType0.getTypesUnderEquality(functionType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test098324() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getTypesUnderEquality(stringType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test099325() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.getTypesUnderInequality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test099326() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CONSTRUCTOR");
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        numberType0.getTypesUnderInequality(errorFunctionType0);
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test100327() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.getTypesUnderEquality(objectType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test101328() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Named type with empty name component");
        numberType0.getTypesUnderInequality(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test101329() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Named type with empty name component");
        numberType0.getTypesUnderInequality(enumElementType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test102330() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType0.testForEquality(jSType_TypePair0.typeB);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test102331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType0.testForEquality(jSType_TypePair0.typeB);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test102332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType0.testForEquality(jSType_TypePair0.typeB);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test102333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType0.testForEquality(jSType_TypePair0.typeB);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test103334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = allType0.canTestForShallowEqualityWith(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test103335() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = allType0.canTestForShallowEqualityWith(noObjectType0);
    }

    @Test(timeout = 4000)
    public void test104336() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test104337() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noObjectType0);
    }

    @Test(timeout = 4000)
    public void test105338() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        parameterizedType0.getLeastSupertype(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test105339() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        parameterizedType0.getLeastSupertype(noResolvedType0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test106340() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType1 = noResolvedType0.getLeastSupertype(jSType0);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test106341() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType1 = noResolvedType0.getLeastSupertype(jSType0);
    }

    @Test(timeout = 4000)
    public void test106342() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType1 = noResolvedType0.getLeastSupertype(jSType0);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test106343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType1 = noResolvedType0.getLeastSupertype(jSType0);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test107344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NoResolvedType noResolvedType1 = (NoResolvedType) JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) noResolvedType0);
        noResolvedType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test107345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NoResolvedType noResolvedType1 = (NoResolvedType) JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) noResolvedType0);
        noResolvedType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test108346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NoResolvedType noResolvedType1 = (NoResolvedType) JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) noResolvedType0);
        noResolvedType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test108347() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NoResolvedType noResolvedType1 = (NoResolvedType) JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) noResolvedType0);
        noResolvedType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test109348() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
        boolean boolean0 = jSType0.canTestForShallowEqualityWith(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test109349() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
        boolean boolean0 = jSType0.canTestForShallowEqualityWith(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test110350() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(jSType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test110351() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(jSType0);
    }

    @Test(timeout = 4000)
    public void test110352() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(jSType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test110353() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(jSType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test110354() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test111355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a constructor");
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Number");
        errorFunctionType0.getTypesUnderEquality(enumElementType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test112356() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, (String) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test112357() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, (String) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test113358() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Not declared as a constructor");
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test113359() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Not declared as a constructor");
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test114360() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) stringType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test114361() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) stringType0);
        stringType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test115362() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
        JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test115363() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Named type with empty name component");
        JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) enumElementType0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test116364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test116365() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test116366() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType jSType0 = unknownType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test117367() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "EvalError", "EvalError", (-1571), 1347);
        JSType jSType0 = namedType0.getReferencedType();
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test117368() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "EvalError", "EvalError", (-1571), 1347);
        JSType jSType0 = namedType0.getReferencedType();
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test117369() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "EvalError", "EvalError", (-1571), 1347);
        JSType jSType0 = namedType0.getReferencedType();
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test117370() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "EvalError", "EvalError", (-1571), 1347);
        JSType jSType0 = namedType0.getReferencedType();
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test117371() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "EvalError", "EvalError", (-1571), 1347);
        JSType jSType0 = namedType0.getReferencedType();
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.equals((Object) jSType0);
    }

    @Test(timeout = 4000)
    public void test118372() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test118373() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test118374() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
        JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test119375() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderInequality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test119376() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderInequality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test119377() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderInequality(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test119378() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        jSType0.getTypesUnderInequality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test120379() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test120380() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test120381() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test120382() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test120383() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test120384() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test121385() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(numberType0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test121386() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(numberType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test121387() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(numberType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test121388() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(numberType0);
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test121389() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(numberType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test122390() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test122391() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test122392() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test122393() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test123394() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = JSType.isSubtypeHelper(noResolvedType0, instanceObjectType0);
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test123395() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = JSType.isSubtypeHelper(noResolvedType0, instanceObjectType0);
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test123396() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = JSType.isSubtypeHelper(noResolvedType0, instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test123397() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = JSType.isSubtypeHelper(noResolvedType0, instanceObjectType0);
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test124398() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "^Q1;WEG'7H");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        parameterizedType0.defineProperty("zRK|=!X0y9*'/Lv*%~", parameterizedType0, true, (Node) null);
        JSType.safeResolve(parameterizedType0, (ErrorReporter) null, errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test124399() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "^Q1;WEG'7H");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        parameterizedType0.defineProperty("zRK|=!X0y9*'/Lv*%~", parameterizedType0, true, (Node) null);
        JSType.safeResolve(parameterizedType0, (ErrorReporter) null, errorFunctionType0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test125400() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.safeResolve((JSType) null, simpleErrorReporter0, noResolvedType0);
        noResolvedType0.isResolved();
    }
}
