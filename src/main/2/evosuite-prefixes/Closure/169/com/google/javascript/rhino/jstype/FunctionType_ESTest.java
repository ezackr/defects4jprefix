/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:02:04 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.setDict();
        boolean boolean0 = errorFunctionType0.makesDicts();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.setDict();
        boolean boolean0 = errorFunctionType0.makesDicts();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.setDict();
        boolean boolean0 = errorFunctionType0.makesDicts();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "URI_ERROR_TYPE");
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, (JSType) null);
        modificationVisitor0.caseParameterizedType(parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        errorFunctionType0.getPropertyType("bind");
        errorFunctionType0.getPropertyType("bind");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.hasEqualCallType(errorFunctionType0);
        Node node0 = Node.newString(1, "Unknown class name");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, true, node0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.hasEqualCallType(errorFunctionType0);
        Node node0 = Node.newString(1, "Unknown class name");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
        functionType2.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
        functionType2.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isReturnTypeInferred();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00611() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=>A");
        boolean boolean0 = errorFunctionType0.isInstanceType();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00612() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=>A");
        boolean boolean0 = errorFunctionType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test00713() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.canBeCalled();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00714() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test00815() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString(105, "[ LvD<Pvb~r=u=vE");
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("#HD", node0);
        functionType0.getParameters();
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test00916() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getExtendedInterfacesCount();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01017() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getOwnImplementedInterfaces();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getSubTypes();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        Node node0 = Node.newString("Unknown class name");
        jSTypeRegistry0.createConstructorType("ecH$MO", node0, node0, (JSType) stringType0);
    }

    @Test(timeout = 4000)
    public void test01320() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        Node node0 = Node.newString("Unknown class name");
        Node node1 = new Node(105, node0, node0, node0, node0);
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("ecH$MO", node1, node0, (JSType) stringType0);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01321() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        Node node0 = Node.newString("Unknown class name");
        Node node1 = new Node(105, node0, node0, node0, node0);
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("ecH$MO", node1, node0, (JSType) stringType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test01422() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((-1495.975472109649));
        FunctionType.forInterface(jSTypeRegistry0, "): ", node0);
    }

    @Test(timeout = 4000)
    public void test01523() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test01624() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Unknown class name");
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) instanceObjectType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) enumElementType0, (ObjectType) functionType0, (ObjectType) functionType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        noResolvedType0.getAllImplementedInterfaces();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01725() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.makesStructs();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01726() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesStructs();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test01828() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test01929() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.setStruct();
        boolean boolean0 = errorFunctionType0.makesStructs();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01930() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.setStruct();
        boolean boolean0 = errorFunctionType0.makesStructs();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01931() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.setStruct();
        boolean boolean0 = errorFunctionType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test02032() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "]^Wi<X");
        errorFunctionType0.makesDicts();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        errorFunctionType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test02133() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesDicts();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test02134() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesDicts();
    }

    @Test(timeout = 4000)
    public void test02235() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test02236() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02337() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.hasImplementedInterfaces();
        noResolvedType0.setImplicitPrototype(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test02438() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test02439() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test02540() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test02541() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test02642() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.Collections2");
        int int0 = errorFunctionType0.getMinArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02643() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.Collections2");
        int int0 = errorFunctionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test02744() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test02745() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMinArguments();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02846() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getPropertyType("");
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test02847() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getPropertyType("");
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test02848() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getPropertyType("");
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02949() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Bad type annotation. Unknown type ", (Node) null);
        int int0 = functionType0.getMaxArguments();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02950() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Bad type annotation. Unknown type ", (Node) null);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test03051() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        int int0 = errorFunctionType0.getMaxArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03052() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        int int0 = errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test03153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test03154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
        int int0 = functionType0.getMaxArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03255() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Gvind");
        errorFunctionType0.getPropertyType("prototype");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03356() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getAllImplementedInterfaces();
        noType0.getOwnPropertyNames();
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03457() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Set<String> set0 = noResolvedType0.getOwnPropertyNames();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test03458() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Set<String> set0 = noResolvedType0.getOwnPropertyNames();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03559() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = new Node(4207);
        boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
    }

    @Test(timeout = 4000)
    public void test03560() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = new Node(4207);
        boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03661() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
        functionType0.getTopMostDefiningType("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test03762() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, objectType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, objectType0);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03763() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, objectType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, objectType0);
        functionType0.setExtendedInterfaces(immutableList0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test03764() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, objectType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, objectType0);
        functionType0.setExtendedInterfaces(immutableList0);
        String string0 = functionType0.toDebugHashCodeString();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test03865() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        noResolvedType0.getAllImplementedInterfaces();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03966() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N/", (Node) null);
        functionType0.getAllImplementedInterfaces();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=>A");
        errorFunctionType0.getAllImplementedInterfaces();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04168() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0);
        functionType0.setImplementedInterfaces(immutableList0);
    }

    @Test(timeout = 4000)
    public void test04269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        functionType0.getAllExtendedInterfaces();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test04370() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
        noResolvedType0.setExtendedInterfaces(immutableList0);
    }

    @Test(timeout = 4000)
    public void test04471() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04572() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Gvind");
        errorFunctionType0.getPropertyType("apply");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04673() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType((-1953));
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType1 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
        functionType0.supAndInfHelper(functionType1, true);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04674() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType((-1953));
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType1 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
        functionType0.supAndInfHelper(functionType1, true);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test04775() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N]0UP&Uoex");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(1264);
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test04876() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(3761);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test04977() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", numberType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test05078() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        Node node0 = Node.newString(1, "prototype");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, true, node0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test05079() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        Node node0 = Node.newString(1, "prototype");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test05180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.supAndInfHelper(noResolvedType0, true);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test05281() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N/", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        JSType.getLeastSupertype((JSType) functionType0, (JSType) functionType1);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test05282() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N/", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        JSType.getLeastSupertype((JSType) functionType0, (JSType) functionType1);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test05283() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N/", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        JSType.getLeastSupertype((JSType) functionType0, (JSType) functionType1);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test05284() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N/", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        JSType.getLeastSupertype((JSType) functionType0, (JSType) functionType1);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test05385() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        linkedList0.add((JSType) instanceObjectType0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType0, (List<JSType>) linkedList0);
        JSType.getLeastSupertype(jSType0, (JSType) functionType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test05386() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        linkedList0.add((JSType) instanceObjectType0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType0, (List<JSType>) linkedList0);
        JSType.getLeastSupertype(jSType0, (JSType) functionType0);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test05487() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType1.getLeastSupertype(functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
        functionType2.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test05488() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType1.getLeastSupertype(functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
    }

    @Test(timeout = 4000)
    public void test05490() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType1.getLeastSupertype(functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test05491() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType1.getLeastSupertype(functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
        functionType2.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test05592() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test05593() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test05694() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    }

    @Test(timeout = 4000)
    public void test05695() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType2.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test05696() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        noResolvedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test05797() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) noResolvedType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) JSType.getLeastSupertype(jSType0, (JSType) noResolvedType0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test05798() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) noResolvedType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) JSType.getLeastSupertype(jSType0, (JSType) noResolvedType0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
    }

    @Test(timeout = 4000)
    public void test05899() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Unknown class name", 0, 0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) noResolvedType0, (List<JSType>) linkedList0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test058100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Unknown class name", 0, 0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) noResolvedType0, (List<JSType>) linkedList0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
    }

    @Test(timeout = 4000)
    public void test059101() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) numberType0, (JSType) functionType0, (JSType) functionType0);
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = (FunctionType) JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test059102() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) numberType0, (JSType) functionType0, (JSType) functionType0);
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = (FunctionType) JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
    }

    @Test(timeout = 4000)
    public void test059103() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) numberType0, (JSType) functionType0, (JSType) functionType0);
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = (FunctionType) JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test059104() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) numberType0, (JSType) functionType0, (JSType) functionType0);
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = (FunctionType) JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType2);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test060105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        JSType.getLeastSupertype((JSType) objectType0, (JSType) errorFunctionType0);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test061106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
        errorFunctionType0.supAndInfHelper(functionType0, false);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test062107() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        JSType.getLeastSupertype((JSType) functionType0, (JSType) objectType0);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test062108() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        JSType.getLeastSupertype((JSType) functionType0, (JSType) objectType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test063109() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("@", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        objectType0.canTestForShallowEqualityWith(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test064110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, noType0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype((JSType) functionType1, jSType0);
    }

    @Test(timeout = 4000)
    public void test064111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, noType0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype((JSType) functionType1, jSType0);
        jSType1.equals((Object) jSType0);
    }

    @Test(timeout = 4000)
    public void test064112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, noType0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype((JSType) functionType1, jSType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test064114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, noType0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype((JSType) functionType1, jSType0);
        jSType1.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test064115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, noType0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype((JSType) functionType1, jSType0);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test065116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType1, node0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType1, (List<JSType>) linkedList0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test065117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType1, node0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType1, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype(jSType0, (JSType) functionType1);
        boolean boolean0 = jSType0.isSubtype(jSType1);
    }

    @Test(timeout = 4000)
    public void test066118() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Wz}Dx\"liZ");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(0);
        functionType0.getSuperClassConstructor();
    }

    @Test(timeout = 4000)
    public void test067119() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        ObjectType objectType0 = FunctionType.getTopDefiningInterface(functionType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test068120() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = FunctionType.getTopDefiningInterface(noResolvedType0, "Named type with empty name component");
        objectType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test069121() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        functionType0.getTopMostDefiningType("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test070122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.setInstanceType(noResolvedType0);
        errorFunctionType0.getTopMostDefiningType("Unknown class name");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test071123() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getTopMostDefiningType("Named type with empty name component");
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test072124() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.checkFunctionEquivalenceHelper(noResolvedType0, false);
    }

    @Test(timeout = 4000)
    public void test073125() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("side_effect_flags", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test073126() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("side_effect_flags", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
        functionType2.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test074127() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("q]exQ", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
        String string0 = functionType1.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test075128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        jSTypeRegistry0.resolveTypesInScope(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test076129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType0, node0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        functionType0.setInstanceType(recordType0);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test077130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test078131() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test079132() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) immutableList0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test080133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        String string0 = errorFunctionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test081134() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0, false);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) prototypeObjectType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) immutableList0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test082135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("bind");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test082136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("bind");
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test083137() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test083138() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test084139() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        boolean boolean0 = functionType0.isSubtype(objectType0);
    }

    @Test(timeout = 4000)
    public void test084140() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        boolean boolean0 = functionType0.isSubtype(objectType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test085141() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        JSType jSType0 = errorFunctionType0.getPropertyType("bind");
        boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test085142() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        JSType jSType0 = errorFunctionType0.getPropertyType("bind");
        boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
    }

    @Test(timeout = 4000)
    public void test086143() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        functionType0.clearCachedValues();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test087144() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        functionType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test088145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        Node node0 = Node.newString("Not declared as a constructor", 1, 1);
        functionType0.setSource(node0);
    }

    @Test(timeout = 4000)
    public void test089146() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ",[|g]Dg{;i[zgT");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.getPropertyNode("Unknown class name");
        errorFunctionType0.setSource((Node) null);
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test090147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        noResolvedType0.getPrototype();
        noResolvedType0.setSource(node0);
        noResolvedType0.setSource(node0);
        node0.isVar();
    }

    @Test(timeout = 4000)
    public void test091148() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "_%^");
        errorFunctionType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
        noObjectType0.clearCachedValues();
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test092149() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) numberType0, true, jSTypeArray0);
        functionType0.clearCachedValues();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test093150() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("side_effect_flags", (Node) null);
        functionType0.setPrototypeBasedOn(functionType0);
        functionType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test093151() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("side_effect_flags", (Node) null);
        functionType0.setPrototypeBasedOn(functionType0);
        functionType0.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test093152() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("side_effect_flags", (Node) null);
        functionType0.setPrototypeBasedOn(functionType0);
        functionType0.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test094153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ";+z'*AZG[7#^=lM+");
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, (JSType) numberType0, (JSType) templateType0, (JSType) numberType0, jSType0, (JSType) templateType0, (JSType) templateType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "LAZY_NAMES");
        FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, true);
        boolean boolean0 = functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test095154() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.resolveInternal((ErrorReporter) null, (StaticScope<JSType>) null);
        errorFunctionType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test096155() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0);
        noResolvedType0.setResolvedTypeInternal(functionType0);
        functionType0.setImplementedInterfaces(immutableList0);
        functionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test096156() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0);
        noResolvedType0.setResolvedTypeInternal(functionType0);
        functionType0.setImplementedInterfaces(immutableList0);
        functionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test097157() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        String string0 = functionType0.toDebugHashCodeString();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test097158() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test098159() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test099160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, unknownType0, false);
        ImmutableList<String> immutableList0 = ImmutableList.of("Unknown class name", "Not declared as a type name", "CharMatcher.JAVA_DIGIT");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Unknown class name", (Node) null, arrowType0, unknownType0, immutableList0, false, true);
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[2] = (JSType) functionType0;
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        boolean boolean0 = functionType1.hasAnyTemplate();
    }

    @Test(timeout = 4000)
    public void test100161() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "?SWxAD3P+");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) templateType0, (JSType) recordType0, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype((JSType) recordType0, jSType0);
        jSType1.isNominalType();
    }
}
