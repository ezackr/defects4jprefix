/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:10:40 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UnionType_ESTest extends UnionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "'B.A49kwF(OM,Z18`");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
        jSType0.visit((Visitor<NoResolvedType>) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        boolean boolean0 = hashSet0.add(unionType0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        boolean boolean0 = unionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        hashSet0.add(jSType0);
        boolean boolean0 = unionType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.findPropertyType("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, jSType0, (JSType) nullType0, jSType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType1 = unionType0.findPropertyType("By}o#JAR-S3iQ;");
        jSType1.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        linkedHashSet0.add(noType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        boolean boolean0 = unionType0.canAssignTo(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        linkedHashSet0.add(noType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        boolean boolean0 = unionType0.canAssignTo(noType0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 0, 0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) namedType0, (JSType) booleanType0, (JSType) namedType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canAssignTo(booleanType0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) nullType0, (JSType) nullType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        ObjectType objectType0 = unionType0.dereference();
        objectType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) allType0, (JSType) allType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.testForEquality(unionType0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<NoObjectType> immutableList0 = ImmutableList.of((NoObjectType) noResolvedType0, (NoObjectType) noResolvedType0, (NoObjectType) noResolvedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        boolean boolean0 = unionType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        UnionType unionType1 = (UnionType) unionType0.getLeastSupertype(booleanType0);
        unionType1.getRestrictedUnion(unionType0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isDict();
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        linkedHashSet0.add(noType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        JSType jSType0 = unionType0.getLeastSupertype(noType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) unknownType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) unknownType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.getLeastSupertype(recordType0);
        jSType0.getDisplayName();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) noType0, (JSType) objectType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType1.meet(unionType0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        unionType0.meet(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unionType0, (JSType) errorFunctionType0, (JSType) unionType0, jSType0, jSType0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        UnionType unionType2 = new UnionType(jSTypeRegistry0, hashSet0);
        NoObjectType noObjectType0 = (NoObjectType) unionType2.meet(unionType1);
        noObjectType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = unionType0.meet(voidType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
        JSType jSType0 = unionType0.meet(booleanType0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) booleanType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType1.getLeastSupertype(unionType0);
        unionType1.equals((Object) unionType0);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        unionType1.getLeastSupertype(unionType0);
        unionType0.equals((Object) unionType1);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) noType0, (JSType) objectType0);
        NoType noType1 = new NoType(jSTypeRegistry0);
        linkedHashSet0.add(noType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType1.checkUnionEquivalenceHelper(unionType0, true);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.hasProperty("Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Vector<JSType> vector0 = new Vector<JSType>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        JSType jSType0 = unionType0.getRestrictedUnion(unionType0);
        vector0.add(jSType0);
        boolean boolean0 = unionType0.hasProperty("Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(allType0);
        boolean boolean0 = unionType0.contains(jSType_TypePair0.typeA);
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.contains(booleanType0);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        JSType jSType0 = unionType0.getRestrictedUnion(unionType0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<BooleanType> immutableList0 = ImmutableList.of(booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = unionType0.getRestrictedUnion(nullType0);
        jSType0.getDisplayName();
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        String string0 = jSType0.toAnnotationString();
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "brPi", 0, (-2199));
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) namedType0, (JSType) unionType0, (JSType) booleanType0, (JSType) namedType0, (JSType) namedType0, (JSType) booleanType0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList1);
        JSType jSType0 = unionType1.meet(unionType1);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseAllType();
        JSType jSType2 = unionType0.meet(jSType1);
        jSType2.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isString();
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(allType0);
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(booleanType0);
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) nullType0, (JSType) nullType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(unionType0);
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        unionType0.resolveInternal(simpleErrorReporter0, namedType0);
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        UnionType unionType1 = (UnionType) unionType0.getLeastSupertype(booleanType0);
        unionType1.resolveInternal(simpleErrorReporter0, namedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        UnionType unionType1 = (UnionType) unionType0.getLeastSupertype(booleanType0);
        unionType1.resolveInternal(simpleErrorReporter0, namedType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        String string0 = unionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false, false, false, false, false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        boolean boolean0 = unionType0.setValidator(predicate0);
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<NoObjectType> immutableList0 = ImmutableList.of((NoObjectType) noResolvedType0, (NoObjectType) noResolvedType0, (NoObjectType) noResolvedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        unionType0.collapseUnion();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 78, 0);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0, namedType0, namedType0, namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        JSType jSType0 = unionType0.collapseUnion();
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
        JSType jSType1 = jSType0.collapseUnion();
        jSType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test5860() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) booleanType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.collapseUnion();
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5961() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<BooleanType> immutableList0 = ImmutableList.of(booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        unionType0.matchConstraint(booleanType0);
        unionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test6062() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        boolean boolean0 = unionType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test6163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) templateType0, (JSType) templateType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.hasAnyTemplateInternal();
    }
}
