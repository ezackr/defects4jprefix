/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 02:54:56 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CrossModuleCodeMotion;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.StrictWarningsGuard;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSModule jSModule0 = new JSModule("k");
        arrayList0.add(jSModule0);
        ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList1, arrayList0, compilerOptions0);
        compiler0.parse();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSModule jSModule0 = new JSModule("k");
        arrayList0.add(jSModule0);
        ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList1, arrayList0, compilerOptions0);
        compiler0.parse();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("Recording function information");
        compiler0.toSource(jSModule0);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler0.toSource(compiler_CodeBuilder0, 67, (Node) null);
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[6];
        compiler0.init(jSSourceFileArray0, (JSModule[]) null, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.parse();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.parse();
        compiler0.check();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Level level0 = Level.INFO;
        Compiler.setLoggingLevel(level0);
        level0.getName();
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("W", "generateReport");
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(hashMap0, node0);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getPropertyMap();
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("");
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        Compiler.runCallableWithLargeStack((Callable<ReferenceCollectingCallback.ReferenceCollection>) null);
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        Compiler compiler0 = new Compiler();
        SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getExternsInOrder();
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionNames functionNames0 = new FunctionNames(compiler0);
        RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, functionNames0);
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceMap sourceMap0 = compiler0.getSourceMap();
    }

    @Test(timeout = 4000)
    public void test03436() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03537() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("qtAj'");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.getRoot();
    }

    @Test(timeout = 4000)
    public void test03638() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
    }

    @Test(timeout = 4000)
    public void test03739() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Missing BLOCK child.");
        JSModule[] jSModuleArray0 = new JSModule[0];
        compiler0.compile(jSSourceFile0, jSModuleArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test03840() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
        compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
    }

    @Test(timeout = 4000)
    public void test03941() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(true);
    }

    @Test(timeout = 4000)
    public void test04042() throws Throwable {
        Compiler compiler0 = null;
        compiler0 = new Compiler((ErrorManager) null);
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test04244() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
    }

    @Test(timeout = 4000)
    public void test04345() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test04446() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
    }

    @Test(timeout = 4000)
    public void test04547() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    }

    @Test(timeout = 4000)
    public void test04648() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test04749() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test04951() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test05052() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("qtAj'");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.toSource((Node) null);
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "generateReport";
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05255() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "generateReport";
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05356() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("KmG=~k9hU~asEGL]Thv", "KmG=~k9hU~asEGL]Thv");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        stack0.push(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("KmG=~k9hU~asEGL]Thv", "KmG=~k9hU~asEGL]Thv");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        stack0.push(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        MockFile mockFile0 = new MockFile("=`m");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(arrayList0, vector0, compilerOptions0);
        compiler0.parse();
        compiler0.compileModules(arrayList0, vector0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, false);
    }

    @Test(timeout = 4000)
    public void test05761() throws Throwable {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test05862() throws Throwable {
        Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test05963() throws Throwable {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test06064() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler compiler1 = new Compiler();
        PassConfig passConfig0 = compiler1.getPassConfig();
        compiler0.setPassConfig(passConfig0);
        compiler1.equals((Object) compiler0);
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test06266() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.parse();
        compiler0.check();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06367() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        compiler0.parse();
        compiler0.optimize();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06368() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        compiler0.parse();
        compiler0.optimize();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06469() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.stripTypePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes);
    }

    @Test(timeout = 4000)
    public void test06570() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("gv X");
        compiler0.startPass("gv X");
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        compiler0.stripCode(set0, set0, set0, set0);
    }

    @Test(timeout = 4000)
    public void test06671() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test06772() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test06873() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("parseInputs");
        compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06874() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("parseInputs");
        compiler0.areNodesEqualForInlining(node0, node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test06975() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Message missing required fields: ");
        compiler0.removeExternInput("<Any Type>");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07076() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Q85z9]");
        compiler0.newExternInput(">E{gdGICO");
    }

    @Test(timeout = 4000)
    public void test07177() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("=`m");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.newExternInput("=`m");
    }

    @Test(timeout = 4000)
    public void test07278() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("wK2giG\"L1<jo{)5FvB", "wK2giG\"L1<jo{)5FvB");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07379() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Q85z9]");
        MockFile mockFile0 = new MockFile("Q85z9]", "Q85z9]");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.replaceIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07480() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test07481() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test07482() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07583() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        defaultPassConfig0.makeTypeCheck(compiler0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07584() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        defaultPassConfig0.makeTypeCheck(compiler0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
    }

    @Test(timeout = 4000)
    public void test07685() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("KmG=~k9hU~asEGL]Thv", "KmG=~k9hU~asEGL]Thv");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07786() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        compilerOptions0.setManageClosureDependencies((List<String>) arrayList0);
        Node node0 = compiler0.parseInputs();
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        compilerOptions0.setManageClosureDependencies((List<String>) arrayList0);
        Node node0 = compiler0.parseInputs();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test07788() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        compilerOptions0.setManageClosureDependencies((List<String>) arrayList0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test07789() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        compilerOptions0.setManageClosureDependencies((List<String>) arrayList0);
        Node node0 = compiler0.parseInputs();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07890() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("l8Ez-N");
        Node node0 = compiler0.parseTestCode("l8Ez-N");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07891() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("l8Ez-N");
        Node node0 = compiler0.parseTestCode("l8Ez-N");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test07992() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("INTERNAL COMPILER ERROR.\nPlease report this problem.\n");
    }

    @Test(timeout = 4000)
    public void test08093() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("5y[6'{eJR.");
    }

    @Test(timeout = 4000)
    public void test08194() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("<V@U4^S&B+Eak8]P,");
        boolean boolean0 = compiler_CodeBuilder1.endsWith(">");
    }

    @Test(timeout = 4000)
    public void test08295() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("F0%>FX7T#");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("");
    }

    @Test(timeout = 4000)
    public void test08396() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(linkedList0, vector0, compilerOptions0);
        compiler0.parse();
        compiler0.optimize();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08497() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08498() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test08599() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        boolean boolean0 = compiler0.acceptEcmaScript5();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test085100() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        boolean boolean0 = compiler0.acceptEcmaScript5();
    }

    @Test(timeout = 4000)
    public void test086101() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        StrictWarningsGuard strictWarningsGuard0 = new StrictWarningsGuard();
        compilerOptions0.addWarningsGuard(strictWarningsGuard0);
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test086102() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        StrictWarningsGuard strictWarningsGuard0 = new StrictWarningsGuard();
        compilerOptions0.addWarningsGuard(strictWarningsGuard0);
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test087103() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("d6)y|.7g\"eSD3UU");
        CheckLevel checkLevel0 = CheckLevel.OFF;
        JSError jSError0 = JSError.make("d6)y|.7g\"eSD3UU", node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
        compiler0.report(jSError0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test088104() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("com.google.javascript.jscomp.mozilla.rhino.ast.ScriptNode", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test089105() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("%fRB4s");
        compiler0.getSourceLine("%fRB4s", 2);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test090106() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("gv X");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules((List<JSSourceFile>) null, (List<JSModule>) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test091107() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion("NDP7", 0);
    }

    @Test(timeout = 4000)
    public void test092108() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("");
        compiler0.getSourceRegion("", 25);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test092109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("");
        compiler0.getSourceRegion("", 25);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test093110() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.DefaultPassConfig$41");
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test094111() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test094112() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test094113() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test095114() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(linkedList0, vector0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test096115() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.DefaultPassConfig$41");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.DefaultPassConfig$41");
        CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
        jSModule0.addFirst(compilerInput0);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test097116() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test098117() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        compiler0.compileModules(stack0, vector0, compilerOptions0);
        compiler0.parse();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test098118() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        compiler0.compileModules(stack0, vector0, compilerOptions0);
        compiler0.parse();
        String string0 = compiler0.getAstDotGraph();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test099119() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("uOs}N");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }

    @Test(timeout = 4000)
    public void test100120() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("V<");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }
}
