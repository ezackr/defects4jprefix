/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:49:32 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.VariableMap;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.getCompiler();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner.main(stringArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        AbstractCommandLineRunner.createJsModules(list0, list0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        commandLineRunner0.setRunOptions(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AbstractCommandLineRunner.createJsModules((List<String>) null, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ArrayList<String> arrayList0 = new ArrayList<String>();
        AbstractCommandLineRunner.createJsModules(arrayList0, arrayList0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        AbstractCommandLineRunner.createJsModules(list0, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.add("EEBR:'TO('igowg`");
        AbstractCommandLineRunner.createJsModules(stack0, stack0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.add("%4,,:|, <l#'-o0`");
        AbstractCommandLineRunner.createJsModules(stack0, stack0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, (JSModule[]) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        JSModule[] jSModuleArray0 = new JSModule[1];
        AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.add("4,,:|, <l#'-o0`");
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers(stack0, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        AbstractCommandLineRunner.writeOutput((PrintStream) null, (Compiler) null, "com.google.common.base.CharMatcher$1", "com.google.common.base.CharMatcher$1", "jscompiler");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockPrintStream mockPrintStream0 = new MockPrintStream("v");
        AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, "'rBIUnjr/A", "com.google.javascript.jscomp.mozilla.rhino.ast.Yield", "v");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("EEBF:'6TO('igow+`");
        AbstractCommandLineRunner.writeOutput(mockPrintStream0, (Compiler) null, "EEBF:'6TO('igow+`", "EEBF:'6TO('igow+`", "EEBF:'6TO('igow+`");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        String[] stringArray0 = new String[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
        Compiler compiler0 = commandLineRunner0.createCompiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        Result result0 = compiler0.compileModules(stack0, vector0, compilerOptions0);
        JSModule[] jSModuleArray0 = new JSModule[0];
        int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.createCompiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Result result0 = compiler0.compileModules(stack0, vector0, compilerOptions0);
        Result result1 = new Result(result0.warnings, result0.errors, "t$1", (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, (String) null);
        commandLineRunner0.processResults(result1, (JSModule[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        String[] stringArray0 = new String[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "PN0oQ";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
        Compiler compiler0 = commandLineRunner0.createCompiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        Result result0 = compiler0.compileModules(stack0, vector0, compilerOptions0);
        JSModule[] jSModuleArray0 = new JSModule[0];
        Result result1 = new Result(result0.warnings, result0.errors, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, result0.sourceMap, (String) null);
        int int0 = commandLineRunner0.processResults(result1, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        String[] stringArray0 = new String[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.externExportsPath = "// Input %num%";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
        Compiler compiler0 = commandLineRunner0.createCompiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        Result result0 = compiler0.compileModules(stack0, vector0, compilerOptions0);
        JSModule[] jSModuleArray0 = new JSModule[0];
        Result result1 = new Result(result0.warnings, result0.errors, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, (String) null);
        int int0 = commandLineRunner0.processResults(result1, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        String[] stringArray0 = new String[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.externExportsPath = "";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
        Compiler compiler0 = commandLineRunner0.createCompiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        Result result0 = compiler0.compileModules(stack0, vector0, compilerOptions0);
        JSModule[] jSModuleArray0 = new JSModule[0];
        Result result1 = new Result(result0.warnings, result0.errors, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, (String) null);
        int int0 = commandLineRunner0.processResults(result1, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        String[] stringArray0 = new String[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "P/0oQ";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
        Compiler compiler0 = commandLineRunner0.createCompiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        Result result0 = compiler0.compileModules(stack0, vector0, compilerOptions0);
        JSModule[] jSModuleArray0 = new JSModule[0];
        Result result1 = new Result(result0.warnings, result0.errors, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, result0.sourceMap, (String) null);
        int int0 = commandLineRunner0.processResults(result1, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.add("");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineReplacements(stack0, compilerOptions0);
    }
}
