/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:04:32 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.RenamePrototypes;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RenamePrototypes_ESTest extends RenamePrototypes_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node[] nodeArray0 = new Node[1];
        Node node0 = new Node(64);
        nodeArray0[0] = node0;
        Node node1 = new Node(64, nodeArray0);
        Normalize.parseAndNormalizeTestCode(compiler0, "RenamePrototypes$1", "RenamePrototypes$1");
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
        renamePrototypes0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.SyntacticScopeCreator$1", "com.google.javascript.jscomp.SyntacticScopeCreator$1");
        renamePrototypes0.process(node0, node0);
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "om.oogle.javscp3.jscomp.Syntatic.cope8uato$1", "om.oogle.javscp3.jscomp.Syntatic.cope8uato$1");
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
        renamePrototypes0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node node0 = new Node(35);
        renamePrototypes0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node node0 = new Node(64, 64, 64);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("prototype");
        Node node1 = syntheticAst0.getAstRoot(compiler0);
        Node node2 = new Node(33, node0, node1, node1);
        renamePrototypes0.process(node2, node1);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
        VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, variableMap0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "yfxP5v?X'", "yfxP5v?X'");
        Node node1 = new Node(35, node0);
        renamePrototypes0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node node0 = new Node(64, 64, 64);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("prototype");
        Node node1 = syntheticAst0.getAstRoot(compiler0);
        Node node2 = new Node(33, node0, node1, node1);
        renamePrototypes0.process(node0, node2);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
        VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, variableMap0);
        Node node0 = Node.newNumber((double) 64, 27, 64);
        Node node1 = new Node(64, node0, node0, 8, 0);
        renamePrototypes0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Compiler compiler0 = new Compiler();
        TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
        VariableMap variableMap0 = VariableMap.fromMap(treeMap0);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, variableMap0);
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.SyntacticScopeCreator$1", "com.google.javascript.jscomp.SyntacticScopeCreator$1");
        Node node1 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.SyntacticScopeCreator$1");
        node1.addChildToBack(node0);
        renamePrototypes0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test99() throws Throwable {
        Compiler compiler0 = new Compiler();
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
        VariableMap variableMap0 = renamePrototypes0.getPropertyMap();
    }
}
