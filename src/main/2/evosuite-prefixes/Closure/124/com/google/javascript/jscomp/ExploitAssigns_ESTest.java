/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:33:14 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ExploitAssigns_ESTest extends ExploitAssigns_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Q=1*I");
        Node node1 = exploitAssigns0.optimizeSubtree(node0);
        node1.isLabel();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.googleommon.colect.Mult4maps$qustomSortedS=tMu.timap");
        Node node1 = exploitAssigns0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = Node.newString(4, "com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.oole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = new Node(33, node0, 47, 52);
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
        node2.isLabelName();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.oole.ommon.collect.Multimaps$qustomSortedS=tMultima", "com.oole.ommon.collect.Multimaps$qustomSortedS=tMultima");
        Node node1 = Node.newString(38, "com.oole.ommon.collect.Multimaps$qustomSortedS=tMultima");
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
        node2.isBlock();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = new Node(118, node0, 4095, 29);
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = new Node(98, node0, 4095, 29);
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
        node2.isAdd();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = new Node(100, node0, 39, 31);
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
        node2.isLabel();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = new Node(101, node0, 1, 53);
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.ommon.collei.Multimaps$qustomSortedS=tMultimap");
        Node node1 = new Node(108, node0, node0, node0, node0);
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
        node2.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.goole.ommon.collect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = new Node(86, node0, 2281, 2281);
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
        node2.getSourceOffset();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.ommon.colect.Multimaps$qustomSortedS=tMultimap");
        Node node1 = Node.newString("com.google.ommon.colect.Multimaps$qustomSortedS=tMultimap");
        node0.addChildToBack(node1);
        Node node2 = exploitAssigns0.optimizeSubtree(node0);
    }
}
