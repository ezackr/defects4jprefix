/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:44:05 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CoalesceVariableNames;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CoalesceVariableNames_ESTest extends CoalesceVariableNames_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) compiler0.parseTestCode("function(warning, expr) {}");
        CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler0, true);
        coalesceVariableNames0.process(scriptOrFnNode0, scriptOrFnNode0);
        scriptOrFnNode0.getSourceName();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function Jompiler_returnAr(JSCompiler_returnArg_value) {  return function() {return JSCompiler_rturArg_alue}}");
        CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler0, false);
        coalesceVariableNames0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function Jompiler_returnAr(JSCompiler_returnArg_value) {  return function() {return JSCompier_rturArg_alue}}");
        node0.setType(47);
        CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler0, true);
        coalesceVariableNames0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler0, true);
        Node node0 = compiler0.parseTestCode("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
        coalesceVariableNames0.process(node0, node0);
    }
}
