/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:13:01 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.InlineFunctions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SimpleFunctionAliasAnalysis;
import com.google.javascript.jscomp.SpecializeModule;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class InlineFunctions_ESTest extends InlineFunctions_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, true, true, true);
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        Node node1 = new Node(2, node0, node0);
        inlineFunctions0.process(node1, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, true, true, true);
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        Node node1 = new Node(2, node0, node0);
        inlineFunctions0.process(node1, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, true, true, true);
        JSModule jSModule0 = new JSModule("`7>");
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        InlineFunctions.Reference inlineFunctions_Reference0 = inlineFunctions0.new Reference((Node) null, jSModule0, functionInjector_InliningMode0, true);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        InlineFunctions inlineFunctions0 = null;
        inlineFunctions0 = new InlineFunctions((AbstractCompiler) null, (Supplier<String>) null, false, false, false);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Compiler compiler0 = new Compiler();
        InlineFunctions inlineFunctions0 = null;
        inlineFunctions0 = new InlineFunctions(compiler0, (Supplier<String>) null, false, false, false);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, true, true, true);
        Node node0 = compiler0.parseTestCode("function JSCompiler_sgt(JSCompiler_set_name) {  return function(JCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        node0.addChildToBack(node0);
        inlineFunctions0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, false, false, false);
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        inlineFunctions0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, true, true, true);
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        SimpleFunctionAliasAnalysis simpleFunctionAliasAnalysis0 = new SimpleFunctionAliasAnalysis();
        SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
        simpleFunctionAliasAnalysis0.analyze(simpleDefinitionFinder0);
        SpecializeModule.SpecializationState specializeModule_SpecializationState0 = new SpecializeModule.SpecializationState(simpleFunctionAliasAnalysis0);
        inlineFunctions0.enableSpecialization(specializeModule_SpecializationState0);
        inlineFunctions0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Node node0 = Node.newNumber((-73.57052081532619));
        InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(118, node0, node0, node0, node0, 2, 25);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(37, node0, node0, node0, node0, 47, 38);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Node node1 = new Node(0);
        Node node2 = new Node(37, node1, node0, node0, node1, 10, 0);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(38);
        Node node2 = new Node(35, node0, node0, node0, node1, 40, 34);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, false, false, false);
        inlineFunctions0.trimCanidatesUsingOnCost();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, false, false, false);
        inlineFunctions0.removeInlinedFunctions();
    }
}
