/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:40:56 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.Visitor;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectType_ESTest extends ObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", noResolvedType0, false, node0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", noResolvedType0, false, node0);
        noResolvedType0.setSource(node0);
        noResolvedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(recordType0);
        Node node0 = Node.newNumber((double) 1, 0, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Named type with empty name component", jSType0, true, node0);
        objectType_Property0.getSymbol();
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(recordType0);
        Node node0 = Node.newNumber((double) 1, 0, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Named type with empty name component", jSType0, true, node0);
        objectType_Property0.getSymbol();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "`ah9");
        Node node0 = errorFunctionType0.getParametersNode();
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Unknown class name", noResolvedType0, false, node0);
        objectType_Property0.getJSDocInfo();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Named type with empty name component", noResolvedType0, false, node0);
        objectType_Property0.setNode(node0);
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ";/.aW<kuR#");
        JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        jSType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        JSType jSType0 = indexedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "uiXP')&YDW`X-");
        JSType jSType0 = templateType0.getIndexType();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Unknown class name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, noResolvedType0);
        boolean boolean0 = enumType0.defineElement("Not declared as a type name", node0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        noResolvedType0.isSubtype(instanceObjectType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        templateType0.setPropertyJSDocInfo("com.google.javascript.rhino.jstype.ObjectType$Property", (JSDocInfo) null);
        templateType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isObject();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Set<String> set0 = recordType0.getPropertyNames();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "_=z:N&s]fL$eFK58");
        FunctionType functionType0 = templateType0.getOwnerFunction();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
        boolean boolean0 = templateType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        Node node0 = indexedType0.getRootNode();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "_.");
        boolean boolean0 = templateType0.removeProperty((String) null);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ")kx^$");
        Set<String> set0 = templateType0.getOwnPropertyNames();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "p");
        JSType jSType0 = templateType0.getParameterType();
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        noResolvedType0.setJSDocInfo(jSDocInfo0);
        JSDocInfo jSDocInfo1 = noResolvedType0.getJSDocInfo();
        jSDocInfo1.hasType();
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.clearCachedValues();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "FUNCTION");
        Iterable<ObjectType> iterable0 = templateType0.getCtorImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "/7An<47T", "/7An<47T", 2673, 2673);
        ObjectType objectType0 = FunctionType.getTopDefiningInterface(namedType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        JSDocInfo jSDocInfo0 = templateType0.getOwnPropertyJSDocInfo("Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, noResolvedType0, true);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(instanceObjectType0, arrowType0);
        parameterizedType0.visit((Visitor<ArrowType>) null);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "5JA\"Y<SMDg7mi|dsql", "5JA\"Y<SMDg7mi|dsql", 4945, 4945);
        boolean boolean0 = namedType0.isPropertyInExterns("5JA\"Y<SMDg7mi|dsql");
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        ObjectType objectType0 = templateType0.getTypeOfThis();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        String string0 = ObjectType.createDelegateSuffix("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
        Node node0 = indexedType0.getPropertyNode("Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ObjectType objectType0 = noType0.getParentScope();
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        ObjectType.Property objectType_Property0 = enumType0.getOwnSlot("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 41, 0);
        ObjectType.Property objectType_Property0 = namedType0.getOwnSlot("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        instanceObjectType0.getJSDocInfo();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newNumber((-480.954161), 0, 0);
        noResolvedType0.setPrototype(instanceObjectType0, node0);
        boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
        instanceObjectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newNumber((-480.954161), 0, 0);
        noResolvedType0.setPrototype(instanceObjectType0, node0);
        boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Unknown class name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "(", node0, noResolvedType0);
        String string0 = enumType0.getDisplayName();
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, (ObjectType) null, (JSType) null);
        String string0 = parameterizedType0.getNormalizedReferenceName();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Unknown class name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", node0, noResolvedType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, enumType0);
        boolean boolean0 = enumType0.canTestForEqualityWith(arrowType0);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Named type with empty name component", 1, 0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, noResolvedType0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, enumType0);
        proxyObjectType0.testForEquality(enumType0);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Named type with empty name component", 1, 0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, noResolvedType0);
        boolean boolean0 = noResolvedType0.defineInferredProperty("Not declared as a constructor", enumType0, node0);
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.findPropertyType("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.findPropertyType("3P");
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a constructor", 1, 0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Not declared as a type name", noResolvedType0, false, node0);
        boolean boolean1 = instanceObjectType0.defineProperty("Not declared as a type name", noResolvedType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        recordType0.getGreatestSubtypeHelper(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", node0, noResolvedType0);
        enumType0.getTypesUnderEquality(noResolvedType0);
        noResolvedType0.setImplicitPrototype(enumType0);
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineProperty("", noResolvedType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineProperty("", noResolvedType0, true, node0);
        ObjectType.Property objectType_Property0 = instanceObjectType0.getSlot("");
        objectType_Property0.getSourceFile();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test4752() throws Throwable {
        ObjectType.Property objectType_Property0 = new ObjectType.Property("_", (JSType) null, false, (Node) null);
        objectType_Property0.getSourceFile();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test4853() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, true, node0);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
    }

    @Test(timeout = 4000)
    public void test4854() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, true, node0);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
        objectType_Property1.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test4955() throws Throwable {
        ObjectType.Property objectType_Property0 = new ObjectType.Property("_", (JSType) null, true, (Node) null);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
    }

    @Test(timeout = 4000)
    public void test4956() throws Throwable {
        ObjectType.Property objectType_Property0 = new ObjectType.Property("_", (JSType) null, true, (Node) null);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test5057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Named type with empty name component", noResolvedType0, false, node0);
        objectType_Property0.isFromExterns();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test5158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType.Property objectType_Property0 = new ObjectType.Property((String) null, noResolvedType0, false, (Node) null);
        boolean boolean0 = objectType_Property0.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test5159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType.Property objectType_Property0 = new ObjectType.Property((String) null, noResolvedType0, false, (Node) null);
        boolean boolean0 = objectType_Property0.isFromExterns();
        objectType_Property0.isTypeInferred();
    }
}
