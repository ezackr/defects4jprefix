/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 03:58:39 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CheckAccessControls_ESTest extends CheckAccessControls_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.rhino.Node$FileLevelJsDocBuilder", "com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        checkAccessControls0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "(G)", "(G)");
        Node node1 = new Node(30, node0, node0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        checkAccessControls0.hotSwapScript(node1);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "(G)", "(G)");
        Node node1 = new Node(30, node0, node0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("(G)", jSType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        node1.setJSType(objectType0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        checkAccessControls0.hotSwapScript(node1);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("cmo3RMej$s6ri.lT=pahyLink,rDirWctedfr0k1");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        checkAccessControls0.hotSwapScript(node0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "(l)", "(l)");
        Node node1 = new Node(30, node0, node0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
        jSTypeNativeArray0[0] = jSTypeNative0;
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        node1.setJSType(jSType0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        checkAccessControls0.hotSwapScript(node1);
    }
}
