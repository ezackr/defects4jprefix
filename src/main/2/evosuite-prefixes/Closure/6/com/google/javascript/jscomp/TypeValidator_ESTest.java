/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:47:46 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingReturn;
import com.google.javascript.jscomp.CheckUnreachableCode;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ConvertToDottedProperties;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ExpandJqueryAliases;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.File;
import java.util.Comparator;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.Node$ObjectPropListItem");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.toSource(node0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, enumElementType0, node0, "h7>?\"}-#6j9~Mal[XL0");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("?", false);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, syntacticScopeCreator0);
        typeValidator0.expectValidTypeofName(nodeTraversal0, node0, "com.google.javascript.jscomp.WarningsGuard$Priority");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
        typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "0:,(");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("x");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.toSource(node0);
        InlineProperties inlineProperties0 = new InlineProperties(compiler0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, "");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, "");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        DiagnosticType diagnosticType0 = TypeCheck.DETERMINISTIC_TEST;
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
        String string0 = typeValidator_TypeMismatch0.toString();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
        NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.UNKNOWN;
        JSType jSType0 = nameReferenceGraph_Name0.getType();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("TVE)dNSVU+E70,(EqAS", node0, jSType0);
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, enumType0, "Unknown class name");
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("+;~j-`");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, "+;~j-`");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("+;~j-`");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, "+;~j-`");
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        typeValidator0.expectActualObject(nodeTraversal0, node0, enumType0, "Unknown class name");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        typeValidator0.expectAnyObject(nodeTraversal0, (Node) null, noObjectType0, "Not declared as a constructor");
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.Node$ObjectPropListItem");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.toSource(node0);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, (String) null);
        JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType1, "G\"PEOPtzn4<RY");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.Node$ObjectPropListItem");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.toSource(node0);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType jSType0 = jSTypeRegistry0.createNamedType("", (String) null, 31, (-4227));
        NoType noType0 = (NoType) jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, (String) null);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, noType0, (String) null);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("array access", "array access");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        typeValidator0.expectString((NodeTraversal) null, node0, jSType0, "");
        node0.isNew();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("ataqhTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectString((NodeTraversal) null, node0, functionType0, "Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        typeValidator0.expectNumber(nodeTraversal0, node0, noObjectType0, "kTn%Qo0e%m");
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        typeValidator0.expectNumber(nodeTraversal0, node0, noObjectType0, "kTn%Qo0e%m");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("b,oPC/3ow+$Q'33^B", "b,oPC/3ow+$Q'33^B");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, noObjectType0, "JSC_ILLEGAL_PROPERTY_ACCESS");
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, noObjectType0, "JSC_ILLEGAL_PROPERTY_ACCESS");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atachdTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "TightenTypes pass appears to be stuck in an infinite loop.");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.Node$ObjectPropListItem");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.toSource(node0);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, (String) null);
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.Node$ObjectPropListItem");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.toSource(node0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, "Not declared as a constructor");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, "Not declared as a constructor");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6=I");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, (String) null);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "Not declared as a type name", (JSType) null);
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.Node$ObjectPropListItem");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.toSource(node0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "'bmALTcySz=<uZ[k$@p", jSType0);
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("+;~j-`");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSType jSType0 = jSTypeRegistry0.createNamedType("+;~j-`", "+;~j-`", 54, 38);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "Not declared as a constructor", jSType0);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
        NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.UNKNOWN;
        JSType jSType0 = nameReferenceGraph_Name0.getType();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("TVE)dNSVU+E70,(EqAS", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, enumElementType0, "u#_Hk2N", enumType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2430() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
        NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.UNKNOWN;
        JSType jSType0 = nameReferenceGraph_Name0.getType();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("TVE)dNSVU+E70,(EqAS", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, enumElementType0, "u#_Hk2N", enumType0);
    }

    @Test(timeout = 4000)
    public void test2531() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("+;~j-`");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkUnreachableCode0);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "", jSType0);
    }

    @Test(timeout = 4000)
    public void test2632() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, jSType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
        NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.UNKNOWN;
        JSType jSType0 = nameReferenceGraph_Name0.getType();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("TVE)dNSVU+E70,(EqAS", node0, jSType0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, enumType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
        NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.UNKNOWN;
        JSType jSType0 = nameReferenceGraph_Name0.getType();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("TVE)dNSVU+E70,(EqAS", node0, jSType0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, enumType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        Comparator<JSType> comparator0 = (Comparator<JSType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeSet<JSType> treeSet0 = new TreeSet<JSType>(comparator0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
        doReturn(jSType0, jSType0).when(unionType0).autoboxesTo();
        doReturn(false).when(unionType0).canTestForShallowEqualityWith(any(com.google.javascript.rhino.jstype.JSType.class));
        doReturn(treeSet0).when(unionType0).getAlternates();
        doReturn(true).when(unionType0).isUnknownType();
        JSType jSType1 = modificationVisitor0.caseUnionType(unionType0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null, checkLevel0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType1, jSType1);
        node0.isVoid();
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        compiler0.getTypeValidator();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        Comparator<JSType> comparator0 = (Comparator<JSType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeSet<JSType> treeSet0 = new TreeSet<JSType>(comparator0);
        ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
        doReturn(jSType0, (JSType) null).when(unionType0).autoboxesTo();
        doReturn(false).when(unionType0).canTestForShallowEqualityWith(any(com.google.javascript.rhino.jstype.JSType.class));
        doReturn(treeSet0).when(unionType0).getAlternates();
        JSType jSType1 = modificationVisitor1.caseUnionType(unionType0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null, checkLevel0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType1, jSType1);
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6=I");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, (String) null);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, (JSType) null, jSType0, node0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, functionType1, (Node) null, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, jSType0);
        typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, jSType0, enumType0, node0, "");
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("array access", "array access");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, noObjectType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, noObjectType0, node0, "array access");
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3442() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("array access", "array access");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, noObjectType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, noObjectType0, node0, "array access");
    }

    @Test(timeout = 4000)
    public void test3543() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, (FunctionNames) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, recordFunctionInformation0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, "y5Iy^(%/_y@.");
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atachTo", "atachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, functionType1, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3645() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atachTo", "atachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, functionType1, "Not declared as a constructor");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3746() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("b,oPC/3ow+$Q'33^B");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("R(#Bd!_cFR]H_?j&9", node0, jSType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, jSType0, "|_");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3747() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("b,oPC/3ow+$Q'33^B");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("R(#Bd!_cFR]H_?j&9", node0, jSType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, jSType0, "|_");
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("%^m", node0, enumType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, enumType1, "Not declared as a constructor");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3849() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("%^m", node0, enumType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, enumType1, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3950() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
        JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType1, "");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3951() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
        JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType1, "");
    }

    @Test(timeout = 4000)
    public void test4052() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, functionType0, node0, 0);
    }

    @Test(timeout = 4000)
    public void test4153() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
        NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.UNKNOWN;
        JSType jSType0 = nameReferenceGraph_Name0.getType();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("TVE)dNSVU+E70,(EqAS", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, enumType0, enumElementType0, node0, 2983);
    }

    @Test(timeout = 4000)
    public void test4254() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, functionType0, "Named type with empty name component", functionType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4355() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType1, functionType0, "Named type with empty name component", functionType1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4456() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("+;~j`");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
        ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) enumType0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
    }

    @Test(timeout = 4000)
    public void test4557() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atchTo", "atchTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
        node0.isHook();
    }

    @Test(timeout = 4000)
    public void test4658() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, noObjectType0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, noObjectType0, enumType0);
    }

    @Test(timeout = 4000)
    public void test4759() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("attachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, jSType0);
    }

    @Test(timeout = 4000)
    public void test4860() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectCanCast(nodeTraversal0, node0, objectType0, enumType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4861() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectCanCast(nodeTraversal0, node0, objectType0, enumType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4962() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, noObjectType0);
        typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5063() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile(".");
        MockFile mockFile0 = new MockFile(".");
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        typeValidator0.getReadableJSTypeName(node0, true);
        CompilerInput compilerInput0 = new CompilerInput(sourceFile0, true);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
        doReturn((Iterable) null).when(unionType0).getAlternates();
        modificationVisitor0.caseUnionType(unionType0);
    }

    @Test(timeout = 4000)
    public void test5164() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile(".");
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CompilerInput compilerInput0 = new CompilerInput(sourceFile0, true);
        Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
        doReturn((JSType) null).when(scope_Var0).getType();
        doReturn((String) null).when(scope_Var0).toString();
        Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(".", compilerInput0, node0, node0, scope_Var0, "?", (JSType) null);
        scope_Var1.getName();
    }

    @Test(timeout = 4000)
    public void test5265() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atachTo", "atachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
        doReturn((Scope) null).when(scope_Var0).getScope();
        doReturn(jSType0).when(scope_Var0).getType();
        typeValidator0.expectUndeclaredVariable("", (CompilerInput) null, node0, node0, scope_Var0, "Unknown class name", jSType0);
    }

    @Test(timeout = 4000)
    public void test5366() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6=I");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
        TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        NoType noType0 = (NoType) jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, (String) null);
        typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, noType0);
        node0.isBreak();
    }

    @Test(timeout = 4000)
    public void test5467() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("atachTo");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) functionType0, jSTypeArray0);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, functionType1, "", functionType1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test5568() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        String string0 = typeValidator0.getReadableJSTypeName(node0, false);
    }

    @Test(timeout = 4000)
    public void test5669() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, jSType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        typeValidator0.setShouldReport(false);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, enumType0, "Unknown class name");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test5770() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        JSError jSError0 = JSError.make("duplicate", 8, 0, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, jSType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(compiler0);
    }

    @Test(timeout = 4000)
    public void test5871() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make("Unknown class name", (-432), (-2201), checkLevel0, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumType0, enumType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
    }

    @Test(timeout = 4000)
    public void test5972() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        jSTypeRegistry0.createEnumType("", node0, jSType0);
        TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
        UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
        doReturn((Iterable) null).when(unionType0).getAlternates();
        modificationVisitor0.caseUnionType(unionType0);
    }

    @Test(timeout = 4000)
    public void test6073() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make("Unknown class name", (-432), (-2201), checkLevel0, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumType1, enumType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumType1, enumType1, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
        typeValidator_TypeMismatch1.equals((Object) typeValidator_TypeMismatch0);
    }

    @Test(timeout = 4000)
    public void test6074() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make("Unknown class name", (-432), (-2201), checkLevel0, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumType1, enumType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumType1, enumType1, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    }

    @Test(timeout = 4000)
    public void test6175() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile(".");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        Node node0 = compiler0.parse(sourceFile0);
        ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make("Unknown class name", (-432), (-2201), checkLevel0, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumType1, enumType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumType0, enumType1, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    }
}
