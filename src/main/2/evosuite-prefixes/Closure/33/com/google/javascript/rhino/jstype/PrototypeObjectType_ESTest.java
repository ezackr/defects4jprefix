/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 01:27:14 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        errorFunctionType0.toStringHelper(false);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "W8%Q&dA}l\"6)L}yU1}(", unknownType0, false);
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[2] = (JSType) unknownType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, true, jSTypeArray0);
        boolean boolean0 = functionType0.matchesObjectContext();
        prototypeObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "W8%Q&dA}l\"6)L}yU1}(", unknownType0, false);
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[2] = (JSType) unknownType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, true, jSTypeArray0);
        boolean boolean0 = functionType0.matchesObjectContext();
        prototypeObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "W8%Q&dA}l\"6)L}yU1}(", unknownType0, false);
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[2] = (JSType) unknownType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, true, jSTypeArray0);
        boolean boolean0 = functionType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.canBeCalled();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.canBeCalled();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", errorFunctionType0, node0);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", errorFunctionType0, node0);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", errorFunctionType0, node0);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", errorFunctionType0, node0);
        int int0 = instanceObjectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        int int0 = instanceObjectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(47);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", functionType0, node0);
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(47);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", functionType0, node0);
        int int0 = instanceObjectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(47);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", functionType0, node0);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(47);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Named type with empty name component", functionType0, node0);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType) functionType0.findPropertyType("prototype");
        prototypeObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0720() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType) functionType0.findPropertyType("prototype");
    }

    @Test(timeout = 4000)
    public void test0721() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType) functionType0.findPropertyType("prototype");
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineDeclaredProperty("Not declared as a type name", noResolvedType0, (Node) null);
        boolean boolean1 = instanceObjectType0.defineDeclaredProperty("Not declared as a type name", noResolvedType0, (Node) null);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0823() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineDeclaredProperty("Not declared as a type name", noResolvedType0, (Node) null);
        boolean boolean1 = instanceObjectType0.defineDeclaredProperty("Not declared as a type name", noResolvedType0, (Node) null);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0824() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineDeclaredProperty("Not declared as a type name", noResolvedType0, (Node) null);
        boolean boolean1 = instanceObjectType0.defineDeclaredProperty("Not declared as a type name", noResolvedType0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test0926() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType0, (Node) null);
        hashMap0.putIfAbsent("DO_;u:me", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        functionType0.matchConstraint(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0927() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType0, (Node) null);
        hashMap0.putIfAbsent("DO_;u:me", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        functionType0.matchConstraint(recordType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1028() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ":6_)or3WKzv+g/!i*|~");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo(":6_)or3WKzv+g/!i*|~", jSDocInfo0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        boolean boolean0 = errorFunctionType0.defineProperty(":6_)or3WKzv+g/!i*|~", errorFunctionType0, false, node0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1029() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ":6_)or3WKzv+g/!i*|~");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo(":6_)or3WKzv+g/!i*|~", jSDocInfo0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        boolean boolean0 = errorFunctionType0.defineProperty(":6_)or3WKzv+g/!i*|~", errorFunctionType0, false, node0);
    }

    @Test(timeout = 4000)
    public void test1130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.base.CharMatcher$Or");
        errorFunctionType0.getPropertyNames();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, (Node) null);
        hashMap0.put(", ", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, recordType0, recordType0);
        Set<String> set0 = indexedType0.getOwnPropertyNames();
        recordType0.collectPropertyNames(set0);
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString("com.google.common.base.CharMatcher$And");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
        hashMap0.put("com.google.common.base.CharMatcher$And", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred("com.google.common.base.CharMatcher$And");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString("com.google.common.base.CharMatcher$And");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
        hashMap0.put("com.google.common.base.CharMatcher$And", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred("com.google.common.base.CharMatcher$And");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString("com.google.common.base.CharMatcher$And");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
        hashMap0.put("com.google.common.base.CharMatcher$And", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred("com.google.common.base.CharMatcher$And");
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred("Unknown class name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1436() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1437() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred("Unknown class name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1538() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Unknown class name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1539() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Unknown class name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1540() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1641() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.isPropertyInExterns("Named type with empty name component");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1642() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.isPropertyInExterns("Named type with empty name component");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1743() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.removeProperty("Not declared as a type name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1744() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.removeProperty("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test1745() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.removeProperty("Not declared as a type name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1846() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        boolean boolean0 = functionType0.removeProperty("Named type with empty name component");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1847() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        boolean boolean0 = functionType0.removeProperty("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test1948() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        errorFunctionType0.getPropertyNode("Not declared as a constructor");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2049() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ":6_)or3WKzv+g/!i*|~");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo(":6_)or3WKzv+g/!i*|~", jSDocInfo0);
        errorFunctionType0.getPropertyNode(":6_)or3WKzv+g/!i*|~");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        errorFunctionType0.getOwnPropertyJSDocInfo("t(etqKokI");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Unknown class name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2252() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Unknown class name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test2353() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.base.CharMatcher$Or");
        errorFunctionType0.setPropertyJSDocInfo("com.google.common.base.CharMatcher$Or", (JSDocInfo) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2354() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.base.CharMatcher$Or");
        errorFunctionType0.setPropertyJSDocInfo("com.google.common.base.CharMatcher$Or", (JSDocInfo) null);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2455() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.base.CharMatcher$Or");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("com.google.common.base.CharMatcher$Or", jSDocInfo0);
        errorFunctionType0.setPropertyJSDocInfo("com.google.common.base.CharMatcher$Or", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2556() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        recordType0.setPropertyJSDocInfo("SP<ufA,)hesR@3", jSDocInfo0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2657() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2759() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2760() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test2861() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newNumber((double) 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2862() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newNumber((double) 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2963() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ";^_l/'rd^7lSV,");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, true);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2964() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ";^_l/'rd^7lSV,");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, true);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3065() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3066() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3371() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test3372() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3373() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3474() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3575() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3576() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3677() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "DO_;u:me");
        JSType jSType0 = errorFunctionType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3678() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "DO_;u:me");
        JSType jSType0 = errorFunctionType0.unboxesTo();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3779() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3780() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        recordType0.setOwnerFunction(noType0);
        String string0 = recordType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3881() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newString("Unknown class name", 1833, 0);
        instanceObjectType0.defineInferredProperty("Not declared as a constructor", noResolvedType0, node0);
        instanceObjectType0.defineDeclaredProperty("qu~fg,zBa@8ao", noResolvedType0, node0);
        instanceObjectType0.setPrettyPrint(true);
        instanceObjectType0.defineDeclaredProperty("Named type with empty name component", noResolvedType0, node0);
        instanceObjectType0.defineInferredProperty("]ZZ_n@.E9|>[h", noResolvedType0, node0);
        JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderInequality(noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineDeclaredProperty("x'OZ?;'~8+h9~M7>", jSType_TypePair0.typeB, node0);
    }

    @Test(timeout = 4000)
    public void test3882() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newString("Unknown class name", 1833, 0);
        instanceObjectType0.defineInferredProperty("Not declared as a constructor", noResolvedType0, node0);
        instanceObjectType0.defineDeclaredProperty("qu~fg,zBa@8ao", noResolvedType0, node0);
        instanceObjectType0.setPrettyPrint(true);
        instanceObjectType0.defineDeclaredProperty("Named type with empty name component", noResolvedType0, node0);
        instanceObjectType0.defineInferredProperty("]ZZ_n@.E9|>[h", noResolvedType0, node0);
        JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderInequality(noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineDeclaredProperty("x'OZ?;'~8+h9~M7>", jSType_TypePair0.typeB, node0);
        String string0 = instanceObjectType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3883() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newString("Unknown class name", 1833, 0);
        instanceObjectType0.defineInferredProperty("Not declared as a constructor", noResolvedType0, node0);
        instanceObjectType0.defineDeclaredProperty("qu~fg,zBa@8ao", noResolvedType0, node0);
        instanceObjectType0.setPrettyPrint(true);
        instanceObjectType0.defineDeclaredProperty("Named type with empty name component", noResolvedType0, node0);
        instanceObjectType0.defineInferredProperty("]ZZ_n@.E9|>[h", noResolvedType0, node0);
        JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderInequality(noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineDeclaredProperty("x'OZ?;'~8+h9~M7>", jSType_TypePair0.typeB, node0);
        String string0 = instanceObjectType0.toStringHelper(true);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test3984() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Not declared as a constructor", noResolvedType0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test3985() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineInferredProperty("Not declared as a constructor", noResolvedType0, (Node) null);
        instanceObjectType0.setPrettyPrint(true);
        String string0 = instanceObjectType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test4087() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty1);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty1);
        hashMap0.put("MC7E1F4:3", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test4189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(47);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        String string0 = instanceObjectType0.toStringHelper(true);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(47);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        String string0 = instanceObjectType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test4191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MC7E1KF4d3");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(47);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        String string0 = instanceObjectType0.toStringHelper(true);
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test4293() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.isSubtype(recordType0);
        recordType0.setImplicitPrototype(recordType0);
    }

    @Test(timeout = 4000)
    public void test4394() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
        boolean boolean0 = instanceObjectType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4395() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
        boolean boolean0 = instanceObjectType0.isSubtype(instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test4396() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
        boolean boolean0 = instanceObjectType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test4497() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "8LW*czlr|X");
        boolean boolean0 = errorFunctionType0.isString();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4498() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "8LW*czlr|X");
        boolean boolean0 = errorFunctionType0.isString();
    }

    @Test(timeout = 4000)
    public void test4599() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("}", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test45100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("}", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test45101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("}", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test46102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(",xPE6}rfyyD;=/~9)", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test46103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(",xPE6}rfyyD;=/~9)", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test47104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test47105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test47106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test48107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "?");
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
        errorFunctionType0.setOwnerFunction((FunctionType) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test49108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.setOwnerFunction(noResolvedType0);
        errorFunctionType0.setOwnerFunction(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test50109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.getCtorImplementedInterfaces();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test50110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.getCtorImplementedInterfaces();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test51111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "DO_;u:me");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("DO_;u:me", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test51112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "DO_;u:me");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("DO_;u:me", jSDocInfo0);
        JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test52113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "a");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
        instanceObjectType0.matchConstraint(errorFunctionType0);
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test52114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "a");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
        instanceObjectType0.matchConstraint(errorFunctionType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test53115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(108, 0, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("f@q?7H.}cJ>'Wpmq", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test53116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(108, 0, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("f@q?7H.}cJ>'Wpmq", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test53117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(108, 0, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("f@q?7H.}cJ>'Wpmq", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test54118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        noType0.matchConstraint(recordType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test54119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        noType0.matchConstraint(recordType0);
        recordType0.isNativeObjectType();
    }
}
