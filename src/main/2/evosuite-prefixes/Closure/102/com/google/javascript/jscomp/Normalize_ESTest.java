/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 06:00:42 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("UC_rmCBgM9:m9", "UC_rmCBgM9:m9");
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[1];
        JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        nodeTraversal0.traverse(node0);
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.CoscreteType$2", "com.google.javascript.jscomp.CoscreteType$2");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[1];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        Node node2 = new Node(44, node0, node1, node1, node0, (-2), 1);
        normalize0.process(node0, node1);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("hbF+UGzGr]f3sDiO%f", "hbF+UGzGr]f3sDiO%f");
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("hbF+UGzGr]f3sDiO%f", "hbF+UGzGr]f3sDiO%f");
        Node node1 = new Node(9, node0, node0, node0, 49, (-1349));
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        normalize_VerifyConstants0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_NON_INTERFACE", "JSC_IMPLEMENTS_NON_INTERFACE");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse(node0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) compiler0.parseSyntheticCode("r", "r");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse((Node) scriptOrFnNode0);
        scriptOrFnNode0.getParamCount();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("UC_rmCBgM9:m9", "UC_rmCBgM9:m9");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(113, nodeArray0);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_YON_INT/RqACE", "JSC_IMPLEMENTS_YON_INT/RqACE");
        Node node1 = new Node(105, node0, node0, node0, node0, 45, 10);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("UC_rmCM9:;m", "UC_rmCM9:;m");
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("UC_rmCBgM9:m9", "UC_rmCBgM9:m9");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
        nodeTraversal0.traverse(node0);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("Ui_rmC:gM9: 9", "Ui_rmC:gM9: 9");
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("8]gKKlWjxao%O,EWJ", "8]gKKlWjxao%O,EWJ");
        Node node1 = new Node(105, node0, node0, node0, node0, 35, 38);
        normalize0.process(node1, node1);
    }
}
