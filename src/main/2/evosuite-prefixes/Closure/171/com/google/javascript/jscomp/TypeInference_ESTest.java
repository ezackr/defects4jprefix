/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:16:23 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(100, node0, node0, 1, 2);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
        Node node1 = new Node(33, node0, node0, 47, 42);
        typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(29, node0, node0, (-1724), 30);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(101, node0, node0, 54, (-5291));
        typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        Node node1 = new Node(37, node0, node0, 1, 117);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.UNCOND;
        controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
        List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
        controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
        typeInference0.branchedFlowThrough(node0, flowScope0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
        controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
        typeInference0.branchedFlowThrough(node0, flowScope0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("o9sAs", "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(4, node0, node0, (-562), 51);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(5, node0, node0, 8, 43);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(8, node0, node0, 40, 38);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(12, node0, node0, 151, 49);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(15, node0, node0, 12, 57);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(16, node0, node0, 91, 50);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        Node node1 = new Node(17, node0, 31, (-2570));
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(19, node0, node0, 1, 53);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(21, node0, node0, 145, 2);
        typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(26, node0, node0, 48, 50);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(30, node0, node0, 2, 1);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(31, node0, node0, 56, (-3378));
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = Node.newString(32, "o9sAs");
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(35, node0, node0, 145, 2);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(36, node0, node0, 153, 2);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("o9sAs");
        CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
        ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", codingConvention_AssertionFunctionSpec0, "o9sAs", codingConvention_AssertionFunctionSpec1);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
        Node node1 = new Node(37, node0, node0, 47, 48);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createGlobalScope(node0);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = Node.newString(38, "Object#Element", 47, 4095);
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(39, node0, node0, 31, 0);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(40, node0, node0, 38, (-2199));
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(42, node0, node0, 51, 46);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(43, node0, node0, 47, 53);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(46, node0, node0, 55, 38);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(47, node0, node0, 15, 115);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(48, node0, node0, 47, 1);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(49, node0, node0, 36, 47);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(50, node0, node0, 4, 50);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(51, node0, node0, 55, 0);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(52, node0, node0, node0, node0);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(53, node0, node0, 2, 31);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(54, node0, node0, 43, 2);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(55, node0, node0, 156, 53);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(56, node0, node0, (-3294), 52);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(57, node0, node0, 4, 32);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(59, node0, node0, 1, 49);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = Node.newString(64, ",mg92+@ 28", 48, 126);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(65, node0, node0, 53, (-142));
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        Node node1 = new Node(66, node0, node0, 2443, 1);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(75, node0, node0, (-13), 140);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(81, node0, node0, 647, 2);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createGlobalScope(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        Node node1 = new Node(84, node0, node0, 2443, 1);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(96, node0, node0, 72, 144);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(106, node0, node0, 148, 4);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(107, node0, node0, (-1), 39);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        Node node1 = new Node(108, node0, node0, 400000, 31);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(109, node0, node0, 52, 2);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(110, node0, node0, 30, 3);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(111, node0, (-635), 55);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(112, node0, node0, 33, 532);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(113, nodeArray0);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createGlobalScope(node0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(114, node0, node0, 36, 69);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(115, node0);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(116, node0, node0, 116, 54);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(117, node0, node0, 135, 32);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(118, node0, node0, 12, 57);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(119, node0, node0, 4, 40);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(121, node0, node0, 12, 57);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(122, node0, node0, 2, 138);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(123, node0, node0, 12, 8);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(124, node0, node0, 43, 156);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        Node node1 = new Node(125, node0, node0, 43, 1004);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(126, node0, node0, 360, 0);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(127, node0, node0, 91, 48);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = Node.newString(128, ",mg92+@ 28", 15, 152);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(129, node0, node0, (-2125), 42);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(130, node0, node0, 12, 57);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(131, node0, node0, 54, 1599);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(133, node0, node0, 28, 114);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(134, node0, node0, 1238, 121);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(136, node0, node0, 12, 57);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(137, node0, node0, 43, 302);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(138, node0, node0, 1, 3027);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(139, node0, node0, 36, 4095);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(140, node0, node0, 12, 57);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(141, node0, node0, 53, 0);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test8383() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
        Node node1 = new Node(142, node0, node0, 906, 1);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test8484() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(143, node0, node0, 143, 54);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test8585() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(144, node0, node0, 2249, 12);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test8686() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(145, node0, node0, 109, 29);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test8787() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(147, node0, node0, 15, 0);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test8888() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createGlobalScope(node0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(148, node0, node0, 42, 2);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test8989() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(149, node0, node0, 107, 2);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test9090() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(150, node0, node0, 51, 57);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test9191() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(151, node0, node0, 54, (-544));
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test9292() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        Scope scope0 = Scope.createLatticeBottom(node0);
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(152, node0, node0, 137, 38);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test9393() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(153, node0, node0, 6080, 46);
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test9494() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(154, node0, node0, 1, 46);
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test9595() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sAs");
        Scope scope0 = Scope.createLatticeBottom(node0);
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        Node node1 = new Node(155, node0, node0, 36, (-2455));
        FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
    }

    @Test(timeout = 4000)
    public void test9696() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "prototype");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        Node node1 = new Node(4095, node0, node0, 32, 55);
        typeInference0.branchedFlowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test9797() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "o9sA2");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
        Scope scope0 = Scope.createLatticeBottom(node0);
        TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(4, nodeArray0);
        FlowScope flowScope0 = typeInference0.createEntryLattice();
        FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
    }

    @Test(timeout = 4000)
    public void test9898() throws Throwable {
        BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
        BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
    }

    @Test(timeout = 4000)
    public void test9999() throws Throwable {
        BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
        BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
    }
}
