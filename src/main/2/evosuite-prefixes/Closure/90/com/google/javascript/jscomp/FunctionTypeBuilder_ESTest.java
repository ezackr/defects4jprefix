/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 05:04:19 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9(GQMW*:PsNws|6F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9(GQMW*:PsNws|6F", compiler0, node0, "9(GQMW*:PsNws|6F", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("y*N");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a constructor", compiler0, node0, "Unknown class name", (Scope) null);
        JSType[] jSTypeArray0 = new JSType[2];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
        functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("y*N");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a constructor", compiler0, node0, "Unknown class name", (Scope) null);
        JSType[] jSTypeArray0 = new JSType[2];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
        functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9(GQMW*:PsNws|6F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9(GQMW*:PsNws|6F", compiler0, node0, "9(GQMW*:PsNws|6F", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:sNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:sNsP|F", compiler0, node0, "9i(GQMW*:sNsP|F", (Scope) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:sNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:sNsP|F", compiler0, node0, "9i(GQMW*:sNsP|F", (Scope) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
        functionType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("parameter {0} does not appear in {1}''s parameter list");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Unknown class name", compiler0, node0, "Not declared as a constructor", (Scope) null);
        JSType[] jSTypeArray0 = new JSType[2];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("y*N");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Unknown class name", compiler0, node0, "Unknown class name", (Scope) null);
        JSType[] jSTypeArray0 = new JSType[14];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("y*N");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Unknown class name", compiler0, node0, "Unknown class name", (Scope) null);
        JSType[] jSTypeArray0 = new JSType[14];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9(GQMW*:PsNws|6F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9(GQMW*:PsNws|6F", compiler0, node0, "9(GQMW*:PsNws|6F", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:PsNsP|F");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a constructor", compiler0, node0, "Named type with empty name component", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("parameter {0} does not appear in {1}''s parameter list", "parameter {0} does not appear in {1}''s parameter list");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("parameter {0} does not appear in {1}''s parameter list", compiler0, node0, "parameter {0} does not appear in {1}''s parameter list", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort((Node) null);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("\"");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("\"");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[8];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        MockFile mockFile0 = new MockFile("");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile((File) mockFile0);
        jSSourceFileArray0[4] = jSSourceFile1;
        jSSourceFileArray0[5] = jSSourceFile0;
        jSSourceFileArray0[6] = jSSourceFile0;
        jSSourceFileArray0[7] = jSSourceFile0;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
        FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("dLWcmJ;b'_r2f");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("dLWcmJ;b'_r2f", "dLWcmJ;b'_r2f");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        jSSourceFileArray0[0] = jSSourceFile0;
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("dLWcmJ;b'_r2f", compiler0, node0, "dLWcmJ;b'_r2f", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("P");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("P");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[8];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        MockFile mockFile0 = new MockFile("");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile((File) mockFile0);
        jSSourceFileArray0[4] = jSSourceFile1;
        jSSourceFileArray0[5] = jSSourceFile0;
        jSSourceFileArray0[6] = jSSourceFile0;
        jSSourceFileArray0[7] = jSSourceFile0;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "", (Scope) null);
        functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("\"");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("\"");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        Node node1 = Node.newNumber((double) 35);
        node0.addChildToBack(node1);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[8];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        MockFile mockFile0 = new MockFile("");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile((File) mockFile0);
        jSSourceFileArray0[4] = jSSourceFile1;
        jSSourceFileArray0[5] = jSSourceFile0;
        jSSourceFileArray0[6] = jSSourceFile0;
        jSSourceFileArray0[7] = jSSourceFile0;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("MAYBE_LIVE");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("MAYBE_LIVE", compiler0, node0, "MAYBE_LIVE", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:PsNsP|F");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:PsNsP|F", compiler0, node0, "9i(GQMW*:PsNsP|F", (Scope) null);
        functionTypeBuilder0.inferInheritance(jSDocInfo0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(QMT*:sNs|F");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(QMT*:sNs|F", compiler0, node0, "9i(QMT*:sNs|F", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:sNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:sNsP|F", compiler0, node0, "9i(GQMW*:sNsP|F", (Scope) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
        functionType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:sNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:sNsP|F", compiler0, node0, "9i(GQMW*:sNsP|F", (Scope) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:PsNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:PsNsP|F", compiler0, node0, "9i(GQMW*:PsNsP|F", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);
        functionType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:PsNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:PsNsP|F", compiler0, node0, "9i(GQMW*:PsNsP|F", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9(GQMW*:PsNws|6F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9(GQMW*:PsNws|6F", compiler0, node0, "9(GQMW*:PsNws|6F", (Scope) null);
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("CL72M*?Ot$2>`:qC", "CL72M*?Ot$2>`:qC");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("CL72M*?Ot$2>`:qC", compiler0, node0, "CL72M*?Ot$2>`:qC", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("4u9XDM");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("4u9XDM", compiler0, node0, "4u9XDM", (Scope) null);
        Node node1 = Node.newString(38, "4u9XDM", 48, 15);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node1);
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("CL72M*?Ot$2>`:qC", "CL72M*?Ot$2>`:qC");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("CL72M*?Ot$2>`:qC", compiler0, node0, "CL72M*?Ot$2>`:qC", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(")Zg.\u0007,6go'tp{", ")Zg.\u0007,6go'tp{");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(")Zg.\u0007,6go'tp{", compiler0, node0, ")Zg.\u0007,6go'tp{", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:PsNsP|F");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a constructor", compiler0, node0, "Named type with empty name component", (Scope) null);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[6];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node1);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
        functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(", ");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(", ", compiler0, node0, ", ", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("license");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("license", compiler0, node0, "license", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("y*N");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a constructor", compiler0, node0, "Unknown class name", (Scope) null);
        JSType[] jSTypeArray0 = new JSType[3];
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:sNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:sNsP|F", compiler0, node0, "9i(GQMW*:sNsP|F", (Scope) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        functionTypeBuilder1.buildAndRegister();
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:sNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:sNsP|F", compiler0, node0, "9i(GQMW*:sNsP|F", (Scope) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        functionTypeBuilder1.buildAndRegister();
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test2934() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("9i(GQMW*:sNsP|F");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("9i(GQMW*:sNsP|F", compiler0, node0, "9i(GQMW*:sNsP|F", (Scope) null);
        functionTypeBuilder0.buildAndRegister();
    }

    @Test(timeout = 4000)
    public void test3035() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
    }
}
