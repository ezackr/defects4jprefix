/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 03:41:50 GMT 2024
 */
package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Context context0 = new Context();
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
        Comment comment0 = new Comment(170, 100, token_CommentType0, "error reporter");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("N*/", 26, 1);
        ErrorReporter errorReporter0 = context0.getErrorReporter();
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "language version", config0, errorReporter0);
        boolean boolean0 = jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?|l9S_nv` 2");
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?|l9S_nv` 2");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?|l9S_nv` 2");
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?|l9S_nv` 2");
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", 140);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "error reporter", config0, errorCollector0);
        boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", 4, 170);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "error reporter", config0, errorCollector0);
        JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", (-1));
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "error reporter", config0, errorCollector0);
        jsDocInfoParser0.setFileLevelJsDocBuilder((Node.FileLevelJsDocBuilder) null);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", 4, 170);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "error reporter", config0, errorCollector0);
        jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("function (");
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("(Ljava/lang/Object;)Ljava/lang/String;");
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("(Ljava/lang/Object;)Ljava/lang/String;");
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("(Ljava/lang/Object;)Ljava/lang/String;");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", 4, 170);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "error reporter", config0, errorCollector0);
        JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        Locale locale0 = Locale.CANADA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("...", (-2934), (-2934));
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "this", config0, errorCollector0);
        jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
        Comment comment0 = new Comment(3, 100, token_CommentType0, "error reporter");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@*f;vS/\n", 100);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "error reporter", config0, toolErrorReporter0);
        boolean boolean0 = jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(3, 100, token_CommentType0, "error reporter");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*/\n", 0);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "language version", config0, toolErrorReporter0);
        boolean boolean0 = jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@yM@9Q`#H;");
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
        Comment comment0 = new Comment(20, 44, token_CommentType0, "@yM@9Q`#H;");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Set<String> set0 = jSDocInfo0.getSuppressions();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
        Context context0 = new Context();
        ErrorReporter errorReporter0 = context0.getErrorReporter();
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "?o9+]z]DP", config0, errorReporter0);
        boolean boolean0 = jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(3, 100, token_CommentType0, "error reporter");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*f/\n", 0);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "*f/\n", config0, toolErrorReporter0);
        boolean boolean0 = jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(">o\"x`yU9Adc'");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, ">o\"x`yU9Adc'", config0, (ErrorReporter) null);
        jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?78WR+|FT9TZN9||sB");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "?78WR+|FT9TZN9||sB", config0, errorCollector0);
        jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString(";#k$B_d.<?+fH96XCl`");
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString(";k$q_d.<[+tH96@l`");
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString(";k$q_d.<[+tH96@l`");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?=dzVY>,=H1");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?=dzVY>,=H1");
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?}[5");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?}[5");
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("!W(h4X(oh.5q");
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("!W(h4X(oh.5q");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("!W(h4X(oh.5q");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("{.0by`:^?");
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("otHZD^!zBKo");
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("otHZD^!zBKo");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("[*[GrEe{*4~");
    }

    @Test(timeout = 4000)
    public void test2435() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("null");
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("null");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("null");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2538() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("undefined");
    }

    @Test(timeout = 4000)
    public void test2539() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("undefined");
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test2540() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("undefined");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString(";\n");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test2642() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString(";\n");
    }

    @Test(timeout = 4000)
    public void test2643() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString(";\n");
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test2744() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("function");
    }

    @Test(timeout = 4000)
    public void test2845() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?78WR+|FT9TZN9 ||sB");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2846() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?78WR+|FT9TZN9 ||sB");
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test2847() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("?78WR+|FT9TZN9 ||sB");
    }

    @Test(timeout = 4000)
    public void test2948() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("X|x,d{S_5j'Tt");
    }

    @Test(timeout = 4000)
    public void test2949() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("X|x,d{S_5j'Tt");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2950() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("X|x,d{S_5j'Tt");
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test3051() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("U|[@CdN");
    }

    @Test(timeout = 4000)
    public void test3152() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("('`E[Q;K?c.l<l");
    }

    @Test(timeout = 4000)
    public void test3253() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString(" [JkFRWxG,6GAKJr3U");
    }

    @Test(timeout = 4000)
    public void test3354() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("{.oy`:?");
    }

    @Test(timeout = 4000)
    public void test3455() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("{tnb`,y}^6");
    }

    @Test(timeout = 4000)
    public void test3456() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("{tnb`,y}^6");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3457() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("{tnb`,y}^6");
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test3558() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("{");
    }

    @Test(timeout = 4000)
    public void test3659() throws Throwable {
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(3, 100, token_CommentType0, "error reporter");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*f/\n", 4, 2);
        jsDocTokenStream0.ungetChar(10);
        JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "*f/\n", config0, toolErrorReporter0);
        boolean boolean0 = jsDocInfoParser0.parse();
    }

    @Test(timeout = 4000)
    public void test3760() throws Throwable {
        Node node0 = JsDocInfoParser.parseTypeString("[\n\r]+");
    }
}
