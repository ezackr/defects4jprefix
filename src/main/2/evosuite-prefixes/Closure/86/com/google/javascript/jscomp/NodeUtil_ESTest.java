/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:50:36 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = Node.newString(125, "Infinity");
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(48, 48, 48);
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = new Node(202);
        boolean boolean0 = NodeUtil.containsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = new Node((-23));
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "TYPEOFNAME", 1953, 1953);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "TYPEOFNAME", 1953, 1953);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "TYPEOFNAME", 1953, 1953);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "TYPEOFNAME", 1953, 1953);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        NodeUtil.getPrototypePropertyName(node0);
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test00710() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test00811() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        boolean boolean0 = NodeUtil.containsCall(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test00812() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        boolean boolean0 = NodeUtil.containsCall(node0);
    }

    @Test(timeout = 4000)
    public void test00813() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        boolean boolean0 = NodeUtil.containsCall(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test00814() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        boolean boolean0 = NodeUtil.containsCall(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test00915() throws Throwable {
        Node node0 = new Node(75);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "0ZV.KdI.| }K1;", node0, "0ZV.KdI.| }K1;");
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test00916() throws Throwable {
        Node node0 = new Node(75);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "0ZV.KdI.| }K1;", node0, "0ZV.KdI.| }K1;");
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test01017() throws Throwable {
        Node node0 = new Node(103);
        NodeUtil.getArgumentForFunction(node0, 16);
    }

    @Test(timeout = 4000)
    public void test01118() throws Throwable {
        Node node0 = new Node(139);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newName(defaultCodingConvention0, "Infinity", node0, "C),$l_\"d_");
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
    }

    @Test(timeout = 4000)
    public void test01119() throws Throwable {
        Node node0 = new Node(139);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newName(defaultCodingConvention0, "Infinity", node0, "C),$l_\"d_");
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
        node1.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test01220() throws Throwable {
        NodeUtil.isVarArgsFunction((Node) null);
    }

    @Test(timeout = 4000)
    public void test01321() throws Throwable {
        NodeUtil.getNameReferenceCount((Node) null, "^);/s;8pz,S)(o.R!-");
    }

    @Test(timeout = 4000)
    public void test01422() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.getNodeTypeReferenceCount((Node) null, (-1548), compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test01523() throws Throwable {
        Node node0 = new Node(139);
        NodeUtil.getFunctionBody(node0);
    }

    @Test(timeout = 4000)
    public void test01624() throws Throwable {
        Node node0 = new Node((byte) 56);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test01725() throws Throwable {
        Node node0 = new Node(70);
        boolean boolean0 = NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test01826() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        Node node0 = new Node(97);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test02029() throws Throwable {
        Node node0 = Node.newString("Invalid attempt to remove node: ");
        node0.setType(26);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02130() throws Throwable {
        Node node0 = new Node(106, 106, 106);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02231() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02332() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02433() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02534() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02635() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 94, 67);
        NodeUtil.getBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02636() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 94, 67);
        NodeUtil.getBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02637() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 94, 67);
        NodeUtil.getBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02738() throws Throwable {
        Node node0 = Node.newNumber(1327.0);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02839() throws Throwable {
        Node node0 = Node.newString("com.gooBljavascript.jscomp.NodeUtil$La-clNameNode");
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02940() throws Throwable {
        Node node0 = new Node(41);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03041() throws Throwable {
        Node node0 = new Node(43, 43, 957);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03142() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03243() throws Throwable {
        Node node0 = Node.newString(63, "q", 63, 81);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03344() throws Throwable {
        Node node0 = new Node(64, 139, 64);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03445() throws Throwable {
        Node node0 = Node.newNumber(3430.058, 83, 83);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getBooleanValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03446() throws Throwable {
        Node node0 = Node.newNumber(3430.058, 83, 83);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getBooleanValue(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test03547() throws Throwable {
        Node node0 = Node.newString("", 36, 2);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03648() throws Throwable {
        Node node0 = Node.newNumber((double) 0);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03749() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "%L``MH#}$", (-55), 75);
        NodeUtil.getBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03750() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "%L``MH#}$", (-55), 75);
        NodeUtil.getBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test03751() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "%L``MH#}$", (-55), 75);
        NodeUtil.getBooleanValue(node0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test03852() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-299), 2761);
        NodeUtil.getBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03853() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-299), 2761);
        NodeUtil.getBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test03854() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-299), 2761);
        NodeUtil.getBooleanValue(node0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test03955() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 125, 125);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03956() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 125, 125);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test03958() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 125, 125);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04059() throws Throwable {
        Node node0 = new Node(41);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04160() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04261() throws Throwable {
        Node node0 = Node.newString(": ");
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04362() throws Throwable {
        Node node0 = new Node(43);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04463() throws Throwable {
        Node node0 = new Node(44);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04564() throws Throwable {
        Node node0 = new Node(122);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04665() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getStringValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04666() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getStringValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04667() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getStringValue(node0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test04668() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getStringValue(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test04769() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", (-3114), (-2128));
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04871() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ": ", (-808), (-808));
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04872() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ": ", (-808), (-808));
        String string0 = NodeUtil.getStringValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04873() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ": ", (-808), (-808));
        String string0 = NodeUtil.getStringValue(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test04974() throws Throwable {
        Node node0 = Node.newNumber((double) 40);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05075() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05076() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test05077() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05078() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05179() throws Throwable {
        Node node0 = new Node(41);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05280() throws Throwable {
        Node node0 = Node.newNumber(1119.29);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05381() throws Throwable {
        Node node0 = new Node(43);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05482() throws Throwable {
        Node node0 = new Node(44);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05583() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05585() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test05686() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getNumberValue(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test05687() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getNumberValue(node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test05688() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getNumberValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05689() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (-492), 5);
        NodeUtil.getNumberValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test05790() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", (-3114), (-2128));
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05892() throws Throwable {
        Node node0 = new Node(29, (-1183), 17);
        NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test05993() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05994() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test05995() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test05996() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test06097() throws Throwable {
        Node node0 = Node.newNumber((-793.7211632727933));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test06198() throws Throwable {
        Node node0 = Node.newString(": ");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test06299() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test063100() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("JSCompiler_renameProperty");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = new Node(43, node0, 2, 7);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test064101() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test065102() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test065103() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test066104() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "|", (byte) 59, (byte) 59);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test066105() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "|", (byte) 59, (byte) 59);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test066106() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "|", (byte) 59, (byte) 59);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test066107() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "|", (byte) 59, (byte) 59);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test067108() throws Throwable {
        Node node0 = new Node(47, 39, 24);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test068109() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test069110() throws Throwable {
        Node node0 = new Node(64, 139, 64);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test070111() throws Throwable {
        Node node0 = Node.newString(105, "\\f", 53, 53);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test071112() throws Throwable {
        Node node0 = Node.newString(105, "\\f", 0, 27);
        NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test072113() throws Throwable {
        Node node0 = new Node(9);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("8#$Z'_19/z");
        NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test073114() throws Throwable {
        Node node0 = Node.newString(10, "jsdoc_info");
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("jsdoc_info");
        NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test074115() throws Throwable {
        Node node0 = new Node(51);
        Node node1 = new Node(12, node0, node0);
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        JSModule jSModule0 = new JSModule("Infinity");
        List<String> list0 = jSModule0.getSortedDependencyNames();
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super String>) comparator0, (Collection<? extends String>) list0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, immutableSortedSet0);
    }

    @Test(timeout = 4000)
    public void test075116() throws Throwable {
        Node node0 = new Node(139);
        Node node1 = new Node(13, node0, node0, node0, node0);
        String[] stringArray0 = new String[1];
        stringArray0[0] = "O:[WD['*K[";
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf(stringArray0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, immutableSortedSet0);
    }

    @Test(timeout = 4000)
    public void test076117() throws Throwable {
        Node node0 = new Node(14);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("^=");
        NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test077118() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.gooljavascript.jscomp.Nodetil$La-clN!meNode", 123, 123);
        Node node1 = new Node(16, node0, node0, node0, node0);
        NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test078119() throws Throwable {
        Node node0 = Node.newString(20, "prototype", 20, 20);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test079120() throws Throwable {
        Node node0 = Node.newString("eject");
        Node node1 = new Node(22, node0, node0, 12, 4095);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test080121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", "com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
        Node node1 = new Node(26, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test081122() throws Throwable {
        Node node0 = Node.newString(30, "0usn(7|#DsAo~15LTG", 30, (-1175));
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("0usn(7|#DsAo~15LTG");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test082123() throws Throwable {
        Node node0 = new Node(32);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("replace");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test083124() throws Throwable {
        Node node0 = new Node(34);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("_00AGR]");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test084125() throws Throwable {
        Node node0 = new Node(36);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("_00[AR]");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test085126() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test085127() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test085128() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test085129() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 79, 79);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test086130() throws Throwable {
        Node node0 = new Node(41);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("TW;+");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test087131() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("_00[AR]");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test088132() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.of("<=", "<=", "<=", "<=", ">>>=");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
    }

    @Test(timeout = 4000)
    public void test089133() throws Throwable {
        Node node0 = new Node(46);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test090134() throws Throwable {
        Node node0 = Node.newNumber((-3872.0));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Node node2 = new Node(19, node0, node1, node1, node1, 29, 1);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node2, compilerOptions0.stripNamePrefixes);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test090135() throws Throwable {
        Node node0 = Node.newNumber((-3872.0));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Node node2 = new Node(19, node0, node1, node1, node1, 29, 1);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node2, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test091136() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", 38, 105);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of(": ");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test091137() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", 38, 105);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of(": ");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test091138() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", 38, 105);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of(": ");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test092139() throws Throwable {
        Node node0 = Node.newString(125, "Infinity");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test093140() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test094141() throws Throwable {
        Node node0 = new Node(9);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test095142() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    }

    @Test(timeout = 4000)
    public void test096143() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    }

    @Test(timeout = 4000)
    public void test097144() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    }

    @Test(timeout = 4000)
    public void test098145() throws Throwable {
        Node node0 = new Node(13);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test099146() throws Throwable {
        Node node0 = new Node(14, 14, 2297);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test100147() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
    }

    @Test(timeout = 4000)
    public void test101148() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
    }

    @Test(timeout = 4000)
    public void test102149() throws Throwable {
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test103150() throws Throwable {
        Node node0 = new Node(18);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test104151() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test105152() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test106153() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
    }

    @Test(timeout = 4000)
    public void test107154() throws Throwable {
        Node node0 = Node.newString("eject");
        Node node1 = new Node(22, node0, node0, 12, 4095);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test108155() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
    }

    @Test(timeout = 4000)
    public void test109156() throws Throwable {
        Node node0 = new Node(24);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test110157() throws Throwable {
        Node node0 = new Node(25);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test111158() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test112159() throws Throwable {
        Node node0 = new Node(27, 27, 27);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test113160() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    }

    @Test(timeout = 4000)
    public void test114161() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
    }

    @Test(timeout = 4000)
    public void test115162() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    }

    @Test(timeout = 4000)
    public void test116163() throws Throwable {
        Node node0 = new Node(31);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test117164() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test118165() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test119166() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test120167() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test121168() throws Throwable {
        Node node0 = new Node(36);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test122169() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    }

    @Test(timeout = 4000)
    public void test123170() throws Throwable {
        Node node0 = new Node(38);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    }

    @Test(timeout = 4000)
    public void test124171() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    }

    @Test(timeout = 4000)
    public void test125172() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(45);
    }

    @Test(timeout = 4000)
    public void test126173() throws Throwable {
        Integer integer0 = new Integer(46);
        Node node0 = new Node(46, (int) integer0, (int) integer0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test127174() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    }

    @Test(timeout = 4000)
    public void test128175() throws Throwable {
        Node node0 = new Node(48, 48, 48);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test129176() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    }

    @Test(timeout = 4000)
    public void test130177() throws Throwable {
        Node node0 = new Node(52, 87, 87);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test131178() throws Throwable {
        Node node0 = new Node(53);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test132179() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test133180() throws Throwable {
        Node node0 = new Node((byte) 55);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test134181() throws Throwable {
        Node node0 = new Node((byte) 57);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test135182() throws Throwable {
        Node node0 = new Node(58, 58, 58);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test136183() throws Throwable {
        Node node0 = new Node((byte) 59);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test137184() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(60);
    }

    @Test(timeout = 4000)
    public void test138185() throws Throwable {
        Node node0 = new Node(61);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test139186() throws Throwable {
        Node node0 = new Node((byte) 62);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test140187() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType((byte) 63);
    }

    @Test(timeout = 4000)
    public void test141188() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    }

    @Test(timeout = 4000)
    public void test142189() throws Throwable {
        Node node0 = new Node(65);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test143190() throws Throwable {
        Node node0 = new Node(66);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test144191() throws Throwable {
        Node node0 = new Node(67);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test145192() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test146193() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test147194() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test148195() throws Throwable {
        Node node0 = Node.newString(71, "<&q;iek,");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test149196() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test150197() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test151198() throws Throwable {
        Node node0 = new Node(74);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test152199() throws Throwable {
        Node node0 = new Node(75);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test153200() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test154201() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test155202() throws Throwable {
        Node node0 = new Node(78);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test156203() throws Throwable {
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test157204() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test158205() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test159206() throws Throwable {
        Node node0 = new Node(82, 82, 82);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test160207() throws Throwable {
        Node node0 = new Node(83);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test161208() throws Throwable {
        Node node0 = new Node(84);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test162209() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test163210() throws Throwable {
        Node node0 = new Node(87);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test164211() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test165212() throws Throwable {
        Node node0 = new Node(101);
        Node node1 = new Node(90, node0, node0, 20, 37);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test166213() throws Throwable {
        Node node0 = new Node(91, 91, 91);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test167214() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test168215() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test169216() throws Throwable {
        Node node0 = new Node(94);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test170217() throws Throwable {
        Node node0 = new Node(95, 95, 95);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test171218() throws Throwable {
        Node node0 = new Node(96);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test172219() throws Throwable {
        Node node0 = new Node(97);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test173220() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    }

    @Test(timeout = 4000)
    public void test174221() throws Throwable {
        Node node0 = new Node(99);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test175222() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    }

    @Test(timeout = 4000)
    public void test176223() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    }

    @Test(timeout = 4000)
    public void test177224() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test178225() throws Throwable {
        Node node0 = Node.newString(103, "Infinity");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test179226() throws Throwable {
        Node node0 = new Node(104, 114, 104);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test180227() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    }

    @Test(timeout = 4000)
    public void test181228() throws Throwable {
        Node node0 = new Node(106);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test182229() throws Throwable {
        Node node0 = new Node(107, 107, 107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test183230() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    }

    @Test(timeout = 4000)
    public void test184231() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test185232() throws Throwable {
        Node node0 = new Node(110, 153, 110);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test186233() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test187234() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test188235() throws Throwable {
        Node node0 = Node.newNumber((-794.7093588228437));
        Node node1 = new Node(115, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test189236() throws Throwable {
        Node node0 = new Node(108);
        node0.setType(116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test190237() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test191238() throws Throwable {
        Node node0 = new Node(118);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test192239() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test193240() throws Throwable {
        Node node0 = new Node(120, (-930), 836);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test194241() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test195242() throws Throwable {
        Node node0 = Node.newNumber((-3872.0));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test196243() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = new Node(31, node0, node0, node0, node0, 8, 16);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test197244() throws Throwable {
        Node node0 = new Node(32, 3155, 29);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test198245() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test199246() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test199247() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test199248() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test199249() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test200250() throws Throwable {
        Node node0 = new Node(38);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test201251() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test202252() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test203253() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test204254() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test205255() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test206256() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        node0.setType(47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test207257() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test208258() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test209259() throws Throwable {
        Node node0 = new Node((byte) 53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test210260() throws Throwable {
        Node node0 = new Node((byte) 56);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test211261() throws Throwable {
        Node node0 = new Node(61, 61, 61);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test212262() throws Throwable {
        Node node0 = new Node((byte) 63);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test213263() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test214264() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test215265() throws Throwable {
        Node node0 = new Node(71, 75, 75);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test216266() throws Throwable {
        Node node0 = new Node(75);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test217267() throws Throwable {
        Node node0 = new Node((byte) 77, (byte) 77, (byte) 77);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test218268() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test219269() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test220270() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test221271() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test222272() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test223273() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test224274() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test225275() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test226276() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test227277() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test228278() throws Throwable {
        Node node0 = new Node((-866));
        node0.setType(124);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test229279() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test230280() throws Throwable {
        Node node0 = new Node(67);
        node0.setType(126);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test231281() throws Throwable {
        Node node0 = new Node(128);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test232282() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test232283() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test233284() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test234285() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Node node1 = NodeUtil.newVarNode(")", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test234286() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Node node1 = NodeUtil.newVarNode(")", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test234287() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Node node1 = NodeUtil.newVarNode(")", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test234288() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Node node1 = NodeUtil.newVarNode(")", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test235289() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test236290() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test237291() throws Throwable {
        Node node0 = new Node(30);
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test238292() throws Throwable {
        Node node0 = new Node(86);
        Node node1 = new Node(2336, node0, 28, 86);
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test239293() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test240294() throws Throwable {
        Node node0 = new Node(36);
        NodeUtil.callHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test241295() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test241296() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test241297() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test241298() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ": ", (-808), 5);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test242299() throws Throwable {
        Node node0 = Node.newString(103, "Infinity");
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test243300() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
    }

    @Test(timeout = 4000)
    public void test244301() throws Throwable {
        Node node0 = Node.newString(31, "VxW<9bA{fRDlz_<");
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test245302() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test245303() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test245304() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test245305() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 46, 1697);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test246306() throws Throwable {
        Node node0 = Node.newString("0usn(7|#DsAo~15LTG", (-251), (-251));
        Node node1 = new Node(49, node0, node0, 25, 6);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1, (AbstractCompiler) null);
    }

    @Test(timeout = 4000)
    public void test247307() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
    }

    @Test(timeout = 4000)
    public void test248308() throws Throwable {
        Node node0 = new Node(43, 43, 957);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test249309() throws Throwable {
        Node node0 = new Node(30, 114, 30);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test250310() throws Throwable {
        Node node0 = new Node(33);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test251311() throws Throwable {
        Node node0 = new Node(37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test252312() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "%L``MH#}$", (-55), 75);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("%L``MH#}$", "(^&eerdSJv");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test252313() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "%L``MH#}$", (-55), 75);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("%L``MH#}$", "(^&eerdSJv");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test253314() throws Throwable {
        Node node0 = new Node(65);
        Node node1 = new Node(4, node0, node0, node0, node0, 0, 33);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    }

    @Test(timeout = 4000)
    public void test254315() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ";2&", (-1089), (-382));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    }

    @Test(timeout = 4000)
    public void test254316() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ";2&", (-1089), (-382));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test254317() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ";2&", (-1089), (-382));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test255318() throws Throwable {
        int int0 = NodeUtil.precedence(4);
    }

    @Test(timeout = 4000)
    public void test256319() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test257320() throws Throwable {
        NodeUtil.precedence(5);
    }

    @Test(timeout = 4000)
    public void test258321() throws Throwable {
        NodeUtil.precedence(6);
    }

    @Test(timeout = 4000)
    public void test259322() throws Throwable {
        NodeUtil.precedence(7);
    }

    @Test(timeout = 4000)
    public void test260323() throws Throwable {
        NodeUtil.precedence(8);
    }

    @Test(timeout = 4000)
    public void test261324() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test262325() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test263326() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test264327() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test265328() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test266329() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test267330() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test268331() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test269332() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test270333() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test271334() throws Throwable {
        int int0 = NodeUtil.precedence(19);
    }

    @Test(timeout = 4000)
    public void test272335() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test273336() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test274337() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test275338() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test276339() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test277340() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test278341() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test279342() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test280343() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test281344() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test282345() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test283346() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test284347() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test285348() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test286349() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test287350() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test288351() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test289352() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test290353() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test291354() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test292355() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test293356() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test294357() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test295358() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test296359() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test297360() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test298361() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 46);
    }

    @Test(timeout = 4000)
    public void test299362() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 47);
    }

    @Test(timeout = 4000)
    public void test300363() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test301364() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test302365() throws Throwable {
        int int0 = NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test303366() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test304367() throws Throwable {
        NodeUtil.precedence(53);
    }

    @Test(timeout = 4000)
    public void test305368() throws Throwable {
        NodeUtil.precedence((byte) 54);
    }

    @Test(timeout = 4000)
    public void test306369() throws Throwable {
        NodeUtil.precedence(55);
    }

    @Test(timeout = 4000)
    public void test307370() throws Throwable {
        NodeUtil.precedence(56);
    }

    @Test(timeout = 4000)
    public void test308371() throws Throwable {
        NodeUtil.precedence(57);
    }

    @Test(timeout = 4000)
    public void test309372() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test310373() throws Throwable {
        NodeUtil.precedence((byte) 59);
    }

    @Test(timeout = 4000)
    public void test311374() throws Throwable {
        NodeUtil.precedence((byte) 62);
    }

    @Test(timeout = 4000)
    public void test312375() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 63);
    }

    @Test(timeout = 4000)
    public void test313376() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test314377() throws Throwable {
        NodeUtil.precedence(66);
    }

    @Test(timeout = 4000)
    public void test315378() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test316379() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test317380() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test318381() throws Throwable {
        NodeUtil.precedence(71);
    }

    @Test(timeout = 4000)
    public void test319382() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test320383() throws Throwable {
        NodeUtil.precedence(73);
    }

    @Test(timeout = 4000)
    public void test321384() throws Throwable {
        NodeUtil.precedence((byte) 74);
    }

    @Test(timeout = 4000)
    public void test322385() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test323386() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test324387() throws Throwable {
        NodeUtil.precedence(78);
    }

    @Test(timeout = 4000)
    public void test325388() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test326389() throws Throwable {
        NodeUtil.precedence(80);
    }

    @Test(timeout = 4000)
    public void test327390() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test328391() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test329392() throws Throwable {
        int int0 = NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test330393() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test331394() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test332395() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test333396() throws Throwable {
        int int0 = NodeUtil.precedence(87);
    }

    @Test(timeout = 4000)
    public void test334397() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test335398() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test336399() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test337400() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test338401() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test339402() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test340403() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test341404() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test342405() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test343406() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test344407() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test345408() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test346409() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test347410() throws Throwable {
        int int0 = NodeUtil.precedence(101);
    }

    @Test(timeout = 4000)
    public void test348411() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test349412() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test350413() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test351414() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test352415() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test353416() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test354417() throws Throwable {
        int int0 = NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test355418() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test356419() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test357420() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test358421() throws Throwable {
        NodeUtil.precedence(112);
    }

    @Test(timeout = 4000)
    public void test359422() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test360423() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test361424() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test362425() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test363426() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test364427() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test365428() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test366429() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test367430() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test368431() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test369432() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test370433() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test371434() throws Throwable {
        NodeUtil.precedence((-301));
    }

    @Test(timeout = 4000)
    public void test372435() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
    }

    @Test(timeout = 4000)
    public void test373436() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(49);
    }

    @Test(timeout = 4000)
    public void test374437() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
    }

    @Test(timeout = 4000)
    public void test375438() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
    }

    @Test(timeout = 4000)
    public void test376439() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
    }

    @Test(timeout = 4000)
    public void test377440() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
    }

    @Test(timeout = 4000)
    public void test378441() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
    }

    @Test(timeout = 4000)
    public void test379442() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(51);
    }

    @Test(timeout = 4000)
    public void test380443() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
    }

    @Test(timeout = 4000)
    public void test381444() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
    }

    @Test(timeout = 4000)
    public void test382445() throws Throwable {
        Node node0 = new Node(87);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test383446() throws Throwable {
        Node node0 = new Node(51);
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test384447() throws Throwable {
        Node node0 = Node.newString(88, "Infinity");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test385448() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test386449() throws Throwable {
        Node node0 = new Node(94);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test387450() throws Throwable {
        Node node0 = Node.newString(95, "8\")<yU(mx$3^Tt&");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test388451() throws Throwable {
        Node node0 = Node.newString(97, "Infinity");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test389452() throws Throwable {
        Node node0 = new Node((byte) 63);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test390453() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.isGet(node0);
    }

    @Test(timeout = 4000)
    public void test391454() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$21", 75, 2287);
        NodeUtil.getPrototypeClassName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test391455() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$21", 75, 2287);
        NodeUtil.getPrototypeClassName(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test391456() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$21", 75, 2287);
        NodeUtil.getPrototypeClassName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test391457() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$21", 75, 2287);
        NodeUtil.getPrototypeClassName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test392458() throws Throwable {
        Node node0 = new Node((-808));
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test393459() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test394460() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        boolean boolean0 = NodeUtil.isVar(node0);
    }

    @Test(timeout = 4000)
    public void test395461() throws Throwable {
        Node node0 = NodeUtil.newVarNode("Unable to create parent directories of ", (Node) null);
    }

    @Test(timeout = 4000)
    public void test395462() throws Throwable {
        Node node0 = NodeUtil.newVarNode("Unable to create parent directories of ", (Node) null);
        boolean boolean0 = NodeUtil.isVar(node0);
    }

    @Test(timeout = 4000)
    public void test396463() throws Throwable {
        Node node0 = Node.newString("com.gooBljavascript.jscomp.NodeUtil$La-clNameNode");
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test397464() throws Throwable {
        Node node0 = Node.newString("jkCcU");
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test398465() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test398466() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
    }

    @Test(timeout = 4000)
    public void test399467() throws Throwable {
        Node node0 = Node.newString(125, "Infinity");
        boolean boolean0 = NodeUtil.isAssign(node0);
    }

    @Test(timeout = 4000)
    public void test400468() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isAssign(node0);
    }

    @Test(timeout = 4000)
    public void test401469() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test402470() throws Throwable {
        Node node0 = new Node(973);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test403471() throws Throwable {
        Node node0 = Node.newNumber((-793.7211632727933));
        Node node1 = new Node(115, node0);
        ControlFlowAnalysis.computeFollowNode(node0);
    }

    @Test(timeout = 4000)
    public void test404472() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        Node node1 = NodeUtil.newExpr(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test404473() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test405474() throws Throwable {
        Node node0 = Node.newNumber((-793.7211632727933));
        Node node1 = new Node(115, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test406475() throws Throwable {
        Node node0 = new Node(113, (-996), (-2988));
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test407476() throws Throwable {
        Node node0 = new Node(1086, 1086, 1086);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test408477() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test409478() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test410479() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test411480() throws Throwable {
        Node node0 = new Node(9);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test412481() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test413482() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test414483() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test415484() throws Throwable {
        Node node0 = new Node((-808));
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node1 = new Node(45, node0, node0, node0);
        node1.setType(114);
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test416485() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test417486() throws Throwable {
        Node node0 = new Node(119, 10000, 836);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test418487() throws Throwable {
        Node node0 = new Node(120, (-930), 836);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test419488() throws Throwable {
        Node node0 = new Node(61);
        node0.setType(126);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test420489() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test421490() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test422491() throws Throwable {
        Node node0 = new Node(110, 153, 110);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test423492() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test424493() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test425494() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test426495() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test427496() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = new Node(113, node0, node0, node0, node0, 18, 1);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test428497() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test429498() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test430499() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test431500() throws Throwable {
        Node node0 = new Node(109);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test432501() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test433502() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test434503() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node0 = Node.newString(113, " - FUNCTIONS: ", (-1536), 77);
        peepholeRemoveDeadCode0.tryFoldWhile(node0);
    }

    @Test(timeout = 4000)
    public void test435504() throws Throwable {
        Node node0 = Node.newNumber((-793.7211632727933));
        Node node1 = new Node(115, node0);
        NodeUtil.getConditionExpression(node1);
    }

    @Test(timeout = 4000)
    public void test436505() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test437506() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        Node node1 = new Node(49, node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test438507() throws Throwable {
        Node node0 = new Node(111);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test439508() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test440509() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test441510() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "", (-1936), 30);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test441511() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "", (-1936), 30);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test442512() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "&", 0, 746);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test442513() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "&", 0, 746);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test442514() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "&", 0, 746);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test443515() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
    }

    @Test(timeout = 4000)
    public void test444516() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test444517() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test444518() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        boolean boolean0 = NodeUtil.isLabelName(node0);
    }

    @Test(timeout = 4000)
    public void test445519() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test446520() throws Throwable {
        Node node0 = new Node(125);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test447521() throws Throwable {
        Node node0 = Node.newNumber((-793.7211632727933));
        Node node1 = new Node(115, node0);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test448522() throws Throwable {
        Node node0 = new Node(82, 82, 82);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test449523() throws Throwable {
        Node node0 = new Node(125);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test450524() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        NodeUtil.getArgumentForCallOrNew(node0, 981);
    }

    @Test(timeout = 4000)
    public void test451525() throws Throwable {
        Node node0 = new Node((byte) 53);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", linkedList0, node0, 33, 1000);
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test452526() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isThis(node0);
    }

    @Test(timeout = 4000)
    public void test453527() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test453528() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test454529() throws Throwable {
        Node node0 = Node.newString(": ");
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test455530() throws Throwable {
        Node node0 = Node.newString("jkCcU");
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isObjectCallMethod(node1, "jkCcU");
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test455531() throws Throwable {
        Node node0 = Node.newString("jkCcU");
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isObjectCallMethod(node1, "jkCcU");
    }

    @Test(timeout = 4000)
    public void test456532() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test457533() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test458534() throws Throwable {
        Node node0 = new Node(86);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test459535() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Node node1 = NodeUtil.newVarNode(")", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test459536() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Node node1 = NodeUtil.newVarNode(")", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
    }

    @Test(timeout = 4000)
    public void test459537() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Node node1 = NodeUtil.newVarNode(")", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test460538() throws Throwable {
        Node node0 = new Node(139);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test461539() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
    }

    @Test(timeout = 4000)
    public void test462541() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(94);
    }

    @Test(timeout = 4000)
    public void test463542() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test464543() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(11);
    }

    @Test(timeout = 4000)
    public void test465544() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(12);
    }

    @Test(timeout = 4000)
    public void test466545() throws Throwable {
        String string0 = NodeUtil.opToStr(13);
    }

    @Test(timeout = 4000)
    public void test467546() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test468547() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(15);
    }

    @Test(timeout = 4000)
    public void test469548() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
    }

    @Test(timeout = 4000)
    public void test470549() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
    }

    @Test(timeout = 4000)
    public void test471550() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(18);
    }

    @Test(timeout = 4000)
    public void test472551() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
    }

    @Test(timeout = 4000)
    public void test473552() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(20);
    }

    @Test(timeout = 4000)
    public void test474553() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
    }

    @Test(timeout = 4000)
    public void test475554() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(22);
    }

    @Test(timeout = 4000)
    public void test476555() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
    }

    @Test(timeout = 4000)
    public void test477556() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
    }

    @Test(timeout = 4000)
    public void test478557() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(25);
    }

    @Test(timeout = 4000)
    public void test479558() throws Throwable {
        String string0 = NodeUtil.opToStr(26);
    }

    @Test(timeout = 4000)
    public void test480559() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(27);
    }

    @Test(timeout = 4000)
    public void test481560() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test482561() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test483563() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
    }

    @Test(timeout = 4000)
    public void test484564() throws Throwable {
        NodeUtil.opToStrNoFail(31);
    }

    @Test(timeout = 4000)
    public void test485565() throws Throwable {
        String string0 = NodeUtil.opToStr(32);
    }

    @Test(timeout = 4000)
    public void test486566() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
    }

    @Test(timeout = 4000)
    public void test487567() throws Throwable {
        NodeUtil.opToStrNoFail(34);
    }

    @Test(timeout = 4000)
    public void test488568() throws Throwable {
        NodeUtil.opToStrNoFail(35);
    }

    @Test(timeout = 4000)
    public void test489569() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
    }

    @Test(timeout = 4000)
    public void test490570() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
    }

    @Test(timeout = 4000)
    public void test491571() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
    }

    @Test(timeout = 4000)
    public void test492572() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
    }

    @Test(timeout = 4000)
    public void test493573() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
    }

    @Test(timeout = 4000)
    public void test494574() throws Throwable {
        NodeUtil.opToStrNoFail(41);
    }

    @Test(timeout = 4000)
    public void test495575() throws Throwable {
        NodeUtil.opToStrNoFail(42);
    }

    @Test(timeout = 4000)
    public void test496576() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
    }

    @Test(timeout = 4000)
    public void test497577() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
    }

    @Test(timeout = 4000)
    public void test498578() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
    }

    @Test(timeout = 4000)
    public void test499580() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
    }

    @Test(timeout = 4000)
    public void test500582() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
    }

    @Test(timeout = 4000)
    public void test501583() throws Throwable {
        NodeUtil.opToStrNoFail(48);
    }

    @Test(timeout = 4000)
    public void test502584() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
    }

    @Test(timeout = 4000)
    public void test503585() throws Throwable {
        NodeUtil.opToStrNoFail(50);
    }

    @Test(timeout = 4000)
    public void test504586() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
    }

    @Test(timeout = 4000)
    public void test505588() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
    }

    @Test(timeout = 4000)
    public void test506590() throws Throwable {
        String string0 = NodeUtil.opToStr(53);
    }

    @Test(timeout = 4000)
    public void test507591() throws Throwable {
        NodeUtil.opToStrNoFail(55);
    }

    @Test(timeout = 4000)
    public void test508592() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
    }

    @Test(timeout = 4000)
    public void test509593() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
    }

    @Test(timeout = 4000)
    public void test510594() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
    }

    @Test(timeout = 4000)
    public void test511595() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
    }

    @Test(timeout = 4000)
    public void test512596() throws Throwable {
        String string0 = NodeUtil.opToStr(61);
    }

    @Test(timeout = 4000)
    public void test513597() throws Throwable {
        String string0 = NodeUtil.opToStr(62);
    }

    @Test(timeout = 4000)
    public void test514598() throws Throwable {
        String string0 = NodeUtil.opToStr(63);
    }

    @Test(timeout = 4000)
    public void test515599() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
    }

    @Test(timeout = 4000)
    public void test516600() throws Throwable {
        NodeUtil.opToStrNoFail(65);
    }

    @Test(timeout = 4000)
    public void test517601() throws Throwable {
        NodeUtil.opToStrNoFail(66);
    }

    @Test(timeout = 4000)
    public void test518602() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
    }

    @Test(timeout = 4000)
    public void test519603() throws Throwable {
        String string0 = NodeUtil.opToStr(68);
    }

    @Test(timeout = 4000)
    public void test520604() throws Throwable {
        String string0 = NodeUtil.opToStr(70);
    }

    @Test(timeout = 4000)
    public void test521605() throws Throwable {
        String string0 = NodeUtil.opToStr(72);
    }

    @Test(timeout = 4000)
    public void test522606() throws Throwable {
        NodeUtil.opToStrNoFail(73);
    }

    @Test(timeout = 4000)
    public void test523607() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
    }

    @Test(timeout = 4000)
    public void test524608() throws Throwable {
        NodeUtil.opToStrNoFail(75);
    }

    @Test(timeout = 4000)
    public void test525609() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
    }

    @Test(timeout = 4000)
    public void test526610() throws Throwable {
        String string0 = NodeUtil.opToStr(77);
    }

    @Test(timeout = 4000)
    public void test527611() throws Throwable {
        String string0 = NodeUtil.opToStr(78);
    }

    @Test(timeout = 4000)
    public void test528612() throws Throwable {
        NodeUtil.opToStrNoFail(79);
    }

    @Test(timeout = 4000)
    public void test529613() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
    }

    @Test(timeout = 4000)
    public void test530614() throws Throwable {
        String string0 = NodeUtil.opToStr(81);
    }

    @Test(timeout = 4000)
    public void test531615() throws Throwable {
        String string0 = NodeUtil.opToStr(82);
    }

    @Test(timeout = 4000)
    public void test532616() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
    }

    @Test(timeout = 4000)
    public void test533617() throws Throwable {
        NodeUtil.opToStrNoFail(84);
    }

    @Test(timeout = 4000)
    public void test534618() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
    }

    @Test(timeout = 4000)
    public void test535619() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
    }

    @Test(timeout = 4000)
    public void test536621() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
    }

    @Test(timeout = 4000)
    public void test537622() throws Throwable {
        String string0 = NodeUtil.opToStr(88);
    }

    @Test(timeout = 4000)
    public void test538623() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
    }

    @Test(timeout = 4000)
    public void test539624() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
    }

    @Test(timeout = 4000)
    public void test540625() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test541626() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
    }

    @Test(timeout = 4000)
    public void test542627() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(93);
    }

    @Test(timeout = 4000)
    public void test543628() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(95);
    }

    @Test(timeout = 4000)
    public void test544629() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
    }

    @Test(timeout = 4000)
    public void test545630() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
    }

    @Test(timeout = 4000)
    public void test546632() throws Throwable {
        NodeUtil.opToStrNoFail(98);
    }

    @Test(timeout = 4000)
    public void test547633() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
    }

    @Test(timeout = 4000)
    public void test548634() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
    }

    @Test(timeout = 4000)
    public void test549636() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(101);
    }

    @Test(timeout = 4000)
    public void test550637() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
    }

    @Test(timeout = 4000)
    public void test551638() throws Throwable {
        String string0 = NodeUtil.opToStr(103);
    }

    @Test(timeout = 4000)
    public void test552639() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
    }

    @Test(timeout = 4000)
    public void test553640() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
    }

    @Test(timeout = 4000)
    public void test554641() throws Throwable {
        NodeUtil.opToStrNoFail(106);
    }

    @Test(timeout = 4000)
    public void test555642() throws Throwable {
        String string0 = NodeUtil.opToStr(107);
    }

    @Test(timeout = 4000)
    public void test556643() throws Throwable {
        String string0 = NodeUtil.opToStr(108);
    }

    @Test(timeout = 4000)
    public void test557644() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
    }

    @Test(timeout = 4000)
    public void test558645() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
    }

    @Test(timeout = 4000)
    public void test559646() throws Throwable {
        String string0 = NodeUtil.opToStr(111);
    }

    @Test(timeout = 4000)
    public void test560647() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
    }

    @Test(timeout = 4000)
    public void test561648() throws Throwable {
        NodeUtil.opToStrNoFail(113);
    }

    @Test(timeout = 4000)
    public void test562649() throws Throwable {
        String string0 = NodeUtil.opToStr(114);
    }

    @Test(timeout = 4000)
    public void test563650() throws Throwable {
        NodeUtil.opToStrNoFail(115);
    }

    @Test(timeout = 4000)
    public void test564651() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
    }

    @Test(timeout = 4000)
    public void test565652() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
    }

    @Test(timeout = 4000)
    public void test566653() throws Throwable {
        String string0 = NodeUtil.opToStr(118);
    }

    @Test(timeout = 4000)
    public void test567654() throws Throwable {
        NodeUtil.opToStrNoFail(119);
    }

    @Test(timeout = 4000)
    public void test568655() throws Throwable {
        NodeUtil.opToStrNoFail(120);
    }

    @Test(timeout = 4000)
    public void test569656() throws Throwable {
        String string0 = NodeUtil.opToStr(121);
    }

    @Test(timeout = 4000)
    public void test570657() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(122);
    }

    @Test(timeout = 4000)
    public void test571658() throws Throwable {
        String string0 = NodeUtil.opToStr(1);
    }

    @Test(timeout = 4000)
    public void test572659() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        NodeUtil.copyNameAnnotations(node0, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test573660() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("JSCompiler_renameProperty");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = NodeUtil.newVarNode("JSCompiler_renameProperty", node0);
        Node node2 = new Node(9, node1, 2, 7);
        NodeUtil.redeclareVarsInsideBranch(node1);
    }

    @Test(timeout = 4000)
    public void test574661() throws Throwable {
        Node node0 = Node.newString("// Input %num%");
        Stack<Node> stack0 = new Stack<Node>();
        stack0.add(node0);
        NodeUtil.newFunctionNode((String) null, stack0, node0, 11, 16);
    }

    @Test(timeout = 4000)
    public void test575662() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<oeIG-3CZ,$`VsE.T", (-1645), 41);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test575663() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<oeIG-3CZ,$`VsE.T", (-1645), 41);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test575664() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<oeIG-3CZ,$`VsE.T", (-1645), 41);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test576665() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "// Input %num%", 2, 26);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test576666() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "// Input %num%", 2, 26);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test576667() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "// Input %num%", 2, 26);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test577668() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test578669() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = Node.newString(20, "d", 406, 402);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Q\"N", node0, "Q\"N");
        node1.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test578670() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = Node.newString(20, "d", 406, 402);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Q\"N", node0, "Q\"N");
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test578671() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = Node.newString(20, "d", 406, 402);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Q\"N", node0, "Q\"N");
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test579672() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Infinity");
    }

    @Test(timeout = 4000)
    public void test580673() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("com.google.javascript.jscomp.mozilla.rhino.jdk11.VMBridge_jdk11");
    }

    @Test(timeout = 4000)
    public void test581674() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("null");
    }

    @Test(timeout = 4000)
    public void test582675() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test582676() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "toString", 64, 64);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test583677() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("zH", "zH");
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test584678() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, " ", (-808), (-808));
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test585679() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test586680() throws Throwable {
        Node node0 = Node.newNumber((-3872.0));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Node node2 = new Node(19, node0, node1, node1, node1, 1281, 1);
        NodeUtil.newVarNode("generateReport", node0);
    }

    @Test(timeout = 4000)
    public void test587681() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("zH", "zH");
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "zH");
    }

    @Test(timeout = 4000)
    public void test588682() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("zH", "zH");
        boolean boolean0 = NodeUtil.isNameReferenced(node0, (String) null);
    }

    @Test(timeout = 4000)
    public void test589683() throws Throwable {
        Node node0 = Node.newNumber((-1073.669849448));
        Node node1 = NodeUtil.newVarNode("version", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test589684() throws Throwable {
        Node node0 = Node.newNumber((-1073.669849448));
        Node node1 = NodeUtil.newVarNode("version", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test590685() throws Throwable {
        Node node0 = new Node(58);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("|=", stack0, node0, 394, 63);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test590686() throws Throwable {
        Node node0 = new Node(58);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("|=", stack0, node0, 394, 63);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test590687() throws Throwable {
        Node node0 = new Node(58);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("|=", stack0, node0, 394, 63);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test590688() throws Throwable {
        Node node0 = new Node(58);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("|=", stack0, node0, 394, 63);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test591689() throws Throwable {
        Node node0 = new Node(72);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test592690() throws Throwable {
        Node node0 = Node.newNumber((double) 108);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        int int0 = NodeUtil.getCount(node1, compilerOptions0.sourceMapDetailLevel, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test592691() throws Throwable {
        Node node0 = Node.newNumber((double) 108);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        int int0 = NodeUtil.getCount(node1, compilerOptions0.sourceMapDetailLevel, nodeUtil_MatchShallowStatement0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test593692() throws Throwable {
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=", 110, 1514);
        Node node1 = NodeUtil.newFunctionNode(".Hy-J[fAG,R6|e~%", arrayList0, node0, 32, 127);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test593693() throws Throwable {
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=", 110, 1514);
        Node node1 = NodeUtil.newFunctionNode(".Hy-J[fAG,R6|e~%", arrayList0, node0, 32, 127);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test593694() throws Throwable {
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=", 110, 1514);
        Node node1 = NodeUtil.newFunctionNode(".Hy-J[fAG,R6|e~%", arrayList0, node0, 32, 127);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test593695() throws Throwable {
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=", 110, 1514);
        Node node1 = NodeUtil.newFunctionNode(".Hy-J[fAG,R6|e~%", arrayList0, node0, 32, 127);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test593696() throws Throwable {
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=", 110, 1514);
        Node node1 = NodeUtil.newFunctionNode(".Hy-J[fAG,R6|e~%", arrayList0, node0, 32, 127);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test593697() throws Throwable {
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=", 110, 1514);
        Node node1 = NodeUtil.newFunctionNode(".Hy-J[fAG,R6|e~%", arrayList0, node0, 32, 127);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test594698() throws Throwable {
        Node node0 = new Node(80);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test595699() throws Throwable {
        Node node0 = new Node(47);
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test596700() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("{");
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test597701() throws Throwable {
        Node node0 = new Node((-1000));
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test598702() throws Throwable {
        Node node0 = Node.newString(125, "Infinity");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test599703() throws Throwable {
        Node node0 = new Node(2106);
        NodeUtil.getFnParameters(node0);
    }

    @Test(timeout = 4000)
    public void test600704() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test600705() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        Node node2 = NodeUtil.getFnParameters(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test600706() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        Node node2 = NodeUtil.getFnParameters(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test600707() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        Node node2 = NodeUtil.getFnParameters(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test600708() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        Node node2 = NodeUtil.getFnParameters(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test600709() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        Node node2 = NodeUtil.getFnParameters(node1);
        node2.getLineno();
    }

    @Test(timeout = 4000)
    public void test600710() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        Node node2 = NodeUtil.getFnParameters(node1);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test601711() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test602712() throws Throwable {
        Node node0 = new Node(64);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test603713() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = new Node(38, node0, node0, node0, 23, (-1356));
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test604714() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test604715() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test604716() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test604717() throws Throwable {
        Node node0 = Node.newNumber(108.0);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode(":tGh`8~", vector0, node0, 26, 356);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test605718() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test606719() throws Throwable {
        Node node0 = new Node(105, 105, (-3849));
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test607720() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.gooBle.javascript.jscomp.NodeUtil$La-clNameNode", "");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test608722() throws Throwable {
        Node node0 = new Node(100);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test609723() throws Throwable {
        Node node0 = new Node(139);
        Node[] nodeArray0 = new Node[3];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test610724() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test611725() throws Throwable {
        Node node0 = new Node(34);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test612726() throws Throwable {
        Node node0 = new Node(35);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test613727() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node((-2496), (-5814), (-2245));
        Node node1 = new Node(42, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test614728() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test615729() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(48);
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test616730() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test617731() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test618732() throws Throwable {
        Node node0 = new Node(52);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test619733() throws Throwable {
        Node node0 = new Node((byte) 55);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test620734() throws Throwable {
        Node node0 = new Node(58);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test621735() throws Throwable {
        Node node0 = new Node((byte) 62);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test622736() throws Throwable {
        Node node0 = new Node((byte) 63);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test623737() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test624738() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node0 = new Node(65);
        NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test625739() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test626740() throws Throwable {
        Node node0 = new Node(68);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test627741() throws Throwable {
        Node node0 = new Node(70);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test628742() throws Throwable {
        Node node0 = new Node(72);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test629743() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test630744() throws Throwable {
        Node node0 = new Node(78);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test631745() throws Throwable {
        Node node0 = new Node(80);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test632746() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test633747() throws Throwable {
        Node node0 = new Node(82);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test634748() throws Throwable {
        Node node0 = new Node(84);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test635749() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test636750() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test637751() throws Throwable {
        Node node0 = new Node(88);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test638752() throws Throwable {
        Node node0 = new Node(89);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test639753() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test640754() throws Throwable {
        Node node0 = new Node(91, 91, 91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
    }

    @Test(timeout = 4000)
    public void test641755() throws Throwable {
        Node node0 = new Node(92);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test642756() throws Throwable {
        Node node0 = new Node(93);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test643757() throws Throwable {
        Node node0 = new Node(94);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test644758() throws Throwable {
        Node node0 = new Node(95);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test645759() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node0 = new Node(96);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test646760() throws Throwable {
        Node node0 = new Node(97);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test647761() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test648762() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test649763() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node0 = new Node(101, 58, (-2656));
        NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test650764() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test651765() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test652766() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test653767() throws Throwable {
        Node node0 = new Node(86);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test654768() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "p", (-808), (-808));
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test655769() throws Throwable {
        Node node0 = Node.newString("jkCcU");
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test655770() throws Throwable {
        Node node0 = Node.newString("jkCcU");
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }
}
