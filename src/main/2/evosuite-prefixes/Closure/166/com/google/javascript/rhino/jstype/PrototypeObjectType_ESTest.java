/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:47:29 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.HashMap;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "78#2#{E>bHiv");
        String string0 = errorFunctionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "78#2#{E>bHiv");
        String string0 = errorFunctionType0.toStringHelper(false);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setExtendedInterfaces(immutableList0);
        instanceObjectType0.getTypesUnderInequality(instanceObjectType0);
        instanceObjectType0.matchRecordTypeConstraint(functionType0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        boolean boolean0 = objectType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        boolean boolean0 = objectType0.matchesObjectContext();
        objectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        boolean boolean0 = objectType0.matchesObjectContext();
        objectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "78#2#{E>bHiv");
        Node node0 = new Node((-1431655764));
        boolean boolean0 = errorFunctionType0.defineProperty("Not declared as a constructor", errorFunctionType0, false, node0);
        boolean boolean1 = errorFunctionType0.defineSynthesizedProperty("Not declared as a constructor", (JSType) null, node0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "78#2#{E>bHiv");
        Node node0 = new Node((-1431655764));
        boolean boolean0 = errorFunctionType0.defineProperty("Not declared as a constructor", errorFunctionType0, false, node0);
        boolean boolean1 = errorFunctionType0.defineSynthesizedProperty("Not declared as a constructor", (JSType) null, node0);
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setExtendedInterfaces(immutableList0);
        instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
        int int0 = instanceObjectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(131072);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(131072);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(131072);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
        int int0 = instanceObjectType0.getPropertiesCount();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(131072);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", errorFunctionType0, true, (Node) null);
        int int0 = instanceObjectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType jSType0 = instanceObjectType0.findPropertyType("Named type with empty name component");
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType jSType0 = instanceObjectType0.findPropertyType("Named type with empty name component");
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType jSType0 = instanceObjectType0.findPropertyType("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0923() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ": ");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        functionType0.matchRecordTypeConstraint(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0924() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ": ");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        functionType0.matchRecordTypeConstraint(errorFunctionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NOT_NULL");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("NOT_NULL", jSDocInfo0);
        errorFunctionType0.getPropertyNames();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty(", ", recordType0, false, (Node) null);
        boolean boolean1 = functionType0.isPropertyTypeInferred(", ");
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty(", ", recordType0, false, (Node) null);
        boolean boolean1 = functionType0.isPropertyTypeInferred(", ");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty(", ", recordType0, false, (Node) null);
        boolean boolean1 = functionType0.isPropertyTypeInferred(", ");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("com.google.common.collect.Iterators$6");
    }

    @Test(timeout = 4000)
    public void test1231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("com.google.common.collect.Iterators$6");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<45KY2");
        boolean boolean0 = errorFunctionType0.isPropertyInExterns("<45KY2");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<45KY2");
        boolean boolean0 = errorFunctionType0.isPropertyInExterns("<45KY2");
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NOT_NULL");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("NOT_NULL", jSDocInfo0);
        errorFunctionType0.isPropertyInExterns("NOT_NULL");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1535() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NOT_NULL");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("NOT_NULL", jSDocInfo0);
        errorFunctionType0.matchRecordTypeConstraint(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1636() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.removeProperty("is_constant_name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1637() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.removeProperty("is_constant_name");
    }

    @Test(timeout = 4000)
    public void test1638() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.removeProperty("is_constant_name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1739() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a type name", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("Not declared as a type name");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1740() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a type name", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test1841() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getPropertyNode("BOOLEAN_TYPE");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1842() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getPropertyNode("BOOLEAN_TYPE");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1943() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NOT_NULL");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("NOT_NULL", jSDocInfo0);
        errorFunctionType0.getPropertyNode("NOT_NULL");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ": ");
        errorFunctionType0.getOwnPropertyJSDocInfo(": ");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2145() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        errorFunctionType0.getOwnPropertyJSDocInfo("Named type with empty name component");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a constructor", (JSDocInfo) null);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2247() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a constructor", (JSDocInfo) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2348() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "$(aB,.q2I");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("$(aB,.q2I", jSDocInfo0);
        errorFunctionType0.setPropertyJSDocInfo("$(aB,.q2I", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2449() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.setPropertyJSDocInfo("^Dke V~@5)kWy#u", jSDocInfo0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2550() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2551() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2652() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getParentScope();
        boolean boolean0 = ((PrototypeObjectType) objectType0).matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2653() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getParentScope();
        boolean boolean0 = ((PrototypeObjectType) objectType0).matchesStringContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2654() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getParentScope();
        boolean boolean0 = ((PrototypeObjectType) objectType0).matchesStringContext();
        objectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2755() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2756() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2857() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2858() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesStringContext();
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test2959() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(booleanType0, node0);
        hashMap0.putIfAbsent("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2960() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(booleanType0, node0);
        hashMap0.putIfAbsent("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3061() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c*e{'C$Jcdy\"U:m:y");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = functionType0.matchesNumberContext();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3062() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c*e{'C$Jcdy\"U:m:y");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = functionType0.matchesNumberContext();
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3063() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c*e{'C$Jcdy\"U:m:y");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = functionType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test3164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "78#2#{E>bHiv");
        JSType jSType0 = errorFunctionType0.unboxesTo();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "78#2#{E>bHiv");
        JSType jSType0 = errorFunctionType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3266() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3267() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3368() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3369() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        recordType0.setOwnerFunction(errorFunctionType0);
        String string0 = recordType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3470() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(131072);
        FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, false);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType1, false);
        String string0 = instanceObjectType0.toStringHelper(false);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test3471() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(131072);
        FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, false);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType1, false);
        String string0 = instanceObjectType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test3473() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(131072);
        FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, false);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType1, false);
        String string0 = instanceObjectType0.toStringHelper(false);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3574() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType1.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3676() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 1, 105);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.merge("tR*i:", recordTypeBuilder_RecordProperty0, biFunction0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty1);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType1.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test3778() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
        String string0 = instanceObjectType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3780() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
        String string0 = instanceObjectType0.toStringHelper(true);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test3881() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getSuperClassConstructor();
        noResolvedType0.setImplicitPrototype((ObjectType) null);
    }

    @Test(timeout = 4000)
    public void test3982() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isNumber();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3983() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test4084() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 1, 105);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        hashMap0.merge("tR*i:", recordTypeBuilder_RecordProperty0, biFunction0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType2.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4085() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 1, 105);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        hashMap0.merge("tR*i:", recordTypeBuilder_RecordProperty0, biFunction0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType2.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Not declare as a coystructo", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test4187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Not declare as a coystructo", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Not declare as a coystructo", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test4289() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]7*Bv~yK(n", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4290() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]7*Bv~yK(n", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test4391() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test4392() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4393() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4494() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "    ");
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0, true);
        PrototypeObjectType prototypeObjectType1 = new PrototypeObjectType(jSTypeRegistry0, (String) null, prototypeObjectType0);
        jSTypeRegistry0.createOptionalType(prototypeObjectType1);
        prototypeObjectType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4495() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "    ");
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0, true);
        PrototypeObjectType prototypeObjectType1 = new PrototypeObjectType(jSTypeRegistry0, (String) null, prototypeObjectType0);
        jSTypeRegistry0.createOptionalType(prototypeObjectType1);
        prototypeObjectType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4596() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test4697() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ...");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        errorFunctionType0.matchRecordTypeConstraint(functionType0);
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4698() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ...");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        errorFunctionType0.matchRecordTypeConstraint(functionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4799() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getCtorImplementedInterfaces();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test47100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getCtorImplementedInterfaces();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test48101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("N4Qjq4W", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test48102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("N4Qjq4W", jSDocInfo0);
        JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test49103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 0, 1);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, recordType0);
        recordType0.matchConstraint(arrowType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test49104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 0, 1);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, recordType0);
        recordType0.matchConstraint(arrowType0);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test50105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]7*Bv~yK(n", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.matchConstraint(functionType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test50106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]7*Bv~yK(n", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.matchConstraint(functionType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test51107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test51108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test52109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        boolean boolean0 = errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
    }

    @Test(timeout = 4000)
    public void test52110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        boolean boolean0 = errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
        errorFunctionType0.matchRecordTypeConstraint(indexedType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test52111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        boolean boolean0 = errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
        errorFunctionType0.matchRecordTypeConstraint(indexedType0);
        indexedType0.hasReferenceName();
    }
}
