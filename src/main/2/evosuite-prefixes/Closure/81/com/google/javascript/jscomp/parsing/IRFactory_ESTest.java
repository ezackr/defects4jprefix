/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:36:11 GMT 2024
 */
package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.UnaryExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        EmptyExpression emptyExpression0 = new EmptyExpression();
        astRoot0.addChildToFront(emptyExpression0);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, false, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "toUTCString", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        EmptyExpression emptyExpression0 = new EmptyExpression();
        astRoot0.addChildToFront(emptyExpression0);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, false, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "toUTCString", config0, errorCollector0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ArrayLiteral arrayLiteral0 = new ArrayLiteral();
        arrayLiteral0.setIsDestructuring(true);
        astRoot0.addChildToFront(arrayLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "7", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        DoLoop doLoop0 = new DoLoop();
        astRoot0.addChildToFront(doLoop0);
        IRFactory.transformTree(astRoot0, "", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ElementGet elementGet0 = new ElementGet();
        astRoot0.addChildToFront(elementGet0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Name name0 = new Name(5);
        FunctionNode functionNode0 = new FunctionNode(126, name0);
        astRoot0.addChild(functionNode0);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        IRFactory.transformTree(astRoot0, "", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        WhileLoop whileLoop0 = new WhileLoop();
        astRoot0.addChildToFront(whileLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        NumberLiteral numberLiteral0 = new NumberLiteral(2);
        astRoot0.addChildToFront(numberLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "be- zE#10", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        NumberLiteral numberLiteral0 = new NumberLiteral(2);
        astRoot0.addChildToFront(numberLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "be- zE#10", config0, errorCollector0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(2, 17);
        astRoot0.addChildToFront(parenthesizedExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ThrowStatement throwStatement0 = new ThrowStatement();
        astRoot0.addChildToFront(throwStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "REF_MEMBER", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        NewExpression newExpression0 = new NewExpression();
        astRoot0.addChildToFront(newExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "getters are not supported in Internet Explorer", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        StringLiteral stringLiteral0 = new StringLiteral();
        astRoot0.addChildToFront(stringLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "com.google.javascript.jscomp.mozilla.rhino}ast.NewExpression", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Scope scope0 = new Scope(4);
        astRoot0.addChildToFront(scope0);
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Scope scope0 = new Scope(4);
        astRoot0.addChildToFront(scope0);
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        Label label0 = new Label((-71), 5);
        astRoot0.addChildToFront(label0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "getters may not have parameters", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ExpressionStatement expressionStatement0 = new ExpressionStatement(objectLiteral0, true);
        astRoot0.addChildToFront(expressionStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, "", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        PropertyGet propertyGet0 = new PropertyGet();
        astRoot0.addChildToFront(propertyGet0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        WithStatement withStatement0 = new WithStatement(1, 144);
        astRoot0.addChildToFront(withStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ForInLoop forInLoop0 = new ForInLoop();
        astRoot0.addChildToFront(forInLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        ForLoop forLoop0 = new ForLoop();
        astRoot0.addChildToFront(forLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "+xz`P", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ConditionalExpression conditionalExpression0 = new ConditionalExpression(2);
        astRoot0.addChildToFront(conditionalExpression0);
        IRFactory.transformTree(astRoot0, "g*y~Pjk%Yk}[wdae;", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(13, 1, token_CommentType0, "hPJ][T");
        astRoot0.addComment(comment0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        IRFactory.transformTree(astRoot0, "uae(Tpuj@+g=on4>n _", config0, toolErrorReporter0);
        Node node0 = IRFactory.transformTree(astRoot0, "hPJ][T", config0, (ErrorReporter) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ErrorCollector errorCollector0 = new ErrorCollector();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(9);
        regExpLiteral0.setValue("");
        astRoot0.addChildToFront(regExpLiteral0);
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(11, 25, token_CommentType0, "");
        astRoot0.addComment(comment0);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        Node node0 = IRFactory.transformTree(astRoot0, "", config0, (ErrorReporter) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(2, 2, token_CommentType0, "{[JFPS=8xr$L");
        astRoot0.setJsDocNode(comment0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        Node node0 = IRFactory.transformTree(astRoot0, "{[JFPS=8xr$L", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(2, 2, token_CommentType0, "{[JFPS=8xr$L");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        astRoot0.addChildToFront(comment0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        Node node0 = IRFactory.transformTree(astRoot0, ";\n", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Block block0 = new Block(6);
        block0.addChildToFront(astRoot0);
        astRoot0.addChildToFront(block0);
        Config config0 = new Config(linkedHashSet0, treeSet0, false, false, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "xL", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ArrayLiteral arrayLiteral0 = new ArrayLiteral(0);
        astRoot0.addChildToFront(arrayLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "\";U?LGWK>(lgi>8", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        BreakStatement breakStatement0 = new BreakStatement(24, 15);
        astRoot0.addChildToFront(breakStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "string", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ErrorCollector errorCollector0 = new ErrorCollector();
        ContinueStatement continueStatement0 = new ContinueStatement();
        astRoot0.addChildToFront(continueStatement0);
        Node node0 = IRFactory.transformTree(astRoot0, "W*vO`(}*aN#.", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        Name name0 = new Name((-677), 1);
        ContinueStatement continueStatement0 = new ContinueStatement(26, name0);
        astRoot0.addChildToFront(continueStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "\";U?LGWK>(lgi>8", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        FunctionNode functionNode0 = new FunctionNode();
        astRoot0.addChildToFront(functionNode0);
        IRFactory.transformTree(astRoot0, "r~\"[9VZ6>E2'lW*M1$@", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LabeledStatement labeledStatement0 = new LabeledStatement(2);
        astRoot0.addChildToFront(labeledStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "/*Nk4,<+|J+|t", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ObjectLiteral objectLiteral0 = new ObjectLiteral(1);
        ObjectProperty objectProperty0 = new ObjectProperty(18);
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChildToFront(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "com.google.javascript.Hscomp.mozilla.rhino.resources.Messages", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChildToFront(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "emgx3MPX}fPBe", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ReturnStatement returnStatement0 = new ReturnStatement();
        astRoot0.addChildToFront(returnStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "|}I5", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ReturnStatement returnStatement0 = new ReturnStatement();
        returnStatement0.setReturnValue(astRoot0);
        astRoot0.addChildToFront(returnStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "|}I5", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        SwitchCase switchCase0 = new SwitchCase(2, 8);
        UnaryExpression unaryExpression0 = new UnaryExpression();
        switchCase0.setExpression(unaryExpression0);
        astRoot0.addChildToFront(switchCase0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "j*Nl", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        SwitchCase switchCase0 = new SwitchCase();
        astRoot0.addChildToFront(switchCase0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "getters may not have parameters", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        AstRoot astRoot1 = new AstRoot(0);
        SwitchCase switchCase0 = new SwitchCase();
        switchCase0.addStatement(astRoot0);
        astRoot1.addChildToFront(switchCase0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot1, "2ucT}e&#L4``", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        AstRoot astRoot1 = new AstRoot(0);
        SwitchCase switchCase0 = new SwitchCase();
        switchCase0.addStatement(astRoot0);
        astRoot1.addChildToFront(switchCase0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot1, "2ucT}e&#L4``", config0, errorCollector0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChildToFront(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        Node node0 = IRFactory.transformTree(astRoot0, "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(10, 24);
        astRoot0.addChildToFront(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        Node node0 = IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(10, 24);
        VariableInitializer variableInitializer0 = new VariableInitializer(4, 2);
        variableDeclaration0.addVariable(variableInitializer0);
        astRoot0.addChildToFront(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        com.google.javascript.jscomp.mozilla.rhino.Node node0 = objectProperty0.setType(9);
        astRoot0.addChildToFront(node0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "\fY\"g_T~Rr,", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(4, 17);
        objectProperty0.setType(10);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "q_vVo", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectProperty0.setType(11);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "com.google.javascript.jscomp.parsing.IRFactory", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectProperty0.setType(12);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "invalid increment target", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(10, (-764));
        com.google.javascript.jscomp.mozilla.rhino.Node node0 = objectProperty0.setType(13);
        astRoot0.addChildToFront(node0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(22, 134);
        com.google.javascript.jscomp.mozilla.rhino.Node node0 = objectProperty0.setType(14);
        ErrorCollector errorCollector0 = new ErrorCollector();
        astRoot0.addChildToFront(node0);
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectProperty0.setType(15);
        ErrorCollector errorCollector0 = new ErrorCollector();
        astRoot0.addChildToFront(objectProperty0);
        IRFactory.transformTree(astRoot0, "[YW!'<_ ", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(3);
        objectProperty0.setType(16);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(2, 151);
        objectProperty0.setType(17);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(26, 0);
        objectProperty0.setType(18);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "(kVmU02Cw^Z+", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ObjectProperty objectProperty0 = new ObjectProperty();
        com.google.javascript.jscomp.mozilla.rhino.Node node0 = objectProperty0.setType(19);
        astRoot0.addChildToFront(node0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        IRFactory.transformTree(astRoot0, "\";U?LGWK>(lgi>8", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectProperty0.setOperator(20);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "gEm", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ObjectProperty objectProperty0 = new ObjectProperty();
        com.google.javascript.jscomp.mozilla.rhino.Node node0 = objectProperty0.setType(21);
        astRoot0.addChildToFront(node0);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "Bn^M$`($eT:0FCn]B+", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty((-282));
        com.google.javascript.jscomp.mozilla.rhino.Node node0 = objectProperty0.setType(22);
        astRoot0.addChildToFront(node0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "package", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(1);
        objectProperty0.setType(23);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "sl-[&];Bo(^", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        com.google.javascript.jscomp.mozilla.rhino.Node node0 = objectProperty0.setType(24);
        astRoot0.addChildToFront(node0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(26, 0);
        objectProperty0.setType(25);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        FunctionCall functionCall0 = new FunctionCall(5);
        astRoot0.addChildToFront(functionCall0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "'NAtKS4irN+(qTc-wJ", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectProperty0.setType(47);
        astRoot0.addChildToFront(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        IRFactory.transformTree(astRoot0, "m{{5t+sm!PYE<|", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test6165() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        UnaryExpression unaryExpression0 = new UnaryExpression(107, 1, astRoot0);
        astRoot0.addChildToFront(unaryExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test6266() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ExpressionStatement expressionStatement0 = new ExpressionStatement();
        astRoot0.addChildToFront(expressionStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "@Q<GWQi2/SD(/D", (Config) null, errorCollector0);
    }
}
