/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:53:24 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JSType_ESTest extends JSType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0007() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        String string0 = jSType_TypePair0.typeB.toAnnotationString();
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowEquality(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowEquality(enumElementType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test00210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 0, 1);
        namedType0.resolve(simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 0, 1);
        namedType0.resolve(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test00313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00316() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test00317() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00318() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00419() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test00420() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00421() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00422() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00423() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00424() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test00425() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00526() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ObjectType objectType0 = voidType0.dereference();
        objectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00527() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ObjectType objectType0 = voidType0.dereference();
    }

    @Test(timeout = 4000)
    public void test00528() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ObjectType objectType0 = voidType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00529() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ObjectType objectType0 = voidType0.dereference();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00530() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ObjectType objectType0 = voidType0.dereference();
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00531() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ObjectType objectType0 = voidType0.dereference();
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00632() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.getJSDocInfo();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00733() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
        namedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00734() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
        namedType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test00735() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
        namedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00736() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
        String string0 = jSType0.toDebugHashCodeString();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00737() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
        String string0 = jSType0.toDebugHashCodeString();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00738() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
        String string0 = jSType0.toDebugHashCodeString();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00739() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(namedType0);
        String string0 = jSType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test00840() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType jSType0 = voidType0.collapseUnion();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00941() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isString();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00942() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isString();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01043() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01044() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        noResolvedType0.getTypesUnderShallowInequality(jSType0);
        noResolvedType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test01145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        arrowType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test01146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        arrowType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test01147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test01150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test01252() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType.toMaybeParameterizedType((JSType) voidType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01353() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01354() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01355() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
        boolean boolean0 = arrowType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test01356() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01457() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test01558() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.unboxesTo();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01659() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01660() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01661() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
    }

    @Test(timeout = 4000)
    public void test01662() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test01763() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01764() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01765() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test01766() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test01767() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01768() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01869() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.setValidator((Predicate<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test01970() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01971() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test01972() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01973() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01974() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test02075() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.canBeCalled();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02076() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test02177() throws Throwable {
        PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, priorityQueue0);
        boolean boolean0 = unionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test02178() throws Throwable {
        PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, priorityQueue0);
        boolean boolean0 = unionType0.hasDisplayName();
        unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02279() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test02380() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, voidType0);
        boolean boolean0 = proxyObjectType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test02381() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, voidType0);
        boolean boolean0 = proxyObjectType0.isOrdinaryFunction();
        proxyObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02482() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test02483() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02484() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02485() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02586() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.resolveInternal(simpleErrorReporter0, namedType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test02687() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchConstraint((JSType) null);
        voidType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test02788() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02789() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test02790() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test02791() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02892() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test02993() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, jSType_TypePair0.typeA);
        boolean boolean0 = indexedType0.isCheckedUnknownType();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test02994() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, jSType_TypePair0.typeA);
        boolean boolean0 = indexedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test03095() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.matchesUint32Context();
        stringType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test03096() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.matchesUint32Context();
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test03197() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test03198() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test03199() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test032100() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isEnumType();
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test032101() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isEnumType();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test032102() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test033103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test034104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.forceResolve(simpleErrorReporter0, noResolvedType0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test035105() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.clearResolved();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test036106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test036107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test036108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test036109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test037110() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
        String string0 = unionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test038111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test038112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test038113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test038114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test039115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        JSType jSType0 = errorFunctionType0.getReturnType();
        boolean boolean0 = jSType0.hasDisplayName();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test039116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        JSType jSType0 = errorFunctionType0.getReturnType();
        boolean boolean0 = jSType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test039117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        JSType jSType0 = errorFunctionType0.getReturnType();
        boolean boolean0 = jSType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test039118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        JSType jSType0 = errorFunctionType0.getReturnType();
        boolean boolean0 = jSType0.hasDisplayName();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test040119() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test040120() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
    }

    @Test(timeout = 4000)
    public void test041121() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(proxyObjectType0);
    }

    @Test(timeout = 4000)
    public void test042122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType0);
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test042123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test042124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType0);
        functionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test043125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isGlobalThisType();
    }

    @Test(timeout = 4000)
    public void test043126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isGlobalThisType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test043127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isGlobalThisType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test044128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        boolean boolean0 = objectType0.isGlobalThisType();
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test044129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        boolean boolean0 = objectType0.isGlobalThisType();
    }

    @Test(timeout = 4000)
    public void test044130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        boolean boolean0 = objectType0.isGlobalThisType();
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test045131() throws Throwable {
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test046132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test046133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test046134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test047135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test048136() throws Throwable {
        ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test049137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test050138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test050139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test050140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test050141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Named type with empty name component");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test051142() throws Throwable {
        TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test052143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test053144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("&Ip.@dDQL%gA]vi>t<", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test053145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("&Ip.@dDQL%gA]vi>t<", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test053146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("&Ip.@dDQL%gA]vi>t<", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test053147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("&Ip.@dDQL%gA]vi>t<", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test054148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test055149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 0, 0, 0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test055150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 0, 0, 0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test055151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 0, 0, 0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test055152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        Node node0 = Node.newNumber((double) 0, 0, 0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test056153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test056154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(namedType0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test057155() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test058156() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(voidType0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test059157() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(voidType0, voidType0);
    }

    @Test(timeout = 4000)
    public void test060158() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test061159() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.equals(numberType0);
    }

    @Test(timeout = 4000)
    public void test062160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.findPropertyType("Unknown class name");
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test062161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.findPropertyType("Unknown class name");
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test063162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        enumElementType0.findPropertyType("Unknown class name");
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test063163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        enumElementType0.findPropertyType("Unknown class name");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test064164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
    }

    @Test(timeout = 4000)
    public void test064165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test064166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test065167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test065168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    }

    @Test(timeout = 4000)
    public void test065169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test066170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test066171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test066172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
    }

    @Test(timeout = 4000)
    public void test067173() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(allType0);
    }

    @Test(timeout = 4000)
    public void test068174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test068175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test068176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test069177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        JSType jSType0 = errorFunctionType0.getReturnType();
        jSType0.testForEquality(errorFunctionType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test069178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        JSType jSType0 = errorFunctionType0.getReturnType();
        jSType0.testForEquality(errorFunctionType0);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test069179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        JSType jSType0 = errorFunctionType0.getReturnType();
        jSType0.testForEquality(errorFunctionType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test070180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderInequality(enumElementType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test071181() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getTypesUnderInequality(noType0);
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test072182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        booleanType0.getTypesUnderEquality(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test072183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        booleanType0.getTypesUnderEquality(noObjectType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test073184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getTypesUnderInequality(voidType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test074185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        errorFunctionType0.testForEquality(errorFunctionType0);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test074186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        errorFunctionType0.testForEquality(errorFunctionType0);
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test075187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        booleanType0.getTypesUnderEquality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test076188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
        errorFunctionType0.testForEquality(objectType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test077189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        booleanType0.getTypesUnderEquality(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test077190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        booleanType0.getTypesUnderEquality(enumElementType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test078191() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test078192() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noObjectType0);
    }

    @Test(timeout = 4000)
    public void test079193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test079194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
    }

    @Test(timeout = 4000)
    public void test080195() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, voidType0);
        JSType jSType0 = proxyObjectType0.getLeastSupertype(voidType0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test081196() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        voidType0.getLeastSupertype(unionType0);
    }

    @Test(timeout = 4000)
    public void test082197() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) voidType0, (JSType) voidType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test082198() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) voidType0, (JSType) voidType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test083199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        boolean boolean0 = namedType0.canTestForShallowEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test083200() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        boolean boolean0 = namedType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test083201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        boolean boolean0 = namedType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test083202() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        boolean boolean0 = namedType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test084203() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test084204() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    }

    @Test(timeout = 4000)
    public void test084205() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test085206() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "W4916m<QC*");
        JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test085207() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "W4916m<QC*");
        JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
        errorFunctionType0.testForEquality(jSType0);
        errorFunctionType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test086208() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) enumElementType0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test086209() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) enumElementType0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
    }

    @Test(timeout = 4000)
    public void test087210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(voidType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test087211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(voidType0);
    }

    @Test(timeout = 4000)
    public void test088212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "wc~Oc?(C");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(voidType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test088213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "wc~Oc?(C");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(voidType0);
    }

    @Test(timeout = 4000)
    public void test089214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(booleanType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test089215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test090216() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test091217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        noResolvedType0.getLeastSupertype(booleanType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test092218() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test093219() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test094220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test094221() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test094222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test095223() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderEquality(voidType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test095224() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderEquality(voidType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test096225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test096226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
        noResolvedType0.getTypesUnderInequality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test097227() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderInequality(booleanType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test097228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderInequality(booleanType0);
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test098229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test098230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test098231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test098232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test099233() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(voidType0);
    }

    @Test(timeout = 4000)
    public void test100234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = namedType0.differsFrom(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test100235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = namedType0.differsFrom(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test101236() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseUnknownType();
        boolean boolean0 = noResolvedType0.differsFrom(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test101237() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseUnknownType();
        boolean boolean0 = noResolvedType0.differsFrom(jSType0);
    }

    @Test(timeout = 4000)
    public void test101238() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseUnknownType();
        boolean boolean0 = noResolvedType0.differsFrom(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test102239() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
        boolean boolean0 = booleanType0.differsFrom(arrowType0);
    }

    @Test(timeout = 4000)
    public void test102240() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
        boolean boolean0 = booleanType0.differsFrom(arrowType0);
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test102241() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, booleanType0, true);
        boolean boolean0 = booleanType0.differsFrom(arrowType0);
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test103242() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, voidType0);
        boolean boolean0 = proxyObjectType0.differsFrom(proxyObjectType0);
    }

    @Test(timeout = 4000)
    public void test104243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(templateType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test104244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(templateType0);
    }

    @Test(timeout = 4000)
    public void test105245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test105246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    }

    @Test(timeout = 4000)
    public void test105247() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test106248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, noResolvedType0);
    }
}
