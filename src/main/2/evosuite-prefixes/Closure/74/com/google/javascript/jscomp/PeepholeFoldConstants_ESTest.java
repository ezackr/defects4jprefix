/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:09:48 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(83);
        Node node1 = new Node(26, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(83);
        Node node1 = new Node(26, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(82);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Node node0 = new Node(39);
        Node node1 = new Node(32, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Node node0 = new Node(285, 285, 285);
        Node node1 = new Node(44, 4, 41);
        Node node2 = new Node(15, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(9, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(9, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-506));
        Node node1 = new Node(0, 2, 37);
        Node node2 = new Node(10, node0, node1, node1, 27, 4);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-506));
        Node node1 = new Node(0, 2, 37);
        Node node2 = new Node(10, node0, node1, node1, 27, 4);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(30);
        Node node1 = new Node(45, 26, 36);
        Node node2 = new Node(11, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test00610() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(30);
        Node node1 = new Node(45, 26, 36);
        Node node2 = new Node(11, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test00711() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(12, node1, node0, node0, 29, 3);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test00812() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(80);
        Node node1 = new Node(16, 1, 28);
        Node node2 = new Node(13, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test00913() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(14, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test01014() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        Node node1 = new Node(47, 47, 47);
        Node node2 = new Node(16, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01115() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(33);
        Node node1 = new Node(1, 11, 27);
        Node node2 = new Node(18, node0, node0, node1, 27, 17);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test01216() throws Throwable {
        Node node0 = new Node(461, 461, 461);
        Node node1 = new Node(12, 30, 1);
        Node node2 = new Node(20, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test01317() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(28, 28, 28);
        Node node1 = new Node(31, 1, 15);
        Node node2 = new Node(21, node1, node0, node0, 2, 47);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01318() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(28, 28, 28);
        Node node1 = new Node(31, 1, 15);
        Node node2 = new Node(21, node1, node0, node0, 2, 47);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        Node node0 = new Node(20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(23, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01420() throws Throwable {
        Node node0 = new Node(20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(23, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test01521() throws Throwable {
        Node node0 = new Node(47);
        Node node1 = Node.newString(38, "!5\"}*U");
        Node node2 = new Node(24, node1, node0, node1, node0, 15, 21);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test01522() throws Throwable {
        Node node0 = new Node(47);
        Node node1 = Node.newString(38, "!5\"}*U");
        Node node2 = new Node(24, node1, node0, node1, node0, 15, 21);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01623() throws Throwable {
        Node node0 = new Node((-706));
        Node node1 = new Node(8, 2, 48);
        Node node2 = new Node(25, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01624() throws Throwable {
        Node node0 = new Node((-706));
        Node node1 = new Node(8, 2, 48);
        Node node2 = new Node(25, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test01725() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(80);
        Node node1 = new Node(80);
        Node node2 = new Node(31, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01826() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(34);
        Node node1 = new Node(40);
        Node node2 = new Node(34, node0, node0, node1, 31, 3);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01927() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(65, 65, 65);
        Node node1 = new Node(30, 22, 27);
        Node node2 = new Node(35, node0, node1, node1, 44, 35);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02028() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1399, 1399, 1399);
        Node node1 = new Node(35);
        Node node2 = new Node(36, node1, node0, node0, 2, 30);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getLineno();
    }

    @Test(timeout = 4000)
    public void test02129() throws Throwable {
        Node node0 = new Node(32, 32, 32);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(38, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02230() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(39);
        Node node1 = new Node(40);
        Node node2 = new Node(39, node0, node0, node1, 31, 3);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02331() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(39);
        Node node1 = new Node(0, 26, 36);
        Node node2 = new Node(40, node1, node0, node0, 48, 4095);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02432() throws Throwable {
        Node node0 = new Node((-1033));
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(41, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02533() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64);
        Node node1 = new Node(21);
        Node node2 = new Node(42, node0, node1, node1, 44, 35);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02634() throws Throwable {
        Node node0 = new Node((-33));
        Node node1 = new Node(29, 4, 41);
        Node node2 = new Node(43, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02735() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(147, 147, 147);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(44, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test02836() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-506));
        Node node1 = new Node(36, 43, 20);
        Node node2 = new Node(45, node1, node0, 11, 0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test02937() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(48);
        Node node2 = new Node(46, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03038() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(47);
        Node node1 = new Node(40);
        Node node2 = new Node(47, node0, node0, node1, 31, 3);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test03139() throws Throwable {
        Node node0 = new Node((-51), (-51), (-51));
        Node node1 = new Node(29, 4, 41);
        Node node2 = new Node(48, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03240() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(49, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03341() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(50, 50, 50);
        Node node1 = new Node(40);
        Node node2 = new Node(50, node0, node0, node1, 31, 3);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03442() throws Throwable {
        Node node0 = new Node(9);
        Node node1 = new Node(20, 4, 39);
        Node node2 = new Node(51, node1, node1, node0, 38, 49);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03543() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(306654252, 306654252, 306654252);
        Node node1 = new Node(306654252, 47, 31);
        Node node2 = new Node(52, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test03644() throws Throwable {
        Node node0 = new Node(123, 123, 123);
        Node node1 = Node.newString("QNMY", 39, 12);
        Node node2 = new Node(53, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03745() throws Throwable {
        Node node0 = new Node((-1001));
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(54, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03846() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(75, 75, 75);
        Node node1 = new Node(15, (-3), 0);
        Node node2 = new Node(55, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03947() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1391, 1391, 1391);
        Node node1 = new Node(8);
        Node node2 = new Node(56, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test04048() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(40);
        Node node2 = new Node(57, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04149() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(58);
        Node node1 = new Node(40);
        Node node2 = new Node(58, node0, node0, node1, 31, 3);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04250() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57);
        Node node1 = new Node(45, 26, 36);
        Node node2 = new Node(59, node0, node1, node1, 11, 55);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04351() throws Throwable {
        Node node0 = new Node((-1033), (-1033), (-1033));
        Node node1 = new Node(35);
        Node node2 = new Node(60, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04452() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(61, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04553() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(306654262);
        Node node1 = new Node(306654262, 47, 31);
        Node node2 = new Node(62, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04654() throws Throwable {
        Node node0 = new Node(39);
        Node node1 = new Node(2);
        Node node2 = new Node(63, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04755() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64);
        Node node1 = new Node(40);
        Node node2 = new Node(64, node0, node0, node1, 31, 14);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test04856() throws Throwable {
        Node node0 = new Node((-1033));
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(65, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test04957() throws Throwable {
        Node node0 = Node.newString("computeCFG");
        Node node1 = new Node(22, 26, 26);
        Node node2 = new Node(66, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test05058() throws Throwable {
        Node node0 = new Node(461, 461, 461);
        Node node1 = new Node(12, 30, 1);
        Node node2 = new Node(67, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test05159() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(68);
        Node node1 = new Node(40);
        Node node2 = new Node(68, node0, node0, node1, 31, 3);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test05260() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64, 64, 64);
        Node node1 = new Node(21);
        Node node2 = new Node(69, node0, node1, node1, 44, 35);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test05361() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        Node node1 = new Node(11, 49, 13);
        Node node2 = new Node(70, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test05462() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(306654248);
        Node node1 = new Node(306654248, 47, 31);
        Node node2 = new Node(71, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test05563() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(72, 72, 72);
        Node node1 = new Node(40);
        Node node2 = new Node(72, node0, node0, node1, 31, 3);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test05664() throws Throwable {
        Node node0 = new Node((-33));
        Node node1 = new Node(29, 4, 41);
        Node node2 = new Node(73, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test05765() throws Throwable {
        Node node0 = new Node(20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(74, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test05866() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(75, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test05967() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-506));
        Node node1 = new Node(36, 43, 20);
        Node node2 = new Node(76, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06068() throws Throwable {
        Node node0 = new Node((-701), (-701), (-701));
        Node node1 = new Node(8, 2, 48);
        Node node2 = new Node(77, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06169() throws Throwable {
        Node node0 = Node.newString("P;88M5S");
        Node node1 = Node.newString(44, "P;88M5S");
        Node node2 = new Node(78, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06270() throws Throwable {
        Node node0 = new Node(32, 32, 32);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(79, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06371() throws Throwable {
        Node node0 = new Node(284, 284, 284);
        Node node1 = new Node(43, 23, 29);
        Node node2 = new Node(80, node1, node0, node0, 2, 4);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06472() throws Throwable {
        Node node0 = new Node(494);
        Node node1 = new Node(43, 23, 29);
        Node node2 = new Node(81, node1, node0, node0, 2, 4);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06573() throws Throwable {
        Node node0 = new Node((-51), (-51), (-51));
        Node node1 = new Node(29, 4, 41);
        Node node2 = new Node(82, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06674() throws Throwable {
        Node node0 = new Node((-1021));
        Node node1 = new Node(35);
        Node node2 = new Node(83, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test06775() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(65);
        Node node1 = new Node(40);
        Node node2 = new Node(84, node1, node1, node0, 16, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06876() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(85, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test06977() throws Throwable {
        Node node0 = new Node((-474), (-474), (-474));
        Node node1 = new Node(29, 4, 41);
        Node node2 = new Node(86, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test07078() throws Throwable {
        Node node0 = new Node((-1033));
        Node node1 = new Node(35);
        Node node2 = new Node(87, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test07179() throws Throwable {
        Node node0 = new Node(0);
        Node node1 = new Node(29, 4, 41);
        Node node2 = new Node(88, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test07280() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(0, 14, 45);
        Node node2 = new Node(89, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test07381() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(20);
        Node node1 = new Node(0);
        Node node2 = new Node(90, node1, node1, node0, 16, 14);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test07482() throws Throwable {
        Node node0 = new Node((-38), (-38), (-38));
        Node node1 = new Node(19, 4, 41);
        Node node2 = new Node(91, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test07583() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(65);
        Node node1 = new Node(40);
        Node node2 = new Node(92, node1, node1, node0, 16, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test07684() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        Node node1 = new Node(48);
        Node node2 = new Node(93, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test07785() throws Throwable {
        Node node0 = new Node((-1033));
        Node node1 = new Node(35);
        Node node2 = new Node(94, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test07886() throws Throwable {
        Node node0 = new Node(284, 284, 284);
        Node node1 = new Node(43, 23, 29);
        Node node2 = new Node(95, node1, node0, node0, 1, 4);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test07987() throws Throwable {
        Node node0 = new Node(284, 284, 284);
        Node node1 = new Node(16, 4, 41);
        Node node2 = new Node(96, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test08088() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1399);
        Node node1 = new Node(1);
        Node node2 = new Node(97, node1, node0, node0, 2, 97);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test08189() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        Node node1 = new Node(46);
        Node node2 = new Node(98, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test08290() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(51, 51, 51);
        Node node1 = new Node(51, 51, 51);
        Node node2 = new Node(99, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test08391() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-506));
        Node node1 = new Node(36, 43, 20);
        Node node2 = new Node(101, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test08392() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-506));
        Node node1 = new Node(36, 43, 20);
        Node node2 = new Node(101, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test08493() throws Throwable {
        Node node0 = new Node(123);
        Node node1 = new Node(20, (-1), 15);
        Node node2 = new Node(8, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test08594() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(65);
        Node node1 = new Node(122, node0, node0);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test08695() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-1090), (-1090), (-1090));
        Node node1 = new Node(39, 26, 36);
        Node node2 = new Node(122, node1, node0, node0, 42, 1);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test08796() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(60, 60, 60);
        Node node1 = new Node(21, node0, node0, node0, 26, 35);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test08797() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(60, 60, 60);
        Node node1 = new Node(21, node0, node0, node0, 26, 35);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test08898() throws Throwable {
        Node node0 = new Node(251);
        Node node1 = new Node(43, 23, 29);
        Node node2 = new Node(21, node1, node0, node0, 2, 4);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test08999() throws Throwable {
        Node node0 = new Node(2455, 2455, 2455);
        Node node1 = Node.newNumber((double) 0);
        Node node2 = new Node(22, node1, node0, node0, (-3), 2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test089100() throws Throwable {
        Node node0 = new Node(2455, 2455, 2455);
        Node node1 = Node.newNumber((double) 0);
        Node node2 = new Node(22, node1, node0, node0, (-3), 2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test090101() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(85, 117, 28);
        Node node1 = new Node(9, node0, node0);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test091102() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        Node node1 = new Node(19, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test092103() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(100);
        Node node1 = new Node(29, node0, node0);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test093104() throws Throwable {
        Node node0 = new Node(294);
        Node node1 = new Node(101, 4, 41);
        Node node2 = new Node(96, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test094105() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Infinity", 5, 55);
        Node node1 = new Node(10, node0, node0);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test095106() throws Throwable {
        Node node0 = Node.newString("oN3/d");
        Node node1 = new Node(25, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test096107() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(10, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test097108() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(32);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test098109() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        Node node1 = new Node(32, node0, node0, node0, 44, 35);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.getLineno();
    }

    @Test(timeout = 4000)
    public void test099110() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("", 33, 33);
        Node node1 = new Node(32, node0, node0);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test100111() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(41, 41, 41);
        Node node1 = new Node(32, node0, node0, node0, 14, 2);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test101112() throws Throwable {
        Node node0 = new Node(43);
        Node node1 = new Node(32, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test102113() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        Node node1 = new Node(32, node0, node0, node0, 44, 35);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test103114() throws Throwable {
        Node node0 = new Node(63);
        Node node1 = new Node(32, node0, node0, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test104115() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Node node1 = new Node(32, node0, node0, node0, 44, 35);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test105116() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        Node node1 = new Node(32, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test106117() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        Node node1 = new Node(29, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test107118() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        Node node1 = new Node(26, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test108119() throws Throwable {
        Node node0 = Node.newNumber((double) 27);
        Node node1 = new Node(27, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test109120() throws Throwable {
        Node node0 = Node.newNumber((double) 0);
        Node node1 = new Node(28, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test110121() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        Node node1 = new Node(26, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test111122() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        Node node1 = Node.newString("hUjRg", 8, 37);
        Node node2 = new Node(52, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations((AbstractCompiler) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, moveFunctionDeclarations0);
        peepholeFoldConstants0.beginTraversal(nodeTraversal0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test112123() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64);
        Node node1 = new Node(49, 29, 8);
        Node node2 = new Node(100, node0, node1, node1, 34, 16);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test113124() throws Throwable {
        Node node0 = Node.newString("CcHx2");
        Node node1 = Node.newString(39, "Infinity");
        Node node2 = new Node(101, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Compiler compiler0 = new Compiler((PrintStream) null);
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0, (ScopeCreator) null);
        peepholeFoldConstants0.beginTraversal(nodeTraversal0);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test114125() throws Throwable {
        Node node0 = Node.newString("o)&N3/dP");
        Node node1 = new Node(2, 0, 11);
        Node node2 = new Node(21, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test115126() throws Throwable {
        Node node0 = Node.newString(")&N#3/dP");
        Node node1 = Node.newString(")&N#3/dP");
        Node node2 = new Node(21, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test116127() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newString(44, "");
        Node node2 = new Node(21, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test117128() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2543);
        Node node1 = new Node(39, 26, 36);
        Node node2 = new Node(19, node1, node1, node0, 8, 46);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test118129() throws Throwable {
        Node node0 = new Node(79);
        Node node1 = Node.newString(38, "!5\"}*U");
        Node node2 = new Node(16, node1, node1, node0, (-710), 33);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test119130() throws Throwable {
        Node node0 = new Node(39, 39, 39);
        Node node1 = new Node(0);
        Node node2 = new Node(16, node0, node1, 19, 27);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test120131() throws Throwable {
        Node node0 = Node.newString("]");
        Node node1 = Node.newString("]");
        Node node2 = new Node(17, node1, node0, node0, 18, 15);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test121132() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(41, (-974), 13);
        Node node2 = new Node(16, node1, node0, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test122133() throws Throwable {
        Node node0 = new Node(42);
        Node node1 = new Node(42, 42, 42);
        Node node2 = new Node(16, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test123134() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(0);
        Node node2 = new Node(16, node0, node1, 67, 27);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test124135() throws Throwable {
        Node node0 = Node.newString("P;88M5S");
        Node node1 = Node.newString(44, "P;88M5S");
        Node node2 = new Node(17, node1, node0, node0, 18, 15);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test125136() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(41, (-974), 13);
        Node node2 = new Node(17, node1, node1, node0, 48, 12);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test126137() throws Throwable {
        Node node0 = new Node(40, 40, 40);
        Node node1 = new Node(40, 40, 40);
        Node node2 = new Node(32, node0);
        Node node3 = new Node(16, node1, node2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
    }

    @Test(timeout = 4000)
    public void test127138() throws Throwable {
        Node node0 = new Node(47);
        Node node1 = Node.newString(38, "!5\"}*U");
        Node node2 = new Node(16, node1, node1, node0, (-702), 2070);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test128139() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(35, 35, 35);
        Node node1 = new Node(30, 22, 27);
        Node node2 = new Node(35, node0, node1, node0, 44, 35);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
        node3.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test129140() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(30);
        Node node1 = new Node(19, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test130141() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(73);
        Node node1 = new Node(30, 22, 27);
        Node node2 = new Node(35, node0, node1, node1, 44, 35);
        node1.addChildrenToFront(node2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test131142() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(84);
        Node node1 = new Node(37, node0, node0, node0, 4, 42);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.hasChildren();
    }

    @Test(timeout = 4000)
    public void test132143() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(37);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test133144() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(84);
        Node node1 = new Node(33, 18, 40);
        Node node2 = new Node(37, node1, node0, node0, 4, 42);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test134145() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(33);
        Node node1 = new Node(37, node0, node0, 3, 2);
        node0.addChildToFront(node1);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test134146() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(33);
        Node node1 = new Node(37, node0, node0, 3, 2);
        node0.addChildToFront(node1);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test135147() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(40);
        Node node1 = new Node(33, 18, 40);
        Node node2 = new Node(37, node1, node0, node0, 4, 42);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test136148() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64, 64, 64);
        Node node1 = new Node(30, 22, 27);
        Node node2 = new Node(35, node0, node1, node1, 44, 35);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test137149() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(2, 10, 37);
        Node node2 = new Node(33, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getLineno();
    }

    @Test(timeout = 4000)
    public void test138150() throws Throwable {
        Node node0 = Node.newString("o&N3/d");
        Node node1 = Node.newString("o&N3/d");
        Node node2 = new Node(33, node0, node0, node1, 1, 23);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }
}
