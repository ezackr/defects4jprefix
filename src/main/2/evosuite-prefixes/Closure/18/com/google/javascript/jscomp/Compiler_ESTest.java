/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 00:42:35 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.protobuf.ByteString;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler0.toSource(compiler_CodeBuilder0, (-268), (Node) null);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Compiler.setLoggingLevel((Level) null);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("=Rbae^&", "=Rbae^&");
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        String string0 = Compiler.getReleaseDate();
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getPropertyMap();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
        compiler0.setPassConfig(defaultPassConfig0);
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        String string0 = Compiler.getReleaseVersion();
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        Compiler.runCallableWithLargeStack((Callable<NameAnonymousFunctionsMapped>) null);
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getVariableMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getFunctionalInformationMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        String string0 = compiler0.toSource(node0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        String string0 = compiler0.toSource(node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test02630() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        String string0 = compiler0.toSource(node0);
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        InputId inputId0 = jsAst0.getInputId();
        compiler0.removeExternInput(inputId0);
    }

    @Test(timeout = 4000)
    public void test02832() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0, true);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02933() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("!NjVE\":o:'^od||A");
        compiler0.compile(sourceFile0, sourceFile0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test03034() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        ByteString.Output byteString_Output0 = ByteString.newOutput();
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteString_Output0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.getInputsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03337() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];
        JSModule[] jSModuleArray0 = new JSModule[1];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03438() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.ForbiddenChange codeChangeHandler_ForbiddenChange0 = new CodeChangeHandler.ForbiddenChange();
        compiler0.removeChangeHandler(codeChangeHandler_ForbiddenChange0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03539() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getInputsById();
    }

    @Test(timeout = 4000)
    public void test03640() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(true);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03741() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("r}J0kJM23I?*:C?g~kJ", (Charset) null);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(jSSourceFile0, (JSModule[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03943() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getExternsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test04246() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getTopScope();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04347() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        MockPrintStream mockPrintStream0 = new MockPrintStream("le.javascript.jscomp.CheckMissingGetCssNamejs/%s.js");
        Object[] objectArray0 = new Object[5];
        objectArray0[0] = (Object) compiler_CodeBuilder0;
        PrintStream printStream0 = mockPrintStream0.printf("le.javascript.jscomp.CheckMissingGetCssNamejs/%s.js", objectArray0);
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        Compiler compiler0 = new Compiler();
        Charset charset0 = Charset.defaultCharset();
        SourceFile sourceFile0 = SourceFile.fromFile("normalizeNodeType constraints violated", charset0);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        JSModule[] jSModuleArray0 = new JSModule[0];
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.initOptions(compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04954() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.initOptions(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05055() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCheckGlobalThisLevel(compilerOptions0.brokenClosureRequiresLevel);
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCheckGlobalThisLevel(compilerOptions0.brokenClosureRequiresLevel);
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05057() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCheckGlobalThisLevel(compilerOptions0.brokenClosureRequiresLevel);
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05159() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05261() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("jw*.H86Xr");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[6];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        jSSourceFileArray0[5] = jSSourceFile0;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05262() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("jw*.H86Xr");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[6];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        jSSourceFileArray0[5] = jSSourceFile0;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05363() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("Py");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05464() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.parseInputs();
        Vector<JSModule> vector1 = new Vector<JSModule>();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) vector1, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05565() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05566() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05667() throws Throwable {
        Callable<ConstCheck> callable0 = (Callable<ConstCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        ConstCheck constCheck0 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test05768() throws Throwable {
        Compiler.runCallable((Callable<ConstCheck>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test05869() throws Throwable {
        Compiler.runCallable((Callable<ConstCheck>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test05970() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("m:Pdg!H'!p$-%");
        compiler0.disableThreads();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        sourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test05971() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("m:Pdg!H'!p$-%");
        compiler0.disableThreads();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06072() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.createPassConfigInternal();
        compiler0.setPassConfig(passConfig0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06173() throws Throwable {
        Compiler compiler0 = new Compiler();
        Charset charset0 = Charset.defaultCharset();
        SourceFile sourceFile0 = SourceFile.fromFile("normalizeNodeType constraints violated", charset0);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.check();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06274() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypes, compilerOptions0.stripTypePrefixes, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test06375() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("EX,wZ--9bh]^6aI'8");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.startPass((String) null);
        compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripTypes);
    }

    @Test(timeout = 4000)
    public void test06476() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test06577() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("FT(S");
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("FT(S");
        FileSystemHandling.appendLineToFile(evoSuiteFile0, "jscomp_%s_");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        sourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test06578() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("FT(S");
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("FT(S");
        FileSystemHandling.appendLineToFile(evoSuiteFile0, "jscomp_%s_");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06679() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test06680() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06681() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
    }

    @Test(timeout = 4000)
    public void test06682() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06783() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("{F");
        compiler0.removeExternInput((InputId) null);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06784() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("{F");
        compiler0.removeExternInput((InputId) null);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06785() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("{F");
        compiler0.removeExternInput((InputId) null);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06886() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.getSynthesizedExternsInput();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06987() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07088() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.getSourceRegion("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair", 158);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07089() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.getSourceRegion("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair", 158);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07190() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("%name%");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("%name%");
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.replaceScript(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07291() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("/ho");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("/ho", "/ho");
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.addNewScript(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07392() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("Py");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.init((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        boolean boolean0 = compiler0.addNewSourceAst(jsAst0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07393() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("Py");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.init((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        boolean boolean0 = compiler0.addNewSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07494() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getDegenerateModuleGraph();
    }

    @Test(timeout = 4000)
    public void test07595() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("&");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07596() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("&");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07597() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("&");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07598() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("&");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test07699() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("%num%");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test076100() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("%num%");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test076101() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("%num%");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test076102() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("%num%");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test077103() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.START_AND_END;
        compilerOptions0.devMode = compilerOptions_DevMode0;
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test078104() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test079105() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.parseInputs();
        String string0 = compiler0.getAstDotGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test079106() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.parseInputs();
        String string0 = compiler0.getAstDotGraph();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test079107() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.parseInputs();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test080108() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.processAMDAndCommonJSModules();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test080109() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.processAMDAndCommonJSModules();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test081110() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("dQ`<Ww|$bEggRDQ'S");
        Node node0 = compiler0.parseTestCode("dQ`<Ww|$bEggRDQ'S");
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test081111() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("dQ`<Ww|$bEggRDQ'S");
        Node node0 = compiler0.parseTestCode("dQ`<Ww|$bEggRDQ'S");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test081112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("dQ`<Ww|$bEggRDQ'S");
        Node node0 = compiler0.parseTestCode("dQ`<Ww|$bEggRDQ'S");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test082113() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("INTERNAL COMPILER ERROR.\nPlease report this problem.\n");
    }

    @Test(timeout = 4000)
    public void test083114() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("le.javascripB.jscomp CheckMissingGetCssNImejs/%s.js");
    }

    @Test(timeout = 4000)
    public void test084115() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("%2v6wCfSpG$");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("[testcode]");
    }

    @Test(timeout = 4000)
    public void test085116() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("$NYe'\"D>I2eD[1!iZMs");
        compiler_CodeBuilder1.append("PassConfigs must eventually delegate to the DefaultPassConfig");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("PassConfigs must eventually delegate to the DefaultPassConfig");
    }

    @Test(timeout = 4000)
    public void test086117() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        sourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test086118() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.optimize();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test087119() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("EX,wZ--9bh]^6aI'8");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test087120() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("EX,wZ--9bh]^6aI'8");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test087121() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("EX,wZ--9bh]^6aI'8");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test087122() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("EX,wZ--9bh]^6aI'8");
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test088123() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.init((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.ensureLibraryInjected((String) null);
    }

    @Test(timeout = 4000)
    public void test089124() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        compilerOptions0.setCodingConvention(closureCodingConvention0);
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test089125() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        compilerOptions0.setCodingConvention(closureCodingConvention0);
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test089126() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        compilerOptions0.setCodingConvention(closureCodingConvention0);
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test090127() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
    }

    @Test(timeout = 4000)
    public void test090128() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test090129() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test091130() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("msg.catch.unreachable");
        JsAst jsAst0 = new JsAst(sourceFile0);
        jsAst0.getAstRoot(compiler0);
    }

    @Test(timeout = 4000)
    public void test092131() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("/OXx6Mg^8#)2qE*", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test093132() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("le.javascript.jscomp.CheckMissingGetCssNamejs/%s.js");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.getSourceRegion((String) null, 132);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test094133() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("%Qname%");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test095134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceRegion("1~ OXV_6._H", (-548));
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test096135() throws Throwable {
        JSModule jSModule0 = new JSModule("Ax%B_Gh#,ubs}h[swd");
        Compiler compiler0 = new Compiler();
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test097136() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test098137() throws Throwable {
        JSModule jSModule0 = new JSModule("Ax%B_Gh#,ubs}h[swd");
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(sourceFile_Generator0).getCode();
        SourceFile sourceFile0 = SourceFile.fromGenerator("Ax%B_Gh#,ubs}h[swd", sourceFile_Generator0);
        jSModule0.addFirst(sourceFile0);
        Compiler compiler0 = new Compiler();
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test099138() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getAstDotGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test100139() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        compiler0.getErrorManager();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test100140() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("com.google.javascript.jscomp.TightenTypes$ConcreteJSTypePair");
        compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test101141() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test101142() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test101143() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test102144() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("q<zj3xBB7o,3");
        compiler0.updateGlobalVarReferences((Map<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>) null, node0);
    }

    @Test(timeout = 4000)
    public void test103145() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 51);
        compiler0.updateGlobalVarReferences((Map<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>) null, node0);
    }

    @Test(timeout = 4000)
    public void test104147() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("dWO)");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile(sourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.buildKnownSymbolTable();
        compiler0.buildKnownSymbolTable();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test105149() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress(1055.339364904);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test106150() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress((-2734.5));
        compiler0.getProgress();
    }
}
