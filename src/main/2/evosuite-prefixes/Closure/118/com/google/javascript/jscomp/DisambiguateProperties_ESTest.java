/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:15:20 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.Collection;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DisambiguateProperties_ESTest extends DisambiguateProperties_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("=GrV_sr]=dpIfr|6Tn");
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, treeMap0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Unknown type ");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, treeMap0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty("-jq6Qv;c)97", enumElementType0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        DisambiguateProperties.Warnings disambiguateProperties_Warnings0 = new DisambiguateProperties.Warnings();
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("o{2Qi[)|u 34{i2");
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, treeMap0);
        disambiguateProperties0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Unknown type ");
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, treeMap0);
        disambiguateProperties0.renameProperties();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("t-T\"if ");
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, treeMap0);
        Multimap<String, Collection<JSType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("o{2Qi[)|u 34{i2");
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, treeMap0);
        JSType jSType0 = disambiguateProperties0.getTypeWithProperty("o{2Qi[)|u 34{i2", (JSType) null);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("o{2Qi[)|u 34{i2");
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, treeMap0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty("o{2Qi[)|u 34{i2", jSType0);
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("remove_unused_prototype_properties_in_externs and export_local_property_definitions cannot be used together.");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        TreeMap<String, CheckLevel> treeMap0 = new TreeMap<String, CheckLevel>();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, treeMap0);
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty("remove_unused_prototype_properties_in_externs and export_local_property_definitions cannot be used together.", jSType0);
    }

    @Test(timeout = 4000)
    public void test99() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("t-T\"if ");
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ImmutableMap<String, CheckLevel> immutableMap0 = ImmutableMap.of("}%WF6_7sqy{=.c;z0G", checkLevel0);
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, immutableMap0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("prototype", node0, templateType0);
        JSType jSType0 = disambiguateProperties0.getTypeWithProperty("prototype", enumType0);
    }
}
