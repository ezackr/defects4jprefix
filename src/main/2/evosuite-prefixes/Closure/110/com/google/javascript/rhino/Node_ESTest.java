/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 06:48:50 GMT 2024
 */
package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Node_ESTest extends Node_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
        node_AncestorIterable0.spliterator();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
        node_AncestorIterable0.spliterator();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
        node_AncestorIterable0.spliterator();
        node0.isDec();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        node0.putProp(46, 40);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        node0.putProp(56, node0);
        node0.getChangeTime();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Node node0 = new Node((-10));
        node0.setSourceFileForTesting((String) null);
        node0.addSuppression((String) null);
        node0.putProp(51, 2);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        Node node0 = new Node((-10));
        node0.setSourceFileForTesting((String) null);
        node0.addSuppression((String) null);
        node0.putProp(51, 2);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        Node node0 = new Node(59, 59, 59);
        node0.getJsDocBuilderForNode();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        Node node0 = new Node(59, 59, 59);
        node0.getJsDocBuilderForNode();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test0059() throws Throwable {
        Node node0 = Node.newString("com.google.common.collect.Lists$TransformingSequentialList");
        node0.setQuotedString();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        Node node0 = Node.newString("com.google.common.collect.Lists$TransformingSequentialList");
        node0.setQuotedString();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test00611() throws Throwable {
        Node node0 = Node.newString(28, "Xm<ZnfCVFn", 28, 28);
        boolean boolean0 = node0.isQuotedString();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test00612() throws Throwable {
        Node node0 = Node.newString(28, "Xm<ZnfCVFn", 28, 28);
        boolean boolean0 = node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test00613() throws Throwable {
        Node node0 = Node.newString(28, "Xm<ZnfCVFn", 28, 28);
        boolean boolean0 = node0.isQuotedString();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test00714() throws Throwable {
        Node node0 = Node.newString(38, "", 54, 31);
        node0.isUnscopedQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test00715() throws Throwable {
        Node node0 = Node.newString(38, "", 54, 31);
        node0.isUnscopedQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test00816() throws Throwable {
        Node node0 = new Node(147, 147, 147);
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
        node0.setSideEffectFlags(node_SideEffectFlags0);
    }

    @Test(timeout = 4000)
    public void test00917() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        node_SideEffectFlags0.setMutatesGlobalState();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test01018() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
        node_SideEffectFlags0.setMutatesArguments();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test01119() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
        node_SideEffectFlags0.clearAllFlags();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test01220() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
        node_SideEffectFlags0.clearSideEffectFlags();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test01321() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
        node_SideEffectFlags1.valueOf();
    }

    @Test(timeout = 4000)
    public void test01422() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
        node_SideEffectFlags1.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test01523() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
        node_SideEffectFlags1.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test01624() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        node0.setDouble(0.0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test01625() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        node0.setDouble(0.0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01726() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = new Node(12, node0, node0, node0);
        String string0 = node0.checkTreeEquals(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01727() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = new Node(12, node0, node0, node0);
        String string0 = node0.checkTreeEquals(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test01728() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = new Node(12, node0, node0, node0);
        String string0 = node0.checkTreeEquals(node1);
    }

    @Test(timeout = 4000)
    public void test01730() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = new Node(12, node0, node0, node0);
        String string0 = node0.checkTreeEquals(node1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test01831() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        InputId inputId0 = new InputId("");
        node0.setInputId(inputId0);
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01832() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        InputId inputId0 = new InputId("");
        node0.setInputId(inputId0);
        node0.toStringTree();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test01833() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        InputId inputId0 = new InputId("");
        node0.setInputId(inputId0);
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test01934() throws Throwable {
        Node node0 = new Node(77);
        Node node1 = node0.srcref(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test01935() throws Throwable {
        Node node0 = new Node(77);
        Node node1 = node0.srcref(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test02036() throws Throwable {
        Node node0 = new Node((byte) 113);
        node0.setWasEmptyNode(false);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02037() throws Throwable {
        Node node0 = new Node((byte) 113);
        node0.setWasEmptyNode(false);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02138() throws Throwable {
        Node node0 = new Node(33);
        node0.addChildrenToBack(node0);
        // Undeclared exception!
        node0.isEquivalentTo(node0);
    }

    @Test(timeout = 4000)
    public void test02239() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        node0.getInputId();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test02240() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        node0.getInputId();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02341() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        node0.siblings();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test02342() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        node0.siblings();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02443() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        Node[] nodeArray0 = new Node[2];
        nodeArray0[0] = node0;
        Node node2 = null;
        node2 = new Node(51, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test02544() throws Throwable {
        Node node0 = new Node(119);
        node0.setSourceEncodedPosition(119);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test02645() throws Throwable {
        Node node0 = new Node((byte) 30);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test02646() throws Throwable {
        Node node0 = new Node((byte) 30);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
        node0.isNew();
    }

    @Test(timeout = 4000)
    public void test02647() throws Throwable {
        Node node0 = new Node((byte) 30);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    }

    @Test(timeout = 4000)
    public void test02748() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test02749() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    }

    @Test(timeout = 4000)
    public void test02750() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02851() throws Throwable {
        Node node0 = new Node((-2602));
        node0.setIsSyntheticBlock(false);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02852() throws Throwable {
        Node node0 = new Node((-2602));
        node0.setIsSyntheticBlock(false);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02953() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        Node node1 = new Node(48, node0, node0, node0, 47, 1);
        node1.addChildToFront(node1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test03054() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isQuotedString();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03055() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isQuotedString();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03056() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test03157() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03158() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test03159() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03160() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03161() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test03162() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03263() throws Throwable {
        Node node0 = new Node(103);
        Node node1 = node0.srcrefTree(node0);
        node1.isDec();
    }

    @Test(timeout = 4000)
    public void test03264() throws Throwable {
        Node node0 = new Node(103);
        Node node1 = node0.srcrefTree(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test03365() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        node0.wasEmptyNode();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03366() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        node0.wasEmptyNode();
        node0.isCatch();
    }

    @Test(timeout = 4000)
    public void test03467() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isNoSideEffectsCall();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03468() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test03469() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isNoSideEffectsCall();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03570() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = node0.isOnlyModifiesThisCall();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03571() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = node0.isOnlyModifiesThisCall();
    }

    @Test(timeout = 4000)
    public void test03572() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = node0.isOnlyModifiesThisCall();
        node0.isDo();
    }

    @Test(timeout = 4000)
    public void test03673() throws Throwable {
        Node node0 = new Node(120);
        node0.getDirectives();
        node0.isCatch();
    }

    @Test(timeout = 4000)
    public void test03674() throws Throwable {
        Node node0 = new Node(120);
        node0.getDirectives();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03775() throws Throwable {
        Node node0 = new Node(29);
        node0.setChangeTime(29);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03776() throws Throwable {
        Node node0 = new Node(29);
        node0.setChangeTime(29);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03877() throws Throwable {
        Node node0 = Node.newString(0, "Should not happen\n", 0, 0);
        int int0 = node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03878() throws Throwable {
        Node node0 = Node.newString(0, "Should not happen\n", 0, 0);
        int int0 = node0.getSourcePosition();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03979() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        int int0 = node0.getLength();
    }

    @Test(timeout = 4000)
    public void test03980() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        int int0 = node0.getLength();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03981() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        int int0 = node0.getLength();
        node0.isVar();
    }

    @Test(timeout = 4000)
    public void test04082() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        node0.setCharno(101);
        node0.isAnd();
    }

    @Test(timeout = 4000)
    public void test04083() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        node0.setCharno(101);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test04184() throws Throwable {
        Node node0 = new Node(Integer.MAX_VALUE);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04185() throws Throwable {
        Node node0 = new Node(Integer.MAX_VALUE);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04186() throws Throwable {
        Node node0 = new Node(Integer.MAX_VALUE);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test04187() throws Throwable {
        Node node0 = new Node(Integer.MAX_VALUE);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
    }

    @Test(timeout = 4000)
    public void test04288() throws Throwable {
        Node node0 = new Node(115);
        node0.setDirectives((Set<String>) null);
        node0.isFor();
    }

    @Test(timeout = 4000)
    public void test04289() throws Throwable {
        Node node0 = new Node(115);
        node0.setDirectives((Set<String>) null);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04390() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
        JSType jSType1 = modificationVisitor0.caseFunctionType(functionType0);
        jSType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test04491() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        node0.setQuotedString();
    }

    @Test(timeout = 4000)
    public void test04592() throws Throwable {
        Node node0 = new Node(143, 143, 143);
        boolean boolean0 = node0.isLocalResultCall();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04593() throws Throwable {
        Node node0 = new Node(143, 143, 143);
        boolean boolean0 = node0.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test04594() throws Throwable {
        Node node0 = new Node(143, 143, 143);
        boolean boolean0 = node0.isLocalResultCall();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test04695() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        node0.setSourceFileForTesting((String) null);
        int int0 = node0.getSourceOffset();
        node0.isVar();
    }

    @Test(timeout = 4000)
    public void test04696() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        node0.setSourceFileForTesting((String) null);
        int int0 = node0.getSourceOffset();
    }

    @Test(timeout = 4000)
    public void test04697() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        node0.setSourceFileForTesting((String) null);
        int int0 = node0.getSourceOffset();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04798() throws Throwable {
        Node node0 = new Node((-1));
        node0.setIsSyntheticBlock(true);
        boolean boolean0 = node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test04799() throws Throwable {
        Node node0 = new Node((-1));
        node0.setIsSyntheticBlock(true);
        boolean boolean0 = node0.isSyntheticBlock();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test047100() throws Throwable {
        Node node0 = new Node((-1));
        node0.setIsSyntheticBlock(true);
        boolean boolean0 = node0.isSyntheticBlock();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test048101() throws Throwable {
        Node node0 = new Node(154);
        node0.putBooleanProp(117, true);
        node0.getProp(117);
    }

    @Test(timeout = 4000)
    public void test049102() throws Throwable {
        Node node0 = new Node(16);
        node0.putProp(29, node0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test050103() throws Throwable {
        Node node0 = new Node((-1));
        node0.setIsSyntheticBlock(true);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test051104() throws Throwable {
        Node node0 = new Node(30);
        node0.putProp(30, "com.google.javascript.rhino.Node$AbstractPropListItem");
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test052105() throws Throwable {
        Node node0 = new Node(31);
        Object object0 = new Object();
        node0.putProp(31, object0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test053106() throws Throwable {
        Node node0 = new Node(149, 149, 149);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        node0.putProp(32, locale_FilteringMode0);
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test053107() throws Throwable {
        Node node0 = new Node(149, 149, 149);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        node0.putProp(32, locale_FilteringMode0);
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test053108() throws Throwable {
        Node node0 = new Node(149, 149, 149);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        node0.putProp(32, locale_FilteringMode0);
        node0.toStringTree();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test054109() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(33, jSDocInfo0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test055110() throws Throwable {
        Node node0 = new Node(103);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        node0.putProp(34, locale_FilteringMode0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test056111() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(35, jSDocInfo0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test057112() throws Throwable {
        Node node0 = new Node(16);
        node0.putProp(36, node0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test058113() throws Throwable {
        Node node0 = new Node(37);
        Locale locale0 = Locale.ROOT;
        node0.putProp(37, locale0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test059114() throws Throwable {
        Node node0 = new Node(30);
        Object object0 = new Object();
        node0.putProp(39, object0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test060115() throws Throwable {
        Node node0 = new Node(9, 9, 9);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(40, jSDocInfo0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test061116() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
        node0.putProp(41, locale_FilteringMode0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test062117() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
        node0.putProp(42, locale_FilteringMode0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test063118() throws Throwable {
        Node node0 = new Node(43);
        Object object0 = new Object();
        node0.putProp(43, object0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test064119() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        node0.putProp(44, "z{ut;zLDuG");
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test065120() throws Throwable {
        Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
        node0.putProp(45, "RANGE_ERROR_FUNCTION_TYPE");
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test066121() throws Throwable {
        Node node0 = new Node(47);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(47, jSDocInfo0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test067122() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(48, jSDocInfo0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test068123() throws Throwable {
        Node node0 = new Node(49);
        Locale locale0 = Locale.KOREAN;
        node0.putProp(49, locale0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test069124() throws Throwable {
        Node node0 = Node.newString(38, ",v^(", 54, 31);
        node0.putProp(50, ",v^(");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test069125() throws Throwable {
        Node node0 = Node.newString(38, ",v^(", 54, 31);
        node0.putProp(50, ",v^(");
        node0.toStringTree();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test069126() throws Throwable {
        Node node0 = Node.newString(38, ",v^(", 54, 31);
        node0.putProp(50, ",v^(");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test070127() throws Throwable {
        Node node0 = new Node((-1));
        node0.putProp(51, 40);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test071128() throws Throwable {
        Node node0 = new Node(16);
        node0.setLength(16);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test072129() throws Throwable {
        Node node0 = Node.newNumber((double) 58);
        node0.putProp(54, node0);
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test072130() throws Throwable {
        Node node0 = Node.newNumber((double) 58);
        node0.putProp(54, node0);
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test073131() throws Throwable {
        Node node0 = new Node(90, 154, 38);
        node0.putProp(55, node0.SIDE_EFFECT_FLAGS);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test074132() throws Throwable {
        Node node0 = new Node(114);
        node0.putProp(56, node0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test075133() throws Throwable {
        Node node0 = new Node((-1), (-1), (-1));
        Locale locale0 = Locale.KOREAN;
        node0.putProp(57, locale0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test076134() throws Throwable {
        Node node0 = new Node(14);
        node0.putProp(4095, node0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test077135() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(39, 12, 37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test077136() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(39, 12, 37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test077137() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(39, 12, 37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test077138() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(39, 12, 37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test077139() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(39, 12, 37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test078140() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 4095);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test078141() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 4095);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test078142() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 4095);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node1.isNumber();
    }

    @Test(timeout = 4000)
    public void test078143() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 4095);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test079144() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    }

    @Test(timeout = 4000)
    public void test079145() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test079146() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test079147() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test080148() throws Throwable {
        Node.newString((String) null);
    }

    @Test(timeout = 4000)
    public void test081149() throws Throwable {
        Node.newString(113, (String) null, 113, 113);
    }

    @Test(timeout = 4000)
    public void test082150() throws Throwable {
        Node node0 = Node.newString(125, " :Ou`EN{)mKo#`5l~");
        node0.setString(" :Ou`EN{)mKo#`5l~");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test082151() throws Throwable {
        Node node0 = Node.newString(125, " :Ou`EN{)mKo#`5l~");
        node0.setString(" :Ou`EN{)mKo#`5l~");
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test083152() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE", 306654267, 306654267);
        node0.setString((String) null);
    }

    @Test(timeout = 4000)
    public void test084153() throws Throwable {
        Node node0 = Node.newString("");
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test084154() throws Throwable {
        Node node0 = Node.newString("");
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test084155() throws Throwable {
        Node node0 = Node.newString("");
        boolean boolean0 = node0.isEquivalentTo(node0);
    }

    @Test(timeout = 4000)
    public void test085156() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newString("EGN 7", (-108), 50);
        node0.isEquivalentTo(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test085157() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newString("EGN 7", (-108), 50);
        node0.isEquivalentTo(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test085158() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newString("EGN 7", (-108), 50);
        node0.isEquivalentTo(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test085159() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newString("EGN 7", (-108), 50);
        node0.isEquivalentTo(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test085160() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newString("EGN 7", (-108), 50);
        node0.isEquivalentTo(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test086161() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(52, node0, node0, 39, 39);
        Node node2 = null;
        node2 = new Node(46, node0);
    }

    @Test(timeout = 4000)
    public void test087162() throws Throwable {
        Node node0 = new Node(4278);
        Node node1 = new Node(16, node0, node0, node0, 48, 4);
        Node node2 = null;
        node2 = new Node(39, node0, node0);
    }

    @Test(timeout = 4000)
    public void test088163() throws Throwable {
        Node node0 = new Node((-124));
        Node node1 = new Node(57, node0, node0, node0, 42, 48);
        Node node2 = null;
        node2 = new Node(56, node1, node0);
    }

    @Test(timeout = 4000)
    public void test089164() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        Node node1 = new Node(32, node0);
        Node node2 = null;
        node2 = new Node(47, node0, node1, node0, 48, 47);
    }

    @Test(timeout = 4000)
    public void test090165() throws Throwable {
        Node node0 = Node.newNumber((double) (-1));
        Node node1 = new Node(0, node0);
        Node node2 = null;
        node2 = new Node(43, node1, node0, node1, 31, 37);
    }

    @Test(timeout = 4000)
    public void test091166() throws Throwable {
        Node node0 = Node.newNumber((-1136.68738262));
        Node node1 = new Node(42, node0, node0, node0);
        Node node2 = null;
        node2 = new Node(1, node1, node1, node0, 2, 55);
    }

    @Test(timeout = 4000)
    public void test092167() throws Throwable {
        Node node0 = new Node(84);
        node0.addChildrenToBack(node0);
        Node node1 = null;
        node1 = new Node(57, node0, node0, node0, node0, 29, 16);
    }

    @Test(timeout = 4000)
    public void test093168() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(15, node0);
        Node node2 = null;
        node2 = new Node(36, node1, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test094169() throws Throwable {
        Node node0 = Node.newNumber((double) (-1));
        Node node1 = new Node(31, node0, 43, 55);
        Node node2 = null;
        node2 = new Node(1, node1, node1, node0, node1, 57, 50);
    }

    @Test(timeout = 4000)
    public void test095170() throws Throwable {
        Node node0 = Node.newNumber((double) (-2229));
        Node node1 = new Node(4, node0, node0, node0);
        Node node2 = null;
        node2 = new Node(39, node1, node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test096171() throws Throwable {
        Node node0 = new Node(149);
        Node[] nodeArray0 = new Node[3];
        nodeArray0[0] = node0;
        nodeArray0[1] = node0;
        Node node1 = null;
        node1 = new Node(38, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test097172() throws Throwable {
        Node node0 = new Node(156, 156, 156);
        Node[] nodeArray0 = new Node[2];
        nodeArray0[0] = node0;
        nodeArray0[1] = node0;
        Node node1 = null;
        node1 = new Node(16, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test098173() throws Throwable {
        Node node0 = new Node((-1812));
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test098174() throws Throwable {
        Node node0 = new Node((-1812));
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test098175() throws Throwable {
        Node node0 = new Node((-1812));
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        Node node1 = new Node(16, nodeArray0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test099176() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = node0.hasChildren();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test099177() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test099178() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = node0.hasChildren();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test100179() throws Throwable {
        Node node0 = new Node((byte) 69);
        Node node1 = new Node(16, node0, node0, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test100180() throws Throwable {
        Node node0 = new Node((byte) 69);
        Node node1 = new Node(16, node0, node0, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test100181() throws Throwable {
        Node node0 = new Node((byte) 69);
        Node node1 = new Node(16, node0, node0, node0, node0);
        boolean boolean0 = node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test100182() throws Throwable {
        Node node0 = new Node((byte) 69);
        Node node1 = new Node(16, node0, node0, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test100183() throws Throwable {
        Node node0 = new Node((byte) 69);
        Node node1 = new Node(16, node0, node0, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test101184() throws Throwable {
        Node node0 = new Node(346, 346, 346);
        Node node1 = new Node(49, node0, node0);
        node1.addChildrenToBack(node1);
        Node node2 = new Node(541);
        node1.replaceChild(node2, node2);
    }

    @Test(timeout = 4000)
    public void test102185() throws Throwable {
        Node node0 = Node.newString(0, "Should not happen\n", 0, 0);
        node0.getChildAtIndex(0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test102186() throws Throwable {
        Node node0 = Node.newString(0, "Should not happen\n", 0, 0);
        node0.getChildAtIndex(0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test103187() throws Throwable {
        Node node0 = Node.newString(29, "YimPZnfCVFn", (-4235), 29);
        node0.getChildAtIndex(46);
    }

    @Test(timeout = 4000)
    public void test104188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        JSType[] jSTypeArray0 = new JSType[6];
        jSTypeArray0[0] = (JSType) objectType0;
        jSTypeArray0[1] = (JSType) objectType0;
        jSTypeArray0[2] = (JSType) objectType0;
        jSTypeArray0[3] = (JSType) objectType0;
        jSTypeArray0[4] = (JSType) objectType0;
        jSTypeArray0[5] = (JSType) objectType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.getIndexOfChild(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test104189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        JSType[] jSTypeArray0 = new JSType[6];
        jSTypeArray0[0] = (JSType) objectType0;
        jSTypeArray0[1] = (JSType) objectType0;
        jSTypeArray0[2] = (JSType) objectType0;
        jSTypeArray0[3] = (JSType) objectType0;
        jSTypeArray0[4] = (JSType) objectType0;
        jSTypeArray0[5] = (JSType) objectType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.getIndexOfChild(node0);
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test104190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        JSType[] jSTypeArray0 = new JSType[6];
        jSTypeArray0[0] = (JSType) objectType0;
        jSTypeArray0[1] = (JSType) objectType0;
        jSTypeArray0[2] = (JSType) objectType0;
        jSTypeArray0[3] = (JSType) objectType0;
        jSTypeArray0[4] = (JSType) objectType0;
        jSTypeArray0[5] = (JSType) objectType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.getIndexOfChild(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test105191() throws Throwable {
        Node node0 = Node.newNumber((double) 681);
        node0.addChildToFront(node0);
        int int0 = node0.getIndexOfChild(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test105192() throws Throwable {
        Node node0 = Node.newNumber((double) 681);
        node0.addChildToFront(node0);
        int int0 = node0.getIndexOfChild(node0);
    }

    @Test(timeout = 4000)
    public void test106193() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = Node.newString(0, ",v+^(", 15, 48);
        Node node2 = new Node(36, node1, node0);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test106194() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = Node.newString(0, ",v+^(", 15, 48);
        Node node2 = new Node(36, node1, node0);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test106195() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = Node.newString(0, ",v+^(", 15, 48);
        Node node2 = new Node(36, node1, node0);
        Node node3 = node1.getLastSibling();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test106196() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = Node.newString(0, ",v+^(", 15, 48);
        Node node2 = new Node(36, node1, node0);
        Node node3 = node1.getLastSibling();
        node3.isWith();
    }

    @Test(timeout = 4000)
    public void test106197() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = Node.newString(0, ",v+^(", 15, 48);
        Node node2 = new Node(36, node1, node0);
        Node node3 = node1.getLastSibling();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test107198() throws Throwable {
        Node node0 = new Node((byte) 116);
        Node node1 = new Node(37, node0, node0, node0, 29, 53);
        node1.addChildToFront(node0);
    }

    @Test(timeout = 4000)
    public void test108199() throws Throwable {
        Node node0 = Node.newNumber((double) 97);
        Node node1 = new Node(30, node0);
        node1.addChildToBack(node0);
    }

    @Test(timeout = 4000)
    public void test109200() throws Throwable {
        Node node0 = new Node(1477);
        node0.addChildrenToFront(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test110201() throws Throwable {
        Node node0 = new Node(177);
        Node node1 = new Node(39, node0);
        node1.addChildrenToFront(node0);
    }

    @Test(timeout = 4000)
    public void test111202() throws Throwable {
        Node node0 = new Node(1477);
        Node node1 = new Node(588, node0);
        node1.addChildrenToFront(node1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test112203() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        node0.addChildBefore((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test113204() throws Throwable {
        Node node0 = new Node(1199, 1199, 1199);
        node0.addChildBefore(node0, node0);
    }

    @Test(timeout = 4000)
    public void test114205() throws Throwable {
        Node node0 = new Node(1199, 1199, 1199);
        Node node1 = new Node(12, node0, node0, 38, 57);
        node1.addChildBefore(node1, node0);
        Node node2 = Node.newString(0, " =U+#{eY0gvb)7w3j", 47, 129);
        node1.addChildBefore(node2, node0);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test115206() throws Throwable {
        Node node0 = new Node(22);
        Node node1 = new Node(22);
        Node node2 = new Node(39, node0, node0, node0, node1);
        node2.addChildBefore(node0, node0);
    }

    @Test(timeout = 4000)
    public void test116207() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        Node node1 = new Node(38, node0, node0, node0, node0);
        node1.addChildBefore(node0, node0);
    }

    @Test(timeout = 4000)
    public void test117208() throws Throwable {
        Node node0 = Node.newNumber(0.0, 13, 13);
        Node node1 = new Node(1797, 37, 1);
        Node node2 = new Node(4095, node0, node0, node0, node1);
        node2.addChildAfter(node0, node1);
    }

    @Test(timeout = 4000)
    public void test118209() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        node0.addChildrenAfter(node0, node0);
    }

    @Test(timeout = 4000)
    public void test119210() throws Throwable {
        Node node0 = Node.newNumber((-863.8161116895));
        Node node1 = new Node(49, node0);
        node1.addChildrenToBack(node0);
    }

    @Test(timeout = 4000)
    public void test120211() throws Throwable {
        Node node0 = new Node(155);
        Node node1 = new Node(12);
        Node node2 = new Node(48, node0);
        node2.addChildAfter(node1, (Node) null);
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test121212() throws Throwable {
        Node node0 = new Node(307, 307, 307);
        Node node1 = new Node(866, node0, node0);
        node1.removeChild((Node) null);
    }

    @Test(timeout = 4000)
    public void test122213() throws Throwable {
        Node node0 = new Node((-459));
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(38, nodeArray0, 46, 39);
        Node node2 = new Node(42, node0, node1, node1);
        node2.removeFirstChild();
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test123214() throws Throwable {
        Node node0 = new Node((-725), (-725), (-725));
        Node node1 = new Node(2, node0, node0);
        node1.addChildBefore(node1, node0);
        node0.replaceChild(node1, node1);
    }

    @Test(timeout = 4000)
    public void test124215() throws Throwable {
        Node node0 = new Node(4477, 4477, 4477);
        Node node1 = new Node(50, node0, node0, node0);
        node1.replaceChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test125216() throws Throwable {
        Node node0 = Node.newNumber((double) 115);
        Node node1 = new Node(115, node0, node0, node0, node0);
        node1.replaceChild(node0, node1);
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test125217() throws Throwable {
        Node node0 = Node.newNumber((double) 115);
        Node node1 = new Node(115, node0, node0, node0, node0);
        node1.replaceChild(node0, node1);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test125218() throws Throwable {
        Node node0 = Node.newNumber((double) 115);
        Node node1 = new Node(115, node0, node0, node0, node0);
        node1.replaceChild(node0, node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test125219() throws Throwable {
        Node node0 = Node.newNumber((double) 115);
        Node node1 = new Node(115, node0, node0, node0, node0);
        node1.replaceChild(node0, node1);
        node1.isFor();
    }

    @Test(timeout = 4000)
    public void test126220() throws Throwable {
        Node node0 = new Node((-23));
        Node node1 = new Node((-23));
        Node node2 = new Node(47, node0, node1);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test126221() throws Throwable {
        Node node0 = new Node((-23));
        Node node1 = new Node((-23));
        Node node2 = new Node(47, node0, node1);
        node2.replaceChild(node0, node2);
        node2.isRegExp();
    }

    @Test(timeout = 4000)
    public void test126222() throws Throwable {
        Node node0 = new Node((-23));
        Node node1 = new Node((-23));
        Node node2 = new Node(47, node0, node1);
        node2.replaceChild(node0, node2);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test126223() throws Throwable {
        Node node0 = new Node((-23));
        Node node1 = new Node((-23));
        Node node2 = new Node(47, node0, node1);
        node2.replaceChild(node0, node2);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test127224() throws Throwable {
        Node node0 = new Node((-459));
        node0.replaceChildAfter(node0, node0);
    }

    @Test(timeout = 4000)
    public void test128225() throws Throwable {
        Node node0 = new Node(1533);
        Node node1 = new Node(1, node0, 52, 52);
        node1.addChildrenToBack(node1);
        node1.replaceChildAfter(node0, node0);
    }

    @Test(timeout = 4000)
    public void test129226() throws Throwable {
        Node node0 = Node.newNumber((double) 0);
        Node node1 = new Node(0, node0, node0);
        node1.replaceChildAfter(node0, node0);
    }

    @Test(timeout = 4000)
    public void test130227() throws Throwable {
        Node node0 = new Node((-459));
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(38, nodeArray0, 46, 39);
        Node node2 = new Node(42, node0, node1, node1);
        node2.replaceChildAfter(node0, node2);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test130228() throws Throwable {
        Node node0 = new Node((-459));
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(38, nodeArray0, 46, 39);
        Node node2 = new Node(42, node0, node1, node1);
        node2.replaceChildAfter(node0, node2);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test130229() throws Throwable {
        Node node0 = new Node((-459));
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(38, nodeArray0, 46, 39);
        Node node2 = new Node(42, node0, node1, node1);
        node2.replaceChildAfter(node0, node2);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test130230() throws Throwable {
        Node node0 = new Node((-459));
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(38, nodeArray0, 46, 39);
        Node node2 = new Node(42, node0, node1, node1);
        node2.replaceChildAfter(node0, node2);
        node1.isName();
    }

    @Test(timeout = 4000)
    public void test130231() throws Throwable {
        Node node0 = new Node((-459));
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(38, nodeArray0, 46, 39);
        Node node2 = new Node(42, node0, node1, node1);
        node2.replaceChildAfter(node0, node2);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test130232() throws Throwable {
        Node node0 = new Node((-459));
        Node[] nodeArray0 = new Node[0];
        Node node1 = new Node(38, nodeArray0, 46, 39);
        Node node2 = new Node(42, node0, node1, node1);
        node2.replaceChildAfter(node0, node2);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test131233() throws Throwable {
        Node node0 = new Node((-10), (-10), (-10));
        node0.putProp(51, 2);
        node0.clonePropsFrom(node0);
    }

    @Test(timeout = 4000)
    public void test132234() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = node0.clonePropsFrom(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test132235() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = node0.clonePropsFrom(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test133236() throws Throwable {
        Node node0 = Node.newNumber(76.809266905, (-1637), (-1637));
        node0.putIntProp((-1637), (-1637));
        int int0 = node0.getExistingIntProp((-1637));
    }

    @Test(timeout = 4000)
    public void test133237() throws Throwable {
        Node node0 = Node.newNumber(76.809266905, (-1637), (-1637));
        node0.putIntProp((-1637), (-1637));
        int int0 = node0.getExistingIntProp((-1637));
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test134238() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        node0.getExistingIntProp(52);
    }

    @Test(timeout = 4000)
    public void test135239() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        node0.getDouble();
    }

    @Test(timeout = 4000)
    public void test136240() throws Throwable {
        Node node0 = new Node(39, 39, 39);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test137241() throws Throwable {
        Node node0 = new Node(99);
        node0.setDouble(99);
    }

    @Test(timeout = 4000)
    public void test138242() throws Throwable {
        Node node0 = new Node(39, 39, 39);
        node0.setDouble(39);
    }

    @Test(timeout = 4000)
    public void test139243() throws Throwable {
        Node node0 = new Node(40);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test140244() throws Throwable {
        Node node0 = new Node(40);
        node0.setString("u]gA%JF");
    }

    @Test(timeout = 4000)
    public void test141245() throws Throwable {
        Node node0 = new Node(262167);
        node0.setString("2c'>/va;9");
    }

    @Test(timeout = 4000)
    public void test142246() throws Throwable {
        Node node0 = new Node(38);
        node0.setString("2c'>/va;9");
    }

    @Test(timeout = 4000)
    public void test143247() throws Throwable {
        Node node0 = new Node((byte) 105);
        Node node1 = new Node((byte) 105, node0, node0);
        node1.getString();
    }

    @Test(timeout = 4000)
    public void test144248() throws Throwable {
        Node node0 = new Node((byte) 105);
        node0.type = 38;
        Node node1 = new Node((byte) 105, node0, node0);
        node1.getString();
    }

    @Test(timeout = 4000)
    public void test145249() throws Throwable {
        Node node0 = new Node(83);
        String string0 = node0.toString(false, false, false);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test145250() throws Throwable {
        Node node0 = new Node(83);
        String string0 = node0.toString(false, false, false);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test145251() throws Throwable {
        Node node0 = new Node(83);
        String string0 = node0.toString(false, false, false);
    }

    @Test(timeout = 4000)
    public void test146252() throws Throwable {
        Node node0 = new Node(103);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
        node0.setJSType(templateType0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test147253() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
        node0.setJSType(templateType0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test148254() throws Throwable {
        Node node0 = new Node(22, 22, 22);
        node0.setSourceFileForTesting("com.google.javascript.rhino.Node$StringNode");
        String string0 = node0.getSourceFileName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test148255() throws Throwable {
        Node node0 = new Node(22, 22, 22);
        node0.setSourceFileForTesting("com.google.javascript.rhino.Node$StringNode");
        String string0 = node0.getSourceFileName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test148256() throws Throwable {
        Node node0 = new Node(22, 22, 22);
        node0.setSourceFileForTesting("com.google.javascript.rhino.Node$StringNode");
        String string0 = node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test149257() throws Throwable {
        Node node0 = new Node(119);
        node0.getSourceFileName();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test149258() throws Throwable {
        Node node0 = new Node(119);
        node0.getSourceFileName();
        node0.isWith();
    }

    @Test(timeout = 4000)
    public void test150259() throws Throwable {
        Node node0 = new Node(43);
        node0.setSourceFileForTesting((String) null);
        boolean boolean0 = node0.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test150260() throws Throwable {
        Node node0 = new Node(43);
        node0.setSourceFileForTesting((String) null);
        boolean boolean0 = node0.isFromExterns();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test150261() throws Throwable {
        Node node0 = new Node(43);
        node0.setSourceFileForTesting((String) null);
        boolean boolean0 = node0.isFromExterns();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test151262() throws Throwable {
        Node node0 = new Node(149);
        boolean boolean0 = node0.isFromExterns();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test151263() throws Throwable {
        Node node0 = new Node(149);
        boolean boolean0 = node0.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test151264() throws Throwable {
        Node node0 = new Node(149);
        boolean boolean0 = node0.isFromExterns();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test152265() throws Throwable {
        Node node0 = new Node(132);
        int int0 = node0.getSourceOffset();
    }

    @Test(timeout = 4000)
    public void test152266() throws Throwable {
        Node node0 = new Node(132);
        int int0 = node0.getSourceOffset();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test152267() throws Throwable {
        Node node0 = new Node(132);
        int int0 = node0.getSourceOffset();
        node0.isScript();
    }

    @Test(timeout = 4000)
    public void test153268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.setStaticSourceFile(simpleSourceFile0);
        int int0 = node0.getSourceOffset();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test153269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.setStaticSourceFile(simpleSourceFile0);
        int int0 = node0.getSourceOffset();
    }

    @Test(timeout = 4000)
    public void test153270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.setStaticSourceFile(simpleSourceFile0);
        int int0 = node0.getSourceOffset();
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test154271() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test154272() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        node0.setLineno(4095);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test155273() throws Throwable {
        Node node0 = new Node(118);
        node0.setLineno(4095);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test156274() throws Throwable {
        Node node0 = new Node(149);
        Node node1 = new Node(39, node0);
        node1.setSourceEncodedPositionForTree(15);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test156275() throws Throwable {
        Node node0 = new Node(149);
        Node node1 = new Node(39, node0);
        node1.setSourceEncodedPositionForTree(15);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test157276() throws Throwable {
        Node node0 = new Node(16);
        node0.children();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test157277() throws Throwable {
        Node node0 = new Node(16);
        node0.children();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test158278() throws Throwable {
        Node node0 = new Node((byte) (-120));
        node0.getAncestor((byte) (-120));
    }

    @Test(timeout = 4000)
    public void test159279() throws Throwable {
        Node node0 = new Node((byte) 74);
        Node node1 = node0.getAncestor(0);
    }

    @Test(timeout = 4000)
    public void test159280() throws Throwable {
        Node node0 = new Node((byte) 74);
        Node node1 = node0.getAncestor(0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test159281() throws Throwable {
        Node node0 = new Node((byte) 74);
        Node node1 = node0.getAncestor(0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test160282() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = node0.getAncestor(115);
    }

    @Test(timeout = 4000)
    public void test160283() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = node0.getAncestor(115);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test160284() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = node0.getAncestor(115);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test161285() throws Throwable {
        Node node0 = new Node(38);
        Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
        Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        node_AncestorIterable0.forEach(consumer0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test161286() throws Throwable {
        Node node0 = new Node(38);
        Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
        Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        node_AncestorIterable0.forEach(consumer0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test161287() throws Throwable {
        Node node0 = new Node(38);
        Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
        Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        node_AncestorIterable0.forEach(consumer0);
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test162288() throws Throwable {
        Node node0 = new Node(89);
        boolean boolean0 = node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test162289() throws Throwable {
        Node node0 = new Node(89);
        boolean boolean0 = node0.hasOneChild();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test162290() throws Throwable {
        Node node0 = new Node(89);
        boolean boolean0 = node0.hasOneChild();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test163291() throws Throwable {
        Node node0 = Node.newNumber((-58.691968055534375));
        Node node1 = new Node(55, node0, node0, node0, node0);
        boolean boolean0 = node1.hasOneChild();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test163292() throws Throwable {
        Node node0 = Node.newNumber((-58.691968055534375));
        Node node1 = new Node(55, node0, node0, node0, node0);
        boolean boolean0 = node1.hasOneChild();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test163293() throws Throwable {
        Node node0 = Node.newNumber((-58.691968055534375));
        Node node1 = new Node(55, node0, node0, node0, node0);
        boolean boolean0 = node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test163294() throws Throwable {
        Node node0 = Node.newNumber((-58.691968055534375));
        Node node1 = new Node(55, node0, node0, node0, node0);
        boolean boolean0 = node1.hasOneChild();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test164295() throws Throwable {
        Node node0 = new Node(52);
        Node node1 = Node.newString(57, "<6-ZE;k'zk)/");
        Node node2 = new Node(47, node1, node1, node0);
        boolean boolean0 = node2.hasOneChild();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test164296() throws Throwable {
        Node node0 = new Node(52);
        Node node1 = Node.newString(57, "<6-ZE;k'zk)/");
        Node node2 = new Node(47, node1, node1, node0);
        boolean boolean0 = node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test164297() throws Throwable {
        Node node0 = new Node(52);
        Node node1 = Node.newString(57, "<6-ZE;k'zk)/");
        Node node2 = new Node(47, node1, node1, node0);
        boolean boolean0 = node2.hasOneChild();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test164298() throws Throwable {
        Node node0 = new Node(52);
        Node node1 = Node.newString(57, "<6-ZE;k'zk)/");
        Node node2 = new Node(47, node1, node1, node0);
        boolean boolean0 = node2.hasOneChild();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test164299() throws Throwable {
        Node node0 = new Node(52);
        Node node1 = Node.newString(57, "<6-ZE;k'zk)/");
        Node node2 = new Node(47, node1, node1, node0);
        boolean boolean0 = node2.hasOneChild();
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test164300() throws Throwable {
        Node node0 = new Node(52);
        Node node1 = Node.newString(57, "<6-ZE;k'zk)/");
        Node node2 = new Node(47, node1, node1, node0);
        boolean boolean0 = node2.hasOneChild();
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test165301() throws Throwable {
        Node node0 = new Node(1533);
        boolean boolean0 = node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test165302() throws Throwable {
        Node node0 = new Node(1533);
        boolean boolean0 = node0.hasMoreThanOneChild();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test165303() throws Throwable {
        Node node0 = new Node(1533);
        boolean boolean0 = node0.hasMoreThanOneChild();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test166304() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.hasMoreThanOneChild();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test166305() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test166306() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.hasMoreThanOneChild();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test166307() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.hasMoreThanOneChild();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test167308() throws Throwable {
        Node node0 = new Node((-1285));
        Node node1 = new Node(32);
        Node node2 = new Node(38, node1, node0);
        boolean boolean0 = node2.hasMoreThanOneChild();
        node2.getLineno();
    }

    @Test(timeout = 4000)
    public void test167309() throws Throwable {
        Node node0 = new Node((-1285));
        Node node1 = new Node(32);
        Node node2 = new Node(38, node1, node0);
        boolean boolean0 = node2.hasMoreThanOneChild();
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test167310() throws Throwable {
        Node node0 = new Node((-1285));
        Node node1 = new Node(32);
        Node node2 = new Node(38, node1, node0);
        boolean boolean0 = node2.hasMoreThanOneChild();
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test167311() throws Throwable {
        Node node0 = new Node((-1285));
        Node node1 = new Node(32);
        Node node2 = new Node(38, node1, node0);
        boolean boolean0 = node2.hasMoreThanOneChild();
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test167312() throws Throwable {
        Node node0 = new Node((-1285));
        Node node1 = new Node(32);
        Node node2 = new Node(38, node1, node0);
        boolean boolean0 = node2.hasMoreThanOneChild();
        node1.isTypeOf();
    }

    @Test(timeout = 4000)
    public void test167313() throws Throwable {
        Node node0 = new Node((-1285));
        Node node1 = new Node(32);
        Node node2 = new Node(38, node1, node0);
        boolean boolean0 = node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test168314() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test168315() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.isIn();
    }

    @Test(timeout = 4000)
    public void test168316() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
    }

    @Test(timeout = 4000)
    public void test168317() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test168318() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test168319() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test168320() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.isFunction();
    }

    @Test(timeout = 4000)
    public void test168321() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test169322() throws Throwable {
        Node node0 = Node.newNumber((-41.79513725335379));
        Node node1 = new Node(4095, node0, node0, 54, 50);
        boolean boolean0 = node1.hasChild(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test169323() throws Throwable {
        Node node0 = Node.newNumber((-41.79513725335379));
        Node node1 = new Node(4095, node0, node0, 54, 50);
        boolean boolean0 = node1.hasChild(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test169324() throws Throwable {
        Node node0 = Node.newNumber((-41.79513725335379));
        Node node1 = new Node(4095, node0, node0, 54, 50);
        boolean boolean0 = node1.hasChild(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test169325() throws Throwable {
        Node node0 = Node.newNumber((-41.79513725335379));
        Node node1 = new Node(4095, node0, node0, 54, 50);
        boolean boolean0 = node1.hasChild(node1);
    }

    @Test(timeout = 4000)
    public void test170326() throws Throwable {
        Node node0 = new Node(2);
        Node node1 = new Node(2, node0, 57, 715);
        boolean boolean0 = node1.hasChild(node0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test170327() throws Throwable {
        Node node0 = new Node(2);
        Node node1 = new Node(2, node0, 57, 715);
        boolean boolean0 = node1.hasChild(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test170328() throws Throwable {
        Node node0 = new Node(2);
        Node node1 = new Node(2, node0, 57, 715);
        boolean boolean0 = node1.hasChild(node0);
    }

    @Test(timeout = 4000)
    public void test170329() throws Throwable {
        Node node0 = new Node(2);
        Node node1 = new Node(2, node0, 57, 715);
        boolean boolean0 = node1.hasChild(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test171330() throws Throwable {
        Node node0 = new Node((-3771));
        node0.checkTreeEquals(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test171331() throws Throwable {
        Node node0 = new Node((-3771));
        node0.checkTreeEquals(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test172332() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test172333() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test172334() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test172335() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test172336() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test172337() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test172338() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test172339() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node2.hasChildren();
    }

    @Test(timeout = 4000)
    public void test172340() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test172341() throws Throwable {
        Node node0 = Node.newNumber((-73.4761), 18, 110);
        Node node1 = new Node(18, node0, (-3746), 37);
        Node node2 = new Node(18, node1, node1, 0, (-1974));
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test173342() throws Throwable {
        Node node0 = new Node((-1880));
        Node node1 = new Node((-1880), node0, node0, 49, 2);
        Node node2 = new Node((-1880), node1, node1, node1);
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test173343() throws Throwable {
        Node node0 = new Node((-1880));
        Node node1 = new Node((-1880), node0, node0, 49, 2);
        Node node2 = new Node((-1880), node1, node1, node1);
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test173344() throws Throwable {
        Node node0 = new Node((-1880));
        Node node1 = new Node((-1880), node0, node0, 49, 2);
        Node node2 = new Node((-1880), node1, node1, node1);
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test173345() throws Throwable {
        Node node0 = new Node((-1880));
        Node node1 = new Node((-1880), node0, node0, 49, 2);
        Node node2 = new Node((-1880), node1, node1, node1);
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test173346() throws Throwable {
        Node node0 = new Node((-1880));
        Node node1 = new Node((-1880), node0, node0, 49, 2);
        Node node2 = new Node((-1880), node1, node1, node1);
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test173347() throws Throwable {
        Node node0 = new Node((-1880));
        Node node1 = new Node((-1880), node0, node0, 49, 2);
        Node node2 = new Node((-1880), node1, node1, node1);
        Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test174348() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test174349() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test174350() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test174351() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test174352() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(53, node0, node0, node0, node0, 15, 2);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test175353() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test175354() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
    }

    @Test(timeout = 4000)
    public void test175355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test176356() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    }

    @Test(timeout = 4000)
    public void test176357() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test176358() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test176359() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.isInc();
    }

    @Test(timeout = 4000)
    public void test177360() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = node0.isEquivalentToShallow(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test177361() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = node0.isEquivalentToShallow(node0);
    }

    @Test(timeout = 4000)
    public void test177362() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = node0.isEquivalentToShallow(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test178363() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test178364() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test178365() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test178366() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
    }

    @Test(timeout = 4000)
    public void test179367() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    }

    @Test(timeout = 4000)
    public void test179368() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test179369() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.isCall();
    }

    @Test(timeout = 4000)
    public void test180370() throws Throwable {
        Node node0 = Node.newString(38, "", 54, 31);
        node0.getQualifiedName();
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test180371() throws Throwable {
        Node node0 = Node.newString(38, "", 54, 31);
        node0.getQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test181372() throws Throwable {
        Node node0 = Node.newString(38, ",v^(", 54, 31);
        String string0 = node0.getQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test181373() throws Throwable {
        Node node0 = Node.newString(38, ",v^(", 54, 31);
        String string0 = node0.getQualifiedName();
    }

    @Test(timeout = 4000)
    public void test182374() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(42, node0, node0, 52, 47);
        node0.addChildrenToBack(node1);
        node0.getQualifiedName();
    }

    @Test(timeout = 4000)
    public void test183375() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(40, node0, 4095, 16);
        node0.addChildrenToBack(node1);
        node0.getQualifiedName();
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test184376() throws Throwable {
        Node node0 = new Node(33);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test185377() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test185378() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test185379() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isQualifiedName();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test186380() throws Throwable {
        Node node0 = Node.newString(38, "", 57, 31);
        boolean boolean0 = node0.isQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test186381() throws Throwable {
        Node node0 = Node.newString(38, "", 57, 31);
        boolean boolean0 = node0.isQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test186382() throws Throwable {
        Node node0 = Node.newString(38, "", 57, 31);
        boolean boolean0 = node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test187383() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test187384() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test187385() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isQualifiedName();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test188386() throws Throwable {
        Node node0 = Node.newString(38, "v+^(", 54, 31);
        boolean boolean0 = node0.isQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test188387() throws Throwable {
        Node node0 = Node.newString(38, "v+^(", 54, 31);
        boolean boolean0 = node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test189388() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test190389() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isUnscopedQualifiedName();
        node0.isThis();
    }

    @Test(timeout = 4000)
    public void test190390() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isUnscopedQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test190391() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test191392() throws Throwable {
        Node node0 = Node.newString(38, "v^", 54, 31);
        boolean boolean0 = node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test191393() throws Throwable {
        Node node0 = Node.newString(38, "v^", 54, 31);
        boolean boolean0 = node0.isUnscopedQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test192394() throws Throwable {
        Node node0 = new Node(109);
        node0.detachFromParent();
    }

    @Test(timeout = 4000)
    public void test193395() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(40, node0, 4095, 16);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test193396() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(40, node0, 4095, 16);
        node1.isString();
    }

    @Test(timeout = 4000)
    public void test193397() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(40, node0, 4095, 16);
        Node node2 = node0.detachFromParent();
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test193398() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(40, node0, 4095, 16);
        Node node2 = node0.detachFromParent();
        node2.isGetProp();
    }

    @Test(timeout = 4000)
    public void test194399() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = node0.removeFirstChild();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test194400() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = node0.removeFirstChild();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test194401() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = node0.removeFirstChild();
    }

    @Test(timeout = 4000)
    public void test195402() throws Throwable {
        Node node0 = new Node((byte) 77);
        Node node1 = new Node(46, node0, node0, 4095, 38);
        Node node2 = node1.removeChildren();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test195403() throws Throwable {
        Node node0 = new Node((byte) 77);
        Node node1 = new Node(46, node0, node0, 4095, 38);
        Node node2 = node1.removeChildren();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test195404() throws Throwable {
        Node node0 = new Node((byte) 77);
        Node node1 = new Node(46, node0, node0, 4095, 38);
        Node node2 = node1.removeChildren();
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test196405() throws Throwable {
        Node node0 = new Node(1533, 1533, 1533);
        Node node1 = new Node(32, node0, node0, node0, node0, 57, 55);
        node1.detachChildren();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test196406() throws Throwable {
        Node node0 = new Node(1533, 1533, 1533);
        Node node1 = new Node(32, node0, node0, node0, node0, 57, 55);
        node1.detachChildren();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test196407() throws Throwable {
        Node node0 = new Node(1533, 1533, 1533);
        Node node1 = new Node(32, node0, node0, node0, node0, 57, 55);
        node1.detachChildren();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test196408() throws Throwable {
        Node node0 = new Node(1533, 1533, 1533);
        Node node1 = new Node(32, node0, node0, node0, node0, 57, 55);
        node1.detachChildren();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test197409() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        node0.removeChildAfter(node0);
    }

    @Test(timeout = 4000)
    public void test198410() throws Throwable {
        Node node0 = Node.newNumber((double) (-1));
        Node node1 = new Node(1, node0, node0, node0, node0, 57, 50);
        node1.removeChildAfter(node0);
    }

    @Test(timeout = 4000)
    public void test199411() throws Throwable {
        Node node0 = Node.newNumber((double) (-1));
        Node node1 = new Node(40);
        Node node2 = new Node(1, node1, node1, node0, node1, 57, 50);
        node2.removeChildAfter(node0);
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test200412() throws Throwable {
        Node node0 = Node.newNumber((double) (-1));
        Node node1 = new Node(40);
        Node node2 = new Node(1, node1, node1, node0, node1, 57, 50);
        node2.removeFirstChild();
        node2.removeChildAfter(node0);
        node2.hasChildren();
    }

    @Test(timeout = 4000)
    public void test201413() throws Throwable {
        Node node0 = new Node((-2602));
        Node node1 = new Node(55);
        Node node2 = new Node(42, node0, node1, node1);
        Node node3 = node2.cloneTree();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test201414() throws Throwable {
        Node node0 = new Node((-2602));
        Node node1 = new Node(55);
        Node node2 = new Node(42, node0, node1, node1);
        Node node3 = node2.cloneTree();
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test201415() throws Throwable {
        Node node0 = new Node((-2602));
        Node node1 = new Node(55);
        Node node2 = new Node(42, node0, node1, node1);
        Node node3 = node2.cloneTree();
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test201416() throws Throwable {
        Node node0 = new Node((-2602));
        Node node1 = new Node(55);
        Node node2 = new Node(42, node0, node1, node1);
        Node node3 = node2.cloneTree();
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test201417() throws Throwable {
        Node node0 = new Node((-2602));
        Node node1 = new Node(55);
        Node node2 = new Node(42, node0, node1, node1);
        Node node3 = node2.cloneTree();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test202418() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
        node0.putProp(40, jSDocInfo0);
        Node node1 = node0.copyInformationFrom(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test202419() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
        node0.putProp(40, jSDocInfo0);
        Node node1 = node0.copyInformationFrom(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test203420() throws Throwable {
        Node node0 = Node.newNumber((double) 115);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
        node0.setStaticSourceFile(simpleSourceFile0);
        node0.replaceChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test204421() throws Throwable {
        Node node0 = Node.newNumber((double) (-2516));
        Node node1 = new Node(39, node0, 54, (-2516));
        Node node2 = node1.copyInformationFromForTree(node0);
        node2.isNumber();
    }

    @Test(timeout = 4000)
    public void test204422() throws Throwable {
        Node node0 = Node.newNumber((double) (-2516));
        Node node1 = new Node(39, node0, 54, (-2516));
        Node node2 = node1.copyInformationFromForTree(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test204423() throws Throwable {
        Node node0 = Node.newNumber((double) (-2516));
        Node node1 = new Node(39, node0, 54, (-2516));
        Node node2 = node1.copyInformationFromForTree(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test205424() throws Throwable {
        Node node0 = new Node((-725), (-725), (-725));
        Node node1 = new Node(2, node0, node0, node0, node0, 40, 12);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test205425() throws Throwable {
        Node node0 = new Node((-725), (-725), (-725));
        Node node1 = new Node(2, node0, node0, node0, node0, 40, 12);
        node1.useSourceInfoFromForTree(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test206426() throws Throwable {
        Node node0 = new Node(25, 25, 25);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(40, jSDocInfo0);
        Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test206427() throws Throwable {
        Node node0 = new Node(25, 25, 25);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(40, jSDocInfo0);
        Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test207428() throws Throwable {
        Node node0 = new Node((-10), (-10), (-10));
        node0.putProp(51, 2);
        Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test207429() throws Throwable {
        Node node0 = new Node((-10), (-10), (-10));
        node0.putProp(51, 2);
        Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test208430() throws Throwable {
        Node node0 = new Node((-3771));
        Node node1 = new Node(2, node0, node0, 0, 55);
        node1.useSourceInfoIfMissingFromForTree(node0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test209431() throws Throwable {
        Node node0 = Node.newString(130, "", 130, (-895));
        Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
        node_FileLevelJsDocBuilder0.append("");
        node_FileLevelJsDocBuilder0.append("");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test209432() throws Throwable {
        Node node0 = Node.newString(130, "", 130, (-895));
        Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
        node_FileLevelJsDocBuilder0.append("");
        node_FileLevelJsDocBuilder0.append("");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test209433() throws Throwable {
        Node node0 = Node.newString(130, "", 130, (-895));
        Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
        node_FileLevelJsDocBuilder0.append("");
        node_FileLevelJsDocBuilder0.append("");
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test210434() throws Throwable {
        Node node0 = new Node(42);
        Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
        node_FileLevelJsDocBuilder0.append("\n\nSubtree1: ");
        node0.addSuppression("THROW 52");
        node0.isThis();
    }

    @Test(timeout = 4000)
    public void test210435() throws Throwable {
        Node node0 = new Node(42);
        Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
        node_FileLevelJsDocBuilder0.append("\n\nSubtree1: ");
        node0.addSuppression("THROW 52");
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test211436() throws Throwable {
        Node node0 = new Node(37);
        node0.setSideEffectFlags(37);
    }

    @Test(timeout = 4000)
    public void test212437() throws Throwable {
        Node node0 = new Node((byte) 30);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test212438() throws Throwable {
        Node node0 = new Node((byte) 30);
        node0.setSideEffectFlags((int) (byte) 30);
        boolean boolean0 = node0.mayMutateArguments();
    }

    @Test(timeout = 4000)
    public void test213439() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2661));
        boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test213440() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2661));
        boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test214441() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1073741823);
        node_SideEffectFlags0.setAllFlags();
        boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test214442() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1073741823);
        node_SideEffectFlags0.setAllFlags();
        boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test215443() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        boolean boolean0 = node0.mayMutateArguments();
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test215444() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        boolean boolean0 = node0.mayMutateArguments();
    }

    @Test(timeout = 4000)
    public void test216445() throws Throwable {
        Node node0 = new Node(43);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node0);
    }

    @Test(timeout = 4000)
    public void test216446() throws Throwable {
        Node node0 = new Node(43);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node0);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test216447() throws Throwable {
        Node node0 = new Node(43);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test217448() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
        node0.isCall();
    }

    @Test(timeout = 4000)
    public void test217449() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test217450() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    }

    @Test(timeout = 4000)
    public void test218451() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
    }

    @Test(timeout = 4000)
    public void test218452() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node_NodeMismatch0.equals((Object) node_NodeMismatch1);
    }

    @Test(timeout = 4000)
    public void test218453() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test218454() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test218455() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test218456() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test218457() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node0.isCall();
    }

    @Test(timeout = 4000)
    public void test219458() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test219459() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test219460() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node_NodeMismatch0.equals((Object) node_NodeMismatch1);
    }

    @Test(timeout = 4000)
    public void test219461() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test219462() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test219463() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test219464() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        Node node1 = new Node(5760, node0);
        Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch1.equals(node_NodeMismatch0);
    }

    @Test(timeout = 4000)
    public void test220465() throws Throwable {
        Node node0 = new Node(22, 22, 22);
        boolean boolean0 = node0.isAdd();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test220466() throws Throwable {
        Node node0 = new Node(22, 22, 22);
        boolean boolean0 = node0.isAdd();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test220467() throws Throwable {
        Node node0 = new Node(22, 22, 22);
        boolean boolean0 = node0.isAdd();
    }

    @Test(timeout = 4000)
    public void test221468() throws Throwable {
        Node node0 = Node.newString(21, "OBJECTLEIT", 149, 122);
        boolean boolean0 = node0.isAdd();
    }

    @Test(timeout = 4000)
    public void test221469() throws Throwable {
        Node node0 = Node.newString(21, "OBJECTLEIT", 149, 122);
        boolean boolean0 = node0.isAdd();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test222470() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = node0.isAnd();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test222471() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = node0.isAnd();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test222472() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = node0.isAnd();
    }

    @Test(timeout = 4000)
    public void test223473() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = node0.isAnd();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test223474() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = node0.isAnd();
    }

    @Test(timeout = 4000)
    public void test224475() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        boolean boolean0 = node0.isArrayLit();
    }

    @Test(timeout = 4000)
    public void test224476() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        boolean boolean0 = node0.isArrayLit();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test224477() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        boolean boolean0 = node0.isArrayLit();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test225478() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = node0.isArrayLit();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test225479() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = node0.isArrayLit();
    }

    @Test(timeout = 4000)
    public void test226480() throws Throwable {
        Node node0 = Node.newString(130, "", 130, (-895));
        node0.isAssign();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test226481() throws Throwable {
        Node node0 = Node.newString(130, "", 130, (-895));
        node0.isAssign();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test227482() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = node0.isAssign();
    }

    @Test(timeout = 4000)
    public void test227483() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = node0.isAssign();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test228484() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isAssignAdd();
    }

    @Test(timeout = 4000)
    public void test228485() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isAssignAdd();
        node0.isFunction();
    }

    @Test(timeout = 4000)
    public void test228486() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isAssignAdd();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test229487() throws Throwable {
        Node node0 = new Node(93);
        boolean boolean0 = node0.isAssignAdd();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test229488() throws Throwable {
        Node node0 = new Node(93);
        boolean boolean0 = node0.isAssignAdd();
    }

    @Test(timeout = 4000)
    public void test230489() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = node0.isBlock();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test230490() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = node0.isBlock();
    }

    @Test(timeout = 4000)
    public void test230491() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = node0.isBlock();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test231492() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = node0.isBlock();
    }

    @Test(timeout = 4000)
    public void test231493() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = node0.isBlock();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test232494() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isBreak();
    }

    @Test(timeout = 4000)
    public void test232495() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isBreak();
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test232496() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isBreak();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test233497() throws Throwable {
        Node node0 = new Node((byte) 116);
        boolean boolean0 = node0.isBreak();
    }

    @Test(timeout = 4000)
    public void test233498() throws Throwable {
        Node node0 = new Node((byte) 116);
        boolean boolean0 = node0.isBreak();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test234499() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = node0.isCall();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test234500() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = node0.isCall();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test234501() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = node0.isCall();
    }

    @Test(timeout = 4000)
    public void test235502() throws Throwable {
        Node node0 = Node.newString(130, "E", 130, (-895));
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = node1.isCall();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test235503() throws Throwable {
        Node node0 = Node.newString(130, "E", 130, (-895));
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = node1.isCall();
    }

    @Test(timeout = 4000)
    public void test235504() throws Throwable {
        Node node0 = Node.newString(130, "E", 130, (-895));
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = node1.isCall();
        node0.isExprResult();
    }

    @Test(timeout = 4000)
    public void test235505() throws Throwable {
        Node node0 = Node.newString(130, "E", 130, (-895));
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = node1.isCall();
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test235506() throws Throwable {
        Node node0 = Node.newString(130, "E", 130, (-895));
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = node1.isCall();
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test236507() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isCase();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test236508() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isCase();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test236509() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isCase();
    }

    @Test(timeout = 4000)
    public void test237510() throws Throwable {
        Node node0 = Node.newString(111, "com.google.jaascript.rhno.Nde", 43, (-881));
        boolean boolean0 = node0.isCase();
    }

    @Test(timeout = 4000)
    public void test237511() throws Throwable {
        Node node0 = Node.newString(111, "com.google.jaascript.rhno.Nde", 43, (-881));
        boolean boolean0 = node0.isCase();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test238512() throws Throwable {
        Node node0 = new Node(132, 132, 132);
        node0.isCast();
        node0.isScript();
    }

    @Test(timeout = 4000)
    public void test238513() throws Throwable {
        Node node0 = new Node(132, 132, 132);
        node0.isCast();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test239514() throws Throwable {
        Node node0 = new Node(155, 155, 155);
        boolean boolean0 = node0.isCast();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test239515() throws Throwable {
        Node node0 = new Node(155, 155, 155);
        boolean boolean0 = node0.isCast();
    }

    @Test(timeout = 4000)
    public void test240516() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = node0.isCatch();
    }

    @Test(timeout = 4000)
    public void test240517() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = node0.isCatch();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test240518() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = node0.isCatch();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test241519() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = node0.isCatch();
    }

    @Test(timeout = 4000)
    public void test241520() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = node0.isCatch();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test242521() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isComma();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test242522() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isComma();
    }

    @Test(timeout = 4000)
    public void test242523() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isComma();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test243524() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = node0.isComma();
    }

    @Test(timeout = 4000)
    public void test243525() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = node0.isComma();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test244526() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = node0.isContinue();
    }

    @Test(timeout = 4000)
    public void test244527() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = node0.isContinue();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test244528() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = node0.isContinue();
        node0.isSwitch();
    }

    @Test(timeout = 4000)
    public void test245529() throws Throwable {
        Node node0 = Node.newString(117, "f", 117, (-1251));
        boolean boolean0 = node0.isContinue();
    }

    @Test(timeout = 4000)
    public void test245530() throws Throwable {
        Node node0 = Node.newString(117, "f", 117, (-1251));
        boolean boolean0 = node0.isContinue();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test246531() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isDebugger();
    }

    @Test(timeout = 4000)
    public void test246532() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isDebugger();
        node0.isWith();
    }

    @Test(timeout = 4000)
    public void test246533() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isDebugger();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test247534() throws Throwable {
        Node node0 = Node.newString(152, "as/", 152, 152);
        boolean boolean0 = node0.isDebugger();
    }

    @Test(timeout = 4000)
    public void test247535() throws Throwable {
        Node node0 = Node.newString(152, "as/", 152, 152);
        boolean boolean0 = node0.isDebugger();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test248536() throws Throwable {
        Node node0 = new Node(171);
        boolean boolean0 = node0.isDec();
    }

    @Test(timeout = 4000)
    public void test248537() throws Throwable {
        Node node0 = new Node(171);
        boolean boolean0 = node0.isDec();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test248538() throws Throwable {
        Node node0 = new Node(171);
        boolean boolean0 = node0.isDec();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test249539() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = node0.isDec();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test249540() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = node0.isDec();
    }

    @Test(timeout = 4000)
    public void test250541() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isDefaultCase();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test250542() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isDefaultCase();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test250543() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isDefaultCase();
    }

    @Test(timeout = 4000)
    public void test251544() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = node0.isDefaultCase();
    }

    @Test(timeout = 4000)
    public void test251545() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = node0.isDefaultCase();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test252546() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        node0.isDelProp();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test252547() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        node0.isDelProp();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test253548() throws Throwable {
        Node node0 = Node.newNumber((-22.0));
        Node node1 = new Node(31, node0, node0, 54, 49);
        boolean boolean0 = node1.isDelProp();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test253549() throws Throwable {
        Node node0 = Node.newNumber((-22.0));
        Node node1 = new Node(31, node0, node0, 54, 49);
        boolean boolean0 = node1.isDelProp();
    }

    @Test(timeout = 4000)
    public void test253550() throws Throwable {
        Node node0 = Node.newNumber((-22.0));
        Node node1 = new Node(31, node0, node0, 54, 49);
        boolean boolean0 = node1.isDelProp();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test254551() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isDo();
        node0.isFor();
    }

    @Test(timeout = 4000)
    public void test254552() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isDo();
    }

    @Test(timeout = 4000)
    public void test254553() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isDo();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test255554() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = node0.isDo();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test255555() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = node0.isDo();
    }

    @Test(timeout = 4000)
    public void test256556() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test256557() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isEmpty();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test256558() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isEmpty();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test257559() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = node0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test257560() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = node0.isEmpty();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test258561() throws Throwable {
        Node node0 = new Node(13, 13, 13);
        boolean boolean0 = node0.isExprResult();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test258562() throws Throwable {
        Node node0 = new Node(13, 13, 13);
        boolean boolean0 = node0.isExprResult();
    }

    @Test(timeout = 4000)
    public void test258563() throws Throwable {
        Node node0 = new Node(13, 13, 13);
        boolean boolean0 = node0.isExprResult();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test259564() throws Throwable {
        Node node0 = Node.newString(130, "", 130, (-895));
        boolean boolean0 = node0.isExprResult();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test259565() throws Throwable {
        Node node0 = Node.newString(130, "", 130, (-895));
        boolean boolean0 = node0.isExprResult();
    }

    @Test(timeout = 4000)
    public void test260566() throws Throwable {
        Node node0 = new Node(123);
        boolean boolean0 = node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test260567() throws Throwable {
        Node node0 = new Node(123);
        boolean boolean0 = node0.isFalse();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test260568() throws Throwable {
        Node node0 = new Node(123);
        boolean boolean0 = node0.isFalse();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test261569() throws Throwable {
        Node node0 = new Node(43, 52, 2);
        boolean boolean0 = node0.isFalse();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test261570() throws Throwable {
        Node node0 = new Node(43, 52, 2);
        boolean boolean0 = node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test262571() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isFor();
    }

    @Test(timeout = 4000)
    public void test262572() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isFor();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test262573() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isFor();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test263574() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isFor();
    }

    @Test(timeout = 4000)
    public void test263575() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = node0.isFor();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test264576() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = node0.isFunction();
    }

    @Test(timeout = 4000)
    public void test264577() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = node0.isFunction();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test265578() throws Throwable {
        Node node0 = new Node((byte) 113);
        boolean boolean0 = node0.isGetterDef();
        node0.isWhile();
    }

    @Test(timeout = 4000)
    public void test265579() throws Throwable {
        Node node0 = new Node((byte) 113);
        boolean boolean0 = node0.isGetterDef();
    }

    @Test(timeout = 4000)
    public void test265580() throws Throwable {
        Node node0 = new Node((byte) 113);
        boolean boolean0 = node0.isGetterDef();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test266581() throws Throwable {
        Node node0 = new Node(147);
        boolean boolean0 = node0.isGetterDef();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test266582() throws Throwable {
        Node node0 = new Node(147);
        boolean boolean0 = node0.isGetterDef();
    }

    @Test(timeout = 4000)
    public void test267583() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isGetElem();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test267584() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isGetElem();
    }

    @Test(timeout = 4000)
    public void test267585() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isGetElem();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test268586() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = node0.isGetElem();
    }

    @Test(timeout = 4000)
    public void test268587() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = node0.isGetElem();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test269588() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test269589() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isGetProp();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test269590() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isGetProp();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test270591() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        boolean boolean0 = node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test270592() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        boolean boolean0 = node0.isGetProp();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test271593() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = node0.isHook();
    }

    @Test(timeout = 4000)
    public void test271594() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = node0.isHook();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test272595() throws Throwable {
        Node node0 = new Node(150);
        boolean boolean0 = node0.isIf();
    }

    @Test(timeout = 4000)
    public void test272596() throws Throwable {
        Node node0 = new Node(150);
        boolean boolean0 = node0.isIf();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test272597() throws Throwable {
        Node node0 = new Node(150);
        boolean boolean0 = node0.isIf();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test273598() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = node0.isIf();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test273599() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = node0.isIf();
    }

    @Test(timeout = 4000)
    public void test274600() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isIn();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test274601() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isIn();
    }

    @Test(timeout = 4000)
    public void test274602() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isIn();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test275603() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = node0.isIn();
    }

    @Test(timeout = 4000)
    public void test275604() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = node0.isIn();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test276605() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        node0.isInc();
        node0.isAnd();
    }

    @Test(timeout = 4000)
    public void test276606() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        node0.isInc();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test277607() throws Throwable {
        Node node0 = Node.newString(102, "#Lu^;<1I)Tk");
        boolean boolean0 = node0.isInc();
    }

    @Test(timeout = 4000)
    public void test277608() throws Throwable {
        Node node0 = Node.newString(102, "#Lu^;<1I)Tk");
        boolean boolean0 = node0.isInc();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test278609() throws Throwable {
        Node node0 = new Node(39);
        boolean boolean0 = node0.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test278610() throws Throwable {
        Node node0 = new Node(39);
        boolean boolean0 = node0.isInstanceOf();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test278611() throws Throwable {
        Node node0 = new Node(39);
        boolean boolean0 = node0.isInstanceOf();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test279612() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        Node node1 = new Node(52, node0, node0, node0);
        boolean boolean0 = node1.isInstanceOf();
        node0.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test279613() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        Node node1 = new Node(52, node0, node0, node0);
        boolean boolean0 = node1.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test279614() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        Node node1 = new Node(52, node0, node0, node0);
        boolean boolean0 = node1.isInstanceOf();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test279615() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        Node node1 = new Node(52, node0, node0, node0);
        boolean boolean0 = node1.isInstanceOf();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test280616() throws Throwable {
        Node node0 = new Node(145);
        boolean boolean0 = node0.isLabel();
    }

    @Test(timeout = 4000)
    public void test280617() throws Throwable {
        Node node0 = new Node(145);
        boolean boolean0 = node0.isLabel();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test280618() throws Throwable {
        Node node0 = new Node(145);
        boolean boolean0 = node0.isLabel();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test281619() throws Throwable {
        Node node0 = Node.newString(152, "com.google.javascript.rhino.Node$StringNode", 152, 152);
        Node node1 = new Node(126, node0, node0, node0);
        boolean boolean0 = node1.isLabel();
    }

    @Test(timeout = 4000)
    public void test281620() throws Throwable {
        Node node0 = Node.newString(152, "com.google.javascript.rhino.Node$StringNode", 152, 152);
        Node node1 = new Node(126, node0, node0, node0);
        boolean boolean0 = node1.isLabel();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test281621() throws Throwable {
        Node node0 = Node.newString(152, "com.google.javascript.rhino.Node$StringNode", 152, 152);
        Node node1 = new Node(126, node0, node0, node0);
        boolean boolean0 = node1.isLabel();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test282622() throws Throwable {
        Node node0 = new Node(3015, 3015, 3015);
        boolean boolean0 = node0.isLabelName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test282623() throws Throwable {
        Node node0 = new Node(3015, 3015, 3015);
        boolean boolean0 = node0.isLabelName();
    }

    @Test(timeout = 4000)
    public void test282624() throws Throwable {
        Node node0 = new Node(3015, 3015, 3015);
        boolean boolean0 = node0.isLabelName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test283625() throws Throwable {
        Node node0 = new Node(150);
        Node node1 = new Node(153, node0, node0, (-1225), 37);
        boolean boolean0 = node1.isLabelName();
    }

    @Test(timeout = 4000)
    public void test283626() throws Throwable {
        Node node0 = new Node(150);
        Node node1 = new Node(153, node0, node0, (-1225), 37);
        boolean boolean0 = node1.isLabelName();
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test283627() throws Throwable {
        Node node0 = new Node(150);
        Node node1 = new Node(153, node0, node0, (-1225), 37);
        boolean boolean0 = node1.isLabelName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test283628() throws Throwable {
        Node node0 = new Node(150);
        Node node1 = new Node(153, node0, node0, (-1225), 37);
        boolean boolean0 = node1.isLabelName();
        node0.isLabelName();
    }

    @Test(timeout = 4000)
    public void test283629() throws Throwable {
        Node node0 = new Node(150);
        Node node1 = new Node(153, node0, node0, (-1225), 37);
        boolean boolean0 = node1.isLabelName();
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test283630() throws Throwable {
        Node node0 = new Node(150);
        Node node1 = new Node(153, node0, node0, (-1225), 37);
        boolean boolean0 = node1.isLabelName();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test284631() throws Throwable {
        Node node0 = new Node((-1437), (-1437), (-1437));
        boolean boolean0 = node0.isName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test284632() throws Throwable {
        Node node0 = new Node((-1437), (-1437), (-1437));
        boolean boolean0 = node0.isName();
    }

    @Test(timeout = 4000)
    public void test285633() throws Throwable {
        Node node0 = Node.newString(38, "v^", 54, 31);
        boolean boolean0 = node0.isName();
    }

    @Test(timeout = 4000)
    public void test285634() throws Throwable {
        Node node0 = Node.newString(38, "v^", 54, 31);
        boolean boolean0 = node0.isName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test286635() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = node0.isNE();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test286636() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = node0.isNE();
    }

    @Test(timeout = 4000)
    public void test286637() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = node0.isNE();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test287638() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        Node node1 = new Node(13, node0, node0);
        boolean boolean0 = node1.isNE();
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test287639() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        Node node1 = new Node(13, node0, node0);
        boolean boolean0 = node1.isNE();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test287640() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        Node node1 = new Node(13, node0, node0);
        boolean boolean0 = node1.isNE();
    }

    @Test(timeout = 4000)
    public void test287641() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        Node node1 = new Node(13, node0, node0);
        boolean boolean0 = node1.isNE();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test288642() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isNew();
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test288643() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isNew();
    }

    @Test(timeout = 4000)
    public void test288644() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = node0.isNew();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test289645() throws Throwable {
        Node node0 = new Node((-3771));
        node0.isNew();
    }

    @Test(timeout = 4000)
    public void test289646() throws Throwable {
        Node node0 = new Node((-3771));
        node0.setType(30);
        boolean boolean0 = node0.isNew();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test289647() throws Throwable {
        Node node0 = new Node((-3771));
        node0.setType(30);
        boolean boolean0 = node0.isNew();
    }

    @Test(timeout = 4000)
    public void test290648() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        boolean boolean0 = node0.isNot();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test290649() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        boolean boolean0 = node0.isNot();
    }

    @Test(timeout = 4000)
    public void test290650() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 1370, 2);
        boolean boolean0 = node0.isNot();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test291651() throws Throwable {
        Node node0 = new Node(26, 1789, 26);
        boolean boolean0 = node0.isNot();
    }

    @Test(timeout = 4000)
    public void test291652() throws Throwable {
        Node node0 = new Node(26, 1789, 26);
        boolean boolean0 = node0.isNot();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test292653() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = node0.isNull();
    }

    @Test(timeout = 4000)
    public void test292654() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = node0.isNull();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test292655() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = node0.isNull();
        node0.isInc();
    }

    @Test(timeout = 4000)
    public void test293656() throws Throwable {
        Node node0 = Node.newString(41, "com.google.common.base.Predicates$IsEqualToPredicate", 41, 41);
        boolean boolean0 = node0.isNull();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test293657() throws Throwable {
        Node node0 = Node.newString(41, "com.google.common.base.Predicates$IsEqualToPredicate", 41, 41);
        boolean boolean0 = node0.isNull();
    }

    @Test(timeout = 4000)
    public void test294658() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test294659() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = node0.isNumber();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test294660() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = node0.isNumber();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test295661() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = node0.isNumber();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test295662() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test296663() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        node0.isObjectLit();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test296664() throws Throwable {
        Node node0 = new Node(118, 11, 11);
        node0.isObjectLit();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test297665() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = node0.isObjectLit();
    }

    @Test(timeout = 4000)
    public void test297666() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = node0.isObjectLit();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test298667() throws Throwable {
        Node node0 = Node.newNumber((double) 58);
        boolean boolean0 = node0.isOr();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test298668() throws Throwable {
        Node node0 = Node.newNumber((double) 58);
        boolean boolean0 = node0.isOr();
    }

    @Test(timeout = 4000)
    public void test298669() throws Throwable {
        Node node0 = Node.newNumber((double) 58);
        boolean boolean0 = node0.isOr();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test299670() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = node0.isOr();
    }

    @Test(timeout = 4000)
    public void test299671() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = node0.isOr();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test300672() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test300673() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isParamList();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test300674() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isParamList();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test301675() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test301676() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = node0.isParamList();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test302677() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        boolean boolean0 = node0.isRegExp();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test302678() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        boolean boolean0 = node0.isRegExp();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test302679() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        boolean boolean0 = node0.isRegExp();
    }

    @Test(timeout = 4000)
    public void test303680() throws Throwable {
        Node node0 = Node.newString(47, "com.google.common.base.CharMatcher$3", 36, 30);
        boolean boolean0 = node0.isRegExp();
    }

    @Test(timeout = 4000)
    public void test303681() throws Throwable {
        Node node0 = Node.newString(47, "com.google.common.base.CharMatcher$3", 36, 30);
        boolean boolean0 = node0.isRegExp();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test304682() throws Throwable {
        Node node0 = new Node(154, (-578), (-578));
        boolean boolean0 = node0.isReturn();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test304683() throws Throwable {
        Node node0 = new Node(154, (-578), (-578));
        boolean boolean0 = node0.isReturn();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test304684() throws Throwable {
        Node node0 = new Node(154, (-578), (-578));
        boolean boolean0 = node0.isReturn();
    }

    @Test(timeout = 4000)
    public void test305685() throws Throwable {
        Node node0 = Node.newString(4, "com.google.jaascript.rhno.Nde", 1, 33);
        boolean boolean0 = node0.isReturn();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test305686() throws Throwable {
        Node node0 = Node.newString(4, "com.google.jaascript.rhno.Nde", 1, 33);
        boolean boolean0 = node0.isReturn();
    }

    @Test(timeout = 4000)
    public void test306687() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        node0.isScript();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test306688() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        node0.isScript();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test307689() throws Throwable {
        Node node0 = new Node(132);
        boolean boolean0 = node0.isScript();
    }

    @Test(timeout = 4000)
    public void test307690() throws Throwable {
        Node node0 = new Node(132);
        boolean boolean0 = node0.isScript();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test308691() throws Throwable {
        Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
        boolean boolean0 = node0.isSetterDef();
    }

    @Test(timeout = 4000)
    public void test308692() throws Throwable {
        Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
        boolean boolean0 = node0.isSetterDef();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test308693() throws Throwable {
        Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE");
        boolean boolean0 = node0.isSetterDef();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test309694() throws Throwable {
        Node node0 = new Node(148);
        boolean boolean0 = node0.isSetterDef();
    }

    @Test(timeout = 4000)
    public void test309695() throws Throwable {
        Node node0 = new Node(148);
        boolean boolean0 = node0.isSetterDef();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test310696() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = node0.isString();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test310697() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = node0.isString();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test310698() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = node0.isString();
    }

    @Test(timeout = 4000)
    public void test311699() throws Throwable {
        Node node0 = Node.newString("", 57, 57);
        boolean boolean0 = node0.isString();
    }

    @Test(timeout = 4000)
    public void test311700() throws Throwable {
        Node node0 = Node.newString("", 57, 57);
        boolean boolean0 = node0.isString();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test312701() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test312702() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isStringKey();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test312703() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isStringKey();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test313704() throws Throwable {
        Node node0 = new Node(154, (-578), (-578));
        boolean boolean0 = node0.isStringKey();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test313705() throws Throwable {
        Node node0 = new Node(154, (-578), (-578));
        boolean boolean0 = node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test314706() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        boolean boolean0 = node0.isSwitch();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test314707() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        boolean boolean0 = node0.isSwitch();
    }

    @Test(timeout = 4000)
    public void test314708() throws Throwable {
        Node node0 = Node.newNumber((-1.0));
        boolean boolean0 = node0.isSwitch();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test315709() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = node0.isSwitch();
    }

    @Test(timeout = 4000)
    public void test315710() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = node0.isSwitch();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test316711() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = node0.isThis();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test316712() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = node0.isThis();
        node0.isFunction();
    }

    @Test(timeout = 4000)
    public void test316713() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = node0.isThis();
    }

    @Test(timeout = 4000)
    public void test317714() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isThis();
    }

    @Test(timeout = 4000)
    public void test317715() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = node0.isThis();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test318716() throws Throwable {
        Node node0 = new Node(26, 1789, 26);
        node0.isThrow();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test318717() throws Throwable {
        Node node0 = new Node(26, 1789, 26);
        node0.isThrow();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test319718() throws Throwable {
        Node node0 = new Node((-722), (-722), (-722));
        Node node1 = new Node(49, node0, node0);
        boolean boolean0 = node1.isThrow();
    }

    @Test(timeout = 4000)
    public void test319719() throws Throwable {
        Node node0 = new Node((-722), (-722), (-722));
        Node node1 = new Node(49, node0, node0);
        boolean boolean0 = node1.isThrow();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test319720() throws Throwable {
        Node node0 = new Node((-722), (-722), (-722));
        Node node1 = new Node(49, node0, node0);
        boolean boolean0 = node1.isThrow();
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test320721() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isTrue();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test320722() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isTrue();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test320723() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test321724() throws Throwable {
        Node node0 = new Node((byte) 44);
        boolean boolean0 = node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test321725() throws Throwable {
        Node node0 = new Node((byte) 44);
        boolean boolean0 = node0.isTrue();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test322726() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isTry();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test322727() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isTry();
    }

    @Test(timeout = 4000)
    public void test322728() throws Throwable {
        Node node0 = new Node((-3771));
        boolean boolean0 = node0.isTry();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test323729() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = node0.isTry();
    }

    @Test(timeout = 4000)
    public void test323730() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = node0.isTry();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test324731() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isTypeOf();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test324732() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isTypeOf();
    }

    @Test(timeout = 4000)
    public void test324733() throws Throwable {
        Node node0 = new Node(2);
        boolean boolean0 = node0.isTypeOf();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test325734() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = node0.isTypeOf();
    }

    @Test(timeout = 4000)
    public void test325735() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = node0.isTypeOf();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test326736() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = node0.isVar();
    }

    @Test(timeout = 4000)
    public void test326737() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = node0.isVar();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test326738() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = node0.isVar();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test327739() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isVar();
    }

    @Test(timeout = 4000)
    public void test327740() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isVar();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test328741() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isVoid();
    }

    @Test(timeout = 4000)
    public void test328742() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isVoid();
        node0.isWith();
    }

    @Test(timeout = 4000)
    public void test328743() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isVoid();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test329744() throws Throwable {
        Node node0 = new Node(122);
        boolean boolean0 = node0.isVoid();
    }

    @Test(timeout = 4000)
    public void test329745() throws Throwable {
        Node node0 = new Node(122);
        boolean boolean0 = node0.isVoid();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test330746() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isWhile();
    }

    @Test(timeout = 4000)
    public void test330747() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isWhile();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test330748() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isWhile();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test331749() throws Throwable {
        Node node0 = new Node((byte) 113);
        boolean boolean0 = node0.isWhile();
    }

    @Test(timeout = 4000)
    public void test331750() throws Throwable {
        Node node0 = new Node((byte) 113);
        boolean boolean0 = node0.isWhile();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test332751() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = node0.isWith();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test332752() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = node0.isWith();
        node0.isDec();
    }

    @Test(timeout = 4000)
    public void test332753() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = node0.isWith();
    }

    @Test(timeout = 4000)
    public void test333754() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = node0.isWith();
    }

    @Test(timeout = 4000)
    public void test333755() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = node0.isWith();
        node0.getSourcePosition();
    }
}
