/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:23:34 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckMissingReturn;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JsMessageVisitor;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CompilerOptions_ESTest extends CompilerOptions_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0220() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0330() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setReplaceStringsConfiguration("_a/aeEs`5k", (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test0431() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
    }

    @Test(timeout = 4000)
    public void test0541() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test0642() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0752() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0862() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0973() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test1083() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test1084() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
    }

    @Test(timeout = 4000)
    public void test1194() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
    }

    @Test(timeout = 4000)
    public void test12104() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test13114() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13119() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test14125() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test15135() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
    }

    @Test(timeout = 4000)
    public void test16145() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test16152() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test17156() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test18167() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test18172() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test19175() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test20185() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test21195() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test22205() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test23215() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test24226() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test25236() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test26246() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26250() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test27254() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27260() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test28265() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
    }

    @Test(timeout = 4000)
    public void test29276() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30287() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test31298() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32309() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33320() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
    }

    @Test(timeout = 4000)
    public void test34331() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
    }

    @Test(timeout = 4000)
    public void test35341() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36352() throws Throwable {
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        boolean boolean0 = compilerOptions_TracerMode0.isOn();
    }
}
