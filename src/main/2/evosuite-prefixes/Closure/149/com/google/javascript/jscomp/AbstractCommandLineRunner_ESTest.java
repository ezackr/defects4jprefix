/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:17:47 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.protobuf.ByteString;
import java.io.FilterOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.createCompiler();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "o E;9F@*T";
        stringArray0[1] = "o E;9F@*T";
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o E;9F@*T");
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
        Compiler compiler0 = commandLineRunner0.getCompiler();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.run();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        String[] stringArray0 = new String[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.setRunOptions(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
        AbstractCommandLineRunner.createJsModules(list0, list0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "+RdG!(&GFyhy";
        MockPrintStream mockPrintStream0 = new MockPrintStream("+RdG!(&GFyhy");
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
        AbstractCommandLineRunner.RunTimeStats abstractCommandLineRunner_RunTimeStats0 = commandLineRunner0.new RunTimeStats();
        AbstractCommandLineRunner.FlagUsageException abstractCommandLineRunner_FlagUsageException0 = new AbstractCommandLineRunner.FlagUsageException("*V]L/g");
        commandLineRunner0.exit(abstractCommandLineRunner_RunTimeStats0, abstractCommandLineRunner_FlagUsageException0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        AbstractCommandLineRunner.RunTimeStats abstractCommandLineRunner_RunTimeStats0 = commandLineRunner0.new RunTimeStats();
        commandLineRunner0.exit(abstractCommandLineRunner_RunTimeStats0, (Throwable) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        AbstractCommandLineRunner.createJsModules((List<String>) null, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Vector<String> vector0 = new Vector<String>();
        AbstractCommandLineRunner.createJsModules(vector0, vector0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.offer("Jq='kRdGjS&GFyEhy");
        AbstractCommandLineRunner.createJsModules(linkedList0, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JSModule jSModule0 = new JSModule("-oV~YLN.:Bay6p A[");
        List<String> list0 = jSModule0.getProvides();
        AbstractCommandLineRunner.createJsModules(list0, list0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.error("i:", "i:", 1, "i:", 1);
        List<String> list0 = simpleErrorReporter0.errors();
        AbstractCommandLineRunner.createJsModules(list0, list0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        String[] stringArray0 = new String[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        ByteString.Output byteString_Output0 = ByteString.newOutput();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Result result0 = compiler0.getResult();
        JSModule[] jSModuleArray0 = new JSModule[0];
        int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ByteString.Output byteString_Output0 = ByteString.newOutput();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Result result0 = compiler0.getResult();
        JSModule[] jSModuleArray0 = new JSModule[1];
        commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JSModule jSModule0 = new JSModule("-oV~YLN.:Bay6p A[");
        List<String> list0 = jSModule0.getProvides();
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        Compiler compiler0 = new Compiler();
        AbstractCommandLineRunner.writeOutput(stringWriter0, compiler0, "lN", "com.google.common.collect.RegularImmutableList", "lN");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        AbstractCommandLineRunner.writeOutput(stringWriter0, (Compiler) null, "<dRbK~]JrdLG", "<dRbK~]JrdLG", "<dRbK~]JrdLG");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        Compiler compiler0 = new Compiler();
        AbstractCommandLineRunner.writeOutput(stringWriter0, compiler0, "[fdJ1niuYeq$;St&", "[fdJ1niuYeq$;St&", "");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", (String) null);
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        int int0 = commandLineRunner0.processResults(result0, (JSModule[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Logger logger0 = Logger.getLogger("4M");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Result result0 = compiler0.getResult();
        commandLineRunner0.processResults(result0, (JSModule[]) null, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        String string0 = commandLineRunner0.expandManifest((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.offer("Jq='+RdG!(&GFyEhy");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineReplacements(linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.offer("=+gqB");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineReplacements(linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.offer("0aFj%g7#SG4;T-|:=8");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineReplacements(linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.offer("0aFj%g#SG4;T-|:=`8");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineReplacements(linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Stack<JSModule> stack0 = new Stack<JSModule>();
        JSModule jSModule0 = new JSModule((String) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("~w;^<7|`jwz7aIT/", "");
        jSModule0.addFirst(jSSourceFile0);
        stack0.add(jSModule0);
        JSModuleGraph jSModuleGraph0 = new JSModuleGraph(stack0);
        PipedReader pipedReader0 = new PipedReader();
        PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
        commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, pipedWriter0);
        commandLineRunner0.shouldRunCompiler();
    }
}
