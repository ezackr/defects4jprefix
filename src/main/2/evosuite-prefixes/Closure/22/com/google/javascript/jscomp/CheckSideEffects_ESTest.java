/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 00:55:47 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CheckSideEffects_ESTest extends CheckSideEffects_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects((AbstractCompiler) null, checkLevel0, false);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection((AbstractCompiler) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects((AbstractCompiler) null, checkLevel0, true);
        Node node0 = Node.newString("v!");
        checkSideEffects0.process(node0, node0);
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String string0 = "qSiaH,Y";
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("qSiaH,Y");
        CheckLevel checkLevel0 = CheckLevel.OFF;
        boolean boolean0 = true;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, boolean0);
        checkSideEffects0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Node node0 = Node.newString("Bad tree in codegen");
        CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection((AbstractCompiler) null);
        checkSideEffects_StripProtection0.process(node0, node0);
        node0.isCase();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AbstractCompiler abstractCompiler0 = null;
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects((AbstractCompiler) null, checkLevel0, true);
        checkSideEffects0.hotSwapScript((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects((AbstractCompiler) null, checkLevel0, false);
        Node node0 = Node.newString("?Ht)4T]lG");
        checkSideEffects0.process(node0, node0);
        node0.isRegExp();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        String string0 = "7";
        Node node0 = compiler0.parseSyntheticCode("7", "7");
        boolean boolean0 = true;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, boolean0);
        checkSideEffects0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("vZ2HX/a.i-a ,Xfmm");
        boolean boolean0 = true;
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, boolean0);
        checkSideEffects0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
        Node node0 = Node.newString(125, "V`}Z:YV", 100, 100);
        checkSideEffects0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        System.setCurrentTimeMillis(774L);
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 774L);
        Node node1 = new Node(125, node0, node0, node0, 54, 49);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
        checkSideEffects0.process(node0, node1);
        SyntheticAst syntheticAst0 = new SyntheticAst("&J%GBW<f");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        String string0 = ";FouZq";
        Node node0 = compiler0.parseTestCode(";FouZq");
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, boolean0);
        checkSideEffects0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
        Node node0 = new Node(115);
        Node node1 = new Node(115, node0, 29, 29);
        checkSideEffects0.process(node0, node1);
        node0.isNull();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node0 = new Node(115);
        Node node1 = new Node(130, node0, 12, (-1848));
        checkSideEffects0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
        Node node0 = compiler0.externAndJsRoot;
        Node node1 = new Node(37, 16, 16);
        CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
        checkSideEffects_StripProtection0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node0 = new Node(130);
        Node node1 = new Node(130, node0, 29, 29);
        checkSideEffects0.process(node0, node1);
        node0.isInstanceOf();
    }
}
