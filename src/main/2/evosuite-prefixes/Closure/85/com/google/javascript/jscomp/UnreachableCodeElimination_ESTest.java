/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:47:32 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!$H#E", "B?-zfq!$H#E");
        Node node1 = new Node(105, node0, node0);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.visit((NodeTraversal) null, node1, node1);
        node1.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Hemoebzg", "Hemoebzg");
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node0, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Hemoebzg", "Hemoebzg");
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node0, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("B?-zf!<$H#E", "B?-zf!<$H#E");
        Node node1 = new Node(4, node0, node0);
        Node node2 = node1.removeFirstChild();
        node2.addChildToBack(node1);
        Node node3 = new Node(114, node0);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node2, node2);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("B?-zf!<$H#E", "B?-zf!<$H#E");
        Node node1 = new Node(4, node0, node0);
        Node node2 = node1.removeFirstChild();
        node2.addChildToBack(node1);
        Node node3 = new Node(114, node0);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node2, node2);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!$H#E", "B?-zfq!$H#E");
        Node node1 = new Node(114, node0, node0);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "; found: null", "-~zq!]$H#5");
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("B?-zfq!<$H#E");
        Node node1 = new Node(4, node0, node0);
        Node node2 = new Node(77, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node1, node2);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "BP*zfq<$ H#E", "BP*zfq<$ H#E");
        Node node1 = new Node(4, node0, node0);
        Node node2 = node1.removeFirstChild();
        Node node3 = new Node(77, node1);
        node3.addChildToBack(node2);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node2, node3);
        node2.equals((Object) node3);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "BP*zfq<$ H#E", "BP*zfq<$ H#E");
        Node node1 = new Node(4, node0, node0);
        Node node2 = node1.removeFirstChild();
        Node node3 = new Node(77, node1);
        node0.setType(105);
        node3.addChildToBack(node2);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node2, node3);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "vaIr", "vaIr");
        Node node1 = new Node(124, node0, node0);
        Node node2 = new Node(48, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node2);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "vaIr", "vaIr");
        Node node1 = new Node(124, node0, node0);
        Node node2 = new Node(48, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node2);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!$H#E", "B?-zfq!$H#E");
        Node node1 = new Node(125, node0, node0);
        Node node2 = new Node(42, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node1, node2);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!$H#E", "B?-zfq!$H#E");
        Node node1 = new Node(125, node0, node0);
        Node node2 = new Node(42, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node1, node2);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_aTT$?=lqIn", "_aTT$?=lqIn");
        Node node1 = new Node(114, node0, node0);
        Node node2 = new Node(44, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node2);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "vaIr", "vaIr");
        Node node1 = new Node(120, node0, node0);
        Node node2 = new Node(48, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node2);
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!<$H#E", "B?-zfq!<$H#E");
        Node node1 = new Node(4, node0, node0);
        Node node2 = node1.removeFirstChild();
        node2.addChildToBack(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node2, node0);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B?-zfq!<$H#E", "B?-zfq!<$H#E");
        Node node1 = new Node(4, node0, node0);
        Node node2 = node1.removeFirstChild();
        node2.addChildToBack(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node2, node0);
        node0.getChildCount();
    }
}
