/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 11:51:50 GMT 2024
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+MH+|K+|M+|S+|W+|Z+!a+|d|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''[^']*+)*+'|[^'A-Za-z]++");
        Locale locale0 = Locale.ITALIAN;
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+MH+|K+|M+|S+|W+|Z+!a+|d|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("szMU4VxsV?|;m XJQ1c");
        Locale locale0 = Locale.UK;
        FastDateParser fastDateParser0 = new FastDateParser("szMU4VxsV?|;m XJQ1c", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("Ka/");
        Locale locale0 = Locale.ITALY;
        FastDateParser fastDateParser0 = new FastDateParser("Ka/", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("KA)]");
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser("KA)]", timeZone0, locale0);
        Object object0 = fastDateParser0.parseObject("9PVxq2I\"G");
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = new Locale("");
        FastDateParser fastDateParser0 = new FastDateParser("0r>", timeZone0, locale0);
        fastDateParser0.hashCode();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
        Locale locale0 = new Locale("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
        String string0 = fastDateParser0.toString();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("+W(|!?)P<+E#R=f&5)M");
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser("+W(|!?)P<+E#R=f&5)M", timeZone0, locale0);
        fastDateParser0.parseObject("+W(|!?)P<+E#R=f&5)M", (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
        Locale locale0 = new Locale("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
        String string0 = fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        FastDateParser fastDateParser0 = new FastDateParser("GlTJST", timeZone0, locale0);
        Locale locale1 = fastDateParser0.getLocale();
        locale1.getCountry();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("/|T");
        Locale locale0 = Locale.ROOT;
        FastDateParser fastDateParser0 = new FastDateParser("/|T", timeZone0, locale0);
        TimeZone timeZone1 = fastDateParser0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
        Locale locale0 = Locale.FRENCH;
        FastDateParser fastDateParser0 = new FastDateParser(",//aLJ.-2ER", simpleTimeZone0, locale0);
        Pattern pattern0 = fastDateParser0.getParsePattern();
        pattern0.pattern();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("QoEa9cV.VgybnBm{_");
        Locale locale0 = Locale.UK;
        FastDateParser fastDateParser0 = null;
        fastDateParser0 = new FastDateParser("QoEa9cV.VgybnBm{_", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
        Locale locale0 = Locale.UK;
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
        boolean boolean0 = fastDateParser0.equals(fastDateParser0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[']*+)*+w|?^'A-Za-z]++");
        Locale locale0 = Locale.JAPAN;
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[']*+)*+w|?^'A-Za-z]++", timeZone0, locale0);
        boolean boolean0 = fastDateParser0.equals(timeZone0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("GMTART");
        Locale locale0 = Locale.US;
        FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
        FastDateParser fastDateParser1 = new FastDateParser("j1fde=Uc", timeZone0, locale0);
        boolean boolean0 = fastDateParser0.equals(fastDateParser1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("@\"");
        Locale locale0 = Locale.UK;
        FastDateParser fastDateParser0 = new FastDateParser("@\"", timeZone0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1681), "@\"");
        FastDateParser fastDateParser1 = new FastDateParser("@\"", simpleTimeZone0, locale0);
        boolean boolean0 = fastDateParser0.equals(fastDateParser1);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[']*+)*+w|?^'A-Za-z]++");
        Locale locale0 = Locale.JAPAN;
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[']*+)*+w|?^'A-Za-z]++", timeZone0, locale0);
        Locale locale1 = Locale.ENGLISH;
        FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[']*+)*+w|?^'A-Za-z]++", timeZone0, locale1);
        boolean boolean0 = fastDateParser0.equals(fastDateParser1);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+MH+|K+|M+|S+|W+|Z+|a+|d|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
        Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+MH+|K+|M+|S+|W+|Z+|a+|d|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
        fastDateParser0.parse("D+|E+|F+|G+MH+|K+|M+|S+|W+|Z+|a+|d|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'-Za-z]++");
        Locale locale0 = Locale.UK;
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'-Za-z]++", timeZone0, locale0);
        fastDateParser0.parse("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'-Za-z]++");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("$>V'jv{{$x~QG89|");
        Locale locale0 = Locale.ITALIAN;
        FastDateParser fastDateParser0 = new FastDateParser("$>V'jv{{$x~QG89|", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("~{-0.3(`a");
        Locale locale0 = Locale.UK;
        FastDateParser fastDateParser0 = new FastDateParser("~{-0.3(`a", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("d?}aW``");
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        FastDateParser fastDateParser0 = new FastDateParser("d?}aW``", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
        Locale locale0 = Locale.FRENCH;
        FastDateParser fastDateParser0 = new FastDateParser(",//aLJ.-2ER", simpleTimeZone0, locale0);
        fastDateParser0.adjustYear(45);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
        Locale locale0 = Locale.FRENCH;
        FastDateParser fastDateParser0 = new FastDateParser("25@0OSZLwh0BL7?S5", simpleTimeZone0, locale0);
        fastDateParser0.adjustYear(1);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        FastDateParser fastDateParser0 = new FastDateParser(")<wruP^Ju|'-r", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateParser fastDateParser0 = new FastDateParser("*!0IkG-xBAG{1IRX", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("-*U+;6tA(B");
        Locale locale0 = Locale.GERMAN;
        FastDateParser fastDateParser0 = new FastDateParser("-*U+;6tA(B", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(".rrj");
        Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
        FastDateParser fastDateParser0 = new FastDateParser(".rrj", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("1iA?y!NZ");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateParser fastDateParser0 = new FastDateParser("1iA?y!NZ", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        FastDateParser fastDateParser0 = new FastDateParser("30;.(4", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("4v\"");
        Locale locale0 = new Locale("4v\"", "4v\"");
        FastDateParser fastDateParser0 = new FastDateParser("4v\"", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("5l/rGX d]}1");
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser("5l/rGX d]}1", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("M7XRR6x0");
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser("M7XRR6x0", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("8NtUn9");
        Locale locale0 = Locale.CANADA;
        FastDateParser fastDateParser0 = new FastDateParser("8NtUn9", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        FastDateParser fastDateParser0 = new FastDateParser("H9cuc @V%Vr]", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.GERMANY;
        FastDateParser fastDateParser0 = new FastDateParser(":L$8\"\"=X,#zv9", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        FastDateParser fastDateParser0 = new FastDateParser(";c,l?ca:!INC!V^t4}", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("<Iy");
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        FastDateParser fastDateParser0 = new FastDateParser("<Iy", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("+W(1|?<+EH=&5yJ");
        Locale locale0 = Locale.US;
        FastDateParser fastDateParser0 = new FastDateParser("+W(1|?<+EH=&5yJ", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("6H>rC*?|,\"'");
        FastDateParser fastDateParser0 = new FastDateParser("6H>rC*?|,\"'", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+MH+|K+|M+|S+|W+|Z+|a+|d|h+|k+|m+|s+|w+y+|z+|''|'[^']++(''^']*+)*+'|[^'A-Za-z]++");
        Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
        FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+MH+|K+|M+|S+|W+|Z+|a+|d|h+|k+|m+|s+|w+y+|z+|''|'[^']++(''^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPAN;
        FastDateParser fastDateParser0 = new FastDateParser("_u.8Nw%-vuv+vi-L0l", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("GMTCST");
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        FastDateParser fastDateParser0 = new FastDateParser("ZU'Lf?-jVo|", timeZone0, locale0);
        fastDateParser0.parseObject("GMTCST");
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateParser fastDateParser0 = new FastDateParser("Zv'LfvpjVo|", timeZone0, locale0);
        fastDateParser0.parseObject("ACT");
    }
}
