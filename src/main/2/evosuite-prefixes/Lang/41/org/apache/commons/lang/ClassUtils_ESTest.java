/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:33:47 GMT 2024
 */
package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.ClassUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, (String) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<?> class0 = ClassUtils.getClass("[[Lorg.apache.commons.lang.ClassUtils;");
        String string0 = ClassUtils.getPackageCanonicalName(class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Integer> class0 = Integer.class;
        boolean boolean0 = ClassUtils.isAssignable(class0, class0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        String string0 = ClassUtils.getShortClassName((Object) classUtils0, ".");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Float> class0 = Float.TYPE;
        Class<Short> class1 = Short.class;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 1);
        boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        String string0 = ClassUtils.getShortClassName((Object) null, ".");
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        String string0 = ClassUtils.getShortClassName((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        String string0 = ClassUtils.getShortCanonicalName((String) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        String string0 = ClassUtils.getShortCanonicalName(" ");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        String string0 = ClassUtils.getShortCanonicalName(class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        String string0 = ClassUtils.getShortCanonicalName("Q.a1i)~d)[@&t$");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        String string0 = ClassUtils.getPackageName((Object) "Q-it5}c?>", "Q-it5}c?>");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        String string0 = ClassUtils.getPackageName((Object) null, "=");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        String string0 = ClassUtils.getPackageName((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        String string0 = ClassUtils.getPackageCanonicalName((String) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        String string0 = ClassUtils.getPackageCanonicalName("[");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<Short> class0 = Short.class;
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
        List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        Class<Short> class0 = Short.class;
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
        List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
        list1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Class<Short> class0 = Short.class;
        List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        Class<Short> class0 = Short.class;
        List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        List<Class<?>> list0 = ClassUtils.getAllInterfaces((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) null);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add((String) null);
        List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
        List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add((String) null);
        List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
        List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
        list1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        List<String> list0 = ClassUtils.convertClassesToClassNames((List<Class<?>>) null);
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 7);
        Class<Character>[] classArray1 = (Class<Character>[]) Array.newInstance(Class.class, 15);
        boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, false);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        Class<Short> class0 = Short.class;
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 1);
        classArray0[0] = class0;
        boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        Class<String> class0 = String.class;
        boolean boolean0 = ClassUtils.isAssignable((Class<?>) null, class0, true);
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        boolean boolean0 = ClassUtils.isAssignable((Class<?>) null, class0, true);
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Class<Double> class1 = Double.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Class<Float> class1 = Float.class;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<String> class1 = String.class;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Class<Float> class1 = Float.class;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, false);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Class<Integer> class1 = Integer.class;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<Long> class1 = Long.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<Float> class1 = Float.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<Byte> class1 = Byte.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Class<Float> class1 = Float.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Class<Long> class1 = Long.class;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<Long> class1 = Long.class;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        Class<Boolean> class1 = Boolean.class;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Class<Short> class1 = Short.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Class<Float> class1 = Float.class;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        Class<Double> class1 = Double.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        Class<Integer> class1 = Integer.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        Class<Long> class1 = Long.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        Class<Float> class1 = Float.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, false);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        Class<Character> class1 = Character.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, false);
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<Short> class1 = Short.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Class<Short> class1 = Short.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, false);
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        Class<Character> class1 = Character.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, false);
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Class<Short> class1 = Short.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, false);
    }

    @Test(timeout = 4000)
    public void test5255() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        Class<Byte> class1 = Byte.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, false);
    }

    @Test(timeout = 4000)
    public void test5356() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<Byte> class1 = Byte.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, false);
    }

    @Test(timeout = 4000)
    public void test5457() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Class<Byte> class1 = Byte.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class1, class0, false);
    }

    @Test(timeout = 4000)
    public void test5558() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Class<Float> class1 = Float.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test5659() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Class<Character> class1 = Character.TYPE;
        boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test5760() throws Throwable {
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
        Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
    }

    @Test(timeout = 4000)
    public void test5861() throws Throwable {
        Class<String> class0 = String.class;
        Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test5962() throws Throwable {
        Class<?>[] classArray0 = ClassUtils.primitivesToWrappers((Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test6063() throws Throwable {
        Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 0);
        Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
    }

    @Test(timeout = 4000)
    public void test6164() throws Throwable {
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
        Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
    }

    @Test(timeout = 4000)
    public void test6265() throws Throwable {
        Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test6366() throws Throwable {
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
        Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
    }

    @Test(timeout = 4000)
    public void test6467() throws Throwable {
        Class<?> class0 = ClassUtils.getClass("org.apache.commons.lang.builder.ToStringStyle$1");
        boolean boolean0 = ClassUtils.isInnerClass(class0);
    }

    @Test(timeout = 4000)
    public void test6568() throws Throwable {
        boolean boolean0 = ClassUtils.isInnerClass((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test6669() throws Throwable {
        Class<Character> class0 = Character.class;
        boolean boolean0 = ClassUtils.isInnerClass(class0);
    }

    @Test(timeout = 4000)
    public void test6770() throws Throwable {
        Class<?> class0 = ClassUtils.getClass("char");
        class0.isInterface();
    }

    @Test(timeout = 4000)
    public void test6871() throws Throwable {
        Class<?> class0 = ClassUtils.getClass("float[]");
        class0.getModifiers();
    }

    @Test(timeout = 4000)
    public void test6972() throws Throwable {
        ClassUtils.getClass("[]");
    }

    @Test(timeout = 4000)
    public void test7073() throws Throwable {
        Object[] objectArray0 = new Object[0];
        Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
    }

    @Test(timeout = 4000)
    public void test7174() throws Throwable {
        Class<?>[] classArray0 = ClassUtils.toClass((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test7275() throws Throwable {
        Object[] objectArray0 = new Object[1];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
    }

    @Test(timeout = 4000)
    public void test7376() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        String string0 = ClassUtils.getShortCanonicalName((Object) class0, "$");
    }

    @Test(timeout = 4000)
    public void test7477() throws Throwable {
        String string0 = ClassUtils.getShortCanonicalName((Object) null, "$OsOO7O'ej^b O}");
    }

    @Test(timeout = 4000)
    public void test7578() throws Throwable {
        String string0 = ClassUtils.getShortCanonicalName((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test7679() throws Throwable {
        Long long0 = new Long(4769L);
        String string0 = ClassUtils.getPackageCanonicalName((Object) long0, "{}");
    }

    @Test(timeout = 4000)
    public void test7780() throws Throwable {
        String string0 = ClassUtils.getPackageCanonicalName((Object) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test7881() throws Throwable {
        String string0 = ClassUtils.getPackageCanonicalName((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test7982() throws Throwable {
        String string0 = ClassUtils.getPackageCanonicalName("[[Lorg.apachercom8ons.lang.lassUtils;[][]");
    }

    @Test(timeout = 4000)
    public void test8083() throws Throwable {
        ClassUtils.getPackageCanonicalName("[]");
    }
}
