/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 13:04:32 GMT 2024
 */
package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        int int0 = fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-971));
        fraction0.add(fraction0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction1 = Fraction.getReducedFraction(1786, Integer.MIN_VALUE);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction1 = Fraction.getReducedFraction(1786, Integer.MIN_VALUE);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction1 = Fraction.getReducedFraction(1786, Integer.MIN_VALUE);
        Fraction fraction2 = Fraction.getFraction((-1.0));
        fraction2.ONE_HALF.hashCode();
        String string0 = fraction2.toProperString();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction1 = Fraction.getReducedFraction(1786, Integer.MIN_VALUE);
        Fraction fraction2 = Fraction.getFraction((-1.0));
        fraction2.ONE_HALF.hashCode();
        String string0 = fraction2.toProperString();
        Fraction fraction3 = Fraction.getFraction("-1");
        Fraction fraction4 = fraction3.TWO_THIRDS.negate();
        fraction4.byteValue();
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        Fraction fraction1 = Fraction.getReducedFraction(1786, Integer.MIN_VALUE);
        Fraction fraction2 = Fraction.getFraction((-1.0));
        fraction2.ONE_HALF.hashCode();
        String string0 = fraction2.toProperString();
        Fraction fraction3 = Fraction.getFraction("-1");
        Fraction fraction4 = fraction3.TWO_THIRDS.negate();
        fraction3.doubleValue();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        float float0 = fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        long long0 = fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        long long0 = fraction0.longValue();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        long long0 = fraction0.longValue();
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(1324.1681589371965);
        double double0 = fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2147483614), (-971));
        Fraction fraction1 = fraction0.subtract(fraction0);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2147483614), (-971));
        Fraction fraction1 = fraction0.subtract(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        Fraction.getFraction(0, 0);
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        Fraction.getFraction(2, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        Fraction.getFraction(Integer.MIN_VALUE, 2677, 5);
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        Fraction.getFraction(0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        Fraction.getFraction((-1433), (-1433), (-1433));
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        Fraction.getFraction(1, (-1), 96);
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        Fraction fraction0 = Fraction.getFraction("112 3/16");
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        Fraction.getReducedFraction(22, 0);
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        Fraction.getReducedFraction((-971), Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2147483641));
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        Fraction.getFraction(2.1474836531698027E9);
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        Fraction.getFraction((String) null);
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        Fraction.getFraction("/.sXoLh");
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        Fraction.getFraction("7 ");
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        Fraction.getFraction("S](X,G~u/nO>+");
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.reduce();
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.reduce();
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.reduce();
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, (-100));
        Fraction fraction1 = fraction0.reduce();
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, (-100));
        Fraction fraction1 = fraction0.reduce();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test2637() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, (-100));
        Fraction fraction1 = fraction0.reduce();
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, (-100));
        Fraction fraction1 = fraction0.reduce();
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test2739() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1786);
        fraction0.invert();
    }

    @Test(timeout = 4000)
    public void test2840() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(2.0541920998651264E-6);
        fraction0.invert();
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        fraction0.negate();
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1413.98190261506));
        Fraction fraction1 = fraction0.abs();
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test3043() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1413.98190261506));
        Fraction fraction1 = fraction0.abs();
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test3144() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.TWO_THIRDS.abs();
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1413.98190261506));
        fraction0.pow((-11876034));
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fraction0.TWO_QUARTERS.pow(Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.pow(0);
        fraction1.shortValue();
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-971));
        Fraction fraction1 = Fraction.ONE_THIRD;
        fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-971));
        Fraction fraction1 = Fraction.getFraction((double) (-971));
        fraction0.add(fraction1);
    }

    @Test(timeout = 4000)
    public void test3750() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(2.147483647E9);
        fraction0.add(fraction0);
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = fraction0.add(fraction1);
        fraction2.doubleValue();
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(2.147483647E9);
        Fraction fraction1 = fraction0.subtract(fraction0);
        Fraction fraction2 = fraction1.subtract(fraction0);
        fraction2.subtract(fraction0);
    }

    @Test(timeout = 4000)
    public void test4053() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2147483614), (-971));
        Fraction fraction1 = Fraction.getFraction((double) (-971));
        fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test4154() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        fraction0.subtract((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test4255() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0.0);
        Fraction fraction1 = fraction0.add(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test4356() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test4357() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.subtract(fraction1);
        fraction2.getDenominator();
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.subtract(fraction1);
        fraction2.intValue();
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2147483641), (-971));
        fraction0.ONE.multiplyBy((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.pow(1913);
        fraction1.intValue();
    }

    @Test(timeout = 4000)
    public void test4661() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = fraction0.TWO_QUARTERS.divideBy(fraction0);
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = fraction0.TWO_QUARTERS.divideBy(fraction0);
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test4663() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = fraction0.TWO_QUARTERS.divideBy(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test4764() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1458.543172253));
        fraction0.ONE_HALF.divideBy((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test4865() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        fraction0.divideBy(fraction0);
    }

    @Test(timeout = 4000)
    public void test4966() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        boolean boolean0 = fraction0.equals("r\"j{e >KyxW");
    }

    @Test(timeout = 4000)
    public void test5067() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction1.equals(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test5068() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction1.equals(fraction0);
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5069() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction1.equals(fraction0);
    }

    @Test(timeout = 4000)
    public void test5070() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction1.equals(fraction0);
        fraction0.equals((Object) fraction1);
    }

    @Test(timeout = 4000)
    public void test5171() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.ONE_HALF.negate();
        boolean boolean0 = fraction2.equals(fraction1);
        fraction2.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test5172() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.ONE_HALF.negate();
        boolean boolean0 = fraction2.equals(fraction1);
        fraction0.equals((Object) fraction2);
    }

    @Test(timeout = 4000)
    public void test5173() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.ONE_HALF.negate();
        boolean boolean0 = fraction2.equals(fraction1);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test5174() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.ONE_HALF.negate();
        boolean boolean0 = fraction2.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test5175() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.ONE_HALF.negate();
        boolean boolean0 = fraction2.equals(fraction1);
        fraction2.doubleValue();
    }

    @Test(timeout = 4000)
    public void test5176() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.ONE_HALF.negate();
        boolean boolean0 = fraction2.equals(fraction1);
        fraction2.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5277() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test5278() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.negate();
        int int0 = fraction0.compareTo(fraction1);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test5379() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = fraction0.compareTo(fraction0);
    }

    @Test(timeout = 4000)
    public void test5480() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(4732577, 4732577);
        Fraction fraction1 = Fraction.ONE;
        int int0 = fraction0.compareTo(fraction1);
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test5481() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(4732577, 4732577);
        Fraction fraction1 = Fraction.ONE;
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test5582() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.ONE;
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test5683() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.TWO_QUARTERS;
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test5784() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        fraction0.toString();
        String string0 = fraction0.toString();
    }

    @Test(timeout = 4000)
    public void test5886() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1801, 16);
        fraction0.toProperString();
        String string0 = fraction0.toProperString();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5887() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1801, 16);
        fraction0.toProperString();
        String string0 = fraction0.toProperString();
    }

    @Test(timeout = 4000)
    public void test5988() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2177), (-2177));
        Fraction fraction1 = fraction0.reduce();
        Fraction fraction2 = Fraction.ZERO;
        Fraction fraction3 = fraction0.multiplyBy(fraction2);
        String string0 = fraction3.toProperString();
    }

    @Test(timeout = 4000)
    public void test5990() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2177), (-2177));
        Fraction fraction1 = fraction0.reduce();
        Fraction fraction2 = Fraction.ZERO;
        Fraction fraction3 = fraction0.multiplyBy(fraction2);
        String string0 = fraction3.toProperString();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5991() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2177), (-2177));
        Fraction fraction1 = fraction0.reduce();
        Fraction fraction2 = Fraction.ZERO;
        Fraction fraction3 = fraction0.multiplyBy(fraction2);
        String string0 = fraction3.toProperString();
        fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test6092() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        String string0 = fraction0.toProperString();
    }

    @Test(timeout = 4000)
    public void test6194() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1563);
        String string0 = fraction0.toProperString();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test6195() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1563);
        String string0 = fraction0.toProperString();
    }

    @Test(timeout = 4000)
    public void test6296() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        fraction0.TWO_QUARTERS.hashCode();
        fraction0.TWO_THIRDS.toProperString();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test6297() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        fraction0.TWO_QUARTERS.hashCode();
        fraction0.TWO_THIRDS.toProperString();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test6398() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(700, (-1));
        String string0 = fraction0.toProperString();
    }

    @Test(timeout = 4000)
    public void test63100() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(700, (-1));
        String string0 = fraction0.toProperString();
        fraction0.getDenominator();
    }
}
