/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 16:07:13 GMT 2024
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.TimeZone;
import org.apache.commons.lang.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Date date1 = DateUtils.addMinutes(date0, 1);
        date1.toString();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateUtils.addWeeks((Date) null, 382);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateUtils.addYears((Date) null, (-63));
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MockDate mockDate0 = new MockDate(2, 2, 2);
        Date date0 = DateUtils.addMilliseconds(mockDate0, 2);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MockDate mockDate0 = new MockDate((-9), (-9), (-9));
        Date date0 = DateUtils.addDays(mockDate0, (-9));
        boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        MockDate mockDate0 = new MockDate((-9), (-9), (-9));
        Date date0 = DateUtils.addDays(mockDate0, (-9));
        boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addMonths(mockDate0, 2315);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        DateUtils.addSeconds((Date) null, (-89));
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addHours(mockDate0, 1875);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        dateUtils_DateIterator0.remove();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        dateUtils_DateIterator0.hasNext();
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        DateUtils.isSameDay((Date) null, (Date) null);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        MockDate mockDate0 = new MockDate((-9), (-9), (-9));
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        DateUtils.isSameDay(date0, (Date) null);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        DateUtils.isSameDay((Calendar) null, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.set((-5983), (-5983), (-5983));
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        DateUtils.isSameInstant((Date) null, (Date) null);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        DateUtils.isSameInstant(date0, (Date) null);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        boolean boolean0 = DateUtils.isSameInstant(date0, date0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, date0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        DateUtils.isSameInstant((Calendar) null, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 9);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 9);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1, 1);
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test3034() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1, 1);
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test3135() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 5, 5, 5);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(5, 5, (-1958));
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
    }

    @Test(timeout = 4000)
    public void test3236() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.US;
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale0);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test3337() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        mockGregorianCalendar1.set(6, 6, 6);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.clear(1);
        Calendar calendar0 = MockCalendar.getInstance();
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.set(0, 0);
        TimeZone timeZone0 = TimeZone.getDefault();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        String[] stringArray0 = new String[8];
        DateUtils.parseDate(stringArray0[1], stringArray0);
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        DateUtils.parseDate(";X]D<zH", (String[]) null);
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "<G";
        DateUtils.parseDate("<G", stringArray0);
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "<G";
        DateUtils.parseDate("<G", stringArray0);
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "\"";
        Date date0 = DateUtils.parseDate("\"", stringArray0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        DateUtils.parseDate("Z;^", stringArray0);
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        MockDate mockDate0 = new MockDate(2, 2, 2);
        Date date0 = DateUtils.round((Object) mockDate0, 2);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        DateUtils.round((Date) null, (-35));
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 9);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        DateUtils.round((Calendar) null, 0);
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        DateUtils.round((Object) null, 468);
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.round((Object) mockGregorianCalendar0, (-1));
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        Object object0 = new Object();
        DateUtils.round(object0, (-838));
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        DateUtils.truncate((Date) null, (-63));
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        DateUtils.truncate((Calendar) null, (-1));
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        DateUtils.truncate((Object) null, 9);
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        MockDate mockDate0 = new MockDate();
        DateUtils.truncate((Object) mockDate0, (-70));
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        DateUtils.truncate((Object) "", (-15));
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(280000000, 280000000, 2);
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 4);
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        Date date0 = DateUtils.truncate((Object) calendar0, 1001);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test5560() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        Date date0 = DateUtils.truncate((Object) calendar0, 1001);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        MockDate mockDate0 = new MockDate(1001, 1001, 15, 1001, 1001);
        Date date0 = DateUtils.round((Date) mockDate0, 1001);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3);
        Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 9);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test5863() throws Throwable {
        MockDate mockDate0 = new MockDate(2, 2, 2);
        Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 2);
    }

    @Test(timeout = 4000)
    public void test5964() throws Throwable {
        DateUtils.iterator((Date) null, 11);
    }

    @Test(timeout = 4000)
    public void test6065() throws Throwable {
        DateUtils.iterator((Calendar) null, 1001);
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Iterator iterator0 = DateUtils.iterator((Object) mockGregorianCalendar0, 1);
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2236, 3, 3);
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 3);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 5);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 6);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3);
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 4);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test6671() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 4);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test6772() throws Throwable {
        DateUtils.iterator((Object) null, (-2837));
    }

    @Test(timeout = 4000)
    public void test6873() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        DateUtils.iterator((Object) date0, 13);
    }

    @Test(timeout = 4000)
    public void test6974() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        DateUtils.iterator((Object) zoneInfo0, 1);
    }

    @Test(timeout = 4000)
    public void test7075() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3);
        Calendar calendar0 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, mockGregorianCalendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test7076() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3);
        Calendar calendar0 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, mockGregorianCalendar0);
        dateUtils_DateIterator0.next();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test7177() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        dateUtils_DateIterator0.next();
    }
}
