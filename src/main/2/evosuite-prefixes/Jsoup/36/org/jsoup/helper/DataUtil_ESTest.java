/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 03:24:57 GMT 2024
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        File file0 = MockFile.createTempFile("v&B.Aw%2$3(Y4u*x", (String) null);
        Document document0 = DataUtil.load(file0, (String) null, "v&B.Aw%2$3(Y4u*x");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DataUtil.load((InputStream) null, "\"(:}#d/4r", "section");
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) byteArrayInputStream0, "h4", "h4", parser0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MockFile mockFile0 = new MockFile("vs(IeL");
        DataUtil.load((File) mockFile0, "wlx~bn", "vs(IeL");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        File file0 = MockFile.createTempFile("gnH1", "");
        DataUtil.load(file0, "", "");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        File file0 = MockFile.createTempFile(">ID\"gaN", (String) null);
        Document document0 = DataUtil.load(file0, "UTF-8", ">ID\"gaN");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        char[] charArray0 = new char[2];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, "UTF-8", "", parser0);
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null, (-1748));
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 1);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 1);
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 856);
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("v&B.Aw%2$3(Y4u*x");
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }
}
