/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 00:59:37 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Parser_ESTest extends Parser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = Parser.parseBodyFragment("<script></script>", "<script></script>");
        document0.tagName();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Parser.parse("<!-", "<!-");
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = Parser.parse("<!--%s-->", "T!N;^NVDIB6<c_=");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Document document0 = Parser.parse("<?", "<?");
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Document document0 = Parser.parse("<!--", "<!--");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Document document0 = Parser.parse("</", "</");
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Document document0 = Parser.parseBodyFragment("<.--", "<.--");
        document0.tagName();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body> bas/\n</body>\n</html><bas/>\n</bas/>", "bas/");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Document document0 = Parser.parse("<html>\n<head>\n <title>#,&lt;GxK</title>\n</head>\n<body>\n #,<gxk>\n </gxk>\n</body>\n</html>", "#,<GxK");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Document document0 = Parser.parse("<textarea></textarea>\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "textarea");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Document document0 = Parser.parse("<y7_ !x^a='p5?q!?>@?>\n</y7_ !x^a='p5?q!?>@?>\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "y7_ !x^a='p5?q!?>@?");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body> TA!N[o;VD9BG<c _=\"\">\n </c>\n</body>\n</html>", "TA!N[o;VD9BG<c_=");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Document document0 = Parser.parse("TIE NI;V<3=<c`Pw&s=", "TIE NI;V<3=<c`Pw&s=");
        document0.tagName();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Document document0 = Parser.parse("&r<U',lN=o ", "&r<U',lN=o ");
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Document document0 = Parser.parse("<base />", "<base />");
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Document document0 = Parser.parse("</v5 (-@{yU#mYG{&pm", "OBJECT");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body>\n</body>\n</html>\n<html>\n</html>", "<html>\n<head>\n</head>\n<body>\n</body>\n</html>\n<html>\n</html>");
        document0.tagName();
    }
}
