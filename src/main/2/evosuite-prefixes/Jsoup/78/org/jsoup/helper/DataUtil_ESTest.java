/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 07:57:25 GMT 2024
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 62);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
        DataUtil.readToByteBuffer((InputStream) bufferedInputStream0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = DataUtil.load((InputStream) null, "pb", "pb");
        document0.location();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        byteBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DataUtil.load((File) null, "kVab&Ox", "kVab&Ox");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 17, (byte) 4);
        DataUtil.crossStreams(byteArrayInputStream0, pipedOutputStream0);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        DataUtil.crossStreams(pushbackInputStream0, pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1621, 0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        Parser parser0 = Parser.xmlParser();
        Document document0 = DataUtil.load((InputStream) dataInputStream0, (String) null, "0YOV(t8}n(U", parser0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1621, 0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        Parser parser0 = Parser.xmlParser();
        Document document0 = DataUtil.load((InputStream) dataInputStream0, (String) null, "0YOV(t8}n(U", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataUtil.readToByteBuffer(byteArrayInputStream0, (byte) (-113));
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        File file0 = MockFile.createTempFile("org.jsoup.helper.DataUtil$BomCharset", "org.jsoup.helper.DataUtil$BomCharset");
        ByteBuffer byteBuffer0 = DataUtil.readFileToByteBuffer(file0);
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        DataUtil.readFileToByteBuffer((File) null);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("0YOV(t8}n(U");
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        String string0 = DataUtil.mimeBoundary();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) (-17);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) (-17);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) sequenceInputStream0, "q}. wj", "xml", parser0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) (-1);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) bufferedInputStream0, "", "", parser0);
    }
}
