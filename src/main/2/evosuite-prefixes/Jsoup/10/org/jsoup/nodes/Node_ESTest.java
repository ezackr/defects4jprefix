/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:26:55 GMT 2024
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Node_ESTest extends Node_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = Document.createShell("Vj)");
        document0.setBaseUri("Vj)");
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Document.createShell("Vj)");
        document0.attr("Vj)", "Vj)");
        String string0 = document0.absUrl("Vj)");
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TextNode textNode0 = new TextNode("Vj)", "Vj)");
        Node node0 = textNode0.removeAttr("Vj)");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TextNode textNode0 = new TextNode("j", "j");
        textNode0.toString();
        textNode0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Document document0 = Document.createShell("Tj)");
        document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Document document0 = Document.createShell("Tj)");
        Document document1 = (Document) document0.append("Tj)");
        Document document2 = document1.clone();
        document2.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Document document0 = Document.createShell("Tj)");
        Document document1 = (Document) document0.append("Tj)");
        Document document2 = document1.clone();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Document document0 = Document.createShell("Vj)");
        DataNode dataNode0 = DataNode.createFromEncoded("Vj)", "Vj)");
        document0.replaceWith(dataNode0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Document document0 = Document.createShell("T)");
        document0.siblingNodes();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Document document0 = Document.createShell("Tj)");
        Document document1 = document0.clone();
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        Document document0 = Document.createShell("Tj)");
        Document document1 = document0.clone();
        document1.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        Document document0 = Document.createShell("Vj)");
        document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        Document document0 = Document.createShell("Vj)");
        String string0 = document0.outerHtml();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        Document document0 = Document.createShell("eTj)");
        document0.remove();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        TextNode textNode0 = new TextNode("j", "j");
        Attributes attributes0 = textNode0.attributes();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        Document document0 = Document.createShell("abs:#declaration");
        String string0 = document0.absUrl("abs:#declaration");
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        Document document0 = Document.createShell("D/qM3!G'6'fEr");
        Element element0 = document0.head();
        element0.setParentNode(document0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        Document document0 = Document.createShell("id");
        document0.replaceChild(document0, document0);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        Document document0 = new Document("id");
        document0.prependChild(document0);
        document0.replaceChild(document0, document0);
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        Document document0 = Document.createShell("id");
        document0.prependChild(document0);
        Document document1 = Document.createShell("id");
        document0.replaceChild(document0, document1);
        document1.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        Document document0 = Document.createShell("id");
        document0.prependChild(document0);
        Document document1 = Document.createShell("id");
        document0.replaceChild(document0, document1);
        document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        Document document0 = Document.createShell("V=rj");
        document0.removeChild(document0);
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        Document document0 = Document.createShell("g#|Rk)PHS+");
        Element element0 = document0.head();
        Node node0 = element0.previousSibling();
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        Document document0 = Document.createShell("g#|Rk)PHS+");
        Element element0 = document0.head();
        Node node0 = element0.previousSibling();
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        Document document0 = Document.createShell("Tj)");
        Element element0 = document0.appendChild(document0);
        element0.previousSibling();
        document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        Document document0 = Document.createShell("Vj)");
        Elements elements0 = document0.getElementsByIndexEquals(4);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Cr", "Cr");
        boolean boolean0 = textNode0.equals(textNode0);
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        Document document0 = Document.createShell("Vj)");
        Elements elements0 = document0.select("body");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test2228() throws Throwable {
        TextNode textNode0 = new TextNode(":L GN?Y", ":L GN?Y");
        textNode0.hashCode();
    }
}
