/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:32:17 GMT 2024
 */
package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Selector_ESTest extends Selector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = Document.createShell("[!F2T5tP$=~");
        Elements elements0 = Selector.select("[!F2T5tP$=~", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = new Document(":eq(");
        Selector.select(":eq(", (Element) document0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = Document.createShell(":has(el) subselect must not be empty");
        Elements elements0 = Selector.select(":has(el) subselect must not be empty", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = new Document(":not(selector) subselect must not be empty");
        Elements elements0 = Selector.select(":not(selector) subselect must not be empty", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Document document0 = new Document("org.jsoup.select.Selector");
        Elements elements0 = Selector.select("org.jsoup.select.Selector", (Element) document0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Document document0 = new Document(":lt(");
        Selector.select(":lt(", (Element) document0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Document document0 = Document.createShell(":gt(");
        Selector.select(":gt(", (Element) document0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Document document0 = new Document("Q_[xaP]W7|l/K5");
        Selector.select("Q_[xaP]W7|l/K5", (Element) document0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Document document0 = Document.createShell(">*");
        Elements elements0 = Selector.select(">*", (Element) document0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Document document0 = new Document(",");
        Selector.select(",", (Element) document0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Document document0 = new Document("D8X#n[qT*=;dA^");
        Elements elements0 = Selector.select("D8X#n[qT*=;dA^", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Document document0 = Document.createShell(":contains(text) query must not be empty");
        Elements elements0 = Selector.select(":contains(text) query must not be empty", (Element) document0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Document document0 = Document.createShell(":containsOwn(");
        Selector.select(":containsOwn(", (Element) document0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Document document0 = new Document(":matches(rege2) querym+st notrbe empry");
        Elements elements0 = Selector.select(":matches(rege2) querym+st notrbe empry", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Document document0 = Document.createShell(":matchesOwn(");
        Selector.select(":matchesOwn(", (Element) document0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Document document0 = new Document("^=");
        Elements elements0 = Selector.select("F[^,*M5+XE5(4G4N@}", (Element) document0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Document document0 = new Document("DWyln[qUT^-=;M,N");
        Elements elements0 = Selector.select("DWyln[qUT^-=;M,N", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Document document0 = new Document("[Ut~!=sz");
        Elements elements0 = Selector.select("[Ut~!=sz", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Document document0 = Document.createShell("DW#yln[qUT^=;MAN");
        Elements elements0 = Selector.select("DW#yln[qUT^=;MAN", (Element) document0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Document document0 = Document.createShell("[!UF5tP~=~");
        Elements elements0 = Selector.select("[!UF5tP~=~", (Element) document0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Document document0 = Document.createShell("x5L9qh,+**");
        Element element0 = document0.body();
        element0.appendElement("x5L9qh,+**");
        Elements elements0 = Selector.select("x5L9qh,+**", element0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Document document0 = Document.createShell("x5L9qh,+**");
        Element element0 = document0.head();
        Elements elements0 = Selector.select("x5L9qh,+**", element0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Document document0 = Document.createShell("~*");
        Element element0 = document0.body();
        element0.appendElement("~*");
        Elements elements0 = Selector.select("~*", element0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Document document0 = Document.createShell("L*");
        Elements elements0 = Selector.select("L*", (Element) document0);
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Tag tag0 = Tag.valueOf("HEADER");
        Element element0 = new Element(tag0, "HEADER");
        element0.prependElement("HEADER");
        Elements elements0 = element0.getElementsByAttributeValueNot("HEADER", "HEADER");
        Elements elements1 = Selector.filterOut(elements0, elements0);
        elements1.size();
    }
}
