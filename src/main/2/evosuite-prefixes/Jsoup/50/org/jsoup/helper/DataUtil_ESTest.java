/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 05:19:02 GMT 2024
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DataUtil.load((InputStream) null, "1h{x", "1h{x");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        byteBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[18];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "", parser0);
        DataUtil.crossStreams(byteArrayInputStream0, (OutputStream) null);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        MockFile mockFile0 = new MockFile("=~!{Lx-=2GZ");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        DataUtil.crossStreams(byteArrayInputStream0, mockPrintStream0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        File file0 = MockFile.createTempFile("b0F]/Vb9'K.onyrB\"W", "b0F]/Vb9'K.onyrB\"W");
        ByteBuffer byteBuffer0 = DataUtil.readFileToByteBuffer(file0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, "UTF-8", "b0F]/Vb9'K.onyrB\"W", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataUtil.readToByteBuffer(byteArrayInputStream0, (byte) (-78));
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 21);
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[18];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, (byte) 15);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[18];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, (byte) 15);
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        MockFile mockFile0 = new MockFile("SlQN[");
        DataUtil.load((File) mockFile0, "SlQN[", "SlQN[");
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("zX@*");
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        String string0 = DataUtil.mimeBoundary();
    }
}
