/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 08:08:38 GMT 2024
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataUtil.readToByteBuffer((InputStream) pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(812);
        DataUtil.load((InputStream) pipedInputStream0, "", "5YcO{Qh!-zLrhAvr}H");
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = DataUtil.load((InputStream) null, "a.cgoz*=:06", "a.cgoz*=:06", (Parser) null);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
        DataUtil.crossStreams(sequenceInputStream0, dataOutputStream0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 4);
        DataUtil.crossStreams(byteArrayInputStream0, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseInputStream(pushbackInputStream0, (String) null, "Ip9]", parser0);
        Document document0 = DataUtil.parseInputStream(byteArrayInputStream0, (String) null, "Ip9]", parser0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseInputStream(pushbackInputStream0, (String) null, "Ip9]", parser0);
        Document document0 = DataUtil.parseInputStream(byteArrayInputStream0, (String) null, "Ip9]", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        File file0 = MockFile.createTempFile("SYSTEM", "UTF-8");
        Document document0 = DataUtil.load(file0, "UTF-8", "SYSTEM");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (byte) 11);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        DataUtil.readToByteBuffer(dataInputStream0, (-5869));
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        File file0 = MockFile.createTempFile("T1_@'Zx4^+", "9FXH-G$L.iK6,K");
        ByteBuffer byteBuffer0 = DataUtil.readFileToByteBuffer(file0);
        byteBuffer0.isReadOnly();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        MockFile mockFile0 = new MockFile("9FXH-G$L.iK6,K", "9FXH-G$L.iK6,K");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("T1_@'Zx4^+");
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        String string0 = DataUtil.mimeBoundary();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[2] = (byte) (-17);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (byte) 117);
        DataUtil.parseInputStream(byteArrayInputStream0, "T1_@'Zx4^+", "maxSize must be 0 (unlimited) or larger", (Parser) null);
    }
}
