/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 06:11:38 GMT 2024
 */
package org.jsoup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.net.URL;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Jsoup_ESTest extends Jsoup_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = Jsoup.parseBodyFragment("");
        document0.location();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Jsoup.parse("0%&nI1`Xga", "0%&nI1`Xga");
        document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Jsoup.clean((String) null, whitelist0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = Jsoup.parse("");
        document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        String string0 = Jsoup.clean("%Ps`5k&o\"", "%Ps`5k&o\"", whitelist0, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        Jsoup.parse((InputStream) sequenceInputStream0, "3027pz*dL,122B16", "3027pz*dL,122B16", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MockFile mockFile0 = new MockFile("UTF-16");
        Jsoup.parse((File) mockFile0, "UTF-16", "org.jsoup.Jsoup");
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Whitelist whitelist0 = Whitelist.basicWithImages();
        boolean boolean0 = Jsoup.isValid("49qAspOEBX", whitelist0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        Jsoup.parse((File) mockFile0, ":has(%s)");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Jsoup.parse((URL) null, 0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = Jsoup.parse("", "", parser0);
        document0.isBlock();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Jsoup.connect((String) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-110), (byte) (-126));
        Jsoup.parse((InputStream) byteArrayInputStream0, "Sqvb9b:dxf", "Sqvb9b:dxf");
    }
}
