/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 06:22:26 GMT 2024
 */
package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.select.Evaluator;
import org.jsoup.select.QueryParser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class QueryParser_ESTest extends QueryParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        QueryParser.parse(":eq(");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        QueryParser.parse("\n * ");
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        QueryParser.parse(":containsData(");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        QueryParser.parse(":lt(");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("~WN-f,#hS 6i,O[L");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        QueryParser.parse(":gt(");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        QueryParser.parse(":has(");
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(".O[^[1n)sk");
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        QueryParser.parse(":not(");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("1q8Zm#wd~1lIk");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("zq>[Q@2k3R");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("+o_K4");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        QueryParser.parse("~e(");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("*|*|dd");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":contains(text) query must not be empty");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":containsOwn(%s)");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":matches(regex) query must not be empty");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":matchesOwn(%s)");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        QueryParser.parse(":nth-child(7)");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        QueryParser.parse(":nth-last-child(");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        QueryParser.parse(":nth-of-type(");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        QueryParser.parse(":nth-last-of-type(");
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":first-child");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":last-child");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":first-of-type");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":last-of-type");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":only-child");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":only-of-type");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":empty");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse(":root");
        evaluator0.toString();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("w,l7|Ag7Wnl");
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("[%s$=%s]");
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("[%s^q=%s]");
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("[%s!=%s]");
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("[%s^=%s]");
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("[s~=/s");
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Evaluator evaluator0 = QueryParser.parse("[%s*=%s]");
    }
}
