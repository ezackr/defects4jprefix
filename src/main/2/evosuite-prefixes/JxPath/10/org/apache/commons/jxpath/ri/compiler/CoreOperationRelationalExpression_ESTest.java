/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 10:14:15 GMT 2024
 */
package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CoreOperationRelationalExpression_ESTest extends CoreOperationRelationalExpression_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
        int int0 = coreOperationGreaterThanOrEqual0.getPrecedence();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
        boolean boolean0 = coreOperationGreaterThanOrEqual0.isSymmetric();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        QName qName0 = new QName("", "");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) qName0);
        Locale locale0 = Locale.UK;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        InitialContext initialContext0 = (InitialContext) rootContext0.getAbsoluteRootContext();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        AttributeContext attributeContext0 = new AttributeContext(initialContext0, nodeNameTest0);
        AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, nodeNameTest0);
        Expression[] expressionArray0 = new Expression[2];
        expressionArray0[0] = (Expression) variableReference0;
        expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
        CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
        Boolean boolean0 = (Boolean) coreOperationGreaterThanOrEqual1.computeValue(ancestorContext0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        QName qName0 = new QName("");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) qName0);
        Locale locale0 = Locale.PRC;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationGreaterThanOrEqual0);
        Boolean boolean0 = (Boolean) coreOperationGreaterThanOrEqual1.computeValue(rootContext0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Double double0 = Expression.NOT_A_NUMBER;
        Constant constant0 = new Constant(double0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
        Object object0 = coreOperationGreaterThanOrEqual1.computeValue((EvalContext) null);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Double double0 = Expression.ONE;
        Constant constant0 = new Constant(double0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationGreaterThanOrEqual0);
        Object object0 = coreOperationGreaterThanOrEqual1.computeValue((EvalContext) null);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Double double0 = Expression.ONE;
        Constant constant0 = new Constant(double0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, constant0);
        Object object0 = coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        QName qName0 = new QName("");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) qName0);
        Locale locale0 = Locale.UK;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        Expression[] expressionArray0 = new Expression[2];
        expressionArray0[0] = (Expression) variableReference0;
        expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
        CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
        CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationUnion0);
        Iterator iterator0 = coreOperationGreaterThan0.iteratePointers(rootContext0);
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        QName qName0 = new QName("", "");
        VariableReference variableReference0 = new VariableReference(qName0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) qName0);
        Locale locale0 = Locale.UK;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        Constant constant0 = new Constant(Integer.MIN_VALUE);
        Expression[] expressionArray0 = new Expression[2];
        expressionArray0[0] = (Expression) constant0;
        expressionArray0[1] = (Expression) constant0;
        CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationUnion0);
        Boolean boolean0 = (Boolean) coreOperationGreaterThanOrEqual0.computeValue(rootContext0);
    }
}
