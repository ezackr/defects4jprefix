/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:01:29 GMT 2024
 */
package org.apache.commons.compress.archivers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ArchiveStreamFactory_ESTest extends ArchiveStreamFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[10];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) byteArrayInputStream0);
        archiveStreamFactory0.createArchiveInputStream((InputStream) archiveInputStream0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("ar", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        TarArchiveInputStream tarArchiveInputStream0 = (TarArchiveInputStream) archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) byteArrayInputStream0);
        tarArchiveInputStream0.getRecordSize();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[15];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2594, 2594);
        archiveStreamFactory0.createArchiveInputStream("T\"0wbk", (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("jar", pipedOutputStream0);
        archiveOutputStream0.getBytesWritten();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        archiveStreamFactory0.createArchiveOutputStream((String) null, pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveOutputStream("jar", (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("tar", pipedOutputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(archiveOutputStream0);
        ArArchiveOutputStream arArchiveOutputStream0 = (ArArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("ar", dataOutputStream0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("zip", pipedOutputStream0);
        archiveOutputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("cpio", pipedOutputStream0);
        archiveOutputStream0.getBytesWritten();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        archiveStreamFactory0.createArchiveOutputStream("dump", pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        TarArchiveInputStream tarArchiveInputStream0 = (TarArchiveInputStream) archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        tarArchiveInputStream0.getRecordSize();
    }
}
