/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:48:00 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockFile mockFile0 = new MockFile("o.name");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        String string0 = zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        zipArchiveOutputStream0.setComment("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream");
        zipArchiveOutputStream0.close();
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(0);
        MockFile mockFile0 = new MockFile("g=Q");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "g=Q");
        zipArchiveEntry0.setCrc(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(0);
        MockFile mockFile0 = new MockFile("g=Q");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "g=Q");
        zipArchiveEntry0.setCrc(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setFallbackToUTF8(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setEncoding("zD3");
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        File file0 = MockFile.createTempFile("pXg>l+", "pXg>l+");
        MockFile mockFile0 = new MockFile(file0, "pXg>l+");
        ZipArchiveOutputStream zipArchiveOutputStream0 = null;
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveOutputStream zipArchiveOutputStream0 = null;
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        MockFile mockFile0 = new MockFile("utf-8");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        boolean boolean0 = zipArchiveOutputStream1.isSeekable();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        MockFile mockFile0 = new MockFile("utf-8");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        boolean boolean0 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        MockFile mockFile0 = new MockFile("utf-8");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        boolean boolean0 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
        zipArchiveOutputStream0.close();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
        zipArchiveOutputStream0.close();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(0);
        MockFile mockFile0 = new MockFile("<p=Qc");
        ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry) zipArchiveOutputStream0.createArchiveEntry(mockFile0, "<p=Qc");
        zipArchiveEntry0.setCrc(8);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(0);
        MockFile mockFile0 = new MockFile("g=Q");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "g=Q");
        zipArchiveEntry0.setCrc(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        MockFile mockFile0 = new MockFile((String) null, "p");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("p");
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        File file0 = MockFile.createTempFile("khp9Sh8s%\"a$W|K", "khp9Sh8s%\"a$W|K");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(0);
        MockFile mockFile0 = new MockFile("<p=Qc", "<p=Qc");
        ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, "<p=Qc");
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel((-1187));
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel(2048);
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldolicy");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        zipArchiveOutputStream0.setLevel((-1));
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.setMethod(0);
        zipArchiveOutputStream0.write((byte[]) null, 3, 0);
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.write((byte[]) null, 0, 0);
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.write((byte[]) null, 0, 9532);
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        MockFile mockFile0 = new MockFile("3PNKZ=1A5/g7");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        zipArchiveOutputStream0.flush();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.flush();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3139() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("");
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3140() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("");
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ustar ");
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test3242() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ustar ");
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3343() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("uncompressed size is required for STORED method when not writing to a file");
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("uncompressed size is required for STORED method when not writing to a file");
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveEntry0.setComment("_cG&E>0~-^=?}");
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
    }
}
