/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:45:15 GMT 2024
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.flush();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 477);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        int int0 = tarArchiveOutputStream0.getRecordSize();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("+'T=k<DH@ERex9", "");
        TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry) tarArchiveOutputStream0.createArchiveEntry(mockFile0, "+'T=k<DH@ERex9");
        tarArchiveEntry0.setSize(1);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(2);
        MockFile mockFile0 = new MockFile("org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils", "/Users/elliottzackrone/IdeaProjects/defects4jprefix/org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils/org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils/org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils0org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils/org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        MockFile mockFile1 = new MockFile(mockFile0, "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        MockFile mockFile2 = new MockFile(mockFile1, "62M");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile2);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveEntry0.getUserName();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.close();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SLRl#D=!u<X3;");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MockFile mockFile0 = new MockFile("org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils", "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", "org.apache.commons.compress.archivers.zip.ExtraFieldUtils");
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("", "");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveEntry0.isGNULongNameEntry();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        byte[] byteArray0 = new byte[6];
        tarArchiveOutputStream0.write(byteArray0, 16877, 16877);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MockFile mockFile0 = new MockFile("org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils", "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(2);
        File file0 = MockFile.createTempFile("org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils", "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils", (File) mockFile0);
        MockFile mockFile1 = new MockFile(file0, "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        MockFile mockFile2 = new MockFile(mockFile1, "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        MockFile mockFile3 = new MockFile(mockFile2, "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        MockFile mockFile4 = new MockFile(mockFile3, "org.ahach_.commons.compress.archivers.zip.ExtraFieldUVils");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile4);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        byteArrayOutputStream0.size();
    }
}
