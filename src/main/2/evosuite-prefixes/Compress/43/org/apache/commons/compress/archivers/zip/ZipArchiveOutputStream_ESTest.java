/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:37:58 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeZip64CentralDirectory();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeZip64CentralDirectory();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(54);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setCompressedSize(4294967347L);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(54);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setCompressedSize(4294967347L);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setFallbackToUTF8(false);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.deflate();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = null;
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        FileChannel fileChannel0 = mockFileInputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        MockFile mockFile0 = new MockFile("", "2k9|jB70B$C&");
        ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry) zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        FileChannel fileChannel0 = mockFileInputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        MockFile mockFile0 = new MockFile("", "2k9|jB70B$C&");
        ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry) zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        zipArchiveEntry0.toString();
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        String string0 = zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2065, 2065);
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        zipArchiveOutputStream0.finish();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2065, 2065);
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        zipArchiveOutputStream0.finish();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.writeOut((byte[]) null, (-1), (-1));
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setComment("F'wl0W$Po");
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
        zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.tar.TarArchiveEntry");
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setEncoding("UTF8");
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
        zipArchiveOutputStream0.setEncoding("UTF-16BE");
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.finished = true;
        zipArchiveOutputStream0.finish();
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.finish();
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2065, 2065);
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        zipArchiveEntry0.getCompressedSize();
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2065, 2065);
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.close();
        zipArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(objectOutputStream0);
        zipArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
        jarArchiveEntry0.setMethod(0);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        jarArchiveEntry0.setCrc(2048);
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        zipArchiveEntry0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.finished = true;
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (-1));
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        zipArchiveEntry0.setMethod(0);
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.getCompressedSize();
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (-1));
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        zipArchiveEntry0.setMethod(0);
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3140() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        FileChannel fileChannel0 = mockFileInputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.setLevel(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3242() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.setLevel(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3343() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("`Sb!KBk]");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "`Sb!KBk]");
        zipArchiveEntry0.setMethod(0);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test3444() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setCompressedSize(4294967347L);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3545() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        FileChannel fileChannel0 = mockFileInputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        Zip64Mode zip64Mode0 = Zip64Mode.Never;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel((-2580));
    }

    @Test(timeout = 4000)
    public void test3747() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel(12);
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel((-1));
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test3949() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test3950() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
    }

    @Test(timeout = 4000)
    public void test4051() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test4052() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test4153() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Ae9");
        zipArchiveEntry0.setMethod(6);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test4154() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Ae9");
        zipArchiveEntry0.setMethod(6);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test4255() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("`Sb!KBk]");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "`Sb!KBk]");
        zipArchiveEntry0.setMethod(1);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test4256() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("`Sb!KBk]");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "`Sb!KBk]");
        zipArchiveEntry0.setMethod(1);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test4357() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        zipArchiveOutputStream1.finish();
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        zipArchiveEntry0.getCompressedSize();
    }

    @Test(timeout = 4000)
    public void test4561() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
        zipArchiveOutputStream0.finished = true;
        zipArchiveOutputStream0.close();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test4763() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
        zipArchiveOutputStream0.flush();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test4864() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.flush();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test4965() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test4966() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test5067() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(2812, true);
        zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test5068() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(2812, true);
        zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test5169() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
        jarArchiveEntry0.setAlignment(8);
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test5170() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
        jarArchiveEntry0.setAlignment(8);
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test5271() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
        zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test5272() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
        zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test5373() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
        zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test5474() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.setMethod(1730);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        FileChannel fileChannel0 = mockFileInputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test5575() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test5576() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test5677() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        FileChannel fileChannel0 = mockFileInputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
        JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Y:*bSvU,Ci]O/[ Asl");
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        zipArchiveOutputStream1.writeDataDescriptor(jarArchiveEntry0);
        jarArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test5778() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test5779() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test5880() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setCompressedSize(4294967332L);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test5981() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("tar\u0000");
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test5982() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("tar\u0000");
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test6083() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
        X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
        ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
        ZipLong zipLong0 = ZipLong.AED_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        zipExtraFieldArray0[0] = (ZipExtraField) zip64ExtendedInformationExtraField0;
        X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
        zipExtraFieldArray0[1] = (ZipExtraField) x7875_NewUnix0;
        UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
        zipExtraFieldArray0[2] = (ZipExtraField) unrecognizedExtraField0;
        ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(3, true);
        ZipShort zipShort0 = resourceAlignmentExtraField0.getCentralDirectoryLength();
        unrecognizedExtraField0.setHeaderId(zipShort0);
        zipExtraFieldArray0[3] = (ZipExtraField) x000A_NTFS0;
        X0019_EncryptionRecipientCertificateList x0019_EncryptionRecipientCertificateList0 = new X0019_EncryptionRecipientCertificateList();
        zipExtraFieldArray0[4] = (ZipExtraField) x0019_EncryptionRecipientCertificateList0;
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test6084() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
        X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
        ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
        ZipLong zipLong0 = ZipLong.AED_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        zipExtraFieldArray0[0] = (ZipExtraField) zip64ExtendedInformationExtraField0;
        X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
        zipExtraFieldArray0[1] = (ZipExtraField) x7875_NewUnix0;
        UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
        zipExtraFieldArray0[2] = (ZipExtraField) unrecognizedExtraField0;
        ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(3, true);
        ZipShort zipShort0 = resourceAlignmentExtraField0.getCentralDirectoryLength();
        unrecognizedExtraField0.setHeaderId(zipShort0);
        zipExtraFieldArray0[3] = (ZipExtraField) x000A_NTFS0;
        X0019_EncryptionRecipientCertificateList x0019_EncryptionRecipientCertificateList0 = new X0019_EncryptionRecipientCertificateList();
        zipExtraFieldArray0[4] = (ZipExtraField) x0019_EncryptionRecipientCertificateList0;
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test6185() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        Zip64Mode zip64Mode0 = Zip64Mode.Never;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.writeZip64CentralDirectory();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test6286() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test6287() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test6388() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
        zipArchiveOutputStream0.finished = true;
        MockFile mockFile0 = new MockFile("BZLIB");
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, "uncompressed size is required for STORED method when not writing to a file");
    }

    @Test(timeout = 4000)
    public void test6489() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1));
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        zipArchiveEntry0.getCompressedSize();
    }

    @Test(timeout = 4000)
    public void test6490() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byte[] byteArray0 = new byte[14];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1));
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        Zip64Mode zip64Mode0 = Zip64Mode.Always;
        zipArchiveOutputStream0.setUseZip64(zip64Mode0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test6591() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        FileChannel fileChannel0 = mockFileInputStream0.getChannel();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
        zipArchiveOutputStream0.destroy();
        zipArchiveOutputStream0.getEncoding();
    }
}
