/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:58:21 GMT 2024
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.getCount();
        tarArchiveOutputStream0.getRecordSize();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("FUgfDGN");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 100, "FUgfDGN");
        int int0 = tarArchiveOutputStream0.getRecordSize();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, "UTF-8");
        tarArchiveOutputStream0.getRecordSize();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.flush();
        tarArchiveOutputStream0.getRecordSize();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        tarArchiveOutputStream0.finish();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("5\"\"oqxG`}Z=)b2JS[5");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 31);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.finish();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.getBytesWritten();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
        tarArchiveOutputStream0.putArchiveEntry(arjArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("o");
        tarArchiveEntry0.setLinkName((String) null);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveEntry0.setLinkName("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveEntry0.setLinkName("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setBigNumberMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(">'wSau");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(3);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveEntry0.setLinkName("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.getBytesWritten();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ZLs<");
        tarArchiveEntry0.setSize(1);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0);
        tarArchiveOutputStream1.finish();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(2);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.getBytesWritten();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\u0000");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "\u0000", map0);
        tarArchiveOutputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders((TarArchiveEntry) null, "|i;/8`V< l8X|M)?", hashMap0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("Zipi4 exended informatoon must conta1n joth size values in the loTal file header.", "Zipi4 exended informatoon must conta1n joth size values in the loTal file header.");
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, "Zipi4 exended informatoon must conta1n joth size values in the loTal file header.");
        tarArchiveOutputStream0.getRecordSize();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        MockFile mockFile0 = new MockFile("\n", "\n");
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, "\n");
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, (-541));
        tarArchiveOutputStream0.finish();
        tarArchiveOutputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setBigNumberMode(2);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("request to write '");
        tarArchiveEntry0.setGroupId((-710));
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setBigNumberMode(2);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("i");
        MockDate mockDate0 = new MockDate(1000, 1, (-758), 1000, (-1548), 16877);
        tarArchiveEntry0.setModTime((Date) mockDate0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ASCII");
        tarArchiveEntry0.setMode((-1));
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("`kHw:i>9<7");
        tarArchiveEntry0.setModTime(280375465082880L);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 31, 16877);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.cmmons.comp[ess.archivers.ar.ArArchieEntry");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 16877);
        MockDate mockDate0 = new MockDate(2, 1, 0, 33188, 0, 1000);
        tarArchiveEntry0.setModTime((Date) mockDate0);
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "org.apache.cmmons.comp[ess.archivers.ar.ArArchieEntry", map0);
        tarArchiveOutputStream0.getCount();
    }
}
