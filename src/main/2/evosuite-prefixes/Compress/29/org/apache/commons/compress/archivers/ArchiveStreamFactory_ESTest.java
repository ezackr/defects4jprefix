/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:44:16 GMT 2024
 */
package org.apache.commons.compress.archivers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ArchiveStreamFactory_ESTest extends ArchiveStreamFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        String string0 = archiveStreamFactory0.getEntryEncoding();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("&J5{CpnN|`*VMYXw:");
        archiveStreamFactory0.setEntryEncoding("cpio");
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[50];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[34];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[11];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("ar", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        byte[] byteArray0 = new byte[11];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream("arj", (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[11];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.setEntryEncoding("arj");
        archiveStreamFactory0.createArchiveInputStream("arj", (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[11];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        byte[] byteArray0 = new byte[11];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.setEntryEncoding("zip");
        archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) byteArrayInputStream0);
        archiveStreamFactory0.getEntryEncoding();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        byte[] byteArray0 = new byte[541];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        byte[] byteArray0 = new byte[541];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("jar");
        archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) byteArrayInputStream0);
        archiveStreamFactory0.getEntryEncoding();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        byte[] byteArray0 = new byte[525];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        byte[] byteArray0 = new byte[50];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("jar");
        archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) byteArrayInputStream0);
        archiveStreamFactory0.getEntryEncoding();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        byte[] byteArray0 = new byte[11];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) byteArrayInputStream0);
        archiveInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        byte[] byteArray0 = new byte[11];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.setEntryEncoding("cpio");
        archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) byteArrayInputStream0);
        archiveStreamFactory0.getEntryEncoding();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        byte[] byteArray0 = new byte[321];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream("7z", (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        byte[] byteArray0 = new byte[250];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("tar");
        archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        archiveStreamFactory0.createArchiveInputStream("sO'3", (InputStream) pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = (ZipArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("zip", pipedOutputStream0);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory((String) null);
        archiveStreamFactory0.createArchiveOutputStream((String) null, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveOutputStream("dump", (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ArArchiveOutputStream arArchiveOutputStream0 = (ArArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("ar", pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cpio");
        archiveStreamFactory0.createArchiveOutputStream("ta", mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        archiveStreamFactory0.setEntryEncoding("arj");
        ZipArchiveOutputStream zipArchiveOutputStream0 = (ZipArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("zip", pipedOutputStream0);
        archiveStreamFactory0.getEntryEncoding();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        archiveStreamFactory0.setEntryEncoding("arj");
        ZipArchiveOutputStream zipArchiveOutputStream0 = (ZipArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("zip", pipedOutputStream0);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cpio");
        TarArchiveOutputStream tarArchiveOutputStream0 = (TarArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("tar", mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("");
        MockPrintStream mockPrintStream0 = new MockPrintStream("k>B*nF~+?x");
        archiveStreamFactory0.createArchiveOutputStream("tar", mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        MockPrintStream mockPrintStream0 = new MockPrintStream("arj");
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("jar", mockPrintStream0);
        archiveOutputStream0.getBytesWritten();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        MockPrintStream mockPrintStream0 = new MockPrintStream("arj");
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("cpio", mockPrintStream0);
        archiveOutputStream0.getBytesWritten();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        MockPrintStream mockPrintStream0 = new MockPrintStream("ar");
        archiveStreamFactory0.setEntryEncoding("7z");
        archiveStreamFactory0.createArchiveOutputStream("cpio", mockPrintStream0);
        archiveStreamFactory0.getEntryEncoding();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("7z");
        MockFile mockFile0 = new MockFile("jar", "tar");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        archiveStreamFactory0.createArchiveOutputStream("7z", mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        byte[] byteArray0 = new byte[50];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        archiveStreamFactory0.createArchiveInputStream((InputStream) pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        byte[] byteArray0 = new byte[525];
        byteArray0[42] = (byte) (-90);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
    }
}
