/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:32:20 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.close();
        ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[34];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextZipEntry();
        zipArchiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
        boolean boolean0 = zipArchiveInputStream0.canReadEntryData(sevenZArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
        zipArchiveInputStream1.getNextEntry();
        zipArchiveInputStream1.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        zipArchiveInputStream0.close();
        zipArchiveInputStream0.skip(2865L);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        zipArchiveInputStream0.close();
        zipArchiveInputStream0.close();
        zipArchiveInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        zipArchiveInputStream0.skip((-1913L));
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        long long0 = zipArchiveInputStream0.skip(0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        long long0 = zipArchiveInputStream0.skip(74L);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        byte[] byteArray0 = new byte[4];
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 80;
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 80);
    }
}
