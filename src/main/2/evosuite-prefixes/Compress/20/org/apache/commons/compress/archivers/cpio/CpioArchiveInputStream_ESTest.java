/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:22:08 GMT 2024
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CpioArchiveInputStream_ESTest extends CpioArchiveInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        int int0 = cpioArchiveInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 3);
        long long0 = cpioArchiveInputStream0.skip(3);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 3);
        long long0 = cpioArchiveInputStream0.skip(3);
        int int0 = cpioArchiveInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0, (-684));
        cpioArchiveInputStream0.close();
        cpioArchiveInputStream0.close();
        cpioArchiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(24);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        cpioArchiveInputStream0.close();
        cpioArchiveInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        cpioArchiveInputStream0.getNextCPIOEntry();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        cpioArchiveInputStream0.read(byteArray0, (-639), (-639));
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0, (byte) 118);
        cpioArchiveInputStream0.read(byteArray0, (int) (byte) 118, (-87));
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[6];
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1610612736);
        cpioArchiveInputStream0.read(byteArray0, 1610612736, 1610612736);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        int int0 = cpioArchiveInputStream0.read(byteArray0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        CpioArchiveInputStream cpioArchiveInputStream1 = new CpioArchiveInputStream(cpioArchiveInputStream0);
        cpioArchiveInputStream1.getNextEntry();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0, (byte) (-126));
        cpioArchiveInputStream0.skip((byte) (-126));
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        long long0 = cpioArchiveInputStream0.skip(0L);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        long long0 = cpioArchiveInputStream0.skip(30726L);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        byte[] byteArray0 = new byte[2];
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (-580140419));
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) 113;
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (byte) 113);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[1] = (byte) 113;
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (byte) 113);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) 48;
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (byte) 110);
    }
}
