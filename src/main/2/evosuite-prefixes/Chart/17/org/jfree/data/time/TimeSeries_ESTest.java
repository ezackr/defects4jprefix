/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 21:27:09 GMT 2024
 */
package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Panel;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.setDomainDescription("");
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.update(23, (Number) 0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getItems();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getItems();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getItems();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getItems();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Hour hour0 = new Hour();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
        timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 0, false);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.clone();
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.setMaximumItemCount((-1820));
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        Hour hour0 = new Hour();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.setMaximumItemAge((-9223372036854775808L));
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.getTimePeriods();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        Second second0 = new Second();
        Class<Panel> class0 = Panel.class;
        TimeSeries timeSeries0 = new TimeSeries(second0, "7[U)Cl)>dSzB)W~", "7[U)Cl)>dSzB)W~", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
        Class<String> class0 = String.class;
        TimeSeries timeSeries1 = new TimeSeries(hour0, "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
        timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
        Class<String> class0 = String.class;
        TimeSeries timeSeries1 = new TimeSeries(hour0, "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
        timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.getDataItem((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
        timeSeries0.add((TimeSeriesDataItem) null, false);
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        timeSeries0.add(regularTimePeriod0, (Number) 23);
        timeSeries0.setMaximumItemAge(0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("?jar!7*iDrM`k%G\"", "?jar!7*iDrM`k%G\"", "?jar!7*iDrM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test2435() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
        timeSeries1.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
        timeSeries0.addAndOrUpdate(timeSeries1);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
        timeSeries1.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
        timeSeries0.addAndOrUpdate(timeSeries1);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultStatisticalCategoryDataset", "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", class0);
        BigInteger bigInteger0 = BigInteger.valueOf((-3374L));
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, ">", ">", class0);
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        timeSeries0.setMaximumItemAge(0);
        timeSeries0.add(regularTimePeriod0, (Number) 0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.removeAgedItems((long) 0, true);
        timeSeries0.removeAgedItems(1L, true);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test2842() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.removeAgedItems((long) 0, true);
        timeSeries0.removeAgedItems(1L, true);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test2843() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.removeAgedItems((long) 0, true);
        timeSeries0.removeAgedItems(1L, true);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test2844() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.removeAgedItems((long) 0, true);
        timeSeries0.removeAgedItems(1L, true);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test2945() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.removeAgedItems((long) 23, true);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test3046() throws Throwable {
        Hour hour0 = new Hour();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.setMaximumItemAge(0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test3047() throws Throwable {
        Hour hour0 = new Hour();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.setMaximumItemAge(0);
        timeSeries0.removeAgedItems(2L, false);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test3148() throws Throwable {
        Hour hour0 = new Hour();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.setMaximumItemAge(23);
        timeSeries0.removeAgedItems((long) 0, true);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test3249() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.clear();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test3250() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.clear();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test3251() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.clear();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test3252() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.clear();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test3353() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test3354() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.clear();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test3455() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.delete((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test3456() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.delete((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test3457() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.delete((RegularTimePeriod) hour0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test3458() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.delete((RegularTimePeriod) hour0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test3559() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test3560() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        timeSeries0.delete((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test3661() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.delete(23, 0);
    }

    @Test(timeout = 4000)
    public void test3762() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.createCopy((-447), 23);
    }

    @Test(timeout = 4000)
    public void test3863() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test3864() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test3865() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
    }

    @Test(timeout = 4000)
    public void test3866() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test3867() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test3968() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("S?joar!7*inrM`k%G\"");
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test4069() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test4170() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        RegularTimePeriod regularTimePeriod0 = hour0.previous();
        timeSeries0.createCopy((RegularTimePeriod) hour0, regularTimePeriod0);
    }

    @Test(timeout = 4000)
    public void test4271() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("S?joar!7*inrM`k%G\"", "S?joar!7*inrM`k%G\"", "S?joar!7*inrM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        RegularTimePeriod regularTimePeriod0 = hour0.previous();
        timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test4372() throws Throwable {
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test4373() throws Throwable {
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test4374() throws Throwable {
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test4375() throws Throwable {
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test4376() throws Throwable {
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test4477() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        boolean boolean0 = timeSeries0.equals(class0);
    }

    @Test(timeout = 4000)
    public void test4478() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        boolean boolean0 = timeSeries0.equals(class0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test4479() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        boolean boolean0 = timeSeries0.equals(class0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test4480() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        boolean boolean0 = timeSeries0.equals(class0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test4481() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        boolean boolean0 = timeSeries0.equals(class0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test4582() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test4583() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test4584() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test4585() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test4586() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test4687() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate");
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", class0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test4688() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate");
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", class0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test4689() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate");
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", class0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test4690() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate");
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", class0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test4691() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate");
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", class0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test4692() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate");
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", class0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test4693() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate");
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", "org.jfree.data.xy.Int-rvalXYDelegate", class0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test4794() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.setRangeDescription("%e");
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test4795() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.setRangeDescription("%e");
        boolean boolean0 = timeSeries0.equals(timeSeries1);
    }

    @Test(timeout = 4000)
    public void test4896() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test4897() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.setMaximumItemAge(0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
    }

    @Test(timeout = 4000)
    public void test4998() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.setMaximumItemCount(23);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test4999() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.setMaximumItemCount(23);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
    }

    @Test(timeout = 4000)
    public void test50100() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.add((RegularTimePeriod) hour0, (Number) 23);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test50101() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.add((RegularTimePeriod) hour0, (Number) 23);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
    }

    @Test(timeout = 4000)
    public void test51102() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("Null 'group' argument.", "Null 'group' argument.", "Null 'group' argument.", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test51103() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("Null 'group' argument.", "Null 'group' argument.", "Null 'group' argument.", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test52104() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("Null 'group' argument.", "Null 'group' argument.", "Null 'group' argument.", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.update((RegularTimePeriod) hour0, (Number) 23);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test52105() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("Null 'group' argument.", "Null 'group' argument.", "Null 'group' argument.", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        timeSeries1.update((RegularTimePeriod) hour0, (Number) 23);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test53106() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null, class0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test53107() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null, class0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test54108() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("S?joar!7*inrM`k%G\"", "S?joar!7*inrM`k%G\"", "S?joar!7*inrM`%G\"", (Class) null);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test54109() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("S?joar!7*inrM`k%G\"", "S?joar!7*inrM`k%G\"", "S?joar!7*inrM`%G\"", (Class) null);
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test54110() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("S?joar!7*inrM`k%G\"", "S?joar!7*inrM`k%G\"", "S?joar!7*inrM`%G\"", (Class) null);
        timeSeries0.hashCode();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test54111() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("S?joar!7*inrM`k%G\"", "S?joar!7*inrM`k%G\"", "S?joar!7*inrM`%G\"", (Class) null);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test55112() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.hashCode();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test55113() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test55114() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test55115() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries("{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", "{?joar!7Ki-rM`k%G\"", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test56116() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, ">", ">", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        timeSeries0.add(regularTimePeriod0, (Number) 0);
        timeSeries0.hashCode();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test57117() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, ">", ">", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
        timeSeries0.add(regularTimePeriod1, (Number) 0);
        timeSeries0.add(regularTimePeriod0, (Number) 23);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test57118() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, ">", ">", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
        timeSeries0.add(regularTimePeriod1, (Number) 0);
        timeSeries0.add(regularTimePeriod0, (Number) 23);
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test57119() throws Throwable {
        Hour hour0 = new Hour();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, ">", ">", class0);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
        timeSeries0.add(regularTimePeriod1, (Number) 0);
        timeSeries0.add(regularTimePeriod0, (Number) 23);
        timeSeries0.hashCode();
        timeSeries0.getDomainDescription();
    }
}
