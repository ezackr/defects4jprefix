/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:01:55 GMT 2024
 */
package org.mockito.internal.invocation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hamcrest.Matcher;
import org.hamcrest.number.BigDecimalCloseTo;
import org.junit.runner.RunWith;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.Location;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class InvocationMatcher_ESTest extends InvocationMatcher_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Object[] objectArray0 = new Object[18];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn((Object[]) null).when(invocation0).getArguments();
        InvocationMatcher invocationMatcher0 = null;
        invocationMatcher0 = new InvocationMatcher(invocation0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Object[] objectArray0 = new Object[1];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        List<Matcher> list0 = (List<Matcher>) invocationMatcher0.getMatchers();
        InvocationMatcher invocationMatcher1 = new InvocationMatcher(invocation0, list0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Object[] objectArray0 = new Object[1];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        List<Matcher> list0 = (List<Matcher>) invocationMatcher0.getMatchers();
        InvocationMatcher invocationMatcher1 = new InvocationMatcher(invocation0, list0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Object[] objectArray0 = new Object[1];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn((Object[]) null).when(invocation0).getArguments();
        InvocationMatcher invocationMatcher0 = null;
        invocationMatcher0 = new InvocationMatcher(invocation0);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Object[] objectArray0 = new Object[18];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        doReturn((Object) null).when(invocation0).getMock();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        invocationMatcher0.toString();
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Object[] objectArray0 = new Object[1];
        BigDecimal bigDecimal0 = new BigDecimal((-1.0));
        BigDecimalCloseTo bigDecimalCloseTo0 = new BigDecimalCloseTo(bigDecimal0, bigDecimal0);
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        doReturn(bigDecimalCloseTo0, (Object) null).when(invocation0).getMock();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        boolean boolean0 = invocationMatcher0.matches(invocation0);
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        Object[] objectArray0 = new Object[8];
        BigDecimal bigDecimal0 = new BigDecimal((-1.0));
        BigDecimalCloseTo bigDecimalCloseTo0 = new BigDecimalCloseTo(bigDecimal0, bigDecimal0);
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        doReturn((Method) null, (Method) null).when(invocation0).getMethod();
        doReturn(bigDecimalCloseTo0, bigDecimalCloseTo0).when(invocation0).getMock();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        invocationMatcher0.matches(invocation0);
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        LinkedList<Invocation> linkedList0 = new LinkedList<Invocation>();
        List<InvocationMatcher> list0 = InvocationMatcher.createFrom(linkedList0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        Vector<Invocation> vector0 = new Vector<Invocation>();
        vector0.addElement((Invocation) null);
        InvocationMatcher.createFrom(vector0);
    }
}
