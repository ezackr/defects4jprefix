/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 22:23:49 GMT 2024
 */
package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class WriteableCommandLineImpl_ESTest extends WriteableCommandLineImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        String string0 = writeableCommandLineImpl0.getProperty("-D");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Set set0 = writeableCommandLineImpl0.getOptionTriggers();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("-D", "-D");
        writeableCommandLineImpl0.addProperty("-D", "Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Set set0 = writeableCommandLineImpl0.getProperties();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        int int0 = writeableCommandLineImpl0.getOptionCount((Option) propertyOption0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getNormalised();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("vaes properties `nd values t the :pp?ication", "vaes properties `nd values t the :pp?ication", (-433), (-433), '`', '`', numberValidator0, "vaes properties `nd values t the :pp?ication", linkedList0, '`');
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.hasOption("vaes properties `nd values t the :pp?ication");
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("vaes properties `nd values t the :pp?ication", "vaes properties `nd values t the :pp?ication", (-433), (-433), '`', '`', numberValidator0, "vaes properties `nd values t the :pp?ication", linkedList0, '`');
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        writeableCommandLineImpl0.addValue(argumentImpl0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.hasOption("vaes properties `nd values t the :pp?ication");
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        writeableCommandLineImpl0.addValue(propertyOption0, (Object) null);
        propertyOption0.getId();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Pases properties `nd values t the :ppication", "Pases properties `nd values t the :ppication", (-1296), (-1296), 'R', 'R', numberValidator0, "Pases properties `nd values t the :ppication", linkedList0, 'R');
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        writeableCommandLineImpl0.addSwitch(argumentImpl0, false);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        propertyOption0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
        List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
        List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
        list1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) propertyOption0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.addLast(propertyOption0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
        linkedList0.add((Object) writeableCommandLineImpl0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch("Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D", "-D");
        String string0 = writeableCommandLineImpl0.getProperty("-D");
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D", "Passes properties and values to the application");
        Set set0 = writeableCommandLineImpl0.getProperties();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-D");
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) "Passes properties and values to the application");
        linkedList0.add((Object) "org.apache.commons.cli2.option.ArgumentImpl");
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        String string0 = writeableCommandLineImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
        propertyOption0.isRequired();
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = Boolean.TRUE;
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
        propertyOption0.getId();
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
        propertyOption0.getDescription();
    }
}
