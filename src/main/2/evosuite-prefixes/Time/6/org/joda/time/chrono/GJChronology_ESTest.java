/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:56:57 GMT 2024
 */
package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDate localDate0 = new LocalDate((long) 1, (Chronology) gJChronology0);
        LocalDate localDate1 = localDate0.plusYears((-1527));
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        localDate1.withField(dateTimeFieldType0, 153692453);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null);
        boolean boolean0 = gJChronology0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null);
        boolean boolean0 = gJChronology0.equals((Object) null);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
        LocalDate localDate1 = localDate0.withWeekyear(1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
        LocalDate localDate1 = localDate0.withWeekyear(1);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        gJChronology0.hashCode();
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        LocalDate localDate0 = new LocalDate(1534, 1534, 1534, lenientChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.minusDays(1);
        monthDay1.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.minusDays(1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.minusDays(1);
        monthDay1.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        Months months0 = Months.ZERO;
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 62035200000L, 4);
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 20L, 62035200000L);
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        Months months0 = Months.ZERO;
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 62035200000L, 4);
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 20L, 62035200000L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.TEN;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (long) 587, 587);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.TEN;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (long) 587, 587);
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        GJChronology.getInstance((DateTimeZone) null, (-12219292800000L), (-2186));
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone((DateTimeZone) null);
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
        yearMonth0.toLocalDate(1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
        yearMonth0.toLocalDate(1);
        yearMonth0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        gJChronology0.getDateTimeMillis((-3323), (-3323), (-3323), (-3323));
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        Instant instant0 = new Instant();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
        LocalDate localDate0 = null;
        localDate0 = new LocalDate(instant0, gJChronology0);
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(292271022, 1, 1, 0, 0, 1, 0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1524() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(292271022, 1, 1, 0, 0, 1, 0);
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        gJChronology0.getDateTimeMillis(206, 206, 206, 206, 206, 206, 206);
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        gJChronology0.getDateTimeMillis(292278993, 2, 29, 2, 0, 4, 4);
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        gJChronology0.getDateTimeMillis(2, 2, 38, 38, 2, 2, 2);
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        gJChronology0.getDateTimeMillis(29, 2, 29, 2, 29, 29, 29);
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        boolean boolean0 = gJChronology0.equals(gJChronology0);
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        boolean boolean0 = gJChronology0.equals(gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
        boolean boolean0 = gJChronology0.equals(gJChronology1);
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
        boolean boolean0 = gJChronology0.equals(gJChronology1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2234() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
        boolean boolean0 = gJChronology0.equals(gJChronology1);
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTime dateTime0 = new DateTime();
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
        boolean boolean0 = gJChronology0.equals(gJChronology1);
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTime dateTime0 = new DateTime();
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
        boolean boolean0 = gJChronology0.equals(gJChronology1);
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2337() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTime dateTime0 = new DateTime();
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
        boolean boolean0 = gJChronology0.equals(gJChronology1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2438() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
        boolean boolean0 = gJChronology1.equals(gJChronology0);
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
        boolean boolean0 = gJChronology1.equals(gJChronology0);
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2540() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 25056000000L, 5);
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test2742() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test2843() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        Months months0 = Months.ZERO;
        MonthDay monthDay1 = monthDay0.plus(months0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2844() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        Months months0 = Months.ZERO;
        MonthDay monthDay1 = monthDay0.plus(months0);
        monthDay1.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test2845() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        Months months0 = Months.ZERO;
        MonthDay monthDay1 = monthDay0.plus(months0);
        monthDay1.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test2946() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime((-12219292799992L));
        gJChronology0.set(localDateTime0, (-72576000000L));
    }

    @Test(timeout = 4000)
    public void test3047() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((-12219292800000L));
        gJChronology0.set(localDateTime0, (-12219292800000L));
    }

    @Test(timeout = 4000)
    public void test3148() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        int[] intArray0 = new int[3];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        buddhistChronology0.validate(localDate0, intArray0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3249() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((-823L), (Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.withMonthOfYear(6);
        monthDay1.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test3250() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((-823L), (Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.withMonthOfYear(6);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3351() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.plusMonths(1);
        monthDay1.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test3352() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.plusMonths(1);
        monthDay1.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test3353() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.plusMonths(1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3454() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDate localDate0 = new LocalDate((long) 1, (Chronology) gJChronology0);
        LocalDate localDate1 = localDate0.plusYears((-1527));
        LocalDate localDate2 = localDate1.minusYears(1);
    }

    @Test(timeout = 4000)
    public void test3455() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDate localDate0 = new LocalDate((long) 1, (Chronology) gJChronology0);
        LocalDate localDate1 = localDate0.plusYears((-1527));
        LocalDate localDate2 = localDate1.minusYears(1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3556() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.NINE;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-76395557677118680L), 100L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3557() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.NINE;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-76395557677118680L), 100L);
    }

    @Test(timeout = 4000)
    public void test3658() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        LocalDate localDate0 = new LocalDate((-15), (-15), (-15), lenientChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3759() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
        Duration duration0 = Duration.standardSeconds((-76398508800000L));
        MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3860() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.NINE;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 30962843999990L, 15L);
    }

    @Test(timeout = 4000)
    public void test3861() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.NINE;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 30962843999990L, 15L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }
}
