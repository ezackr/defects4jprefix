/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:03:56 GMT 2024
 */
package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FieldUtils_ESTest extends FieldUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        int int0 = FieldUtils.safeMultiplyToInt(1081L, 1081L);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        int int0 = FieldUtils.getWrappedValue((-3933), (-3933), (-3933), (-1));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        int int0 = FieldUtils.safeNegate(2141451390);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        FieldUtils.safeNegate(Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        int int0 = FieldUtils.safeAdd((-816), (-816));
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        int int0 = FieldUtils.safeAdd(2147483638, (-2147483639));
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        FieldUtils.safeAdd(2147483638, 2147483638);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        long long0 = FieldUtils.safeAdd(10000L, 10000L);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        FieldUtils.safeAdd((-9223372036854775806L), (-9223372036854775806L));
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        long long0 = FieldUtils.safeAdd(15L, (-9223372036854775778L));
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        long long0 = FieldUtils.safeSubtract(3505516056L, 3505516056L);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        long long0 = FieldUtils.safeSubtract((-1L), (-1L));
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        FieldUtils.safeSubtract((-9223372036854775748L), 1645L);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        FieldUtils.safeMultiply(25734375, (-2145649750));
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        FieldUtils.safeMultiply((-2145649750), (-2145649750));
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        int int0 = FieldUtils.safeMultiply(2342, 2342);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        long long0 = FieldUtils.safeMultiply(954L, (-1));
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        long long0 = FieldUtils.safeMultiply((-2294L), 1);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        long long0 = FieldUtils.safeMultiply(953L, 0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        FieldUtils.safeMultiply((-9223372036854775783L), (-1193));
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        long long0 = FieldUtils.safeMultiply((-4172L), 6072);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        long long0 = FieldUtils.safeMultiply(1L, 1L);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        long long0 = FieldUtils.safeMultiply(1L, (-1L));
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        long long0 = FieldUtils.safeMultiply(0L, 0L);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        long long0 = FieldUtils.safeMultiply((-18L), 0L);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        FieldUtils.safeMultiply((-9223372036854775808L), (-9223372036854775808L));
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        FieldUtils.safeMultiply((-9223372036854775808L), (-1L));
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        FieldUtils.safeMultiply((-1L), (-9223372036854775790L));
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        FieldUtils.safeToInt((-9223372036854775776L));
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        FieldUtils.safeMultiplyToInt(86399999L, 86399999L);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        FieldUtils.verifyValueBounds((DateTimeField) null, (-3358), (-2531), (-2531));
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        FieldUtils.verifyValueBounds((DateTimeField) null, (-1), (-2524), (-2524));
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        FieldUtils.verifyValueBounds((DateTimeField) null, 122, 122, 122);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        FieldUtils.verifyValueBounds(dateTimeFieldType0, (-1715), 2113929206, 2113929206);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        FieldUtils.verifyValueBounds(dateTimeFieldType0, 1789, 1789, 1789);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        FieldUtils.verifyValueBounds(dateTimeFieldType0, (-825), (-825), (-1339));
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        FieldUtils.verifyValueBounds("Multiplication overflows a long: ", 2615631, 2146074537, 2146074537);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        FieldUtils.verifyValueBounds("Multipl)cation overflows a long: ", 2615625, 2615625, 2615625);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        FieldUtils.verifyValueBounds("Multiplication overflows a long: ", 2615625, (-1391), (-1391));
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        FieldUtils.getWrappedValue(0, 0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        int int0 = FieldUtils.getWrappedValue(25734375, (-22), 25734375);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        int int0 = FieldUtils.getWrappedValue(25734375, Integer.MIN_VALUE, 25734375);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Object object0 = new Object();
        Object object1 = new Object();
        boolean boolean0 = FieldUtils.equals(object1, object0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Object object0 = new Object();
        boolean boolean0 = FieldUtils.equals(object0, object0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        boolean boolean0 = FieldUtils.equals((Object) null, (Object) "w/HV&+u`s p8");
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        boolean boolean0 = FieldUtils.equals((Object) "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone", (Object) null);
    }
}
