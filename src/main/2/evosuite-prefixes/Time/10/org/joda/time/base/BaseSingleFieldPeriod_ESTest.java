/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 04:08:01 GMT 2024
 */
package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Hours hours0 = Hours.FIVE;
        Hours hours1 = Hours.SEVEN;
        boolean boolean0 = hours0.equals(hours1);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Hours hours0 = Hours.FIVE;
        Hours hours1 = Hours.SEVEN;
        boolean boolean0 = hours0.equals(hours1);
        hours1.equals((Object) hours0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Hours hours0 = Hours.FIVE;
        Hours hours1 = Hours.SEVEN;
        boolean boolean0 = hours0.equals(hours1);
        hours1.getHours();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Days days0 = Days.MIN_VALUE;
        days0.hashCode();
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
        days0.size();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Weeks weeks0 = Weeks.ONE;
        weeks0.toPeriod();
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Hours hours0 = Hours.MIN_VALUE;
        hours0.toMutablePeriod();
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Days days0 = Days.MIN_VALUE;
        Weeks weeks0 = days0.toStandardWeeks();
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Seconds.secondsBetween((ReadableInstant) null, (ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        MutableInterval mutableInterval0 = new MutableInterval();
        Hours hours0 = Hours.hoursIn(mutableInterval0);
        MonthDay monthDay0 = new MonthDay();
        BaseSingleFieldPeriod.between(monthDay0, (ReadablePartial) null, hours0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Instant instant0 = new Instant();
        Months.monthsBetween((ReadableInstant) instant0, (ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Hours.hoursBetween((ReadablePartial) null, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1);
        Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MonthDay monthDay0 = new MonthDay((DateTimeZone) fixedDateTimeZone0);
        YearMonth yearMonth0 = new YearMonth((long) 1);
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        Partial partial1 = partial0.with(dateTimeFieldType0, 1);
        Seconds.secondsBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Months months0 = Months.FOUR;
        Days.standardDaysIn(months0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) null);
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Hours hours0 = Hours.SEVEN;
        Weeks weeks0 = Weeks.standardWeeksIn(hours0);
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Hours hours0 = Hours.SEVEN;
        Weeks weeks0 = Weeks.standardWeeksIn(hours0);
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Hours hours0 = Hours.ZERO;
        Weeks weeks0 = Weeks.standardWeeksIn(hours0);
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Hours hours0 = Hours.SEVEN;
        hours0.getFieldType(1);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Years years0 = Years.ONE;
        years0.getValue((-214704000));
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Years years0 = Years.THREE;
        DurationFieldType durationFieldType0 = DurationFieldType.eras();
        int int0 = years0.get(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        Years years0 = Years.THREE;
        DurationFieldType durationFieldType0 = years0.getFieldType();
        int int0 = years0.get(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Weeks weeks0 = Weeks.MAX_VALUE;
        DurationFieldType durationFieldType0 = DurationFieldType.eras();
        boolean boolean0 = weeks0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Weeks weeks0 = Weeks.MAX_VALUE;
        DurationFieldType durationFieldType0 = weeks0.getFieldType();
        boolean boolean0 = weeks0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        Hours hours0 = Hours.SIX;
        boolean boolean0 = hours0.equals(hours0);
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        Hours hours0 = Hours.SEVEN;
        Object object0 = new Object();
        boolean boolean0 = hours0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Weeks weeks0 = Weeks.ZERO;
        Hours hours0 = Hours.SEVEN;
        boolean boolean0 = hours0.equals(weeks0);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        Years years0 = Years.ZERO;
        Period period0 = new Period(years0);
        boolean boolean0 = years0.equals(period0);
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        Years years0 = Years.ZERO;
        Period period0 = new Period(years0);
        boolean boolean0 = years0.equals(period0);
        years0.getYears();
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        Hours hours0 = Hours.MAX_VALUE;
        int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        Hours hours0 = Hours.MAX_VALUE;
        int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        Hours hours0 = Hours.THREE;
        Years years0 = Years.ZERO;
        years0.compareTo((BaseSingleFieldPeriod) hours0);
    }

    @Test(timeout = 4000)
    public void test2934() throws Throwable {
        Hours hours0 = Hours.ONE;
        Hours hours1 = Hours.SIX;
        int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
        hours1.getHours();
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        Hours hours0 = Hours.ONE;
        Hours hours1 = Hours.SIX;
        int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        Hours hours0 = Hours.MAX_VALUE;
        Hours hours1 = Hours.SIX;
        int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        Hours hours0 = Hours.MAX_VALUE;
        Hours hours1 = Hours.SIX;
        int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
        hours1.getHours();
    }
}
