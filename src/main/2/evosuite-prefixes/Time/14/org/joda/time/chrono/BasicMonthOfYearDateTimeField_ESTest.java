/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 04:56:52 GMT 2024
 */
package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicMonthOfYearDateTimeField_ESTest extends BasicMonthOfYearDateTimeField_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
        long long0 = gJMonthOfYearDateTimeField0.remainder(1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
        long long0 = basicMonthOfYearDateTimeField0.addWrapField(2508028931L, 1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
        boolean boolean0 = basicMonthOfYearDateTimeField0.isLenient();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        YearMonth yearMonth0 = new YearMonth((Object) null);
        yearMonth0.withMonthOfYear(1);
        yearMonth0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
        long long0 = gJMonthOfYearDateTimeField0.add(0L, 0L);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
        LocalTime localTime0 = new LocalTime((long) 1);
        int[] intArray0 = gregorianChronology0.get((ReadablePartial) localTime0, (long) 7);
        int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) localTime0, (-361), intArray0, (-361));
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Months months0 = Months.ELEVEN;
        YearMonth yearMonth0 = new YearMonth((Object) null);
        YearMonth yearMonth1 = yearMonth0.withPeriodAdded(months0, (-1739));
        yearMonth1.getYear();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Months months0 = Months.ELEVEN;
        YearMonth yearMonth0 = new YearMonth((Object) null);
        YearMonth yearMonth1 = yearMonth0.withPeriodAdded(months0, (-1739));
        yearMonth1.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
        long long0 = gJMonthOfYearDateTimeField0.add((long) 1, 256);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
        long long0 = gJMonthOfYearDateTimeField0.add(2629745932L, 2629745965L);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
        gJMonthOfYearDateTimeField0.add((-12219292800000L), (-12219292800000L));
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
        gJMonthOfYearDateTimeField0.add((-12219292800009L), (-12219292800009L));
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
        gJMonthOfYearDateTimeField0.add(62035199977L, 62035199977L);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
        long long0 = gJMonthOfYearDateTimeField0.add(2629746000L, 2629746000L);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        YearMonth yearMonth0 = new YearMonth((Object) null);
        Period period0 = Period.ZERO;
        YearMonth yearMonth1 = yearMonth0.plus(period0);
        yearMonth1.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
        long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(5013628931L, (-1513L));
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
        long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(1, 31536000000L);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
        long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong((-1L), (-1L));
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
        int int0 = basicMonthOfYearDateTimeField0.getLeapAmount((-2334L));
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
        int int0 = gJMonthOfYearDateTimeField0.getLeapAmount((-12219292800000L));
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
        int int0 = gJMonthOfYearDateTimeField0.getLeapAmount(31622400000L);
    }
}
