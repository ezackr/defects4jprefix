/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:39:06 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Object object0 = dateTimeZone0.UTC.writeReplace();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateTimeZone.forOffsetHours((-1776));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        timeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone1.getID();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-442));
        String string0 = dateTimeZone0.getName((long) (-442));
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        String string0 = dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Set<String> set0 = DateTimeZone.getAvailableIDs();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateMidnight dateMidnight0 = new DateMidnight((long) 1, dateTimeZone0);
        dateTimeZone0.UTC.getOffset((ReadableInstant) dateMidnight0);
        dateMidnight0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Provider provider0 = DateTimeZone.getProvider();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 28808192L);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone.setDefault(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        DateTimeZone.setDefault((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        DateTimeZone.forID("-W");
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.001");
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.001");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(0, 965);
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes((-18), (-18));
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.UTC;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("AST");
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5062500, "Asia/Shanghai");
        DateTimeZone.forTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone1.toString();
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        DateTimeZone.setProvider((Provider) null);
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        DateTimeZone.setNameProvider((NameProvider) null);
    }

    @Test(timeout = 4000)
    public void test3137() throws Throwable {
        DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
        DateTimeZone.setNameProvider(defaultNameProvider0);
    }

    @Test(timeout = 4000)
    public void test3238() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test3339() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.CHINESE;
        String string0 = dateTimeZone0.getShortName(40612096L, locale0);
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3575);
        String string0 = dateTimeZone0.getShortName((long) 3575);
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = dateTimeZone0.getName(9223372036854775807L, locale0);
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isStandardOffset(1000000000000000000L);
    }

    @Test(timeout = 4000)
    public void test3845() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isStandardOffset((-64800000L));
    }

    @Test(timeout = 4000)
    public void test3946() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal((-21477600001L));
    }

    @Test(timeout = 4000)
    public void test4047() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775805L);
    }

    @Test(timeout = 4000)
    public void test4148() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("AST");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775806L);
    }

    @Test(timeout = 4000)
    public void test4249() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertUTCToLocal((-9223372036854775806L));
    }

    @Test(timeout = 4000)
    public void test4350() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
        LocalDateTime localDateTime1 = localDateTime0.withYear(1);
        boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
    }

    @Test(timeout = 4000)
    public void test4451() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(9223372036854775805L, true);
    }

    @Test(timeout = 4000)
    public void test4552() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("AST");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        long long0 = dateTimeZone0.convertLocalToUTC((-9223372036829575811L), false);
    }

    @Test(timeout = 4000)
    public void test4653() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("AST");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.convertLocalToUTC((-9223372036829575844L), true);
    }

    @Test(timeout = 4000)
    public void test4754() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("AST");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.convertLocalToUTC(9223372036854775806L, false);
    }

    @Test(timeout = 4000)
    public void test4855() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertLocalToUTC((-2522L), false);
    }

    @Test(timeout = 4000)
    public void test4956() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
    }
}
