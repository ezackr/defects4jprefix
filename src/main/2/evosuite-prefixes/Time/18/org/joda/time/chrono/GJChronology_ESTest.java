/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:12:19 GMT 2024
 */
package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
        LocalDate localDate0 = new LocalDate();
        gJChronology0.set(localDate0, 31083663600000L);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 5);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) gJChronology0);
        yearMonth0.toInterval();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByWeekyear(742095446822001L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByWeekyear(742095446822001L);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Period period0 = new Period((-12219292800000L), 63L, gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        gJChronology0.hashCode();
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
        Object object0 = gJChronology0.getParam();
        gJChronology0.equals(object0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        LocalDate localDate0 = LocalDate.now((Chronology) lenientChronology0);
        LocalDate localDate1 = localDate0.withWeekOfWeekyear(93);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        LocalDate localDate0 = LocalDate.now((Chronology) lenientChronology0);
        LocalDate localDate1 = localDate0.withWeekOfWeekyear(93);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.plusDays(1);
        monthDay1.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.plusDays(1);
        monthDay1.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.plusDays(1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.THREE;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (-61820092802612L), 557);
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.THREE;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (-61820092802612L), 557);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(70);
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 70);
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone((DateTimeZone) null);
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        gJChronology0.getDateTimeMillis((-2147483640), (-2147483640), (-2147483640), (-2147483640));
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("Offset is too large");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 2147483647L, 4);
        YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
        Interval interval0 = yearMonth0.toInterval();
        interval0.getEndMillis();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("Offset is too large");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 2147483647L, 4);
        YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
        Interval interval0 = yearMonth0.toInterval();
        interval0.getStartMillis();
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(3339, 11, 11, 11, 11, 11, 11);
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(3339, 11, 11, 11, 11, 11, 11);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(11, 11, 11, 11, 11, 11, 11);
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
        String string0 = gJChronology1.toString();
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
        String string0 = gJChronology1.toString();
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        Instant instant0 = new Instant((-12244089600000L));
        DateTimeZone dateTimeZone0 = instant0.getZone();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        Period period0 = Period.ZERO;
        MonthDay monthDay1 = monthDay0.withPeriodAdded(period0, 1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        Period period0 = Period.ZERO;
        MonthDay monthDay1 = monthDay0.withPeriodAdded(period0, 1);
        monthDay1.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
        LocalDateTime localDateTime0 = new LocalDateTime(mutableDateTime0);
        gJChronology0.set(localDateTime0, 2);
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(76);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
        MonthDay monthDay0 = new MonthDay(1, 1, gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
        MonthDay monthDay0 = new MonthDay(1, 2, gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2434() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        YearMonth yearMonth0 = new YearMonth(9223372036854775807L, (Chronology) gJChronology0);
        yearMonth0.withMonthOfYear((-2580));
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
        DateMidnight dateMidnight0 = new DateMidnight((Chronology) gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2536() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
        DateMidnight dateMidnight0 = new DateMidnight((Chronology) gJChronology0);
        dateMidnight0.getMillis();
    }

    @Test(timeout = 4000)
    public void test2637() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.minusMonths(86399559);
        monthDay1.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.minusMonths(86399559);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
        MonthDay monthDay1 = monthDay0.minusMonths(86399559);
        monthDay1.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Period period0 = new Period((-1555200000L), (-12219292800000L), gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
        Period period0 = new Period(1, 3, gJChronology0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2942() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.TWELVE;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (long) (-2624), (-2624));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2943() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Months months0 = Months.TWELVE;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (long) (-2624), (-2624));
    }

    @Test(timeout = 4000)
    public void test3044() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Period period0 = new Period((-26), (-26), (-26), (-26), (-26), (-26), (-26), (-26));
        long long0 = gJChronology0.add((ReadablePeriod) period0, (long) (-26), (-26));
    }

    @Test(timeout = 4000)
    public void test3045() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Period period0 = new Period((-26), (-26), (-26), (-26), (-26), (-26), (-26), (-26));
        long long0 = gJChronology0.add((ReadablePeriod) period0, (long) (-26), (-26));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3146() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Period period0 = Period.months(557);
        long long0 = gJChronology0.add((ReadablePeriod) period0, (-62120131199999L), 557);
    }

    @Test(timeout = 4000)
    public void test3147() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Period period0 = Period.months(557);
        long long0 = gJChronology0.add((ReadablePeriod) period0, (-62120131199999L), 557);
        gJChronology0.getMinimumDaysInFirstWeek();
    }
}
