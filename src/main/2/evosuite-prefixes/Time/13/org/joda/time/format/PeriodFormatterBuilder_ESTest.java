/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 04:40:04 GMT 2024
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.FilterOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
        Hours hours0 = Hours.ONE;
        periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendMillis();
        periodFormatterBuilder0.toPrinter();
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("/xn}/}j50y19?", "/xn}/}j50y19?", stringArray0);
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "HE/#i)Ba";
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("p{.");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("HE/#i)Ba", "HE/#i)Ba", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix("],\"h[H|3Hk<G");
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Erh/mPl[!");
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.maximumParsedDigits(10);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("l)1<`{*%dW#qnA?&");
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.toString();
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("{v+_1p9cV", "PT0S", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
        Locale locale0 = Locale.ITALY;
        periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.printZeroRarelyLast();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(" duration,", "K!Y!>|hRB-A&");
        periodFormatterBuilder2.appendSuffix((String) null);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendMillis3Digit();
        periodFormatterBuilder0.appendSuffix("Po fNrmatter suppli1N");
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendYears();
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("K1!Y!>|hR}B-A&");
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendLiteral("P{YS'^EIcZ/");
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("&nG4");
        periodFormatterBuilder0.appendSuffix("&nG4");
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendMonths();
        periodFormatterBuilder0.printZeroAlways();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("BE", "BE");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        periodFormatterBuilder_CompositeAffix0.parse("BE", (-729355137));
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix((String) null);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.printZeroIfSupported();
        periodFormatterBuilder0.printZeroNever();
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendLiteral((String) null);
        PeriodFormatterBuilder periodFormatterBuilder1 = null;
        periodFormatterBuilder1 = new PeriodFormatterBuilder();
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
        periodFormatterBuilder0.append(periodFormatter0);
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = PeriodFormatterBuilder.Literal.EMPTY;
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        MutablePeriod.parse("p,1w3m");
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparator("btYxr");
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        String[] stringArray0 = new String[0];
        periodFormatterBuilder0.appendSeparator("EbuMLMB", "EbuMLMB", stringArray0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendHours();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("K1!Y!>|hR}B-A&");
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("UT");
        periodFormatterBuilder1.appendSeparator("UT", "UT");
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.printZeroRarelyFirst();
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.minimumPrintedDigits(271);
        periodFormatterBuilder0.appendMonths();
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix("~-pvWWouBUq<w}nQrO", "~-pvWWouBUq<w}nQrO");
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeconds();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("M'(V6z(*V4SwQp9KyS", "a>m*iaad<l[k6mc*v");
        periodFormatterBuilder_PluralAffix0.parse("^", Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "Cannot have two adjacent separators");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Cannot have two adjacent separators");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        periodFormatterBuilder_CompositeAffix0.scan("Cannot have two adjacent separators", 1759);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("BE", "BE");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("]G(O}CVV");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        StringBuffer stringBuffer0 = new StringBuffer("]G(O}CVV");
        periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 789);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparator("org.joda.time.format.PeriodFormatterBuilder$iteral", "org.joda.time.format.PeriodFormatterBuilder$iteral");
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
        periodFormatterBuilder1.appendWeeks();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder1.toPrinter();
        JulianChronology.getInstanceUTC();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        MutablePeriod.parse("1I", periodFormatter0);
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter");
        periodFormatterBuilder0.appendLiteral("P{Y^EIck/");
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "2zr");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(" (");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        periodFormatterBuilder_CompositeAffix0.parse(")CCY],<-DU#:@<Az", 34);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("*U:cd7t{f`~HSIl", "*U:cd7t{f`~HSIl");
        periodFormatterBuilder_PluralAffix0.parse("*U:cd7t{f`~HSIl", 269);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        periodFormatter0.parseMutablePeriod("/xn}/}j50y19?");
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("'+$DjRJ<ie-?n}", "'+$DjRJ<ie-?n}");
        StringBuffer stringBuffer0 = new StringBuffer();
        periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-1970));
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("&nG4");
        periodFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Cannot have two adjacent separators");
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
        PeriodFormatterBuilder periodFormatterBuilder2 = new PeriodFormatterBuilder();
        periodFormatterBuilder1.appendSeparatorIfFieldsBefore("Cannot have two adjacent separators");
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.rejectSignedValues(true);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendWeeks();
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder0.toPrinter();
        periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        MutablePeriod.parse("&Kh[Mq.eeYf1Oet6");
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix("subtrahend", "subtrahend");
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("p");
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
        periodFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore((String) null);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendDays();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix("?n");
        periodFormatterBuilder1.appendSuffix("?n");
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Nodformatter s ppl\"ed");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder1.toParser();
        Seconds seconds0 = Seconds.ONE;
        Locale locale0 = Locale.UK;
        periodFormatterBuilder_Separator0.calculatePrintedLength(seconds0, locale0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.clear();
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendMinutes();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder0.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        PeriodFormatter periodFormatter1 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        periodFormatter1.parseMutablePeriod("+'J");
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix("fields id6jlid for a");
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
        periodFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore("UeXz@YG&&SpF{MGD");
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("G{2u}21pCFA");
        periodFormatterBuilder_SimpleAffix0.scan("G{2u}21pCFA", 100);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$Composite");
        periodFormatterBuilder_SimpleAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Composite", 22);
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(22, 22, 22, true, (-23), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        Minutes minutes0 = Minutes.TWO;
        periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("D^9!k9wVnX`U@B;", "%|n]fLR[&2>P");
        periodFormatterBuilder_PluralAffix0.scan("D^9!k9wVnX`U@B;", (-4582));
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodPrinter periodPrinter0 = null;
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        Months months0 = Months.MAX_VALUE;
        Locale locale0 = Locale.TAIWAN;
        periodFormatterBuilder_Literal0.printTo((Writer) null, (ReadablePeriod) months0, locale0);
        periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Literal0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "Cannot have two adjacent separators");
        periodFormatterBuilder_PluralAffix0.calculatePrintedLength((-44236554));
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "Cannot have two adjacent separators");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("FB]r[E&m");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        periodFormatterBuilder_CompositeAffix0.scan("Cannot have two adjacent separators", 1759);
        periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-1760));
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix("l,1!QY{T#[]ZM", "l,1!QY{T#[]ZM");
        periodFormatterBuilder0.appendPrefix("l,1!QY{T#[]ZM", "l,1!QY{T#[]ZM");
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix("org.joda.time.YearMonth$Property", (String) null);
        String string0 = "No field to apply suffix to";
        MutablePeriod.parse(string0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("*U:cd7t{f`~HSIl", "*U:cd7t{f`~HSIl");
        MockFileWriter mockFileWriter0 = new MockFileWriter("*U:cd7t{f`~HSIl");
        periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, (-19));
        periodFormatterBuilder_PluralAffix0.parse("*U:cd7t{f`~HSIl", 269);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        String string0 = "Property[";
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Property[");
        periodFormatterBuilder_SimpleAffix0.printTo((Writer) null, (-2147483647));
        int int0 = 7;
        periodFormatterBuilder_SimpleAffix0.scan(string0, int0);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        String string0 = "*U:cd7t{f`~HSIl";
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("*U:cd7t{f`~HSIl", "*U:cd7t{f`~HSIl");
        MockFileWriter mockFileWriter0 = new MockFileWriter("*U:cd7t{f`~HSIl");
        periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, (-19));
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
        periodFormatterBuilder_CompositeAffix0.printTo((Writer) mockFileWriter0, (-19));
        int int0 = (-2556);
        periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendDays();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("A9TYRi");
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("A9TYRi", "A9TYRi");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-292275054), (-292275054), (-292275054), false, (-292275054), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
        Years years0 = Years.ONE;
        Locale locale0 = Locale.CANADA_FRENCH;
        periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(years0, (-292275054), locale0);
        Locale locale1 = new Locale("A9TYRi");
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder0.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        periodFormatter0.parseMutablePeriod("/xn}/}j50y19l");
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("pt27777777h46m4ss");
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("p-1w3w");
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Africa/Addis_Ababa");
        periodFormatterBuilder_SimpleAffix0.parse("'+$DjRJ<ie-?n}", 269);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.toPrinter();
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.rejectSignedValues(false);
        periodFormatterBuilder0.printZeroRarelyLast();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "%|n]fLR[&2>P");
        periodFormatterBuilder_PluralAffix0.scan("7W}S(^E3TTCOz", (-4582));
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodType periodType0 = PeriodType.yearMonthDayTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
        mutablePeriod0.toString();
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("*U:cd7t{f`~HSIl", "*U:cd7t{f`~HSIl");
        MockFileWriter mockFileWriter0 = new MockFileWriter("*U:cd7t{f`~HSIl");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
        int int0 = (-2556);
        periodFormatterBuilder_CompositeAffix0.scan("*U:cd7t{f`~HSIl", (-2556));
        System.setCurrentTimeMillis(int0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "AST";
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("AST");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("AST", "AST", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
        StringBuffer stringBuffer0 = new StringBuffer();
        Weeks weeks0 = Weeks.THREE;
        Locale locale0 = Locale.ITALIAN;
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.append((PeriodFormatter) null);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("ii][ N", "ii][ N");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.chrono.LimitChronology$LimitDateTimeField");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        MutablePeriod.parse("", periodFormatter0);
        periodFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("uVll");
        periodFormatterBuilder1.toFormatter();
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        Weeks weeks0 = Weeks.THREE;
        Locale locale0 = Locale.ITALIAN;
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.addDays(403);
        mutablePeriod0.toString();
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[8];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("fWqh", "fWqh", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        Locale locale0 = Locale.ITALY;
        Hours hours0 = Hours.THREE;
        StringBuffer stringBuffer0 = new StringBuffer("fWqh");
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        String[] stringArray0 = new String[1];
        stringArray0[0] = "[*i9p5x@AjK`";
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("[*i9p5x@AjK`", "[*i9p5x@AjK`", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, false);
        periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Hours hours0 = Hours.EIGHT;
        StringBuffer stringBuffer0 = new StringBuffer("p-1wmm");
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        FileSystemHandling.shouldAllThrowIOExceptions();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder1.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        StringBuffer stringBuffer0 = new StringBuffer("Types array must not contain duplicate: ");
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(3269L, periodType0);
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) period0);
        MutablePeriod.parse(",63pot1IV", periodFormatter0);
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparator("t", (String) null);
        long long0 = 2569L;
        System.setCurrentTimeMillis(long0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix("~-pvWWouBUq<w}nQrO", (String) null);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        FileSystemHandling.shouldAllThrowIOExceptions();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("EbuMLMB", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
        Locale locale0 = Locale.GERMAN;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EbuMLMB");
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) null, locale0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder1.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        PipedWriter pipedWriter0 = new PipedWriter();
        MutablePeriod mutablePeriod0 = new MutablePeriod(224, 224, (-101), 224, 46, 224, 12825000, 224);
        periodFormatter0.printTo((Writer) pipedWriter0, (ReadablePeriod) mutablePeriod0);
        String string0 = "/xn}/}j50y19l";
        MutablePeriod.parse(string0, periodFormatter0);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder0.toPrinter();
        StringWriter stringWriter0 = new StringWriter();
        Seconds seconds0 = Seconds.MIN_VALUE;
        Locale locale0 = Locale.CANADA_FRENCH;
        periodFormatterBuilder_Composite0.printTo((Writer) stringWriter0, (ReadablePeriod) seconds0, locale0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
        PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodFormatterBuilder_Literal0);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0);
        Hours hours0 = Hours.MAX_VALUE;
        periodFormatter0.printTo((Writer) outputStreamWriter0, (ReadablePeriod) hours0);
        periodFormatter0.parseMutablePeriod("}Q,$IuCCG");
        PeriodFormatterBuilder periodFormatterBuilder2 = null;
        periodFormatterBuilder2 = new PeriodFormatterBuilder();
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.toFormatter();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Cannot have two adjacent separators");
        periodFormatterBuilder0.appendHours();
        PeriodFormatterBuilder periodFormatterBuilder1 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder0.toPrinter();
        Weeks weeks0 = Weeks.THREE;
        Locale locale0 = new Locale("Cannot have two adjacent separators", "Cannot have two adjacent separators");
        Locale locale1 = locale0.stripExtensions();
        periodFormatterBuilder_Separator0.countFieldsToPrint(weeks0, (-2147483647), locale1);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
        PeriodFormatterBuilder periodFormatterBuilder2 = new PeriodFormatterBuilder();
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        periodFormatter0.parseMutablePeriod("fWqh");
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        periodFormatterBuilder1.appendSeparator("@G7>");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder1.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
        Seconds seconds0 = Seconds.MAX_VALUE;
        Locale locale0 = Locale.ROOT;
        periodFormatterBuilder_Separator0.countFieldsToPrint(seconds0, 19, locale0);
        periodFormatter0.parseMutablePeriod("@G7>");
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
        periodFormatterBuilder1.appendSeconds();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder0.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        Period period0 = Period.years((-1717));
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) period0);
        periodFormatter0.parseMutablePeriod("0 sFu@k");
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q4oj-");
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("q4oj-", "z6_zN,SV;L+.V!P(,P");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-28578680), (-28578680), (-28578680), true, (-28578680), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        MutablePeriod.parse("q4oj-", periodFormatter0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
        periodFormatterBuilder1.toPrinter();
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ps98uw^ucz");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder1.toParser();
        MockFileWriter mockFileWriter0 = new MockFileWriter("ps98uw^ucz");
        Weeks weeks0 = Weeks.weeks(1145);
        Locale locale0 = Locale.FRANCE;
        periodFormatterBuilder_Separator0.printTo((Writer) mockFileWriter0, (ReadablePeriod) weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.DurationFieldType$StandardDurationFieldType", "org.joda.time.DurationFieldType$StandardDurationFieldType", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
        StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.DurationFieldType$StandardDurationFieldType");
        Weeks weeks0 = Weeks.weeksIn((ReadableInterval) null);
        Locale locale0 = Locale.TAIWAN;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.DurationFieldType$StandardDurationFieldType");
        periodFormatterBuilder_Separator1.printTo((Writer) mockPrintWriter0, (ReadablePeriod) weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix((String) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.DurationFieldType$StandardDurationFieldType");
        periodFormatterBuilder_SimpleAffix0.scan("org.joda.time.DurationFieldType$StandardDurationFieldType", 8);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("rG*^Sk(Az");
        periodFormatterBuilder_SimpleAffix0.scan("7/zHlo", 1);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 38;
        byteArray0[1] = (byte) (-107);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        StringWriter stringWriter0 = new StringWriter();
        DateTime.now();
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        Locale locale0 = Locale.KOREAN;
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("lPoe");
        periodFormatterBuilder0.appendYears();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
        periodFormatterBuilder2.appendSeparatorIfFieldsBefore("lPoe");
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.printZeroRarelyLast();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = new PeriodFormatterBuilder.Literal("lPoe");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder3.toParser();
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        periodFormatterBuilder_Separator0.calculatePrintedLength(mutablePeriod0, locale0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[6];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("fWqh", "fWqh", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        Locale locale0 = Locale.JAPANESE;
        Hours hours0 = Hours.ONE;
        periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_Separator0);
        StringWriter stringWriter0 = new StringWriter(4);
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[6];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("fWqh", "fWqh", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Hours hours0 = Hours.ONE;
        StringBuffer stringBuffer0 = new StringBuffer("fWqh");
        periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("ii][ N", "ii][ N");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-27), (-27), (-27), true, 55, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        periodFormatter0.parseMutablePeriod("W");
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[6];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        periodFormatter0.parseMutablePeriod(",63pot1IV");
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Y~nS", "Y~nS", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
        Days days0 = Days.days(9);
        Locale locale0 = Locale.JAPANESE;
        periodFormatterBuilder_Separator1.calculatePrintedLength(days0, locale0);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("^annot have two adjacen: searatrs");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder0.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
        periodFormatter0.parseMutablePeriod("^annot have two adjacen: searatrs");
        periodFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
        periodFormatterBuilder_SimpleAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", 8);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-9), 8, 13421772, false, 8, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        MutablePeriod mutablePeriod0 = new MutablePeriod((long) 13421772, (Chronology) julianChronology0);
        periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-9), (-9));
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
        periodFormatterBuilder1.appendSeparatorIfFieldsBefore("org.joda.time.field.DividedDateTimeField");
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.field.DividedDateTimeField", "org.joda.time.field.DividedDateTimeField");
        periodFormatterBuilder_PluralAffix0.parse("org.joda.time.field.DividedDateTimeField", 0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("ph[vv!&>c9,&n");
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder0.toPrinter();
        Period period0 = Period.millis(57);
        Locale locale0 = Locale.ITALIAN;
        periodFormatterBuilder_Composite0.calculatePrintedLength(period0, locale0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        periodFormatter0.parseMutablePeriod("/xn}/}j50y19l");
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits((-1774));
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroIfSupported();
        PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSecondsWithMillis();
        PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        PeriodPrinter periodPrinter0 = periodFormatterBuilder5.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0);
        periodFormatter0.parseMutablePeriod("/xn}/}j50y19?");
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("iiS[ N", "iiS[ N");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        Minutes minutes0 = Minutes.ZERO;
        periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("iiS[ N", "org.jod.timeformat.PeriodF.rmaterBulder$PluralAffix");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        Months months0 = Months.TEN;
        Locale locale0 = Locale.CHINA;
        periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(months0, locale0);
        Minutes minutes0 = Minutes.ZERO;
        periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[10];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("sWZ", "sWZ");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("sWZ");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("sWZ", "sWZ", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, false);
        periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        Locale locale0 = Locale.ITALY;
        Hours hours0 = Hours.THREE;
        periodFormatterBuilder_Separator0.calculatePrintedLength(hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[6];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("fWqh", "fWqh", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        Locale locale0 = Locale.ITALY;
        Hours hours0 = Hours.TWO;
        periodFormatterBuilder_Separator0.calculatePrintedLength(hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[9];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 8, 8, true, 8, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
        periodFormatterBuilder_FieldFormatter0.getFieldValue(mutablePeriod0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q4jK");
        periodFormatterBuilder_SimpleAffix0.scan("i+gN{9hbMi+N", 1);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodType periodType0 = PeriodType.days();
        MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
        mutablePeriod0.toString();
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.fomt.PeriodFormaterBuilder$SmpleAffix");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix1 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.fomt.PeriodFormaterBuilder$SmpleAffix");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix1, periodFormatterBuilder_SimpleAffix1);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 8, 8, true, 8, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        MutablePeriod mutablePeriod0 = MutablePeriod.parse("org.joda.time.fomt.PeriodFormaterBuilder$SmpleAffix", periodFormatter0);
        String[] stringArray0 = new String[1];
        stringArray0[0] = "org.joda.time.fomt.PeriodFormaterBuilder$SmpleAffix";
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.fomt.PeriodFormaterBuilder$SmpleAffix", "org.joda.time.fomt.PeriodFormaterBuilder$SmpleAffix", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        Locale locale0 = Locale.TAIWAN;
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0, locale0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.setYears(52);
        mutablePeriod0.toString();
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("P52Y");
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("p-8m2w-8d2d");
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
        periodFormatterBuilder1.toParser();
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder1.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        periodFormatter0.parseMutablePeriod(",63pot1IV");
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("PT0S");
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix");
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.DurationFieldType$StandardDurationFieldType");
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, "lTm3JDW`6>D=7;\"");
        periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, 1);
        int int0 = 99;
        periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, int0);
        Integer integer0 = new Integer(int0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        FileSystemHandling.shouldAllThrowIOExceptions();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        String string0 = "";
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Eb#uML{MB", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
        Locale locale0 = Locale.forLanguageTag("");
        periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) null, "", (-445), locale0);
        periodFormatterBuilder0.appendSuffix(string0);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.toString();
        mutablePeriod0.getYears();
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-2091), (-556), (-556), true, (-2091), (PeriodFormatterBuilder.FieldFormatter[]) null, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
        Locale locale0 = Locale.ITALIAN;
        periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "PT0S", (-556), locale0);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.addWeeks((-189));
        mutablePeriod0.toString();
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("P-189W");
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("iiS[ N", "org.joda.time.format.PeriodF.rmatterBuilder$PluralAffix");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        Locale locale0 = Locale.GERMANY;
        periodFormatterBuilder_FieldFormatter0.countFieldsToPrint((ReadablePeriod) null, 4, locale0);
        Minutes minutes0 = Minutes.ZERO;
        periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("ii][ N", "ii][ N");
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 53, true, 53, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        Minutes minutes0 = Minutes.ZERO;
        periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        FileSystemHandling.shouldAllThrowIOExceptions();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q4oj-");
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("q4oj-", "NFt!GDoG/%39 m(!");
        periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder1.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        periodFormatter0.parseMutablePeriod(",63pot1IV");
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("iiS[ N", "org.jod.time.format.PeriodF.rmaterBuilder$PluralAffix");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        Minutes minutes0 = Minutes.ZERO;
        periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.jod.time.format.PeriodF.rmaterBuilder$PluralAffix", "org.joda.time.format.PeriodFormatterBuilder$PluralAffix", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("iiS[ N");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatter0);
        StringBuffer stringBuffer0 = new StringBuffer(4);
        periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) minutes0, (Locale) null);
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "org.joda.time.format.PeriodFormatterBuilder$PluralAffix", 4, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(763, 763, 763, false, 5337, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("r)4M!", "r)4M!");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
        periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_FieldFormatter1, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
        periodFormatterBuilder1.appendSuffix("Multiplication overflows an:int: ");
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodType periodType0 = PeriodType.millis();
        MutablePeriod mutablePeriod0 = new MutablePeriod(615L, 615L, periodType0);
        MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
        mutablePeriod1.toString();
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder0.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        String string0 = "0asF!@k";
        String[] stringArray0 = new String[3];
        stringArray0[0] = "0asF!@k";
        stringArray0[1] = "org.joda.time.format.periodformatterbuilder$simpleaffixuced precision: ";
        stringArray0[2] = "0asF!@k";
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.periodformatterbuilder$simpleaffixuced precision: ", "P5U}:F[o", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(762);
        CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.joda.time.format.periodformatterbuilder$simpleaffixuced precision: ");
        MutablePeriod mutablePeriod0 = new MutablePeriod(762, 762, 762, (-3151));
        Locale locale0 = Locale.CHINESE;
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter1, (ReadablePeriod) mutablePeriod0, locale0);
        periodFormatter0.parseMutablePeriod(string0);
        periodFormatterBuilder1.appendSuffix(string0);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.add(1831L);
        mutablePeriod0.toString();
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("fWqh", "fWqh", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Hours hours0 = Hours.EIGHT;
        StringBuffer stringBuffer0 = new StringBuffer("fWqh");
        periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Cannot have two adjacent separators");
        periodFormatterBuilder1.appendMillis();
        PeriodFormatterBuilder periodFormatterBuilder2 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder0.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0, (Locale) null);
        PeriodFormatterBuilder periodFormatterBuilder3 = new PeriodFormatterBuilder();
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
        PeriodFormatter periodFormatter1 = periodFormatter0.withLocale((Locale) null);
        periodFormatterBuilder1.append(periodFormatter1);
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
        periodFormatterBuilder0.appendSuffix("");
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("AFK. ^pz~Pp4BJ$y");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
        periodFormatter0.parseMutablePeriod("AFK. ^pz~Pp4BJ$y");
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
        MutablePeriod.parse("p-1307wt3m7.s08s");
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("p5u5cej5/?jz].+pixy");
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("pt2)777Z77h46m4ss");
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("p-1w3m");
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodType periodType0 = PeriodType.dayTime();
        PeriodType periodType1 = periodType0.withYearsRemoved();
        MutablePeriod mutablePeriod0 = new MutablePeriod(26607895200008L, periodType1);
        mutablePeriod0.toString();
        PeriodFormatterBuilder periodFormatterBuilder1 = new PeriodFormatterBuilder();
        MutablePeriod.parse("PT7391082H0.008S");
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("iiS[ N", "org.joda.time.format.PeriodF.rmatterBuilder$PluralAffix");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        Minutes minutes0 = Minutes.ZERO;
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[2];
        periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
        periodFormatterBuilder_FieldFormatterArray0[1] = periodFormatterBuilder_FieldFormatter0;
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(323, 53, 4, false, (-1168), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter2 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_PluralAffix0);
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("pt73h1082h0.008s", "pq~nytea7+h", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatter1);
        Locale locale0 = Locale.KOREAN;
        periodFormatterBuilder_Separator1.calculatePrintedLength(minutes0, locale0);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[8];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 0, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        String[] stringArray0 = new String[0];
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.Minutes", "org.joda.time.DateTimeUtils", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        Locale locale0 = Locale.JAPANESE;
        Hours hours0 = Hours.ONE;
        FileSystemHandling.shouldAllThrowIOExceptions();
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = new PeriodFormatterBuilder.Separator("org.joda.time.Minutes", "s8HX*}", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = periodFormatterBuilder_Separator1.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator3 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator2);
        StringWriter stringWriter0 = new StringWriter(0);
        Weeks weeks0 = Weeks.standardWeeksIn(hours0);
        periodFormatterBuilder_Separator3.printTo((Writer) stringWriter0, (ReadablePeriod) weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("fWqh", "fWqh", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("ObDa,Bkn 9t`b~n<4!Y");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = new PeriodFormatterBuilder.Separator("K6rLe:|\"iY", "Illegal instant due to time zone offset transition (", (String[]) null, periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0, true, true);
        Locale locale0 = Locale.JAPANESE;
        Hours hours0 = Hours.ONE;
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Separator1);
        StringWriter stringWriter0 = new StringWriter(4);
        periodFormatterBuilder_Separator2.printTo((Writer) stringWriter0, (ReadablePeriod) hours0, locale0);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fWqh", "fWqh");
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fWqh");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("fWqh", "fWqh", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$Separator", "fWqh", (String[]) null, periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1, true, false);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator3 = new PeriodFormatterBuilder.Separator("zf?~iis[ nnkz n\"tl(", "fWqh", (String[]) null, periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1, true, true);
        periodFormatterBuilder_Separator3.finish(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
        Locale locale0 = Locale.ITALY;
        Hours hours0 = Hours.THREE;
        periodFormatterBuilder_Separator3.calculatePrintedLength(hours0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("fWqh");
        Locale locale1 = Locale.JAPANESE;
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale1);
        MutablePeriod mutablePeriod0 = new MutablePeriod("zf?~iis[ nnkz n\"tl(");
        String string0 = "Cannot have two adjacent separators";
        int int0 = 854;
        periodFormatterBuilder_Separator2.parseInto(mutablePeriod0, string0, int0, locale0);
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        MutablePeriod.parse("p-yw3w");
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite) periodFormatterBuilder1.toPrinter();
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
        periodFormatter0.parseMutablePeriod(",6q63p7ot1IV");
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Cannot have two adjacent separators");
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
        periodFormatterBuilder2.appendMillis();
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder0.toPrinter();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        MutablePeriod mutablePeriod0 = new MutablePeriod(323L, 323L, copticChronology0);
        Locale locale0 = Locale.KOREAN;
        periodFormatterBuilder_Separator0.countFieldsToPrint(mutablePeriod0, 25, locale0);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
        MutablePeriod mutablePeriod1 = periodFormatter0.parseMutablePeriod("Tn<HOQ^|3g[<K3by");
        Locale locale1 = Locale.FRENCH;
        periodFormatterBuilder_Separator0.calculatePrintedLength(mutablePeriod1, locale1);
        String string0 = "iiS[ N";
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
        String string1 = "org.joda.time.format.DateTimeParserBucket$SavedState";
    }
}
