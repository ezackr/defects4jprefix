/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:50:43 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MutableDateTime_ESTest extends MutableDateTime_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addWeekyears(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setSecondOfDay(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setRounding((DateTimeField) null);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setYear(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setZoneRetainFields(fixedDateTimeZone0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addDays(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime mutableDateTime1 = new MutableDateTime(mutableDateTime0);
        mutableDateTime1.getMillis();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
        mutableDateTime_Property0.roundCeiling();
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
        mutableDateTime1.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setTime(5, 5, 5, 5);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.addYears(3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setWeekyear(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.add((ReadablePeriod) null);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addHours(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        MutableDateTime mutableDateTime1 = new MutableDateTime(mutableDateTime0, iSOChronology0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(4, 2, 3, 2, 0, 4, 3);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.addSeconds(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(5, 1, 2, 3, 3, 2, 5, (DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setDate(0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addMinutes(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
        Chronology chronology0 = mutableDateTime_Property0.getChronology();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setMinuteOfDay(3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setSecondOfMinute(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setDayOfWeek(3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        int int0 = mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(1960L);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
        mutableDateTime0.setRounding(dateTimeField0, 3);
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setDayOfMonth(0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        MutableDateTime.parse("+ghdR");
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setMillisOfDay(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        String string0 = mutableDateTime0.toString();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setMillisOfSecond(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
        mutableDateTime_Property0.add(5);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setHourOfDay(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
        mutableDateTime_Property0.roundHalfEven();
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        Duration duration0 = new Duration(5, 3);
        mutableDateTime0.add((ReadableDuration) duration0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setDayOfYear(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
        mutableDateTime1.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
        MutableDateTime mutableDateTime1 = new MutableDateTime(mutableDateTime0, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addMillis(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setMonthOfYear(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setDateTime(1, 1, 1, 3, 1, 1, 3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setWeekOfWeekyear(5);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
        mutableDateTime0.setMillis((ReadableInstant) dateTime0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addMonths(3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(2223, 4, 5, 2, 3, 4, 3, (Chronology) null);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.addWeeks(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setMinuteOfHour(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        Instant instant0 = new Instant(3L);
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
        mutableDateTime_Property0.roundFloor();
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Instant instant0 = new Instant((-2140L));
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
        mutableDateTime_Property0.set("UTC");
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
        Interval interval0 = mutableDateTime_Property0.toInterval();
        interval0.getEndMillis();
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
        mutableDateTime_Property0.set(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
        mutableDateTime_Property0.add((long) 2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
        mutableDateTime_Property0.roundHalfFloor();
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
        mutableDateTime_Property0.addWrapField(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
        mutableDateTime_Property0.roundHalfCeiling();
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        MutableDateTime.now((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        MutableDateTime.now((Chronology) null);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
        mutableDateTime0.setRounding(dateTimeField0, 5);
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
        mutableDateTime0.setRounding(dateTimeField0, (-505));
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
        mutableDateTime0.setRounding(dateTimeField0, 34);
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setRounding((DateTimeField) null, 0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
        mutableDateTime0.setRounding(dateTimeField0, 1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
        mutableDateTime0.setRounding(dateTimeField0, 2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
        mutableDateTime0.setRounding(dateTimeField0, 4);
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.add((ReadableDuration) null);
    }

    @Test(timeout = 4000)
    public void test8383() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        Minutes minutes0 = Minutes.MAX_VALUE;
        mutableDateTime0.add((ReadablePeriod) minutes0, 0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test8484() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        mutableDateTime0.setZone(fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test8585() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        mutableDateTime0.setZone(fixedDateTimeZone0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test8686() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        mutableDateTime0.setZoneRetainFields(fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test8787() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        mutableDateTime0.set(dateTimeFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test8888() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.set((DateTimeFieldType) null, 1);
    }

    @Test(timeout = 4000)
    public void test8989() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(1960L);
        DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
        mutableDateTime0.add(durationFieldType0, 4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test9090() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.add((DurationFieldType) null, 3007);
    }

    @Test(timeout = 4000)
    public void test9191() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setDate((ReadableInstant) null);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test9292() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test9393() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.property((DateTimeFieldType) null);
    }
}
