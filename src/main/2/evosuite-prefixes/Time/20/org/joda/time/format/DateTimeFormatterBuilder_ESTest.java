/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:18:53 GMT 2024
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("03%lvDq");
        dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (long) 4);
        dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("03%lvDq");
        dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (long) 4);
        dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, 18, 18);
        MockFile mockFile0 = new MockFile("^Zk<f$48Dq1kNb");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
        Locale locale0 = Locale.CANADA;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, (ReadablePartial) null, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 845, 1, 845, 845);
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        String string0 = localDate0.toString("Z`.;");
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        localDate0.toString(dateTimeFormatter0);
        dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zh");
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.US;
        LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) bufferedWriter0, (ReadablePartial) localTime0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(2);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(1, 1);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("3711923-07-25T00:00:00.000-08:00");
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(86, 23);
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(5, 1);
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendPattern(":EF0");
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(1);
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
        dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
        dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(3990);
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(126);
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(84);
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(37);
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear((-1433));
        dateTimeFormatterBuilder1.appendTimeZoneName();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test02528() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(255);
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(9);
        DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
        LocalDate localDate0 = dateMidnight0.toLocalDate();
        String string0 = localDate0.toString("z");
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer("US/Pacific-New");
        Locale locale0 = Locale.CANADA;
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(122, hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 16, (Chronology) islamicChronology0, (-797), (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{{&t7s.vh0>c8c");
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(25734375, hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test02933() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{{&t7s.vh0>c8c");
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(25734375, hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test03034() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(425, (Map<String, DateTimeZone>) null);
        DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
        Instant instant0 = dateMidnight0.toInstant();
        Chronology chronology0 = instant0.getChronology();
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) null, (long) 1181, chronology0, 425, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('q');
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (ReadablePartial) null, locale0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) pipedWriter0, (-2412L), (Chronology) null, 3, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test03337() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\"/rVk");
        JulianChronology julianChronology0 = JulianChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) null, 100000000000L, (Chronology) julianChronology0, 210, dateTimeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test03438() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("en");
        MockFile mockFile0 = new MockFile((File) null, "en");
        MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(100);
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        Locale locale0 = Locale.PRC;
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test03539() throws Throwable {
        DateMidnight dateMidnight0 = DateMidnight.now();
        String string0 = dateMidnight0.toString("2014-02-14");
    }

    @Test(timeout = 4000)
    public void test03640() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 23118750, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        String string0 = dateTimeFormatter0.print((long) 23118750);
    }

    @Test(timeout = 4000)
    public void test03641() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 23118750, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        String string0 = dateTimeFormatter0.print((long) 23118750);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test03642() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 23118750, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        String string0 = dateTimeFormatter0.print((long) 23118750);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test03743() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2245, "J4vU0tp}y6l1");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
        String string0 = dateMidnight0.toString("CE");
    }

    @Test(timeout = 4000)
    public void test03844() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-923), true);
        Locale locale0 = Locale.JAPAN;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) stringWriter0, 1000000L, (Chronology) copticChronology0, 20587500, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test03945() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Locale locale0 = Locale.US;
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("], ");
        dateTimeFormatterBuilder_TextField0.printTo((Writer) mockFileWriter0, 10080L, (Chronology) copticChronology0, 9, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 49, false);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test04047() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 49, false);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test04048() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 49, false);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test04049() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 49, false);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test04150() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        StringWriter stringWriter0 = new StringWriter(20);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        LocalTime localTime0 = LocalTime.now();
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, (Locale) null);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test04151() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        StringWriter stringWriter0 = new StringWriter(20);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        LocalTime localTime0 = LocalTime.now();
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, (Locale) null);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test04252() throws Throwable {
        LocalTime localTime0 = LocalTime.now();
        String string0 = localTime0.toString();
    }

    @Test(timeout = 4000)
    public void test04353() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 2598);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) null, (long) 2598, (Chronology) islamicChronology0, 1, dateTimeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test04454() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 5, 5);
        StringWriter stringWriter0 = new StringWriter();
        LocalDate localDate0 = new LocalDate((long) 1);
        Locale locale0 = new Locale("RY", "org.joda.time.convert.ConverterSet$Entry", "RY");
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) stringWriter0, (ReadablePartial) localDate0, locale0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test04555() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.toFormatter();
    }

    @Test(timeout = 4000)
    public void test04656() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.toPrinter();
    }

    @Test(timeout = 4000)
    public void test04757() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendTwoDigitYear(58, false);
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = (DateTimeFormatterBuilder.TwoDigitYear) dateTimeFormatterBuilder0.toPrinter();
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test04858() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test04959() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.append((DateTimeFormatter) null);
    }

    @Test(timeout = 4000)
    public void test05060() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1669, 1669, 84);
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormat_StyleFormatter0, (DateTimeParser[]) null);
    }

    @Test(timeout = 4000)
    public void test05161() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1303, true);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0);
    }

    @Test(timeout = 4000)
    public void test05262() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-161826461), (-161826461));
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Fraction0, (DateTimeParser[]) dateTimeFormatterBuilder_TimeZoneIdArray0);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test05263() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-161826461), (-161826461));
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Fraction0, (DateTimeParser[]) dateTimeFormatterBuilder_TimeZoneIdArray0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test05364() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 292278993, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[12];
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0);
    }

    @Test(timeout = 4000)
    public void test05465() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendOptional((DateTimeParser) null);
    }

    @Test(timeout = 4000)
    public void test05566() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
    }

    @Test(timeout = 4000)
    public void test05667() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendLiteral((String) null);
    }

    @Test(timeout = 4000)
    public void test05768() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("");
    }

    @Test(timeout = 4000)
    public void test05869() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("\uFFFD");
    }

    @Test(timeout = 4000)
    public void test05970() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, (-5281), (-5281));
    }

    @Test(timeout = 4000)
    public void test06071() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendHourOfHalfday((-5));
    }

    @Test(timeout = 4000)
    public void test06172() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendYearOfCentury(0, 0);
    }

    @Test(timeout = 4000)
    public void test06273() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (-9));
    }

    @Test(timeout = 4000)
    public void test06374() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFixedDecimal((DateTimeFieldType) null, 57);
    }

    @Test(timeout = 4000)
    public void test06475() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 7);
    }

    @Test(timeout = 4000)
    public void test06576() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendSignedDecimal((DateTimeFieldType) null, 21, 3);
    }

    @Test(timeout = 4000)
    public void test06677() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-1618), (-1618));
    }

    @Test(timeout = 4000)
    public void test06778() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendYear(0, 0);
    }

    @Test(timeout = 4000)
    public void test06879() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 52);
    }

    @Test(timeout = 4000)
    public void test06980() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, 31);
    }

    @Test(timeout = 4000)
    public void test07081() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, (-2065));
    }

    @Test(timeout = 4000)
    public void test07182() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendText((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test07283() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test07384() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFraction((DateTimeFieldType) null, 126, 126);
    }

    @Test(timeout = 4000)
    public void test07485() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFractionOfSecond((-1465), 45);
    }

    @Test(timeout = 4000)
    public void test07586() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFractionOfMinute(0, 0);
    }

    @Test(timeout = 4000)
    public void test07687() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_MatchingParser0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
        dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test07688() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_MatchingParser0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test07789() throws Throwable {
        MockFile mockFile0 = new MockFile("-0J!Qn}o&nLPR(cb", "-0J!Qn}o&nLPR(cb");
        MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
        DateTimeFormatterBuilder.printUnknownString(mockFileWriter0, 23);
    }

    @Test(timeout = 4000)
    public void test07890() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("T0");
    }

    @Test(timeout = 4000)
    public void test07991() throws Throwable {
        MutableDateTime.parse("t%7iqhr,\"qquA:Vdlj");
    }

    @Test(timeout = 4000)
    public void test08092() throws Throwable {
        MutableDateTime.parse("58-wm)neo");
    }

    @Test(timeout = 4000)
    public void test08193() throws Throwable {
        MutableDateTime.parse("+r*+71uR");
    }

    @Test(timeout = 4000)
    public void test08294() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 12740625, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        MutableDateTime.parse("-0J!Qn}o&nLfR:Vb", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test08395() throws Throwable {
        MutableDateTime.parse("-");
    }

    @Test(timeout = 4000)
    public void test08496() throws Throwable {
        MutableDateTime.parse("-('EdyHs");
    }

    @Test(timeout = 4000)
    public void test08597() throws Throwable {
        MutableDateTime.parse("2147483648");
    }

    @Test(timeout = 4000)
    public void test08698() throws Throwable {
        LocalDate localDate0 = new LocalDate(100L);
        String string0 = localDate0.toString("Mk");
    }

    @Test(timeout = 4000)
    public void test08799() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BCE");
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test087100() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BCE");
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test088101() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-3), true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3), 9, 9);
        MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) monthDay0, (Locale) null);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test088102() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-3), true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3), 9, 9);
        MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) monthDay0, (Locale) null);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test089103() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 9, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        StringBuffer stringBuffer0 = new StringBuffer();
        MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) monthDay0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test089104() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 9, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        StringBuffer stringBuffer0 = new StringBuffer();
        MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) monthDay0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test090105() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4, true);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 4);
        Locale locale0 = Locale.ITALIAN;
        dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
    }

    @Test(timeout = 4000)
    public void test091106() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4, true);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
        LocalTime localTime0 = new LocalTime((Chronology) strictChronology0);
        Locale locale0 = Locale.UK;
        dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
    }

    @Test(timeout = 4000)
    public void test092107() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1725), false);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto((DateTimeParserBucket) null, "QcqL", (-1725));
    }

    @Test(timeout = 4000)
    public void test093108() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("9", dateTimeFormatter0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test094109() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        MutableDateTime.parse("03%lvDq", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test095110() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 9, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        MutableDateTime.parse("-0J!Qn}o&nLPR(cb", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test096111() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendTwoDigitWeekyear(3725, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test097112() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-4346), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        MutableDateTime.parse("2014-02-14", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test098113() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 23118750, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.parseMutableDateTime("2014-02-14");
    }

    @Test(timeout = 4000)
    public void test099114() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        MutableDateTime.parse("", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test100115() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("1", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test101116() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 23118750, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.parseMutableDateTime("-0J!Qn}o&nLPR(cb");
    }

    @Test(timeout = 4000)
    public void test102117() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 126, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        MutableDateTime.parse("+", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test103118() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, (-1570), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.parseMutableDateTime("03%lvuq");
    }

    @Test(timeout = 4000)
    public void test104119() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 3600, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.parseMutableDateTime("-0J!Qn}o&nLfR:Vb");
    }

    @Test(timeout = 4000)
    public void test105120() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-11), false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.parseMutableDateTime("Parsing is noj sup+orted");
    }

    @Test(timeout = 4000)
    public void test106121() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1875, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.parseMutableDateTime("5*xkl,]e`Wub.");
    }

    @Test(timeout = 4000)
    public void test107122() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 126, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.parseMutableDateTime("2_;OFk+s");
    }

    @Test(timeout = 4000)
    public void test108123() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 126, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(126);
        LocalTime.parse("16A&u}-JHE.", dateTimeFormatter1);
    }

    @Test(timeout = 4000)
    public void test109124() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 49, false);
        StringBuffer stringBuffer0 = new StringBuffer(49);
        Locale locale0 = Locale.CHINA;
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (long) 49, (Chronology) julianChronology0, 49, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test109125() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 49, false);
        StringBuffer stringBuffer0 = new StringBuffer(49);
        Locale locale0 = Locale.CHINA;
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (long) 49, (Chronology) julianChronology0, 49, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test110126() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 126, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.printTo((Writer) null, 87L);
    }

    @Test(timeout = 4000)
    public void test111127() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 1, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.printTo((Writer) null, 1L);
    }

    @Test(timeout = 4000)
    public void test112128() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 17, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.GERMAN;
        LocalDateTime localDateTime0 = new LocalDateTime((long) 17);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test112129() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 17, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.GERMAN;
        LocalDateTime localDateTime0 = new LocalDateTime((long) 17);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test113130() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 23118750, false);
        StringBuffer stringBuffer0 = new StringBuffer(23118750);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        LocalDateTime localDateTime0 = new LocalDateTime((long) 23118750);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test113131() throws Throwable {
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 23118750, false);
        StringBuffer stringBuffer0 = new StringBuffer(23118750);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        LocalDateTime localDateTime0 = new LocalDateTime((long) 23118750);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test114132() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-4346), true);
        StringWriter stringWriter0 = new StringWriter();
        Locale locale0 = Locale.UK;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) stringWriter0, (ReadablePartial) localDate0, locale0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test115133() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 17, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
        MonthDay monthDay0 = MonthDay.now();
        Locale locale0 = Locale.GERMAN;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockPrintWriter0, (ReadablePartial) monthDay0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test116134() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Locale locale0 = Locale.CANADA_FRENCH;
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2067);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
        Charset charset0 = Charset.defaultCharset();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
        LocalDateTime localDateTime0 = new LocalDateTime((long) 2067);
        dateTimeFormatterBuilder_TextField0.printTo((Writer) outputStreamWriter0, (ReadablePartial) localDateTime0, locale0);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test117135() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        LocalTime localTime0 = new LocalTime((DateTimeZone) null);
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, (Locale) null);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test117136() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        LocalTime localTime0 = new LocalTime((DateTimeZone) null);
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, (Locale) null);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test118137() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        MutableDateTime.parse(":VLeH]v8oW 0p&RJ{", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test119138() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(502L, buddhistChronology0, (Locale) null, (Integer) 1, 49);
        dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "!0M]i\u0002", 23118750);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test120139() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1164, false, 4);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_TextField0);
        MutableDateTime.parse("3#neYa~&z/OdK=Q", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test121140() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        Locale locale0 = Locale.TAIWAN;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1381);
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (long) 20, (Chronology) islamicChronology0, 1381, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test122141() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        StringBuffer stringBuffer0 = new StringBuffer(58);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 58, 49);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1, (Chronology) buddhistChronology0, 58, dateTimeZone0, (Locale) null);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test122142() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        StringBuffer stringBuffer0 = new StringBuffer(58);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 58, 49);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1, (Chronology) buddhistChronology0, 58, dateTimeZone0, (Locale) null);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test123143() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1410, 1410);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.TAIWAN;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1410, (Chronology) copticChronology0, 1410, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test123144() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1410, 1410);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.TAIWAN;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1410, (Chronology) copticChronology0, 1410, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test124145() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 5, 5);
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 5);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, 478L, (Chronology) copticChronology0, 5, (DateTimeZone) fixedDateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test125146() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-311), 1);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1, (Chronology) copticChronology0, (-311), (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test125147() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-311), 1);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1, (Chronology) copticChronology0, (-311), (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test126148() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LocalTime localTime0 = new LocalTime((Chronology) islamicChronology0);
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 16);
        Locale locale0 = Locale.CANADA;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%QM<");
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test127149() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 5, 5);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, 1991L, (Chronology) copticChronology0, 5, (DateTimeZone) fixedDateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test128150() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2, 2);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 817512106L, (Chronology) copticChronology0, 17, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test128151() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2, 2);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 817512106L, (Chronology) copticChronology0, 17, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test129152() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        StringBuffer stringBuffer0 = new StringBuffer("BCE");
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 3);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1, (Chronology) copticChronology0, 18, dateTimeZone0, (Locale) null);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test129153() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        StringBuffer stringBuffer0 = new StringBuffer("BCE");
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 3);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1, (Chronology) copticChronology0, 18, dateTimeZone0, (Locale) null);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test130154() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.ROOT;
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-256), 4);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 1000000L, (Chronology) copticChronology0, 5, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test130155() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.ROOT;
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-256), 4);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 1000000L, (Chronology) copticChronology0, 5, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test131156() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 6, 6);
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 6);
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 6, (Chronology) copticChronology0, 6, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test131157() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 6, 6);
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 6);
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 6, (Chronology) copticChronology0, 6, (DateTimeZone) fixedDateTimeZone0, locale0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test132158() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 7, 7);
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 7);
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 7, (Chronology) copticChronology0, 7, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test132159() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 7, 7);
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 7);
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 7, (Chronology) copticChronology0, 7, (DateTimeZone) fixedDateTimeZone0, locale0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test133160() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 5, (-3405));
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 2147483647L, (Chronology) copticChronology0, (-3405), (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test133161() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 5, (-3405));
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 2147483647L, (Chronology) copticChronology0, (-3405), (DateTimeZone) fixedDateTimeZone0, locale0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test134162() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 106, (-1887));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        MutableDateTime.parse("UV/CentralUSKInWiana-Starke", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test135163() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2445, 2445);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        MutableDateTime.parse("U&cNuyB_1Of}CT", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test136164() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1461), 1271);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1714L, copticChronology0, locale0, (Integer) 1, 271);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "+18:00", 1);
    }

    @Test(timeout = 4000)
    public void test136165() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1461), 1271);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1714L, copticChronology0, locale0, (Integer) 1, 271);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "+18:00", 1);
        dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test137166() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/Michigan", "US/Michigan", true, (-2478), (-2478));
    }

    @Test(timeout = 4000)
    public void test138167() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.field.PreciseDateTimeField", "org.joda.time.field.PreciseDateTimeField", true, 1305, (-481));
    }

    @Test(timeout = 4000)
    public void test139168() throws Throwable {
        MutableDateTime.parse("`.;");
    }

    @Test(timeout = 4000)
    public void test140169() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("-0J!Qn}o&nLPR(cb", "1<FAP:Z1v[G1XJv9", false, 65533, 65533);
        dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TimeZoneOffset0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test140170() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("-0J!Qn}o&nLPR(cb", "1<FAP:Z1v[G1XJv9", false, 65533, 65533);
        dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TimeZoneOffset0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test141171() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("7;:2+o", "%Lf;-*%-ZZo~H-[cp@", false, 15271875, 15271875);
        StringBuffer stringBuffer0 = new StringBuffer();
        JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 15271875, (Chronology) julianChronology0, 15271875, (DateTimeZone) null, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test141172() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("7;:2+o", "%Lf;-*%-ZZo~H-[cp@", false, 15271875, 15271875);
        StringBuffer stringBuffer0 = new StringBuffer();
        JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 15271875, (Chronology) julianChronology0, 15271875, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test142173() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, 4, 4);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.GERMANY;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, ethiopicChronology0, locale0, (Integer) 1, 4);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 7, (Chronology) gJChronology0, 0, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test142174() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, 4, 4);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.GERMANY;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, ethiopicChronology0, locale0, (Integer) 1, 4);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 7, (Chronology) gJChronology0, 0, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test143175() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        DateMidnight dateMidnight0 = new DateMidnight((-1146L), (Chronology) gJChronology0);
        String string0 = dateMidnight0.toString((String) null);
    }

    @Test(timeout = 4000)
    public void test144176() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
        DateMidnight dateMidnight1 = dateMidnight0.withChronology(islamicChronology0);
        String string0 = dateMidnight1.toString((String) null);
    }

    @Test(timeout = 4000)
    public void test145177() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(121);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vVIm69&hg8e`S", "*vVIm69&hg8e`S", false, 1, 1);
        Locale locale0 = Locale.TAIWAN;
        StringBuffer stringBuffer0 = new StringBuffer(121);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, 121, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test145178() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(121);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vVIm69&hg8e`S", "*vVIm69&hg8e`S", false, 1, 1);
        Locale locale0 = Locale.TAIWAN;
        StringBuffer stringBuffer0 = new StringBuffer(121);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, 121, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test146179() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 5);
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("1-w", "1-w", false, 1, 5);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-769L), (Chronology) copticChronology0, 10125000, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test146180() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 5);
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("1-w", "1-w", false, 1, 5);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-769L), (Chronology) copticChronology0, 10125000, (DateTimeZone) fixedDateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test147181() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("BE", "", true, 1, 10);
        Locale locale0 = Locale.PRC;
        StringWriter stringWriter0 = new StringWriter(10);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, 3600000, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test147182() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("BE", "", true, 1, 10);
        Locale locale0 = Locale.PRC;
        StringWriter stringWriter0 = new StringWriter(10);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, 3600000, dateTimeZone0, locale0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test148183() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(49);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vvTm69&hg8e`s", "*vvTm69&hg8e`s", true, 2, 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, 604800L, (Chronology) islamicChronology0, 49, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test148184() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(49);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vvTm69&hg8e`s", "*vvTm69&hg8e`s", true, 2, 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, 604800L, (Chronology) islamicChronology0, 49, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test149185() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("-w", "US/MichigansK\"GDUpu", true, 1, 3);
        StringBuffer stringBuffer0 = new StringBuffer();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 3, (Chronology) gJChronology0, 1963, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test149186() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("-w", "US/MichigansK\"GDUpu", true, 1, 3);
        StringBuffer stringBuffer0 = new StringBuffer();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 3, (Chronology) gJChronology0, 1963, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test150187() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("b", "*vVIm69&hg8e`S", true, 1, 1954);
        Locale locale0 = new Locale("b");
        StringBuffer stringBuffer0 = new StringBuffer(1);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, 1, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test150188() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("b", "*vVIm69&hg8e`S", true, 1, 1954);
        Locale locale0 = new Locale("b");
        StringBuffer stringBuffer0 = new StringBuffer(1);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, 1, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test151189() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-12));
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vVIm69&hD8e`S", "*vVIm69&hD8e`S", false, 8, 8);
        Locale locale0 = Locale.TAIWAN;
        StringBuffer stringBuffer0 = new StringBuffer("*vVIm69&hD8e`S");
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, (-12), dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test151190() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-12));
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vVIm69&hD8e`S", "*vVIm69&hD8e`S", false, 8, 8);
        Locale locale0 = Locale.TAIWAN;
        StringBuffer stringBuffer0 = new StringBuffer("*vVIm69&hD8e`S");
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) islamicChronology0, (-12), dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test152191() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("c`PmAr/>FIp(e", "c`PmAr/>FIp(e", false, 1, 7);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, 3544L, (Chronology) buddhistChronology0, 7, (DateTimeZone) null, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test152192() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("c`PmAr/>FIp(e", "c`PmAr/>FIp(e", false, 1, 7);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, 3544L, (Chronology) buddhistChronology0, 7, (DateTimeZone) null, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test153193() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "ovvtm69hg8e`s.form3t.datetimeformatterbuilder$time_oneid", false, 2, 87);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
        Charset charset0 = Charset.defaultCharset();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) outputStreamWriter0, (long) 5, (Chronology) gregorianChronology0, 0, dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test154194() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vvim69&hg8e`s", "*vvim69&hg8e`s", true, 1, 1);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 1, (Chronology) islamicChronology0, 0, dateTimeZone0, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test155195() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(49);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*vvTm69&hg8e`s", "*vvTm69&hg8e`s", true, 2, 2);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 49, (Chronology) islamicChronology0, (-73), dateTimeZone0, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test156196() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("(J5/ap{Ch-W+", "(J5/ap{Ch-W+", true, 1, 1);
        StringWriter stringWriter0 = new StringWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 1, (Chronology) islamicChronology0, 1, dateTimeZone0, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test157197() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("(J5/ap{Ch-W+", (String) null, false, 1, 270);
        StringWriter stringWriter0 = new StringWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 3600000, (Chronology) islamicChronology0, 3600000, dateTimeZone0, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test158198() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+.<mlVI/zNmgq[\u0004", "+.<mlVI/zNmgq[\u0004", true, 331, 331);
        StringWriter stringWriter0 = new StringWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 3600000, (Chronology) islamicChronology0, 3600000, dateTimeZone0, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test159199() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 117, 117);
        StringWriter stringWriter0 = new StringWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 1, (Chronology) islamicChronology0, 1, dateTimeZone0, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test159200() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 117, 117);
        StringWriter stringWriter0 = new StringWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 1, (Chronology) islamicChronology0, 1, dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test160201() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("/k2x~(?3", "Id must not be null", true, 1, 3);
        StringWriter stringWriter0 = new StringWriter(1);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 1, (Chronology) islamicChronology0, 1, dateTimeZone0, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test161202() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 119, 119);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        dateTimeFormatter0.parseMutableDateTime(" interval]");
    }

    @Test(timeout = 4000)
    public void test162203() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 139, 139);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test162204() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 139, 139);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test163205() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.field.SkipDateTimeField", "", false, 1, 10);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        MutableDateTime.parse("-S", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test164206() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("BE", "", false, 1, 10);
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(817, copticChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "^L^(g;mNcDNh+c7y6", 12);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test164207() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("BE", "", false, 1, 10);
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(817, copticChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "^L^(g;mNcDNh+c7y6", 12);
    }

    @Test(timeout = 4000)
    public void test164208() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("BE", "", false, 1, 10);
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(817, copticChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "^L^(g;mNcDNh+c7y6", 12);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test165209() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Universal", "Universal", false, 1, 51);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("Universal");
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test165210() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Universal", "Universal", false, 1, 51);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("Universal");
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test166211() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("T0", "T0", false, 1, 4);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto((DateTimeParserBucket) null, ">>BfB{XBAcXA*4x\"a", 4);
    }

    @Test(timeout = 4000)
    public void test166212() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("T0", "T0", false, 1, 4);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto((DateTimeParserBucket) null, ">>BfB{XBAcXA*4x\"a", 4);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test167213() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-292269054), "-0wqQn}G[nLPg|cb");
        DateTimeZone.forTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test168214() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, false, 7, 7);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.CANADA;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(7, ethiopicChronology0, locale0, (Integer) 1, 7);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "2014-02-14", 7);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test168215() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, false, 7, 7);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.CANADA;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(7, ethiopicChronology0, locale0, (Integer) 1, 7);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "2014-02-14", 7);
    }

    @Test(timeout = 4000)
    public void test169216() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, 4, 4);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.GERMANY;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, ethiopicChronology0, locale0, (Integer) 1, 4);
        dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "2014-02-14", 4);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test169217() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, 4, 4);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.GERMANY;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, ethiopicChronology0, locale0, (Integer) 1, 4);
        dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "2014-02-14", 4);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test170218() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("D< N", "D< N", true, 1, 1);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        MutableDateTime.parse("+$?OH]L%J", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test171219() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(0);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTime dateTime0 = new DateTime((long) 1);
        DateTime dateTime1 = dateTime0.withWeekyear((-322));
        MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-322));
        LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, dateTime1, mutableDateTime0);
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) (-322), (Chronology) limitChronology0, 3324, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test171220() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(0);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTime dateTime0 = new DateTime((long) 1);
        DateTime dateTime1 = dateTime0.withWeekyear((-322));
        MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-322));
        LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, dateTime1, mutableDateTime0);
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) (-322), (Chronology) limitChronology0, 3324, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test172221() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.chrono.BasicMonthOfYearDateTimeField");
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, (Map<String, DateTimeZone>) null);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 0, (Chronology) buddhistChronology0, 4, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test172222() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.chrono.BasicMonthOfYearDateTimeField");
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, (Map<String, DateTimeZone>) null);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 0, (Chronology) buddhistChronology0, 4, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test173223() throws Throwable {
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1892, hashMap0);
        dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0;
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test174224() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendTwoDigitWeekyear((-1433));
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test175225() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(745, hashMap0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        hashMap0.put("", dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(361L, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 3322);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "en", 1);
    }

    @Test(timeout = 4000)
    public void test175226() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(745, hashMap0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        hashMap0.put("", dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(361L, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 3322);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "en", 1);
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test176227() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        hashMap0.put("No parser supplied", dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(745, hashMap0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(361L, islamicChronology0, locale0, (Integer) 1, 3322);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "en", 1);
    }

    @Test(timeout = 4000)
    public void test176228() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        hashMap0.put("No parser supplied", dateTimeZone0);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(745, hashMap0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(361L, islamicChronology0, locale0, (Integer) 1, 3322);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "en", 1);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test177229() throws Throwable {
        Locale locale0 = Locale.ITALY;
        StringBuffer stringBuffer0 = new StringBuffer(58);
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-780L), (Chronology) null, (-369), (DateTimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test178230() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_Composite0);
        DateTime dateTime0 = DateTime.now();
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test178231() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_Composite0);
        DateTime dateTime0 = DateTime.now();
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
        dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test178232() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_Composite0);
        DateTime dateTime0 = DateTime.now();
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test179233() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zh");
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) bufferedWriter0, 60000L, (Chronology) buddhistChronology0, 1, (DateTimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test180234() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        Locale locale0 = Locale.US;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("83AT=%StpdP");
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockPrintWriter0, (-1092L), (Chronology) islamicChronology0, 1, dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test180235() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        Locale locale0 = Locale.US;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("83AT=%StpdP");
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockPrintWriter0, (-1092L), (Chronology) islamicChronology0, 1, dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test181236() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        MutableDateTime.parse("]\"IDF", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test182237() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeFormatterBuilder_TimeZoneIdArray0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1286L), islamicChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "W-SU^~Sim]`>\u0002kb?9TGT", 0);
    }

    @Test(timeout = 4000)
    public void test182238() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeFormatterBuilder_TimeZoneIdArray0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1286L), islamicChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "W-SU^~Sim]`>\u0002kb?9TGT", 0);
        dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test183239() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.CANADA;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, 1314127872L, (Chronology) ethiopicChronology0, 623191204, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test184240() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_Composite0.printTo((Writer) charArrayWriter0, (long) 9, (Chronology) null, 9, (DateTimeZone) fixedDateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test185241() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(972);
        Locale locale0 = Locale.CANADA;
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
    }

    @Test(timeout = 4000)
    public void test186242() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        LocalTime localTime0 = LocalTime.now();
        dateTimeFormatterBuilder_Composite0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
    }

    @Test(timeout = 4000)
    public void test187243() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_Composite0);
        dateTimeFormatter0.parseMutableDateTime("AxFL_S");
    }

    @Test(timeout = 4000)
    public void test188244() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
        dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test188245() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
        dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test188246() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
        dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    }
}
