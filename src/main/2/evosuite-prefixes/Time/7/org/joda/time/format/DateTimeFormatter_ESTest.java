/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:59:42 GMT 2024
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+", "+", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        dateTimeFormatter0.getChronology();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+", "+", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        dateTimeFormatter0.getChronology();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("9");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        YearMonth yearMonth0 = YearMonth.parse("9", dateTimeFormatter0);
        dateTimeFormatter0.print((ReadablePartial) yearMonth0);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("9");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        YearMonth yearMonth0 = YearMonth.parse("9", dateTimeFormatter0);
        dateTimeFormatter0.print((ReadablePartial) yearMonth0);
        yearMonth0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("9");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        YearMonth yearMonth0 = YearMonth.parse("9", dateTimeFormatter0);
        dateTimeFormatter0.print((ReadablePartial) yearMonth0);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        LocalDateTime.parse("0ck");
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) 10);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) 10);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(10);
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(10);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(10);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("S%t)LY");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Locale locale0 = new Locale("", "", "");
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        Locale locale1 = Locale.ROOT;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
        dateTimeFormatter2.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Locale locale0 = new Locale("", "", "");
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        Locale locale1 = Locale.ROOT;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Locale locale0 = new Locale("", "", "");
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        Locale locale1 = Locale.ROOT;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
        dateTimeFormatter2.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("v?&OgNF.[");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2147483573);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 4);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("v?&OgNF.[");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2147483573);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 4);
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("v?&OgNF.[");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2147483573);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 4);
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("v?&OgNF.[");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2147483573);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 4);
        dateTimeFormatter1.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1H=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1H=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test0922() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`~6eAIH..,-\"Kz");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.printTo((Appendable) null, 211L);
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        int int0 = dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        int int0 = dateTimeFormatter0.getDefaultYear();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) mutableDateTime0);
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1841), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.getChronolgy();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1841), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        dateTimeFormatter0.getChronolgy();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1429() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.getPivotYear();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.getPivotYear();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1531() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1532() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test1533() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1634() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1Ha=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1635() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1Ha=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test1636() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1Ha=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1737() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+", "+", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test1738() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+", "+", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isParser();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1739() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+", "+", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isParser();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1840() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1Ha=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isParser();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1841() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1Ha=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test1842() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H=RS1Ha=0B\"'P");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isParser();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1943() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
    }

    @Test(timeout = 4000)
    public void test1944() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1945() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2046() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withLocale((Locale) null);
    }

    @Test(timeout = 4000)
    public void test2047() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withLocale((Locale) null);
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2048() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withLocale((Locale) null);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2149() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tn", 3);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2150() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tn", 3);
    }

    @Test(timeout = 4000)
    public void test2151() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tn", 3);
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2152() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tn", 3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test2153() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tn", 3);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2254() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter2.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2255() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter2.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2256() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2257() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2358() throws Throwable {
        MutableDateTime mutableDateTime0 = null;
        mutableDateTime0 = new MutableDateTime("`E6AIRH..\"Kz");
    }

    @Test(timeout = 4000)
    public void test2459() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2460() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        dateTimeFormatter2.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2461() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    }

    @Test(timeout = 4000)
    public void test2462() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        dateTimeFormatter2.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2563() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("X");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2564() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("X");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
    }

    @Test(timeout = 4000)
    public void test2565() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("X");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2666() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-151));
        Integer integer0 = new Integer((-151));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        dateTimeFormatter2.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2667() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-151));
        Integer integer0 = new Integer((-151));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    }

    @Test(timeout = 4000)
    public void test2669() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-151));
        Integer integer0 = new Integer((-151));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        dateTimeFormatter2.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2770() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n?XP\"|cJkvB6sz1'");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringWriter stringWriter0 = new StringWriter(3506);
        LocalTime localTime0 = new LocalTime();
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2771() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n?XP\"|cJkvB6sz1'");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringWriter stringWriter0 = new StringWriter(3506);
        LocalTime localTime0 = new LocalTime();
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test2872() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(".yL+");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        PipedWriter pipedWriter0 = new PipedWriter();
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test2973() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("?dR;dW'!tld.a;");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "?dR;dW'!tld.a;");
        dateTimeFormatter0.printTo(stringBuffer0, (-9223372036854775808L));
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test2974() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("?dR;dW'!tld.a;");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "?dR;dW'!tld.a;");
        dateTimeFormatter0.printTo(stringBuffer0, (-9223372036854775808L));
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test3075() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("T,6*<n d");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        MockFile mockFile0 = new MockFile("T,6*<n d");
        MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
        dateTimeFormatter0.printTo((Writer) mockFileWriter0, (-9223372036854775808L));
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test3076() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("T,6*<n d");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        MockFile mockFile0 = new MockFile("T,6*<n d");
        MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
        dateTimeFormatter0.printTo((Writer) mockFileWriter0, (-9223372036854775808L));
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test3177() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('z');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatter0.printTo(stringBuffer0, (long) 'z');
    }

    @Test(timeout = 4000)
    public void test3278() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`E6eAIH..i\"Kz");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, "`E6eAIH..i\"Kz", 80);
    }

    @Test(timeout = 4000)
    public void test3379() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 28265635, 28265635);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test3380() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 28265635, 28265635);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 2);
    }

    @Test(timeout = 4000)
    public void test3481() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tn", 3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test3482() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tn", 3);
    }

    @Test(timeout = 4000)
    public void test3583() throws Throwable {
        LocalDateTime localDateTime0 = null;
        localDateTime0 = new LocalDateTime("6{D~s[C8Z$v1'3");
    }

    @Test(timeout = 4000)
    public void test3684() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        long long0 = dateTimeFormatter0.parseMillis("n");
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test3685() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        long long0 = dateTimeFormatter0.parseMillis("n");
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test3686() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        long long0 = dateTimeFormatter0.parseMillis("n");
    }

    @Test(timeout = 4000)
    public void test3787() throws Throwable {
        LocalTime.parse("c");
    }

    @Test(timeout = 4000)
    public void test3888() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("):@FoLjF i2M", "):@FoLjF i2M", false, 28265625, 28265625);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        dateTimeFormatter0.parseLocalDateTime("):@FoLjF i2M");
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test3889() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("):@FoLjF i2M", "):@FoLjF i2M", false, 28265625, 28265625);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        dateTimeFormatter0.parseLocalDateTime("):@FoLjF i2M");
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test3990() throws Throwable {
        DateTime.parse("");
    }

    @Test(timeout = 4000)
    public void test4091() throws Throwable {
        DateTime.parse("1rj%0K4");
    }

    @Test(timeout = 4000)
    public void test4192() throws Throwable {
        DateTime dateTime0 = DateTime.parse("9");
        dateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4293() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.chrono.BasicChronology", "org.joda.time.chrono.BasicChronology", false, 292272992, 292272992);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("org.joda.time.chrono.BasicChronology");
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test4294() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.chrono.BasicChronology", "org.joda.time.chrono.BasicChronology", false, 292272992, 292272992);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("org.joda.time.chrono.BasicChronology");
        dateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test4295() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.chrono.BasicChronology", "org.joda.time.chrono.BasicChronology", false, 292272992, 292272992);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("org.joda.time.chrono.BasicChronology");
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test4296() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.chrono.BasicChronology", "org.joda.time.chrono.BasicChronology", false, 292272992, 292272992);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("org.joda.time.chrono.BasicChronology");
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test4397() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        hashMap0.put("Instant must not be null", (DateTimeZone) null);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-2147483582), hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("Instant must not be null", dateTimeFormatter0);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test4398() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        hashMap0.put("Instant must not be null", (DateTimeZone) null);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-2147483582), hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("Instant must not be null", dateTimeFormatter0);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test4399() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        hashMap0.put("Instant must not be null", (DateTimeZone) null);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-2147483582), hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("Instant must not be null", dateTimeFormatter0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test44100() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Zlytt=NY_T~w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("Zlytt=NY_T~w", dateTimeFormatter1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test44101() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Zlytt=NY_T~w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("Zlytt=NY_T~w", dateTimeFormatter1);
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test44102() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Zlytt=NY_T~w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("Zlytt=NY_T~w", dateTimeFormatter1);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test44103() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Zlytt=NY_T~w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("Zlytt=NY_T~w", dateTimeFormatter1);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test45104() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        dateTimeFormatter0.parseMutableDateTime("MeH@.-#v=zQx");
    }

    @Test(timeout = 4000)
    public void test46105() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.parseMutableDateTime("org.joda.time.base.BasePartial");
    }

    @Test(timeout = 4000)
    public void test47106() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "`u&Dg;V@q.9i.", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("`u&Dg;V@q.9i.");
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test47107() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "`u&Dg;V@q.9i.", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("`u&Dg;V@q.9i.");
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test47108() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "`u&Dg;V@q.9i.", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("`u&Dg;V@q.9i.");
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test47109() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "`u&Dg;V@q.9i.", false, 2254, 2254);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("`u&Dg;V@q.9i.");
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test48110() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test48111() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        dateTimeFormatter1.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test48112() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test48113() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("tn");
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test49114() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("tn");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
        dateTimeFormatter0.parseMutableDateTime("tn");
    }
}
