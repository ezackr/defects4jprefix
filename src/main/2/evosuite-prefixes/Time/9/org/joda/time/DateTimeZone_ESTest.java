/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 04:05:18 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(271);
        String string0 = dateTimeZone0.getShortName((long) 271);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) DateTimeZone.getDefault();
        Object object0 = ((DateTimeZone) cachedDateTimeZone0).writeReplace();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateTimeZone.forID("-America/New_York");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        String string0 = dateTimeZone0.getName((long) 2);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        String string0 = fixedDateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Set<String> set0 = DateTimeZone.getAvailableIDs();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Provider provider0 = DateTimeZone.getProvider();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        int int0 = dateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone.setDefault(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        DateTimeZone.setDefault((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        long long0 = dateTimeZone0.adjustOffset((-9223372036854775805L), true);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.043");
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.043");
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(0, 91);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes((-530), (-530));
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-4));
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        TimeZone timeZone0 = TimeZone.getTimeZone("ACT");
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone1.toString();
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1024, "DateTimeZone.setProvider");
        DateTimeZone.forTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        DateTimeZone.setProvider((Provider) null);
    }

    @Test(timeout = 4000)
    public void test2933() throws Throwable {
        DateTimeZone.setNameProvider((NameProvider) null);
    }

    @Test(timeout = 4000)
    public void test3034() throws Throwable {
        DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
        DateTimeZone.setNameProvider(defaultNameProvider0);
    }

    @Test(timeout = 4000)
    public void test3135() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test3236() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Locale locale0 = Locale.GERMANY;
        String string0 = fixedDateTimeZone0.getShortName((-1197L), locale0);
    }

    @Test(timeout = 4000)
    public void test3338() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = dateTimeZone0.getName((long) 578, locale0);
    }

    @Test(timeout = 4000)
    public void test3439() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        String string0 = fixedDateTimeZone0.getName(2147483647L);
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.UTC.getOffset((ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test3642() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isStandardOffset(21260793599979L);
    }

    @Test(timeout = 4000)
    public void test3743() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-7));
        boolean boolean0 = dateTimeZone0.isStandardOffset((-7));
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-7));
        boolean boolean0 = dateTimeZone0.isStandardOffset((-7));
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test3845() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(21243895199999L);
    }

    @Test(timeout = 4000)
    public void test3946() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test4047() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Addis_Ababa");
        int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775787L));
    }

    @Test(timeout = 4000)
    public void test4148() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Harare");
        int int0 = dateTimeZone0.getOffsetFromLocal((-2334101314000L));
    }

    @Test(timeout = 4000)
    public void test4249() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Addis_Ababa");
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test4350() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Addis_Ababa");
        int int0 = dateTimeZone0.getOffsetFromLocal(674L);
    }

    @Test(timeout = 4000)
    public void test4451() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test4552() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertUTCToLocal((-9223372036854775788L));
    }

    @Test(timeout = 4000)
    public void test4653() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((long) 577);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test4754() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true, 9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test4855() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-7));
        long long0 = dateTimeZone0.convertLocalToUTC((long) (-7), false);
    }

    @Test(timeout = 4000)
    public void test4856() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-7));
        long long0 = dateTimeZone0.convertLocalToUTC((long) (-7), false);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test4957() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
    }

    @Test(timeout = 4000)
    public void test5058() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        long long0 = fixedDateTimeZone0.convertLocalToUTC(3599999L, true);
    }

    @Test(timeout = 4000)
    public void test5159() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-1616L));
    }

    @Test(timeout = 4000)
    public void test5260() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.adjustOffset(9223372036854775773L, true);
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        long long0 = fixedDateTimeZone0.adjustOffset((-1533L), true);
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.adjustOffset((-2717639999965L), false);
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.adjustOffset((-2717640000016L), true);
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.adjustOffset((-2717639999965L), true);
    }

    @Test(timeout = 4000)
    public void test5866() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.adjustOffset((-2717640000016L), false);
    }
}
