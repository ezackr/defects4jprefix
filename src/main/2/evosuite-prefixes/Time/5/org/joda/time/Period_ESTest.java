/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:54:02 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Period_ESTest extends Period_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(82, 82, 82);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.ZERO.withDays(2352);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        YearMonth yearMonth0 = new YearMonth();
        Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
        period0.withMinutes((-5430));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 2434, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.minusMillis(2434);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        LocalTime localTime0 = LocalTime.now();
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.ZERO.withHours((-1241));
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Period period0 = Period.years(0);
        Period period1 = period0.withWeeks(0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(82, 82, 82);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.withSeconds(82);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Period period0 = Period.years(0);
        PeriodType periodType0 = PeriodType.yearWeekDay();
        Period period1 = period0.ZERO.withPeriodType(periodType0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 2434, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.negated();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        YearMonth yearMonth0 = YearMonth.now();
        Period period0 = new Period(yearMonth0, yearMonth0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Period period0 = new Period((Object) null, gJChronology0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Period period0 = Period.weeks(1);
        Period period1 = period0.minusYears((-276));
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        PeriodType periodType0 = PeriodType.standard();
        Period period0 = new Period((-2095), 125, (-664), (-664), (-2095), (-2095), (-664), 87, periodType0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(69, 69, 69);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Days days0 = period0.ZERO.toStandardDays();
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Period period0 = Period.years(0);
        Period period1 = period0.minusMonths(0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Period period0 = new Period((-548L));
        Integer integer0 = new Integer(0);
        Period period1 = period0.withMillis((int) integer0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Period period0 = new Period(0L, 0L, gJChronology0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        LocalTime localTime0 = new LocalTime();
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.toPeriod();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.normalizedStandard();
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Period period0 = Period.minutes(0);
        Hours hours0 = period0.ZERO.toStandardHours();
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Period period0 = Period.millis(1);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Period period0 = new Period(14, 14, 14, 14, 14, 14, 14, 14);
        period0.toStandardDuration();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        PeriodType periodType0 = PeriodType.yearMonthDay();
        Period period0 = new Period((long) 0, periodType0);
        period0.minusHours(49);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Period.parse((String) null);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Period period0 = new Period((-548L));
        Duration duration0 = period0.toDurationTo((ReadableInstant) null);
        Period period1 = duration0.toPeriodTo((ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Period period0 = Period.hours(0);
        Period period1 = period0.plusMillis(0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(82, 82, 82);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.minusMinutes(0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 58, 6);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Weeks weeks0 = period0.ZERO.toStandardWeeks();
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Period period0 = new Period(3L, 1);
        Period period1 = period0.minusWeeks(0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0, (Chronology) islamicChronology0);
        MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, mutableDateTime0);
        Period period0 = mutablePeriod0.toPeriod();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        PeriodType periodType0 = PeriodType.yearWeekDay();
        Period period0 = new Period(localTime0, localTime0, periodType0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        Period period0 = Period.days((-1482));
        Period period1 = period0.withFieldAdded(durationFieldType0, 855);
        Period period2 = period1.normalizedStandard((PeriodType) null);
        period2.equals((Object) period1);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
        Period period0 = new Period(mutableDateTime0, duration0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        PeriodType periodType0 = PeriodType.yearWeekDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Period period0 = null;
        period0 = new Period("Duration", periodType0, ethiopicChronology0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Period period0 = Period.years(82);
        period0.toStandardMinutes();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        Period period0 = new Period(279L, (Chronology) julianChronology0);
        Period period1 = period0.withPeriodType((PeriodType) null);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Days days0 = Days.SEVEN;
        Minutes minutes0 = days0.toStandardMinutes();
        Duration duration0 = minutes0.toStandardDuration();
        MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0);
        DateTime dateTime0 = mutableDateTime0.toDateTime();
        PeriodType periodType0 = PeriodType.yearWeekDay();
        Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Period period0 = Period.months(0);
        DurationFieldType durationFieldType0 = DurationFieldType.minutes();
        Period period1 = period0.withField(durationFieldType0, 901);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Months months0 = Months.ELEVEN;
        PeriodType periodType0 = months0.getPeriodType();
        Period period0 = new Period((-1988L), (-1988L), periodType0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 2434, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Duration duration0 = period0.toStandardDuration();
        duration0.getStandardSeconds();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        PeriodType periodType0 = PeriodType.time();
        JulianChronology julianChronology0 = JulianChronology.getInstance();
        Period period0 = new Period((-1L), (-1L), periodType0, julianChronology0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        PeriodType periodType0 = PeriodType.yearWeekDay();
        Duration duration0 = Duration.standardHours((-1342L));
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(543).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
        Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0, periodType0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Period period0 = new Period(0, 0, 1, 1);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        YearMonth yearMonth0 = new YearMonth();
        Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
        Period period1 = period0.ZERO.minusDays(1);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 2434, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Seconds seconds0 = period0.toStandardSeconds();
        seconds0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        YearMonth yearMonth0 = new YearMonth();
        Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
        Period period1 = period0.ZERO.minusWeeks(1);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Period period0 = Period.years(0);
        Period period1 = period0.minusSeconds(0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Interval interval0 = new Interval((Object) null);
        DateTime dateTime0 = interval0.getEnd();
        Period period0 = new Period(dateTime0, dateTime0, (PeriodType) null);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(352831696, 352831696, 352831696);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period.fieldDifference(localTime0, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        YearMonth yearMonth0 = new YearMonth();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2504), 0);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period.fieldDifference(localTime0, yearMonth0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 2434, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        LocalDateTime localDateTime0 = new LocalDateTime(mockGregorianCalendar0, (Chronology) null);
        Period.fieldDifference(localDateTime0, localTime0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        int[] intArray0 = new int[9];
        Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
        Period.fieldDifference(partial0, partial0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        LocalTime localTime0 = LocalTime.now();
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.withFields(period0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        LocalTime localTime0 = LocalTime.now();
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.withFields((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 58, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        period0.ZERO.withField((DurationFieldType) null, 407);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        period0.withFieldAdded((DurationFieldType) null, 82);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Period period0 = Period.seconds(0);
        DurationFieldType durationFieldType0 = DurationFieldType.years();
        Period period1 = period0.withFieldAdded(durationFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        YearMonth yearMonth0 = new YearMonth();
        Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
        Months months0 = Months.ZERO;
        Period period1 = period0.plus(months0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 2434, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.ZERO.plus((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Period period0 = Period.years(0);
        Period period1 = period0.ZERO.plusYears(0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        Period period0 = Period.years(0);
        Period period1 = period0.plusDays(0);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        Period period0 = Period.years(0);
        Period period1 = period0.ZERO.plusHours(0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        YearMonth yearMonth0 = new YearMonth();
        Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
        period0.minusMinutes(973);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(69, 69, 69);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.ZERO.plusSeconds(69);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 2434, 58);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.minus(period0);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        Period period0 = Period.years(1);
        Period period1 = period0.minus((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.ZERO.multipliedBy(2141);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2504), 0);
        LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        Period period1 = period0.multipliedBy(1);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        DurationFieldType durationFieldType0 = DurationFieldType.years();
        Days days0 = Days.FIVE;
        Duration duration0 = days0.toStandardDuration();
        Period period0 = duration0.toPeriod();
        Period period1 = period0.withFieldAdded(durationFieldType0, 2042);
        Period period2 = period1.normalizedStandard((PeriodType) null);
        period2.equals((Object) period1);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        Period period0 = new Period((-548L));
        Period period1 = period0.plusMonths(6);
        Period period2 = period1.normalizedStandard();
    }

    @Test(timeout = 4000)
    public void test7071() throws Throwable {
        Period period0 = new Period((-548L));
        Period period1 = period0.plusMonths(6);
        Period period2 = period1.normalizedStandard();
        period2.equals((Object) period1);
    }
}
