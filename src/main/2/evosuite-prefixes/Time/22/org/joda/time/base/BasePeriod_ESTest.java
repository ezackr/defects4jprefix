/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:21:38 GMT 2024
 */
package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.BuddhistChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasePeriod_ESTest extends BasePeriod_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Duration duration0 = new Duration(2349L);
        DateTime dateTime0 = new DateTime();
        Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0);
        period0.size();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
        mutablePeriod0.setValue(668, 668);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Instant instant0 = new Instant();
        Duration duration0 = Duration.ZERO;
        Period period0 = new Period(duration0, instant0);
        period0.size();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        Instant instant0 = new Instant();
        Duration duration0 = mutablePeriod0.toDurationTo(instant0);
        duration0.getStandardSeconds();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.setHours((-114));
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PeriodType periodType0 = PeriodType.dayTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod(1649L, 1649L, periodType0);
        mutablePeriod0.add((ReadablePeriod) null);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Period period0 = new Period((-3L));
        period0.size();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DateTime dateTime0 = new DateTime();
        Period period0 = new Period();
        Duration duration0 = period0.toDurationFrom(dateTime0);
        duration0.getStandardMinutes();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        mutablePeriod0.addHours(77);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod(2794, 2794, 2794, 2794);
        mutablePeriod0.setPeriod(2794, 2794, 2794, 2794, 2794, 2794, 2794, 2794);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Period period0 = Period.years((-955));
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        period0.withFieldAdded(durationFieldType0, (-955));
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        DateTime dateTime0 = new DateTime();
        Period period0 = new Period(dateTime0, dateTime0);
        period0.size();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(85);
        DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
        MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, dateTime0);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = null;
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        LocalTime localTime0 = new LocalTime(2509L, dateTimeZone0);
        Period period0 = new Period(localTime0, localTime0);
        period0.size();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
        GregorianCalendar gregorianCalendar0 = dateMidnight0.toGregorianCalendar();
        TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(gregorianCalendar0);
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = null;
        period0 = new Period(timeOfDay0, (ReadablePartial) null, periodType0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = new Period(timeOfDay0, timeOfDay0, periodType0);
        period0.size();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = null;
        period0 = new Period(localDateTime0, timeOfDay0, periodType0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        PeriodType periodType0 = PeriodType.yearDay();
        LocalDate localDate0 = new LocalDate();
        Period period0 = null;
        period0 = new Period(localDateTime0, localDate0, periodType0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Period period0 = null;
        period0 = new Period("!r!y`1b\"4Bw");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        PeriodType periodType0 = PeriodType.yearDayTime();
        MutablePeriod mutablePeriod0 = null;
        mutablePeriod0 = new MutablePeriod(3, 0, 2, 0, 1, 2, 1, 0, periodType0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Period period0 = Period.millis(2760);
        MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        PeriodType periodType0 = PeriodType.days();
        MutablePeriod mutablePeriod0 = new MutablePeriod(340L, periodType0);
        mutablePeriod0.setMinutes((-2672));
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Days days0 = Days.FIVE;
        MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
        mutablePeriod0.set((DurationFieldType) null, 0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        PeriodType periodType0 = PeriodType.millis();
        MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
        mutablePeriod0.setMonths(0);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        PeriodType periodType0 = PeriodType.yearDayTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
        mutablePeriod0.add((DurationFieldType) null, 0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        mutablePeriod0.add(durationFieldType0, 0);
        durationFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        PeriodType periodType0 = PeriodType.yearDayTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
        mutablePeriod0.mergePeriod((ReadablePeriod) null);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L);
        mutablePeriod0.mergePeriod(mutablePeriod0);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        PeriodType periodType0 = PeriodType.dayTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod(1649L, 1649L, periodType0);
        mutablePeriod0.add(1649L);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        PeriodType periodType0 = PeriodType.dayTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod(1649L, 1649L, periodType0);
        Months months0 = Months.TWO;
        mutablePeriod0.add((ReadablePeriod) months0);
    }
}
