/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 04:28:44 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
        localDateTime_Property0.roundHalfFloorCopy();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        localDateTime0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        LocalDateTime.parse("");
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((-638L), (DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
        localDateTime_Property0.roundCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.year();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime localDateTime1 = new LocalDateTime(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusHours((-2712));
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
        localDateTime_Property0.withMinimumValue();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
        localDateTime_Property0.withMaximumValue();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
        localDateTime_Property0.addWrapFieldToCopy((-2381));
        localDateTime_Property0.getLocalDateTime();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusYears((-3095));
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        IslamicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime.fromCalendarFields(calendar0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
        localDateTime_Property0.addToCopy(878);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
        localDateTime0.withFieldAdded(durationFieldType0, 4764);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        DurationFieldType durationFieldType0 = DurationFieldType.days();
        localDateTime0.withFieldAdded(durationFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusMillis(2344);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withSecondOfMinute((-2704));
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        localDateTime0.equals(ethiopicChronology0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusSeconds((-2712));
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withMillisOfSecond((-2147382925));
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfWeek(12);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withMonthOfYear(1926);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getYearOfCentury();
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDateTime.now(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        YearMonth yearMonth0 = YearMonth.now();
        localDateTime0.isAfter(yearMonth0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getCenturyOfEra();
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withDayOfMonth(13);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.weekOfWeekyear();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withYear(0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusHours(0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusMinutes(0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withWeekyear((-739));
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusYears(3);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        localDateTime0.withField(dateTimeFieldType0, 183);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getMillisOfDay();
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusMinutes((-460));
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDate((-1988), (-1988), (-1988));
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusMillis(0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusMonths(2913);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        IslamicChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusMillis(0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDateTime localDateTime0 = null;
        localDateTime0 = new LocalDateTime(gregorianChronology0, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
        localDateTime_Property0.roundHalfEvenCopy();
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusDays(0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.yearOfCentury();
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.secondOfMinute();
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusMonths(0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plus((ReadableDuration) null);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minus((ReadableDuration) null);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withTime(153, 153, 153, 153);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getField(14);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getDayOfYear();
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Years years0 = Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
        localDateTime0.minus((ReadablePeriod) years0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withFields(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withHourOfDay((-956));
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.dayOfWeek();
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Locale locale0 = Locale.CANADA_FRENCH;
        localDateTime0.toString("' is not supported", locale0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
        localDateTime0.plus((ReadablePeriod) weeks0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Duration duration0 = Duration.ZERO;
        localDateTime0.minus((ReadableDuration) duration0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LocalDateTime.now((Chronology) islamicChronology0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusDays((-2442));
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusHours(840);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.millisOfSecond();
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getWeekyear();
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withYearOfEra(0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getValues();
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withEra((-1581));
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getValue(2158);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.weekyear();
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusDays((-892));
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withMillisOfDay((-2704));
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusMonths(2147483646);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withWeekOfWeekyear((-25));
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withYearOfCentury(2636);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toDateTime();
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
        localDateTime_Property0.addToCopy((-1259L));
        DateTimeFieldType.weekOfWeekyear();
        DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withCenturyOfEra(1575);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.equals(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.toLocalDate();
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withMinuteOfHour((-509));
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.yearOfEra();
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusMinutes(12);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.toLocalTime();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
        localDateTime_Property0.setCopy("Invalid index: ");
        localDateTime_Property0.getLeapAmount();
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusSeconds(2913);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getYearOfEra();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusMillis((-655));
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        LocalDateTime.now((DateTimeZone) null);
        DateTimeFieldType.minuteOfHour();
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusYears(0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusWeeks((-1));
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((-195112582718680L));
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.dayOfMonth();
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusHours(0);
        localDateTime0.yearOfCentury();
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.toString();
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusSeconds(0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Locale locale0 = Locale.FRANCE;
        localDateTime0.toString((String) null, locale0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusYears(0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.property((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
        localDateTime_Property0.roundFloorCopy();
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.toString("Invalid index: ");
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.monthOfYear();
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusWeeks(12);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        localDateTime0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime(1863L);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
        localDateTime0.withPeriodAdded(days0, 0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfYear(869);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withField((DateTimeFieldType) null, (-299));
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusMinutes(0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
        localDateTime_Property0.roundHalfCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        localDateTime0.minusMonths(0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        localDateTime0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minuteOfHour();
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.getChronology();
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.get((DateTimeFieldType) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minus((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
        localDateTime_Property0.getLocalDateTime();
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getWeekOfWeekyear();
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusSeconds(0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusWeeks(0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusWeeks(0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        LocalDateTime.now((Chronology) null);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Duration duration0 = Duration.standardSeconds(0);
        localDateTime0.withDurationAdded(duration0, 0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.isSupported((DurationFieldType) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        DurationFieldType.weeks();
        localDateTime0.compareTo((ReadablePartial) localDateTime0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getEra();
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toString((String) null);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusDays(0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.minusMonths(1);
        localDateTime1.isAfter(localDateTime0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withFieldAdded((DurationFieldType) null, 1863);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withFields((ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        LocalDateTime.fromDateFields((Date) null);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.isSupported((DateTimeFieldType) null);
    }
}
