/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:08:49 GMT 2024
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Base64_ESTest extends Base64_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        boolean boolean0 = Base64.isBase64("6qMH{Y|@0C@S3y#6");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        Base64 base64_0 = new Base64();
        String string0 = base64_0.encodeToString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        Base64 base64_0 = new Base64();
        String string0 = base64_0.encodeToString(byteArray0);
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        byte[] byteArray0 = new byte[32];
        String string0 = Base64.encodeBase64String(byteArray0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        byte[] byteArray0 = new byte[34];
        byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        byte[] byteArray1 = Base64.encodeBase64(byteArray0);
        byte[] byteArray2 = Base64.decodeBase64(byteArray1);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        Base64 base64_0 = new Base64((-1751), (byte[]) null);
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("tn10aPR|3r_OkQF");
        Base64 base64_0 = null;
        base64_0 = new Base64((-677), byteArray0);
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        Base64 base64_0 = new Base64();
        boolean boolean0 = base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        Base64 base64_0 = new Base64(true);
        boolean boolean0 = base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        Base64 base64_0 = new Base64(false);
        boolean boolean0 = base64_0.hasData();
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        Base64 base64_0 = new Base64(false);
        boolean boolean0 = base64_0.hasData();
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(921, byteArray0, false);
        base64_0.encode(byteArray0, 921, (-473));
        boolean boolean0 = base64_0.hasData();
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(921, byteArray0, false);
        base64_0.encode(byteArray0, 921, (-473));
        boolean boolean0 = base64_0.hasData();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        Base64 base64_0 = new Base64();
        base64_0.avail();
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        byte[] byteArray0 = new byte[34];
        Base64 base64_0 = new Base64((byte) 7, byteArray0, true);
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
        byte[] byteArray2 = base64_0.encode(byteArray1);
        byte[] byteArray3 = base64_0.encode(byteArray2);
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(921, byteArray0, false);
        int int0 = base64_0.readResults(byteArray0, (byte) 4, 92);
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(921, byteArray0, false);
        int int0 = base64_0.readResults(byteArray0, (byte) 4, 92);
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        Base64 base64_0 = new Base64(1, byteArray0);
        byte[] byteArray1 = base64_0.encode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        Base64 base64_0 = new Base64(1, byteArray0);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        int int0 = base64_0.readResults(byteArray0, 378, 378);
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        byte[] byteArray0 = new byte[34];
        Base64 base64_0 = new Base64((byte) 7, byteArray0, true);
        byte[] byteArray1 = base64_0.decode("0]1nlLL<g ");
    }

    @Test(timeout = 4000)
    public void test1829() throws Throwable {
        byte[] byteArray0 = new byte[34];
        Base64 base64_0 = new Base64((byte) 7, byteArray0, true);
        byte[] byteArray1 = base64_0.decode("0]1nlLL<g ");
        base64_0.encode(byteArray0, (int) (byte) 7, (int) (byte) 7);
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test1930() throws Throwable {
        byte[] byteArray0 = new byte[38];
        Base64 base64_0 = new Base64((byte) 6, byteArray0, false);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        byte[] byteArray2 = base64_0.encode(byteArray1);
        Base64.encodeBase64URLSafeString(byteArray2);
    }

    @Test(timeout = 4000)
    public void test1931() throws Throwable {
        byte[] byteArray0 = new byte[38];
        Base64 base64_0 = new Base64((byte) 6, byteArray0, false);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        byte[] byteArray2 = base64_0.encode(byteArray1);
        Base64.encodeBase64URLSafeString(byteArray2);
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test2032() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("KKF_@eQmSb5moH_bdHa");
        Base64 base64_0 = new Base64();
        byte[] byteArray1 = base64_0.encode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2237() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64 base64_0 = new Base64((-3500), byteArray0);
        Object object0 = base64_0.decode((Object) "UTF-8");
        base64_0.encode(object0);
    }

    @Test(timeout = 4000)
    public void test2338() throws Throwable {
        Base64 base64_0 = new Base64(false);
        Object object0 = base64_0.decode((Object) "pmv((vq# ]");
        base64_0.decode(object0);
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        Base64 base64_0 = new Base64();
        base64_0.decode((Object) base64_0);
    }

    @Test(timeout = 4000)
    public void test2540() throws Throwable {
        Base64.decodeInteger((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        Base64.decodeBase64("");
    }

    @Test(timeout = 4000)
    public void test2742() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true);
    }

    @Test(timeout = 4000)
    public void test2843() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        Base64.encodeBase64(byteArray0, false, true, (-650));
    }

    @Test(timeout = 4000)
    public void test2944() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("KKF_@eQmSb5moH_bdHa");
        Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3045() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3147() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3250() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 9;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3351() throws Throwable {
        boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
    }

    @Test(timeout = 4000)
    public void test3452() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Base64 base64_0 = new Base64(true);
        base64_0.encode((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test3553() throws Throwable {
        Base64 base64_0 = new Base64(true);
        byte[] byteArray0 = base64_0.encode((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test3554() throws Throwable {
        Base64 base64_0 = new Base64(true);
        byte[] byteArray0 = base64_0.encode((byte[]) null);
        base64_0.isUrlSafe();
    }

    @Test(timeout = 4000)
    public void test3655() throws Throwable {
        byte[] byteArray0 = new byte[57];
        String string0 = Base64.encodeBase64URLSafeString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3756() throws Throwable {
        Base64.encodeInteger((BigInteger) null);
    }
}
