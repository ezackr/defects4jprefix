/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:41:37 GMT 2024
 */
package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        StringReader stringReader0 = new StringReader("^A?_dLDs!\"8d/6>I$");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.isLenient();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        StringReader stringReader0 = new StringReader("Expected a long but was ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.toString();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        StringReader stringReader0 = new StringReader("Expected a long but was ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.toString();
        assertEquals("JsonReader at line 1 column 1", string0);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        StringReader stringReader0 = new StringReader("com.google.gson.stream.MalformedJsonException");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.close();
        String string0 = jsonReader0.getPath();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        StringReader stringReader0 = new StringReader("com.google.gson.stream.MalformedJsonException");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.close();
        String string0 = jsonReader0.getPath();
        assertEquals("$", string0);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        JsonReader jsonReader0 = null;
        try {
            jsonReader0 = new JsonReader((Reader) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // in == null
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        StringReader stringReader0 = new StringReader("]gg7Tf4VpE\"b");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 3;
        jsonReader0.beginArray();
        boolean boolean0 = jsonReader0.hasNext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        StringReader stringReader0 = new StringReader("[#{Ll-Z BN,ykp");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginArray();
        String string0 = jsonReader0.getPath();
        assertEquals("$[0]", string0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        StringReader stringReader0 = new StringReader("\"!");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.beginArray();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected BEGIN_ARRAY but was STRING at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        StringReader stringReader0 = new StringReader("Ka];\"jLp");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 4;
        // Undeclared exception!
        try {
            jsonReader0.endArray();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        StringReader stringReader0 = new StringReader("=URhGj5TC{");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.endArray();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        StringReader stringReader0 = new StringReader("{^eu\";_yDoh;&uT ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.endArray();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected END_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        StringReader stringReader0 = new StringReader("true");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.hasNext();
        // Undeclared exception!
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected BEGIN_OBJECT but was BOOLEAN at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        StringReader stringReader0 = new StringReader("{}@ePfOk{ecn,");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected an int but was END_OBJECT at line 1 column 3 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        StringReader stringReader0 = new StringReader("\"!");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.doPeek();
        // Undeclared exception!
        try {
            jsonReader0.endObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected END_OBJECT but was STRING at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        StringReader stringReader0 = new StringReader("{^eu\"_yDoh&T ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 2;
        // Undeclared exception!
        try {
            jsonReader0.endObject();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        StringReader stringReader0 = new StringReader("i3Z3]E");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 2;
        boolean boolean0 = jsonReader0.hasNext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        StringReader stringReader0 = new StringReader("i3Z3]E");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 2;
        boolean boolean0 = jsonReader0.hasNext();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        StringReader stringReader0 = new StringReader("]gg7Tf4VpE\"b");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 3;
        jsonReader0.beginArray();
        // Undeclared exception!
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a name but was END_ARRAY at line 1 column 2 path $[0]
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        StringReader stringReader0 = new StringReader("false");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a name but was BOOLEAN at line 1 column 6 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        StringReader stringReader0 = new StringReader("Expected ':'");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        // Undeclared exception!
        try {
            jsonReader0.endObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected END_OBJECT but was STRING at line 1 column 11 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        StringReader stringReader0 = new StringReader("e?Kbp");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        StringReader stringReader0 = new StringReader("");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 11;
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected an int but was STRING at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        StringReader stringReader0 = new StringReader("");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 12;
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected an int but was NAME at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        StringReader stringReader0 = new StringReader("5P");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 13;
        // Undeclared exception!
        try {
            jsonReader0.endArray();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected END_ARRAY but was NAME at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        StringReader stringReader0 = new StringReader("m|PJ^|ce@[XTvn1");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 14;
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a double but was NAME at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        StringReader stringReader0 = new StringReader("7 5O1I*=tvOW,}/u");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 11;
        jsonReader0.nextString();
        // Undeclared exception!
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a name but was NUMBER at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextBoolean();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a boolean but was NUMBER at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02528() throws Throwable {
        StringReader stringReader0 = new StringReader("true");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.nextBoolean();
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected an int but was END_DOCUMENT at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        StringReader stringReader0 = new StringReader("/.");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = (-1376);
        // Undeclared exception!
        try {
            jsonReader0.endObject();
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        StringReader stringReader0 = new StringReader("[,;6(\"Q*>Xlv");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 13
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        StringReader stringReader0 = new StringReader("[[1]{|<");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated array at line 1 column 6 path $[0]
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        StringReader stringReader0 = new StringReader("n@=_s?; ull");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.peeked = 1;
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 12
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        StringReader stringReader0 = new StringReader("{<G:`A:xoe'sG6G8a");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated object at line 1 column 8 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        StringReader stringReader0 = new StringReader("{\":&B:xoe's6G8a");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 16 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        StringReader stringReader0 = new StringReader("'CTU6W nGJH3Bs");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 1;
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        StringReader stringReader0 = new StringReader("{::`A:xe's$a");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected name at line 1 column 2 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        StringReader stringReader0 = new StringReader("(=");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.peeked = 1;
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 3
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        StringReader stringReader0 = new StringReader("$L=uZQx$Ym<>zOO'.");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.close();
        // Undeclared exception!
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // JsonReader is closed
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        StringReader stringReader0 = new StringReader("]");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.hasNext();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected value at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        StringReader stringReader0 = new StringReader("NULL");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a string but was NULL at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03841() throws Throwable {
        StringReader stringReader0 = new StringReader("Expected nullbut was ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        char[] charArray0 = new char[8];
        stringReader0.read(charArray0);
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03942() throws Throwable {
        StringReader stringReader0 = new StringReader("Expected null but was ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        char[] charArray0 = new char[8];
        stringReader0.read(charArray0);
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test04043() throws Throwable {
        StringReader stringReader0 = new StringReader("7E0");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        long long0 = jsonReader0.nextLong();
        assertEquals(7L, long0);
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        StringReader stringReader0 = new StringReader("9E-Gs79?h1[@#");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04245() throws Throwable {
        StringReader stringReader0 = new StringReader("9.3E[$V{~w7JYS");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04346() throws Throwable {
        StringReader stringReader0 = new StringReader("08`-kH7bqq~-hB");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04447() throws Throwable {
        StringReader stringReader0 = new StringReader("69MxSk3");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.hasNext();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04548() throws Throwable {
        StringReader stringReader0 = new StringReader("9.77[$V{I~w7S");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.hasNext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        StringReader stringReader0 = new StringReader("9.77[$V{I~w7S");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.hasNext();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        StringReader stringReader0 = new StringReader("-6{u");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        long long0 = jsonReader0.nextLong();
        assertEquals((-6L), long0);
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        StringReader stringReader0 = new StringReader("9#@- ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.peek();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        StringReader stringReader0 = new StringReader("6,SyAd04->");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        int int0 = jsonReader0.nextInt();
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        StringReader stringReader0 = new StringReader("/");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.endObject();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05054() throws Throwable {
        StringReader stringReader0 = new StringReader(" -;");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05155() throws Throwable {
        String string0 = "\\u";
        StringReader stringReader0 = new StringReader(string0);
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05256() throws Throwable {
        StringReader stringReader0 = new StringReader("}]tr");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected value at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        StringReader stringReader0 = new StringReader("]gg7Tf4VpE\"b");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 3;
        // Undeclared exception!
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a name but was BEGIN_ARRAY at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        StringReader stringReader0 = new StringReader("7 _zBMqxBPW @Og1/");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 14;
        String string0 = jsonReader0.nextName();
        assertEquals("7", string0);
    }

    @Test(timeout = 4000)
    public void test05459() throws Throwable {
        StringReader stringReader0 = new StringReader("7 _zBMqxBPW @Og1/");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 14;
        String string0 = jsonReader0.nextName();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test05560() throws Throwable {
        StringReader stringReader0 = new StringReader("5P");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 12;
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 3 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05661() throws Throwable {
        StringReader stringReader0 = new StringReader("\"z|u (");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 8;
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 7 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05762() throws Throwable {
        StringReader stringReader0 = new StringReader("\".\\[qxz");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 8 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05863() throws Throwable {
        StringReader stringReader0 = new StringReader("6,SyAd04->");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.nextString();
        assertEquals("6", string0);
    }

    @Test(timeout = 4000)
    public void test05964() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.nextString();
        assertEquals("9.7", string0);
    }

    @Test(timeout = 4000)
    public void test05965() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.nextString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test06066() throws Throwable {
        StringReader stringReader0 = new StringReader("true");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.hasNext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06067() throws Throwable {
        StringReader stringReader0 = new StringReader("true");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.hasNext();
        boolean boolean1 = jsonReader0.nextBoolean();
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test06168() throws Throwable {
        StringReader stringReader0 = new StringReader("FALSE");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.nextBoolean();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06269() throws Throwable {
        StringReader stringReader0 = new StringReader("7 _Bqx$PW bOeg1/");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.doPeek();
        // Undeclared exception!
        try {
            jsonReader0.nextNull();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected null but was NUMBER at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test06370() throws Throwable {
        StringReader stringReader0 = new StringReader("NULL");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.nextNull();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        StringReader stringReader0 = new StringReader("7]cXwX&9h%8vqB7D9:-");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        double double0 = jsonReader0.nextDouble();
        assertEquals(7.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06572() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        double double0 = jsonReader0.nextDouble();
        assertEquals(9.7, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06673() throws Throwable {
        StringReader stringReader0 = new StringReader("NULL");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 8;
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test06774() throws Throwable {
        StringReader stringReader0 = new StringReader("\"<z%\"X &5");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06875() throws Throwable {
        StringReader stringReader0 = new StringReader("zfaK:OMt");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06976() throws Throwable {
        StringReader stringReader0 = new StringReader("/");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 11;
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07077() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test07078() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        double double0 = jsonReader0.nextDouble();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test07079() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        double double0 = jsonReader0.nextDouble();
        assertEquals(9.7, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07180() throws Throwable {
        StringReader stringReader0 = new StringReader("7 _Bqx$PW bOeg1/");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.hasNext();
        long long0 = jsonReader0.nextLong();
        assertEquals(7L, long0);
    }

    @Test(timeout = 4000)
    public void test07281() throws Throwable {
        StringReader stringReader0 = new StringReader("';");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 3 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07382() throws Throwable {
        StringReader stringReader0 = new StringReader("{^eu\"_yDoh;&uT ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07483() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tV^dsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Expected a long but was 9.7 at line 1 column 4 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07584() throws Throwable {
        StringReader stringReader0 = new StringReader("\".<%\n[qx&5");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 2 column 6 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07685() throws Throwable {
        StringReader stringReader0 = new StringReader("4+W#$+BS|<");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test07686() throws Throwable {
        StringReader stringReader0 = new StringReader("4+W#$+BS|<");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("4+W", string0);
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        StringReader stringReader0 = new StringReader("+o-Md,");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07888() throws Throwable {
        StringReader stringReader0 = new StringReader("9-;*JvztX1N{Lq:");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07989() throws Throwable {
        StringReader stringReader0 = new StringReader("$L=uZQx$Ym<>zOO'.");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("$L", string0);
    }

    @Test(timeout = 4000)
    public void test08090() throws Throwable {
        StringReader stringReader0 = new StringReader("(mTbiG[");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08191() throws Throwable {
        StringReader stringReader0 = new StringReader("^A?_dLDs!\"8d/6>I$");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("^A?_dLDs!\"8d", string0);
    }

    @Test(timeout = 4000)
    public void test08292() throws Throwable {
        StringReader stringReader0 = new StringReader("T3L`~R7]c7Fpk");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08393() throws Throwable {
        StringReader stringReader0 = new StringReader(".p7{$U,#T");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test08394() throws Throwable {
        StringReader stringReader0 = new StringReader(".p7{$U,#T");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals(".p7", string0);
    }

    @Test(timeout = 4000)
    public void test08495() throws Throwable {
        StringReader stringReader0 = new StringReader(")r'oB)gY}V5&7*`");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals(")r'oB)gY", string0);
    }

    @Test(timeout = 4000)
    public void test08596() throws Throwable {
        StringReader stringReader0 = new StringReader("tr");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08697() throws Throwable {
        StringReader stringReader0 = new StringReader("\".ve\"q)fz");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test08798() throws Throwable {
        StringReader stringReader0 = new StringReader("\"z7}/I\b ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 10 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test08899() throws Throwable {
        StringReader stringReader0 = new StringReader("f");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 12;
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test089100() throws Throwable {
        StringReader stringReader0 = new StringReader("[%;6(,Q*/b3v");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated array at line 1 column 10 path $[0]
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test090101() throws Throwable {
        StringReader stringReader0 = new StringReader("u[t1IkWS-");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test091102() throws Throwable {
        StringReader stringReader0 = new StringReader("iQBGn]P0");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test092103() throws Throwable {
        StringReader stringReader0 = new StringReader(".p7{$U,#T");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test093104() throws Throwable {
        StringReader stringReader0 = new StringReader(")r'oB)gY}V5&7*`");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test094105() throws Throwable {
        StringReader stringReader0 = new StringReader("com.google.gson.internal.JsonReaderInternalAccess");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 10;
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test095106() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Expected an int but was 9.7 at line 1 column 4 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test096107() throws Throwable {
        StringReader stringReader0 = new StringReader("7 5(+*tYvO,>Np");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 8;
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 16 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test097108() throws Throwable {
        String string0 = "\" ;rDr^r\\u*>O]";
        StringReader stringReader0 = new StringReader(string0);
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // \\u*>O]
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test098109() throws Throwable {
        StringReader stringReader0 = new StringReader("{}(@.PfnD{Bcn,");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test099110() throws Throwable {
        StringReader stringReader0 = new StringReader("'F9");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 4 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test100111() throws Throwable {
        StringReader stringReader0 = new StringReader("9.7[tVsUI~wU72");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test101112() throws Throwable {
        StringReader stringReader0 = new StringReader("[#l-Xa B\"p");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.hasNext();
        stringReader0.reset();
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 23
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test102113() throws Throwable {
        StringReader stringReader0 = new StringReader(")]}'\n");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        CharBuffer charBuffer0 = CharBuffer.allocate(4);
        stringReader0.read(charBuffer0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 2 column 1
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test103114() throws Throwable {
        StringReader stringReader0 = new StringReader("{^eu\"_yDoh;&uT ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        String string0 = jsonReader0.getPath();
        assertEquals("$.", string0);
    }

    @Test(timeout = 4000)
    public void test104115() throws Throwable {
        StringReader stringReader0 = new StringReader("{rQZ;of}");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        try {
            jsonReader0.doPeek();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected ':' at line 1 column 6 path $.null
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test105116() throws Throwable {
        String string0 = "\"E >mGny\\ur";
        StringReader stringReader0 = new StringReader(string0);
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated escape sequence at line 1 column 11 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test106117() throws Throwable {
        StringReader stringReader0 = new StringReader(")]}'\n");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 6
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }
}
