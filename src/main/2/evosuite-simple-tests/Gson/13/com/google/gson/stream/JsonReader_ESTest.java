/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 16:01:53 GMT 2024
 */
package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        StringReader stringReader0 = new StringReader("$|Z\u0006%-BK*jluS0%?8s");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.isLenient();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        StringReader stringReader0 = new StringReader("zy/} m9UAV(");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.close();
        // Undeclared exception!
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // JsonReader is closed
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        JsonReader jsonReader0 = null;
        try {
            jsonReader0 = new JsonReader((Reader) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // in == null
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        StringReader stringReader0 = new StringReader("TRUE");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peek();
        // Undeclared exception!
        try {
            jsonReader0.beginArray();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected BEGIN_ARRAY but was BOOLEAN at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        StringReader stringReader0 = new StringReader(" [L,,^$^M|[g}M$8");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginArray();
        String string0 = jsonReader0.getPath();
        assertEquals("$[0]", string0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        StringReader stringReader0 = new StringReader("d9\"d@Dah(yz1TCNfNK");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 4;
        // Undeclared exception!
        try {
            jsonReader0.endArray();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        StringReader stringReader0 = new StringReader("{}7T<IUu..`");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        boolean boolean0 = jsonReader0.hasNext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        StringReader stringReader0 = new StringReader("TRUE");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.doPeek();
        // Undeclared exception!
        try {
            jsonReader0.endObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected END_OBJECT but was BOOLEAN at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        StringReader stringReader0 = new StringReader("0");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.endObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected END_OBJECT but was NUMBER at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        StringReader stringReader0 = new StringReader("*,l&H");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 2;
        // Undeclared exception!
        try {
            jsonReader0.endObject();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        StringReader stringReader0 = new StringReader("0");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.hasNext();
        boolean boolean0 = jsonReader0.hasNext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        StringReader stringReader0 = new StringReader("{}7T<IUu..`");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a double but was END_OBJECT at line 1 column 3 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        StringReader stringReader0 = new StringReader("Uxcted vae");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 4;
        // Undeclared exception!
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a string but was END_ARRAY at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        StringReader stringReader0 = new StringReader("false");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected an int but was BOOLEAN at line 1 column 6 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        StringReader stringReader0 = new StringReader("nulL l");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a long but was NULL at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        StringReader stringReader0 = new StringReader("'z/oQrOo&Cd");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a name but was STRING at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        StringReader stringReader0 = new StringReader("\"!");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected BEGIN_OBJECT but was STRING at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        StringReader stringReader0 = new StringReader("x;-'V");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextNull();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected null but was STRING at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        StringReader stringReader0 = new StringReader("d9\"h@Dah(yz1TCNfNK");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 11;
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected an int but was STRING at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        StringReader stringReader0 = new StringReader("66-{,-]*M}/| Yp");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 12;
        // Undeclared exception!
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a long but was NAME at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        StringReader stringReader0 = new StringReader("{\"}z}`\">j]n;");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        // Undeclared exception!
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a long but was NAME at line 1 column 3 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        StringReader stringReader0 = new StringReader("null");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 14;
        // Undeclared exception!
        try {
            jsonReader0.endArray();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected END_ARRAY but was NAME at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        StringReader stringReader0 = new StringReader("3e93,FZdop!Q");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a name but was NUMBER at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        StringReader stringReader0 = new StringReader("false");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.skipValue();
        // Undeclared exception!
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected BEGIN_OBJECT but was END_DOCUMENT at line 1 column 6 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        StringReader stringReader0 = new StringReader("*,l&H");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = (-10);
        // Undeclared exception!
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        StringReader stringReader0 = new StringReader(" [L,,^$g}M$8");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated array at line 1 column 10 path $[0]
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        StringReader stringReader0 = new StringReader(" [L]s,,^}M$8");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        StringReader stringReader0 = new StringReader("{b:zWZ?{;dd~D3F");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated object at line 1 column 9 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        StringReader stringReader0 = new StringReader("{b:WvzWZ?;d\"~DVFU");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 18 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        StringReader stringReader0 = new StringReader("{):Wvzq}oWZ?;d\"~quFU");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        StringReader stringReader0 = new StringReader("{[!:h7(L9UQ/cw6");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected name at line 1 column 2 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        StringReader stringReader0 = new StringReader("[[{(l`+=Vx\"*");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 13 path $[0][0].
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        StringReader stringReader0 = new StringReader("{\"}z}W\">\"]:;");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected ':' at line 1 column 9 path $.
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        StringReader stringReader0 = new StringReader("/.1f}");
        stringReader0.read();
        stringReader0.read();
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.nextLong();
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected value at line 1 column 3 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        StringReader stringReader0 = new StringReader(";V;;bm+sOIy>R}8");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.endObject();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected value at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        StringReader stringReader0 = new StringReader("]7dz3Sawl-eav");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected value at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        StringReader stringReader0 = new StringReader("]7dz3Sawl-eav");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 3;
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        StringReader stringReader0 = new StringReader(" [,,[^=|-[g}M");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $[0]
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        StringReader stringReader0 = new StringReader("t]?Q");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        StringReader stringReader0 = new StringReader("F>f9~V");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        StringReader stringReader0 = new StringReader("N?=|1 yw?mmV_xl");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.beginObject();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        StringReader stringReader0 = new StringReader("nul");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        StringReader stringReader0 = new StringReader("nulLl");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        StringReader stringReader0 = new StringReader("23E+K{@]");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        StringReader stringReader0 = new StringReader("-61 0JV");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.hasNext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        StringReader stringReader0 = new StringReader("4.1}");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        StringReader stringReader0 = new StringReader("1.2#TJOr6yl9ls\"");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        StringReader stringReader0 = new StringReader("/");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.endArray();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        StringReader stringReader0 = new StringReader(":Ov^Gj<FzZ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected value at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        StringReader stringReader0 = new StringReader("6;i2/F7&k5<");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        StringReader stringReader0 = new StringReader("=?*rj8Enr%");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        StringReader stringReader0 = new StringReader("4]?Q");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        int int0 = jsonReader0.nextInt();
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        StringReader stringReader0 = new StringReader("66{,-]M}/| Yp");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        double double0 = jsonReader0.nextDouble();
        assertEquals(66.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        StringReader stringReader0 = new StringReader(" [.L+L^rZZh");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peek();
        // Undeclared exception!
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a name but was BEGIN_ARRAY at line 1 column 3 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        StringReader stringReader0 = new StringReader("nulLl");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 14;
        String string0 = jsonReader0.nextName();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test05455() throws Throwable {
        StringReader stringReader0 = new StringReader("nulLl");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 14;
        String string0 = jsonReader0.nextName();
        assertEquals("nulLl", string0);
    }

    @Test(timeout = 4000)
    public void test05556() throws Throwable {
        StringReader stringReader0 = new StringReader("Uxected vaue");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 12;
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 13 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05657() throws Throwable {
        StringReader stringReader0 = new StringReader("UiAK}W]I*M");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 13;
        try {
            jsonReader0.nextName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 11 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05758() throws Throwable {
        StringReader stringReader0 = new StringReader("e[");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("e", string0);
    }

    @Test(timeout = 4000)
    public void test05859() throws Throwable {
        StringReader stringReader0 = new StringReader("Uxected vaue");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 8;
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 13 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05960() throws Throwable {
        StringReader stringReader0 = new StringReader("3\"05@\\\"{#");
        stringReader0.read();
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 9 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test06061() throws Throwable {
        StringReader stringReader0 = new StringReader("3169");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.nextString();
        assertEquals("3169", string0);
    }

    @Test(timeout = 4000)
    public void test06062() throws Throwable {
        StringReader stringReader0 = new StringReader("3169");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.nextString();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test06063() throws Throwable {
        StringReader stringReader0 = new StringReader("3169");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        String string0 = jsonReader0.nextString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test06164() throws Throwable {
        StringReader stringReader0 = new StringReader("Uxected vNdaue");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 16;
        String string0 = jsonReader0.nextString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        StringReader stringReader0 = new StringReader("Uxected vNdaue");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 16;
        String string0 = jsonReader0.nextString();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test06266() throws Throwable {
        StringReader stringReader0 = new StringReader("null");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.hasNext();
        // Undeclared exception!
        try {
            jsonReader0.nextBoolean();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a boolean but was NULL at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test06367() throws Throwable {
        StringReader stringReader0 = new StringReader("zy/} m9UAV(");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextBoolean();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test06468() throws Throwable {
        StringReader stringReader0 = new StringReader("TRUE");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.nextBoolean();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06569() throws Throwable {
        StringReader stringReader0 = new StringReader("false");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        boolean boolean0 = jsonReader0.nextBoolean();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06670() throws Throwable {
        StringReader stringReader0 = new StringReader("null");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.doPeek();
        jsonReader0.nextNull();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test06771() throws Throwable {
        StringReader stringReader0 = new StringReader("{}7T<IUu..`");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.hasNext();
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test06872() throws Throwable {
        StringReader stringReader0 = new StringReader("0 #1uunly(\"IF<d (");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 16;
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06973() throws Throwable {
        StringReader stringReader0 = new StringReader("0 #1uunly(\"IF<d (");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 8;
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 18 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07074() throws Throwable {
        StringReader stringReader0 = new StringReader("\"?,7\"1ic-GyToC");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07175() throws Throwable {
        StringReader stringReader0 = new StringReader("66-{M| p");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07276() throws Throwable {
        StringReader stringReader0 = new StringReader("null");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 11;
        // Undeclared exception!
        try {
            jsonReader0.nextDouble();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test07377() throws Throwable {
        StringReader stringReader0 = new StringReader("07{YSLxl");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        double double0 = jsonReader0.nextDouble();
        assertEquals(7.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07478() throws Throwable {
        StringReader stringReader0 = new StringReader("3169");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        long long0 = jsonReader0.nextLong();
        assertEquals(3169L, long0);
    }

    @Test(timeout = 4000)
    public void test07579() throws Throwable {
        StringReader stringReader0 = new StringReader("3e93,FZdop!Q");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Expected a long but was 3e93 at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07680() throws Throwable {
        StringReader stringReader0 = new StringReader("Uxected vaue");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 8;
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 13 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07781() throws Throwable {
        StringReader stringReader0 = new StringReader("\"<W(>4v1wI_n9^IfK");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 18 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07882() throws Throwable {
        StringReader stringReader0 = new StringReader("Use JsonReader.setLenient(true) to accept malformed JSON");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07983() throws Throwable {
        StringReader stringReader0 = new StringReader(".2#TPOr6Iyl9l*\"");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Expected an int but was .2 at line 1 column 3 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test08084() throws Throwable {
        StringReader stringReader0 = new StringReader("+sXFHZ,>tI=JN!{p");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test08085() throws Throwable {
        StringReader stringReader0 = new StringReader("+sXFHZ,>tI=JN!{p");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("+sXFHZ", string0);
    }

    @Test(timeout = 4000)
    public void test08186() throws Throwable {
        StringReader stringReader0 = new StringReader("zy/} m9UAV(");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test08187() throws Throwable {
        StringReader stringReader0 = new StringReader("zy/} m9UAV(");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("zy", string0);
    }

    @Test(timeout = 4000)
    public void test08288() throws Throwable {
        StringReader stringReader0 = new StringReader("XgYcB^EJi$R4`y:oBX%");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08389() throws Throwable {
        StringReader stringReader0 = new StringReader("x;-'V");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("x", string0);
    }

    @Test(timeout = 4000)
    public void test08490() throws Throwable {
        StringReader stringReader0 = new StringReader("M2b2jfH+c|=,s)<G");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        // Undeclared exception!
        try {
            jsonReader0.nextLong();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08591() throws Throwable {
        StringReader stringReader0 = new StringReader("3x9_)WF&{tgGs>8");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("3x9_)WF&", string0);
    }

    @Test(timeout = 4000)
    public void test08692() throws Throwable {
        StringReader stringReader0 = new StringReader("Expec]ed a log bt was ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        String string0 = jsonReader0.nextString();
        assertEquals("Expec", string0);
    }

    @Test(timeout = 4000)
    public void test08793() throws Throwable {
        StringReader stringReader0 = new StringReader("3\"F\n\u0003");
        stringReader0.read();
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 2 column 2 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test08894() throws Throwable {
        StringReader stringReader0 = new StringReader("66-{,-]*M}/| Yp");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 12;
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 16 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test08995() throws Throwable {
        StringReader stringReader0 = new StringReader("9NgxG?( NAUf];31");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test09096() throws Throwable {
        StringReader stringReader0 = new StringReader("a#<ijlI})<~?8ne");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test09197() throws Throwable {
        StringReader stringReader0 = new StringReader("zy/} m9UAV(");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test09298() throws Throwable {
        StringReader stringReader0 = new StringReader("Ldw[-");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test09399() throws Throwable {
        StringReader stringReader0 = new StringReader(" [.L+L^rZZh");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 12 path $[0]
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test094100() throws Throwable {
        StringReader stringReader0 = new StringReader("null");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.peeked = 14;
        jsonReader0.skipValue();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test095101() throws Throwable {
        StringReader stringReader0 = new StringReader("3e93,FZdop!Q");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        // Undeclared exception!
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Expected an int but was 3e93 at line 1 column 5 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test096102() throws Throwable {
        StringReader stringReader0 = new StringReader("'z/oQrOo&Cd");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 12 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test097103() throws Throwable {
        StringReader stringReader0 = new StringReader("\"Fy`vT:~'");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 10 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test098104() throws Throwable {
        StringReader stringReader0 = new StringReader("4.");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test098105() throws Throwable {
        StringReader stringReader0 = new StringReader("4.");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        int int0 = jsonReader0.nextInt();
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test099106() throws Throwable {
        StringReader stringReader0 = new StringReader("'z/oQrOo&Cd");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unterminated string at line 1 column 12 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test100107() throws Throwable {
        StringReader stringReader0 = new StringReader("0 #1,unyIF<d< (");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.nextInt();
        stringReader0.reset();
        jsonReader0.setLenient(true);
        jsonReader0.skipValue();
        assertTrue(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test101108() throws Throwable {
        StringReader stringReader0 = new StringReader(")]}'\n");
        char[] charArray0 = new char[4];
        stringReader0.read(charArray0);
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 2 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test102109() throws Throwable {
        StringReader stringReader0 = new StringReader("/jJa[A1fC{");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.skipValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected value at line 1 column 1 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test103110() throws Throwable {
        StringReader stringReader0 = new StringReader("{nYT3K$a_osr<");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        String string0 = jsonReader0.toString();
        assertEquals("JsonReader at line 1 column 2 path $.", string0);
    }

    @Test(timeout = 4000)
    public void test104111() throws Throwable {
        StringReader stringReader0 = new StringReader("Expected an int but was ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.close();
        String string0 = jsonReader0.toString();
        assertEquals("JsonReader at line 1 column 1 path $", string0);
    }

    @Test(timeout = 4000)
    public void test104112() throws Throwable {
        StringReader stringReader0 = new StringReader("Expected an int but was ");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.close();
        String string0 = jsonReader0.toString();
        assertFalse(jsonReader0.isLenient());
    }

    @Test(timeout = 4000)
    public void test105113() throws Throwable {
        StringReader stringReader0 = new StringReader("{\"}z}W\">\"]:;");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.beginObject();
        jsonReader0.skipValue();
        try {
            jsonReader0.nextInt();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Expected ':' at line 1 column 9 path $.null
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test106114() throws Throwable {
        StringReader stringReader0 = new StringReader("3\"\\3T");
        stringReader0.read();
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        try {
            jsonReader0.nextString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Invalid escape sequence at line 1 column 4 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test107115() throws Throwable {
        StringReader stringReader0 = new StringReader(")]}'\n");
        JsonReader jsonReader0 = new JsonReader(stringReader0);
        jsonReader0.setLenient(true);
        try {
            jsonReader0.nextName();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // End of input at line 1 column 6 path $
            //
            verifyException("com.google.gson.stream.JsonReader", e);
        }
    }
}
