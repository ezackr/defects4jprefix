/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:12:10 GMT 2024
 */
package org.mockito.internal.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.creation.MethodInterceptorFilter;
import org.mockito.internal.creation.MockSettingsImpl;
import org.mockito.internal.util.MockUtil;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MockUtil_ESTest extends MockUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
        Class<MethodInterceptorFilter> class0 = MethodInterceptorFilter.class;
        // Undeclared exception!
        try {
            mockUtil0.createMock(class0, mockSettingsImpl0);
            fail("Expecting exception: IncompatibleClassChangeError");
        } catch (IncompatibleClassChangeError e) {
            //
            // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
            //
            verifyException("org.mockito.cglib.proxy.Enhancer", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
        // Undeclared exception!
        try {
            mockUtil0.getMockName(mockSettingsImpl0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        // Undeclared exception!
        try {
            mockUtil0.resetMock((MockSettingsImpl) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
        MockSettingsImpl mockSettingsImpl1 = (MockSettingsImpl) mockSettingsImpl0.serializable();
        Class<MethodInterceptorFilter> class0 = MethodInterceptorFilter.class;
        // Undeclared exception!
        try {
            mockUtil0.createMock(class0, mockSettingsImpl1);
            fail("Expecting exception: IncompatibleClassChangeError");
        } catch (IncompatibleClassChangeError e) {
            //
            // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
            //
            verifyException("org.mockito.cglib.proxy.Enhancer", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
        MockSettingsImpl mockSettingsImpl1 = (MockSettingsImpl) mockSettingsImpl0.serializable();
        Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
        Class<Annotation> class0 = Annotation.class;
        classArray0[0] = class0;
        mockSettingsImpl0.extraInterfaces(classArray0);
        Class<MethodInterceptorFilter> class1 = MethodInterceptorFilter.class;
        // Undeclared exception!
        try {
            mockUtil0.createMock(class1, mockSettingsImpl1);
            fail("Expecting exception: IncompatibleClassChangeError");
        } catch (IncompatibleClassChangeError e) {
            //
            // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
            //
            verifyException("org.mockito.cglib.proxy.Enhancer", e);
        }
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        Class<MockSettingsImpl> class0 = MockSettingsImpl.class;
        MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
        Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
        Class<Annotation> class1 = Annotation.class;
        classArray0[0] = class1;
        mockSettingsImpl0.extraInterfaces(classArray0);
        // Undeclared exception!
        try {
            mockUtil0.createMock(class0, mockSettingsImpl0);
            fail("Expecting exception: IncompatibleClassChangeError");
        } catch (IncompatibleClassChangeError e) {
            //
            // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
            //
            verifyException("org.mockito.cglib.proxy.Enhancer", e);
        }
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        boolean boolean0 = mockUtil0.isMock((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        MockUtil mockUtil0 = new MockUtil();
        boolean boolean0 = mockUtil0.isMock(mockUtil0);
        assertFalse(boolean0);
    }
}
