/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:25:07 GMT 2024
 */
package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.ONE_HALF.add(fraction0);
        assertEquals(100.0, fraction1.percentageValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = fraction0.TWO_THIRDS.multiply((-4033));
        assertEquals((-8066), fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = fraction0.TWO_THIRDS.multiply((-4033));
        assertEquals((-268866.6666666666), fraction1.percentageValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        int int0 = fraction0.getDenominator();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = fraction0.ONE_THIRD.add(5);
        assertEquals(5.333333333333333, fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = fraction0.ONE_THIRD.add(5);
        assertEquals(3, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Fraction fraction0 = new Fraction(2951.0);
        Fraction fraction1 = fraction0.divide(2146576771);
        Fraction fraction2 = Fraction.ONE_THIRD;
        Fraction fraction3 = fraction2.divide(fraction1);
        Fraction fraction4 = fraction3.subtract((-2643));
        // Undeclared exception!
        try {
            fraction3.subtract(fraction4);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow, numerator too large after multiply: 4,271,568,817
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Fraction fraction0 = new Fraction(2951.0);
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals(0.0F, fraction1.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Fraction fraction0 = new Fraction(2951.0);
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals(2951.0F, fraction0.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        FractionField fractionField0 = fraction0.getField();
        assertNotNull(fractionField0);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        long long0 = fraction0.longValue();
        assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        long long0 = fraction0.longValue();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        Fraction fraction0 = new Fraction(2951.0);
        Fraction fraction1 = fraction0.subtract((-2643));
        assertEquals(1, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        Fraction fraction0 = new Fraction(2951.0);
        Fraction fraction1 = fraction0.subtract((-2643));
        assertEquals(2951.0F, fraction0.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        Fraction fraction0 = new Fraction(2951.0);
        Fraction fraction1 = fraction0.subtract((-2643));
        assertEquals(5594.0F, fraction1.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        Fraction fraction0 = new Fraction(4);
        int int0 = fraction0.intValue();
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        Fraction fraction0 = new Fraction(4);
        int int0 = fraction0.intValue();
        assertEquals(1, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        fraction0.hashCode();
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        int int0 = fraction0.getNumerator();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        Fraction fraction0 = new Fraction(4);
        float float0 = fraction0.floatValue();
        assertEquals(4.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        Fraction fraction0 = new Fraction(4);
        float float0 = fraction0.floatValue();
        assertEquals(1, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        double double0 = fraction0.percentageValue();
        assertEquals(75.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        Fraction fraction0 = null;
        try {
            fraction0 = new Fraction((double) (-292), (-292));
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert -292 to fraction (293/9,223,372,036,854,775,807)
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        Fraction fraction0 = null;
        try {
            fraction0 = new Fraction(1.633123935319537E16, 1671);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert 16,331,239,353,195,370 to fraction (16,331,239,353,195,370/1)
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        Fraction fraction0 = null;
        try {
            fraction0 = new Fraction((double) 2146576747, 2146576747);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert 2,146,576,747 to fraction (9,223,372,034,708,199,062/9,223,372,036,854,775,807)
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        Fraction fraction0 = new Fraction(0.75, (-1080));
        assertEquals(0.0F, fraction0.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        Fraction fraction0 = null;
        try {
            fraction0 = new Fraction(0.75, 0.75, (-1080));
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Unable to convert 0.75 to fraction after -1,080 iterations
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        Fraction fraction0 = new Fraction((-1044.2346729));
        assertEquals(473, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        Fraction fraction0 = null;
        try {
            fraction0 = new Fraction(0, 0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // zero denominator in fraction 0/0
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        Fraction fraction0 = new Fraction((-1073741719), (-1073741719));
        assertEquals(1, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        Fraction fraction0 = new Fraction((-1073741719), (-1073741719));
        assertEquals(1.0, fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        Fraction fraction0 = null;
        try {
            fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test2332() throws Throwable {
        Fraction fraction0 = null;
        try {
            fraction0 = new Fraction(262, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow in fraction 262/-2,147,483,648, cannot negate
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.MINUS_ONE.abs();
        assertEquals((byte) 1, fraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test2434() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.MINUS_ONE.abs();
        assertEquals(1, fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        int int0 = fraction0.compareTo(fraction0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = Fraction.TWO_QUARTERS;
        int int0 = fraction0.compareTo(fraction1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = Fraction.ONE_QUARTER;
        int int0 = fraction0.compareTo(fraction1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        Fraction fraction0 = new Fraction((-1675));
        Fraction fraction1 = new Fraction((double) (-1675));
        boolean boolean0 = fraction0.equals(fraction1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2939() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        boolean boolean0 = fraction0.equals(fraction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        boolean boolean0 = fraction0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.THREE_QUARTERS;
        boolean boolean0 = fraction0.equals(fraction1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3242() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.TWO_FIFTHS;
        boolean boolean0 = fraction0.equals(fraction1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.TWO_FIFTHS;
        boolean boolean0 = fraction0.equals(fraction1);
        assertFalse(fraction1.equals((Object) fraction0));
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
        // Undeclared exception!
        try {
            fraction0.negate();
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow in fraction -2,147,483,648/1, cannot negate
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        // Undeclared exception!
        try {
            fraction0.add((Fraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3546() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
        assertEquals((-1), fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test3547() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
        assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test3648() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.ZERO.add(fraction0);
        assertSame(fraction1, fraction0);
    }

    @Test(timeout = 4000)
    public void test3749() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.ONE_HALF.add(fraction0);
        assertEquals(0.5, fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3850() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = fraction0.ONE_HALF.add(fraction0);
        assertEquals(0.9, fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = fraction0.ONE_HALF.add(fraction0);
        assertEquals(10, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        Fraction fraction0 = new Fraction(2951.0);
        Fraction fraction1 = Fraction.ONE_THIRD;
        Fraction fraction2 = fraction1.divide(fraction0);
        Fraction fraction3 = fraction2.subtract(fraction1);
        assertEquals((-0.3332203772732407), fraction3.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4053() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        // Undeclared exception!
        try {
            fraction0.THREE_FIFTHS.multiply((Fraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4154() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.ZERO.divide(fraction0);
        assertEquals(0.0, fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4255() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.ONE.multiply(fraction1);
        assertEquals(0.0, fraction2.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4356() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        // Undeclared exception!
        try {
            fraction0.divide((Fraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4457() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        // Undeclared exception!
        try {
            fraction0.TWO_FIFTHS.divide(fraction0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // the fraction to divide by must not be zero: 0/1
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4558() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getReducedFraction(0, 0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // zero denominator in fraction 0/0
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4659() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 22);
        assertEquals(0.0, fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4760() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        assertEquals(1, fraction0.getNumerator());
    }

    @Test(timeout = 4000)
    public void test4761() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        assertEquals(1.0, fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4862() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getReducedFraction(281, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow in fraction 281/-2,147,483,648, cannot negate
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4963() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getReducedFraction(Integer.MIN_VALUE, (-15));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow in fraction -2,147,483,648/-15, cannot negate
            //
            verifyException("org.apache.commons.math3.fraction.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test5064() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        String string0 = fraction0.toString();
        assertEquals("4 / 5", string0);
    }

    @Test(timeout = 4000)
    public void test5165() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        String string0 = fraction0.toString();
        assertEquals("-1", string0);
    }
}
