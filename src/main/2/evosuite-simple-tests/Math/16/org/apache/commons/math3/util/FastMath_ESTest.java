/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 17:58:46 GMT 2024
 */
package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        long long0 = FastMath.round(1.0);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        int int0 = FastMath.round((-501.0F));
        assertEquals((-501), int0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double double0 = FastMath.expm1(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        double double0 = FastMath.acosh(0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        float float0 = FastMath.nextUp((-1.0F));
        assertEquals((-0.99999994F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double double0 = FastMath.atan(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = FastMath.IEEEremainder(2629.6364246349, 2629.6364246349);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double double0 = FastMath.nextUp((-2515.93));
        assertEquals((-2515.9299999999994), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double double0 = FastMath.sinh((-299.60878173));
        assertEquals((-6.567659662007063E129), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        FastMath.main((String[]) null);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        int int0 = FastMath.getExponent((-501.0F));
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        double double0 = FastMath.log(0.0, 0.0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        double double0 = FastMath.sin(4.831833881898182E203);
        assertEquals((-0.9309638033291869), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        double double0 = FastMath.hypot(1.7976931348623157E308, 1.7976931348623157E308);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        double double0 = FastMath.random();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        double double0 = FastMath.atan2((-4.9E-324), (-1637.7635540677227));
        assertEquals((-3.141592653589793), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        double double0 = FastMath.atan2(7.082630066519554E-309, 7.082630066519554E-309);
        assertEquals(0.7853981633974483, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        double double0 = FastMath.cosh((-1724.7790705892746));
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        double double0 = FastMath.cosh(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        double double0 = FastMath.cosh(2.40562867677584E202);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        double double0 = FastMath.cosh((-0.3522613670387117));
        assertEquals(1.0626882720315363, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        double double0 = FastMath.cosh(0.0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        double double0 = FastMath.sinh(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        double double0 = FastMath.sinh(8.0E298);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        double double0 = FastMath.sinh(1.3041936582598905);
        assertEquals(1.7066627368131528, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        double double0 = FastMath.sinh(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        double double0 = FastMath.sinh((-4.9E-324));
        assertEquals((-4.9E-324), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        double double0 = FastMath.tanh(1.9274649937148982);
        assertEquals(0.9585280015635761, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        double double0 = FastMath.tanh(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double double0 = FastMath.tanh(1839.47430892);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double double0 = FastMath.tanh((-8.0E298));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double double0 = FastMath.tanh(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        double double0 = FastMath.tanh((-1.401298464324817E-45));
        assertEquals((-1.401298464324817E-45), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        double double0 = FastMath.asinh(0.058823529411764705);
        assertEquals(0.058789658521402235, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        double double0 = FastMath.asinh((-0.167));
        assertEquals((-0.1662333393520369), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        double double0 = FastMath.asinh(0.3333333134651184);
        assertEquals(0.32745013138861473, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        double double0 = FastMath.asinh(0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        double double0 = FastMath.asinh(0.022597042279314163);
        assertEquals(0.02259511961365226, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        double double0 = FastMath.atanh(0.01745329052209854);
        assertEquals(0.017455063037776063, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        double double0 = FastMath.atanh((-0.05417713522911072));
        assertEquals((-0.05423023499691139), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        double double0 = FastMath.atanh(23.393102674778806);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        double double0 = FastMath.atanh(0.1246747374534607);
        assertEquals(0.12532680233138382, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        double double0 = FastMath.atanh(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        double double0 = FastMath.signum(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        double double0 = FastMath.signum(Double.NEGATIVE_INFINITY);
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        double double0 = FastMath.signum(0.031833771525489295);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        float float0 = FastMath.signum((float) 961);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        float float0 = FastMath.signum((-1.1503881F));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        float float0 = FastMath.signum(-0.0F);
        assertEquals(-0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        double double0 = FastMath.pow((-4.9E-324), 1.0);
        assertEquals((-4.9E-324), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        double double0 = FastMath.pow((-8.0E298), (-8.0E298));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        double double0 = FastMath.expm1((-1815.532969196));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        double double0 = FastMath.expm1((-744.481146046));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        double double0 = FastMath.pow(7.082630066519554E-309, 1.0);
        assertEquals(7.082630066519554E-309, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        double double0 = FastMath.expm1(3.4028235E38F);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        double double0 = FastMath.expm1(0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        double double0 = FastMath.expm1((-1.545495535488274E-89));
        assertEquals((-1.545495535488274E-89), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        double double0 = FastMath.log10(Double.POSITIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        double double0 = FastMath.acosh((-8.0E298));
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        double double0 = FastMath.log1p((-0.12502530217170715));
        assertEquals((-0.13356030981028572), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        double double0 = FastMath.pow((-1.0), (-1.0));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        double double0 = FastMath.log(1.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        double double0 = FastMath.log1p((-1.0));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        double double0 = FastMath.log1p(Double.POSITIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        double double0 = FastMath.log1p(0.5914691686630249);
        assertEquals(0.46465759505033466, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        double double0 = FastMath.log1p((-3.244024724169575E-8));
        assertEquals((-3.244024776788058E-8), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        double double0 = FastMath.log10((-1823.7377779191));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        double double0 = FastMath.pow(-0.0, -0.0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        double double0 = FastMath.pow(Double.NaN, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        double double0 = FastMath.pow(0.0, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        double double0 = FastMath.pow(-0.0, 1.0);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        double double0 = FastMath.pow(-0.0, (-702.0));
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        double double0 = FastMath.pow(-0.0, (-359.653978074118));
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        double double0 = FastMath.pow(-0.0, (-2481.0));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        double double0 = FastMath.pow(-0.0, 539.08097631666);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        double double0 = FastMath.pow(-0.0, 3294198.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        double double0 = FastMath.pow((double) Float.POSITIVE_INFINITY, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        double double0 = FastMath.pow(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        double double0 = FastMath.pow(Double.POSITIVE_INFINITY, (-317.16731447));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        double double0 = FastMath.pow(1.0, Double.POSITIVE_INFINITY);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        double double0 = FastMath.pow((double) 248, (double) Float.POSITIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        double double0 = FastMath.pow(8.533046968331264E-17, Double.POSITIVE_INFINITY);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (-1.0));
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 8.533046968331264E-17);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (-4.503599627370496E15));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 1.0);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 1.633123935319537E16);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        double double0 = FastMath.pow((-1.0), Double.NEGATIVE_INFINITY);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        double double0 = FastMath.pow(8.533046968331264E-17, Double.NEGATIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        double double0 = FastMath.pow(1.3805509807655072, Double.NEGATIVE_INFINITY);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        double double0 = FastMath.pow((-1.0), 1.9355758655647052E54);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        double double0 = FastMath.pow((-31.26572212892245), (-31.26572212892245));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        double double0 = FastMath.pow((double) (-968063622), (double) (-968063622));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        double double0 = FastMath.pow(8.0E298, 8.0E298);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        double double0 = FastMath.pow((double) (-2164), (-2164));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        double double0 = FastMath.pow((double) 1.2207031E-4F, 0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        double double0 = FastMath.pow(0.19999954120254515, 2136692272);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        double double0 = FastMath.sin(7.082630066519554E-309);
        assertEquals(7.082630066519554E-309, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        double double0 = FastMath.tan(1.633123935319537E16);
        assertEquals(3.370587556518889, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        double double0 = FastMath.tan(9.223372036854776E18);
        assertEquals(84.73931296875567, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        double double0 = FastMath.tan((-2.070841011504222E-9));
        assertEquals((-2.070841011504222E-9), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        double double0 = FastMath.cos(1.79657990159E10);
        assertEquals(0.9886460518431758, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        double double0 = FastMath.cos((-6.740530645449208E9));
        assertEquals((-0.22209818885474056), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        double double0 = FastMath.cos(3.5590470673352285E198);
        assertEquals(0.8144104870092234, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        double double0 = FastMath.cos((-6.740530638200329E9));
        assertEquals(0.6755631590229768, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        double double0 = FastMath.cos(1.628967282E9);
        assertEquals(0.9170810094699103, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        double double0 = FastMath.cos((-8.0E298));
        assertEquals((-0.9991033281235678), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        double double0 = FastMath.sin(8.044403068305413E292);
        assertEquals(0.9503208445488308, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        double double0 = FastMath.sin((-9.6806362E8F));
        assertEquals(0.9742647017564606, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        double double0 = FastMath.sin(-0.0);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        double double0 = FastMath.sin(0.0F);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        double double0 = FastMath.sin(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        double double0 = FastMath.sin(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        double double0 = FastMath.sin((-4299.19509923246));
        assertEquals((-0.9972300865032085), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        double double0 = FastMath.cos(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        double double0 = FastMath.cos(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        double double0 = FastMath.cos(879.6013728123);
        assertEquals(0.9990069133687297, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        double double0 = FastMath.cos(0.3936265707015991);
        assertEquals(0.9235242005099544, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        double double0 = FastMath.cos(1.633123935319537E16);
        assertEquals((-0.28443016146380146), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        double double0 = FastMath.tan(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        double double0 = FastMath.tan(-0.0);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        double double0 = FastMath.tan(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        double double0 = FastMath.tan(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        double double0 = FastMath.tan((-2215.5627));
        assertEquals((-0.9128680780104471), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        double double0 = FastMath.atan2((-450.3104549359), 7.082630066519554E-309);
        assertEquals((-1.5707963267948966), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        double double0 = FastMath.acos(7.082630066519554E-309);
        assertEquals(1.5707963267948966, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        double double0 = FastMath.asin((-4.9E-324));
        assertEquals((-4.9E-324), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        double double0 = FastMath.atan2((-744.481146046), (-744.481146046));
        assertEquals((-2.356194490192345), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        double double0 = FastMath.atan2(Double.NaN, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        double double0 = FastMath.atan2(Double.NaN, 0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        double double0 = FastMath.atan2(-0.0, -0.0);
        assertEquals((-3.141592653589793), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        double double0 = FastMath.atan2(-0.0, Double.POSITIVE_INFINITY);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        double double0 = FastMath.atan2(0.0, Double.NEGATIVE_INFINITY);
        assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        double double0 = FastMath.atan2(0, (-968063624));
        assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        double double0 = FastMath.atan2(0, 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);
        assertEquals(2.356194490192345, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        assertEquals(0.7853981633974483, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        double double0 = FastMath.atan2(Float.POSITIVE_INFINITY, 146);
        assertEquals(1.5707963267948966, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        assertEquals((-2.356194490192345), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        assertEquals((-0.7853981633974483), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, 1.0);
        assertEquals((-1.5707963267948966), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        double double0 = FastMath.atan2((-5.3639), Double.POSITIVE_INFINITY);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        double double0 = FastMath.atan2(130, Float.POSITIVE_INFINITY);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        double double0 = FastMath.atan2((-4.503599627370528E15), Double.NEGATIVE_INFINITY);
        assertEquals((-3.141592653589793), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        double double0 = FastMath.atan2(8.533046968331264E-17, Double.NEGATIVE_INFINITY);
        assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        double double0 = FastMath.atan2((-2293955.899902687), 0);
        assertEquals((-1.5707963267948966), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        double double0 = FastMath.atan2(3.141592653589793, -0.0F);
        assertEquals(1.5707963267948966, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        double double0 = FastMath.atan2((-882.99652052), (-2.2250738585072014E-308));
        assertEquals((-1.5707963267948966), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        double double0 = FastMath.asin(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        double double0 = FastMath.asin(590.07);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        double double0 = FastMath.asin((-744.481146046));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        double double0 = FastMath.asin(1.0);
        assertEquals(1.5707963267948966, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        double double0 = FastMath.asin((-1.0));
        assertEquals((-1.5707963267948966), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        double double0 = FastMath.asin(-0.0);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        double double0 = FastMath.acos(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        double double0 = FastMath.acos(1606.2872570729478);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        double double0 = FastMath.acos((-7.310191888374632));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        double double0 = FastMath.acos((-1.0));
        assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        double double0 = FastMath.acos(1.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        double double0 = FastMath.acos(0.0);
        assertEquals(1.5707963267948966, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        double double0 = FastMath.acos((-4.9E-324));
        assertEquals(1.5707963267948966, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        double double0 = FastMath.acos((-0.10629904596107739));
        assertEquals(1.6772965850134232, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        double double0 = FastMath.cbrt(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        double double0 = FastMath.cbrt(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        double double0 = FastMath.cbrt(7.082630066519554E-309);
        assertEquals(1.920428693565402E-103, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        double double0 = FastMath.cbrt((-1.0488538406930105E-262));
        assertEquals((-4.7159767747508505E-88), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        double double0 = FastMath.toRadians(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test169169() throws Throwable {
        double double0 = FastMath.toRadians((-4.9E-324));
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test170170() throws Throwable {
        double double0 = FastMath.toRadians(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test171171() throws Throwable {
        double double0 = FastMath.toRadians((-38.081527133623794));
        assertEquals((-0.6646480326692938), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test172172() throws Throwable {
        double double0 = FastMath.toDegrees(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test173173() throws Throwable {
        double double0 = FastMath.toDegrees(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test174174() throws Throwable {
        double double0 = FastMath.toDegrees(1070.9471620267657);
        assertEquals(61360.752465646816, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test175175() throws Throwable {
        int int0 = FastMath.abs(0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test176176() throws Throwable {
        int int0 = FastMath.abs((-1871));
        assertEquals(1871, int0);
    }

    @Test(timeout = 4000)
    public void test177177() throws Throwable {
        long long0 = FastMath.abs(4036L);
        assertEquals(4036L, long0);
    }

    @Test(timeout = 4000)
    public void test178178() throws Throwable {
        long long0 = FastMath.abs((-1008L));
        assertEquals(1008L, long0);
    }

    @Test(timeout = 4000)
    public void test179179() throws Throwable {
        float float0 = FastMath.abs(0.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test180180() throws Throwable {
        float float0 = FastMath.ulp((float) 226);
        assertEquals(1.5258789E-5F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test181181() throws Throwable {
        float float0 = FastMath.abs(4354.8823F);
        assertEquals(4354.8823F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test182182() throws Throwable {
        double double0 = FastMath.hypot((-2592.0), 7.082630066519554E-309);
        assertEquals(2592.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test183183() throws Throwable {
        double double0 = FastMath.abs(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test184184() throws Throwable {
        double double0 = FastMath.ulp(7.082630066519554E-309);
        assertEquals(4.9E-324, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test185185() throws Throwable {
        double double0 = FastMath.ulp(Double.NEGATIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test186186() throws Throwable {
        float float0 = FastMath.ulp(Float.POSITIVE_INFINITY);
        assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test187187() throws Throwable {
        double double0 = FastMath.scalb((-5.278092537692296E-309), 2062);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test188188() throws Throwable {
        double double0 = FastMath.scalb(Double.NaN, (-2832));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test189189() throws Throwable {
        double double0 = FastMath.scalb(Double.NEGATIVE_INFINITY, 2051);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test190190() throws Throwable {
        double double0 = FastMath.hypot(0.0, 0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test191191() throws Throwable {
        double double0 = FastMath.scalb(1.184154459111628E-8, (-968063621));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test192192() throws Throwable {
        double double0 = FastMath.scalb((double) (-968063621), (-968063621));
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test193193() throws Throwable {
        double double0 = FastMath.scalb((double) 2103, 2103);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test194194() throws Throwable {
        double double0 = FastMath.scalb((-559.727548452393), 1288490189);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test195195() throws Throwable {
        double double0 = FastMath.hypot((-4.9E-324), (-4.9E-324));
        assertEquals(4.9E-324, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test196196() throws Throwable {
        double double0 = FastMath.scalb((double) (-1608), (-1608));
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test197197() throws Throwable {
        double double0 = FastMath.hypot(7.082630066519554E-309, 7.082630066519554E-309);
        assertEquals(1.001635149734341E-308, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test198198() throws Throwable {
        double double0 = FastMath.scalb(1.207746682843556E-303, (-1557));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test199199() throws Throwable {
        double double0 = FastMath.scalb((-2157.22581858541), 1791);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test200200() throws Throwable {
        double double0 = FastMath.scalb((-4.9E-324), 1225);
        assertEquals((-2.8544953854119198E45), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test201201() throws Throwable {
        double double0 = FastMath.scalb(7.082630066519554E-309, 2051);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test202202() throws Throwable {
        double double0 = FastMath.scalb(2.2250738585072014E-308, 1910);
        assertEquals(2.0636505122486924E267, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test203203() throws Throwable {
        double double0 = FastMath.scalb((double) 2051, 2051);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test204204() throws Throwable {
        float float0 = FastMath.scalb(2208.64F, (-2115));
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test205205() throws Throwable {
        float float0 = FastMath.scalb((float) 215, 215);
        assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test206206() throws Throwable {
        float float0 = FastMath.scalb((float) 0, 0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test207207() throws Throwable {
        float float0 = FastMath.scalb(Float.NaN, 886);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test208208() throws Throwable {
        float float0 = FastMath.scalb(Float.NEGATIVE_INFINITY, 4339);
        assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test209209() throws Throwable {
        float float0 = FastMath.scalb(0.0F, 1628967289);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test210210() throws Throwable {
        float float0 = FastMath.scalb((float) (-2457), (-2457));
        assertEquals(-0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test211211() throws Throwable {
        float float0 = FastMath.scalb((float) 1628967289, 1628967289);
        assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test212212() throws Throwable {
        float float0 = FastMath.scalb((-817.0F), 134217729);
        assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test213213() throws Throwable {
        float float0 = FastMath.scalb((float) (-148), (-148));
        assertEquals((-4.15E-43F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test214214() throws Throwable {
        float float0 = FastMath.scalb((float) (-127), (-127));
        assertEquals((-7.464389E-37F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test215215() throws Throwable {
        float float0 = FastMath.scalb((float) (-171), (-171));
        assertEquals(-0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test216216() throws Throwable {
        float float0 = FastMath.scalb((-76.3514F), (-142));
        assertEquals((-1.3695E-41F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test217217() throws Throwable {
        float float0 = FastMath.scalb(0.5F, (-240));
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test218218() throws Throwable {
        float float0 = FastMath.scalb(4.5918E-41F, 264);
        assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test219219() throws Throwable {
        float float0 = FastMath.scalb(1.4E-45F, 217);
        assertEquals(2.951479E20F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test220220() throws Throwable {
        float float0 = FastMath.scalb(7.6293945E-6F, 128);
        assertEquals(2.5961484E33F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test221221() throws Throwable {
        float float0 = FastMath.scalb((float) (-2519), 247);
        assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test222222() throws Throwable {
        double double0 = FastMath.nextAfter(Double.NaN, (-7.800414592973399E-9));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test223223() throws Throwable {
        double double0 = FastMath.nextAfter(Double.NEGATIVE_INFINITY, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test224224() throws Throwable {
        double double0 = FastMath.nextAfter(396.8428093, 396.8428093);
        assertEquals(396.8428093, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test225225() throws Throwable {
        double double0 = FastMath.nextAfter((double) Float.POSITIVE_INFINITY, (double) 215);
        assertEquals(1.7976931348623157E308, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test226226() throws Throwable {
        double double0 = FastMath.nextUp(Double.NEGATIVE_INFINITY);
        assertEquals((-1.7976931348623157E308), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test227227() throws Throwable {
        double double0 = FastMath.nextUp(0.0);
        assertEquals(4.9E-324, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test228228() throws Throwable {
        double double0 = FastMath.nextAfter(0.0, (-627.3042948157));
        assertEquals((-4.9E-324), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test229229() throws Throwable {
        double double0 = FastMath.nextAfter((double) (-18), (-8.0E298));
        assertEquals((-18.000000000000004), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test230230() throws Throwable {
        double double0 = FastMath.nextUp(1.9299691540987203E36);
        assertEquals(1.9299691540987206E36, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test231231() throws Throwable {
        float float0 = FastMath.nextAfter(Float.NaN, 3.141592653589793);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test232232() throws Throwable {
        float float0 = FastMath.nextAfter((float) 0, Double.NaN);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test233233() throws Throwable {
        float float0 = FastMath.nextAfter((-2268.9F), (double) (-2268.9F));
        assertEquals((-2268.9F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test234234() throws Throwable {
        float float0 = FastMath.nextAfter(Float.POSITIVE_INFINITY, 1049.0);
        assertEquals(3.4028235E38F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test235235() throws Throwable {
        float float0 = FastMath.nextUp(Float.NEGATIVE_INFINITY);
        assertEquals((-3.4028235E38F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test236236() throws Throwable {
        float float0 = FastMath.nextUp(0.0F);
        assertEquals(1.4E-45F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test237237() throws Throwable {
        float float0 = FastMath.nextAfter(0.0F, (-693.5738));
        assertEquals((-1.4E-45F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test238238() throws Throwable {
        float float0 = FastMath.nextAfter((float) 3938, (double) (-2812.4F));
        assertEquals(3937.9998F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test239239() throws Throwable {
        float float0 = FastMath.nextUp(4354.8823F);
        assertEquals(4354.883F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test240240() throws Throwable {
        double double0 = FastMath.rint(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test241241() throws Throwable {
        double double0 = FastMath.ceil(1.0371220592190472E218);
        assertEquals(1.0371220592190472E218, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test242242() throws Throwable {
        double double0 = FastMath.rint(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test243243() throws Throwable {
        double double0 = FastMath.rint((-3052.0));
        assertEquals((-3052.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test244244() throws Throwable {
        double double0 = FastMath.rint(7.082630066519554E-309);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test245245() throws Throwable {
        double double0 = FastMath.ceil(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test246246() throws Throwable {
        double double0 = FastMath.ceil((-5.303786078838E-10));
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test247247() throws Throwable {
        double double0 = FastMath.ceil((-1391.42144913));
        assertEquals((-1391.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test248248() throws Throwable {
        double double0 = FastMath.rint((-6.123233995736766E-17));
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test249249() throws Throwable {
        double double0 = FastMath.rint((-6564.012203956042));
        assertEquals((-6564.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test250250() throws Throwable {
        double double0 = FastMath.rint(2173.5);
        assertEquals(2174.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test251251() throws Throwable {
        int int0 = FastMath.min(0, (-700));
        assertEquals((-700), int0);
    }

    @Test(timeout = 4000)
    public void test252252() throws Throwable {
        int int0 = FastMath.min(0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test253253() throws Throwable {
        long long0 = FastMath.min((long) 7, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test254254() throws Throwable {
        long long0 = FastMath.min((long) 7, (long) 7);
        assertEquals(7L, long0);
    }

    @Test(timeout = 4000)
    public void test255255() throws Throwable {
        float float0 = FastMath.min((-1.0F), (-1.0F));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test256256() throws Throwable {
        float float0 = FastMath.min(1.0F, (-2078.3384F));
        assertEquals((-2078.3384F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test257257() throws Throwable {
        float float0 = FastMath.min((-1037.9547F), (float) 626);
        assertEquals((-1037.9547F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test258258() throws Throwable {
        float float0 = FastMath.min(Float.NaN, (float) 1);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test259259() throws Throwable {
        float float0 = FastMath.min(-0.0F, -0.0F);
        assertEquals(-0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test260260() throws Throwable {
        double double0 = FastMath.min(-0.0, -0.0);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test261261() throws Throwable {
        double double0 = FastMath.min(1748.18, (-504.8886889354101));
        assertEquals((-504.8886889354101), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test262262() throws Throwable {
        double double0 = FastMath.min((-968.029), (-30.7828911738162));
        assertEquals((-968.029), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test263263() throws Throwable {
        double double0 = FastMath.min(Double.NaN, (-503.7689910322289));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test264264() throws Throwable {
        double double0 = FastMath.min((-1815.532969196), (-1815.532969196));
        assertEquals((-1815.532969196), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test265265() throws Throwable {
        int int0 = FastMath.max(2010, (-104));
        assertEquals(2010, int0);
    }

    @Test(timeout = 4000)
    public void test266266() throws Throwable {
        int int0 = FastMath.max(0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test267267() throws Throwable {
        long long0 = FastMath.max(4294967295L, 1023L);
        assertEquals(4294967295L, long0);
    }

    @Test(timeout = 4000)
    public void test268268() throws Throwable {
        long long0 = FastMath.max(4077L, 4077L);
        assertEquals(4077L, long0);
    }

    @Test(timeout = 4000)
    public void test269269() throws Throwable {
        float float0 = FastMath.max((float) (-1892), Float.NaN);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test270270() throws Throwable {
        float float0 = FastMath.max(4040.7148F, (float) (-2619));
        assertEquals(4040.7148F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test271271() throws Throwable {
        float float0 = FastMath.max(3463.3455F, 6143.234F);
        assertEquals(6143.234F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test272272() throws Throwable {
        float float0 = FastMath.max(-0.0F, -0.0F);
        assertEquals(-0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test273273() throws Throwable {
        float float0 = FastMath.max(3463.3455F, 3463.3455F);
        assertEquals(3463.3455F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test274274() throws Throwable {
        double double0 = FastMath.max(Double.NaN, (-31.26572212892245));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test275275() throws Throwable {
        double double0 = FastMath.max(0.0, (-4.9E-324));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test276276() throws Throwable {
        double double0 = FastMath.max((-7.44321345601866E-11), 0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test277277() throws Throwable {
        double double0 = FastMath.max(-0.0, -0.0);
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test278278() throws Throwable {
        double double0 = FastMath.max((-2526.6), (-2526.6));
        assertEquals((-2526.6), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test279279() throws Throwable {
        double double0 = FastMath.hypot(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test280280() throws Throwable {
        double double0 = FastMath.hypot(7.082630066519554E-309, Double.NEGATIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test281281() throws Throwable {
        double double0 = FastMath.hypot(Double.NaN, 0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test282282() throws Throwable {
        double double0 = FastMath.hypot((-7.310191888374632), Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test283283() throws Throwable {
        double double0 = FastMath.hypot(3.141592653589793, (-4.503599627370529E15));
        assertEquals(4.503599627370529E15, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test284284() throws Throwable {
        double double0 = FastMath.copySign((-293.466), (-293.466));
        assertEquals((-293.466), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test285285() throws Throwable {
        double double0 = FastMath.copySign((double) (-43), 6.372298757235201E212);
        assertEquals(43.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test286286() throws Throwable {
        float float0 = FastMath.copySign((-121.89812F), (float) 27);
        assertEquals(121.89812F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test287287() throws Throwable {
        float float0 = FastMath.copySign(13.645183F, 1.0418134F);
        assertEquals(13.645183F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test288288() throws Throwable {
        float float0 = FastMath.copySign((float) 539, (-1901.843F));
        assertEquals((-539.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test289289() throws Throwable {
        float float0 = FastMath.copySign((-194.06339F), (-194.06339F));
        assertEquals((-194.06339F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test290290() throws Throwable {
        double double0 = FastMath.cos(3.141592653589793);
        assertEquals((-1.0), double0, 0.01);
    }
}
