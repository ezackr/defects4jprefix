/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:12:26 GMT 2024
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        int int0 = MathUtils.hash((double) (-1));
        assertEquals((-1074790400), int0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = MathUtils.hash(doubleArray0);
        assertEquals(29791, int0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        int int0 = MathUtils.lcm((-65), (-65));
        assertEquals(65, int0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round((float) (-27), (-27), 7);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Inexact result from rounding
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        long long0 = MathUtils.addAndCheck((-523L), (-523L));
        assertEquals((-1046L), long0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double double0 = MathUtils.sinh((-984.4323968787894));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = MathUtils.normalizeAngle((-2698.540446), (-2698.540446));
        assertEquals((-2698.540446), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(761, (-1245));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double double0 = MathUtils.cosh(0.0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (int) (byte) (-1));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        double double0 = MathUtils.log((-2698.540446), (-2698.540446));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck((-1746747412), (-1746747412));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        int int0 = MathUtils.addAndCheck((-507), (-507));
        assertEquals((-1014), int0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck(1360842752, 1360842752);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        long long0 = MathUtils.subAndCheck(564L, 564L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(9218868437227405312L, (-9218868437227405313L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck((-9218868437227405304L), (-9218868437227405304L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        long long0 = MathUtils.subAndCheck(0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient(1, 768);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient((-886), (-886));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(824, 824);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(16, 0);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(25, 1);
        assertEquals(25L, long0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(825, 824);
        assertEquals(825L, long0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient(761, 159);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // result too large to represent in a long integer
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientLog((-15), (-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientLog((-15), (-15));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1845, 1845);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(776, 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(2331, 1);
        assertEquals(7.754052639035757, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(0, (-1));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, 0.10000000149011613);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        double[] doubleArray0 = new double[10];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        double[] doubleArray0 = new double[2];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[2];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = new double[3];
        doubleArray1[1] = (double) 768;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        long long0 = MathUtils.factorial(4);
        assertEquals(24L, long0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial(1082);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // result too large to represent in a long integer
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial((-25));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for n!
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorialLog((-2257));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n > 0 for n!
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.lcm((-2025652224), (-2025652224));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        int int0 = MathUtils.gcd(824, 824);
        assertEquals(824, int0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        int int0 = MathUtils.gcd(768, 12894);
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) (-105));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) 91);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        double double0 = MathUtils.indicator(3693.19527739);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        double double0 = MathUtils.indicator(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        double double0 = MathUtils.indicator(Double.NEGATIVE_INFINITY);
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 6, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        float float0 = MathUtils.round((float) 0, 0, 0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        int int0 = MathUtils.indicator((-284672));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        int int0 = MathUtils.indicator(1418);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        long long0 = MathUtils.indicator((-9218868437227405313L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        long long0 = MathUtils.indicator(866L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        short short0 = MathUtils.indicator((short) (-613));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        short short0 = MathUtils.indicator((short) 40);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((-436686808), (-436686808));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck(4503599627370496L, 4503599627370496L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck(1510L, (-10421889307180525L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((-9218868437227405313L), (-9218868437227405313L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-23L), (-23L));
        assertEquals(529L, long0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-29476L), 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        long long0 = MathUtils.mulAndCheck(899L, (-23L));
        assertEquals((-20677L), long0);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        long long0 = MathUtils.mulAndCheck(0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        long long0 = MathUtils.mulAndCheck(866L, 866L);
        assertEquals(749956L, long0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 768);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        float float0 = MathUtils.round((float) 768, 768);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        float float0 = MathUtils.round((float) (-1764), 2, 2);
        assertEquals((-1763.99F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        float float0 = MathUtils.round((float) 3, (-1199), 3);
        assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        float float0 = MathUtils.round((float) 2, 2, 2);
        assertEquals(2.01F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        double double0 = MathUtils.nextAfter(0.9999999999999999, 0.9999999999999999);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        double double0 = MathUtils.nextAfter(1.0, 2.2250738585072014E-308);
        assertEquals(0.9999999999999999, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        double double0 = MathUtils.scalb(-0.0, (-2142805033));
        assertEquals(-0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        double double0 = MathUtils.scalb(Float.NaN, 768);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, 1691);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        double double0 = MathUtils.scalb(1691, 1691);
        assertEquals((-5.760168071563026E-105), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        double double0 = MathUtils.round(Double.NaN, 0, 0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        float float0 = MathUtils.round((float) 1, 1, 1);
        assertEquals(0.9F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        float float0 = MathUtils.round((float) 5, 5, 5);
        assertEquals(5.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round((float) 742, 742, 742);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid rounding method.
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        float float0 = MathUtils.round((-1994.4698F), 3, 3);
        assertEquals((-1994.47F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        float float0 = MathUtils.round(11.094489F, 29, 5);
        assertEquals(11.094489F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        float float0 = MathUtils.round((float) 6, (-1), 6);
        assertEquals(10.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        float float0 = MathUtils.round((float) 6, 6, 6);
        assertEquals(6.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        float float0 = MathUtils.round((float) 6, 4154560, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        float float0 = MathUtils.round((-727.0F), (-1));
        assertEquals((-730.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        float float0 = MathUtils.round((float) (-1742), 7, 7);
        assertEquals((-1741.9999F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        byte byte0 = MathUtils.sign((byte) (-127));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 124);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        double double0 = MathUtils.sign((-2698.540446));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        double double0 = MathUtils.sign((double) Float.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        double double0 = MathUtils.sign(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        double double0 = MathUtils.sign(3.141592653589793);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        float float0 = MathUtils.sign((float) (-21));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        float float0 = MathUtils.sign(0.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        float float0 = MathUtils.sign(3250.0F);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        int int0 = MathUtils.sign(1069);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        int int0 = MathUtils.sign(0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        int int0 = MathUtils.sign((-6));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        long long0 = MathUtils.sign((-9218868437227405269L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        long long0 = MathUtils.sign(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        long long0 = MathUtils.sign(866L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        short short0 = MathUtils.sign((short) (byte) 67);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        short short0 = MathUtils.sign((short) (-615));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck((-2147483645), 2738);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(1073741824, (-2127855616));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        int int0 = MathUtils.subAndCheck(824, (-1));
        assertEquals(825, int0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(0L, (-9223372036854775783L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        long long0 = MathUtils.subAndCheck((long) (-3735), (-9223372036854775808L));
        assertEquals(9223372036854772073L, long0);
    }
}
