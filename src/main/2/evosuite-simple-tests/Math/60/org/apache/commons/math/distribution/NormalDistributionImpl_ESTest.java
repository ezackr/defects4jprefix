/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 21:51:43 GMT 2024
 */
package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NormalDistributionImpl_ESTest extends NormalDistributionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getMean();
        assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getMean();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.density(1.0E-9);
        assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.density(1.0E-9);
        assertEquals(0.3989422804014327, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.sample();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.sample();
        assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.sample();
        assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getStandardDeviation();
        assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getStandardDeviation();
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.5);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test410() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.5);
        assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
    }

    @Test(timeout = 4000)
    public void test511() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = null;
        try {
            normalDistributionImpl0 = new NormalDistributionImpl(571.23939082, (-689.436));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -689.436 is smaller than, or equal to, the minimum (0): standard deviation (-689.436)
            //
            verifyException("org.apache.commons.math.distribution.NormalDistributionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test612() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test613() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
        assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
    }

    @Test(timeout = 4000)
    public void test614() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
        assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test715() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test716() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
        assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test717() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
        assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
    }

    @Test(timeout = 4000)
    public void test818() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0E-9);
        assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test819() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0E-9);
        assertEquals((-5.997807014826545), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test920() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getInitialDomain(3042.64666897968);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test921() throws Throwable {
        NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
        double double0 = normalDistributionImpl0.getInitialDomain(3042.64666897968);
        assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
    }
}
