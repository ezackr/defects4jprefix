/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 16:29:18 GMT 2024
 */
package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
        assertEquals(6, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        // Undeclared exception!
        try {
            MathArrays.buildArray((Field<Object>) null, (-1257), (-1257));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = MathArrays.copyOf(intArray0);
        assertEquals(2, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = MathArrays.copyOf(intArray0);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        // Undeclared exception!
        try {
            MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[][] doubleArray1 = new double[4][8];
        try {
            MathArrays.sortInPlace(doubleArray0, doubleArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 8 != 9
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        double[][] doubleArray1 = new double[6][1];
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        assertEquals(6, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        double[][] doubleArray1 = new double[0][1];
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        double[] doubleArray0 = new double[8];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        double[][] doubleArray1 = new double[0][8];
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = MathArrays.scale((-1422.922707), doubleArray0);
        assertArrayEquals(new double[] { -0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        double[] doubleArray0 = new double[9];
        MathArrays.scaleInPlace(0.0, doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = new double[13];
        try {
            MathArrays.ebeAdd(doubleArray1, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 13 != 5
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        double[] doubleArray0 = new double[7];
        double[] doubleArray1 = new double[4];
        try {
            MathArrays.ebeSubtract(doubleArray0, doubleArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 7 != 4
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
        try {
            MathArrays.ebeMultiply(doubleArray0, doubleArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 4 != 7
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
        boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
        boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
        assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[0];
        try {
            MathArrays.ebeDivide(doubleArray1, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 0 != 9
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        double[] doubleArray0 = new double[3];
        double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        int[] intArray0 = new int[6];
        int int0 = MathArrays.distance1(intArray0, intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = MathArrays.distance(doubleArray0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        int[] intArray0 = new int[8];
        double double0 = MathArrays.distance(intArray0, intArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        double[] doubleArray0 = new double[17];
        double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        int[] intArray0 = new int[3];
        int int0 = MathArrays.distanceInf(intArray0, intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringArray0[1] = "";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringArray0[1] = "";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "RF7C#xnOe-mO<vW]4MM";
        stringArray0[1] = "$VALUES";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "T";
        stringArray0[1] = "T";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "ND/.Ha";
        stringArray0[1] = "2M~d";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2934() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringArray0[1] = "";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3035() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringArray0[1] = "parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible";
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3136() throws Throwable {
        double[] doubleArray0 = new double[7];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3237() throws Throwable {
        double[] doubleArray0 = new double[10];
        doubleArray0[1] = Double.NaN;
        try {
            MathArrays.checkOrder(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // points 2 and 3 are not strictly increasing (0 >= 0)
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test3338() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 259.7787;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3439() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        try {
            MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // points 0 and 1 are not strictly decreasing (0 <= 0)
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test3540() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[1] = Double.NaN;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3641() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = 1582.0916516897635;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3742() throws Throwable {
        long[][] longArray0 = new long[6][5];
        MathArrays.checkRectangular(longArray0);
        assertEquals(6, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test3843() throws Throwable {
        long[][] longArray0 = new long[3][2];
        long[] longArray1 = new long[11];
        longArray0[0] = longArray1;
        try {
            MathArrays.checkRectangular(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // some rows have length 2 while others have length 11
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test3944() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 3.814697265625E-6;
        MathArrays.checkPositive(doubleArray0);
        assertArrayEquals(new double[] { 3.814697265625E-6 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test4045() throws Throwable {
        double[] doubleArray0 = new double[9];
        try {
            MathArrays.checkPositive(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 0 is smaller than, or equal to, the minimum (0)
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test4146() throws Throwable {
        long[] longArray0 = new long[5];
        MathArrays.checkNonNegative(longArray0);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test4247() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[0] = (-1662L);
        try {
            MathArrays.checkNonNegative(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -1,662 is smaller than the minimum (0)
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test4348() throws Throwable {
        long[][] longArray0 = new long[2][5];
        MathArrays.checkNonNegative(longArray0);
        assertEquals(2, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test4449() throws Throwable {
        long[][] longArray0 = new long[2][5];
        long[] longArray1 = new long[4];
        longArray1[2] = (-9223372036854775808L);
        longArray0[0] = longArray1;
        try {
            MathArrays.checkNonNegative(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -9,223,372,036,854,775,808 is smaller than the minimum (0)
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = Double.NaN;
        double double0 = MathArrays.safeNorm(doubleArray0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 1.304E19;
        doubleArray0[2] = 1.304E19;
        double double0 = MathArrays.safeNorm(doubleArray0);
        assertEquals(1.8441344853345161E19, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test4752() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 1.0;
        doubleArray0[2] = 1.0;
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
        double double0 = MathArrays.safeNorm(doubleArray1);
        assertArrayEquals(new double[] { 1.917E-20, 0.0, 1.917E-20, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test4753() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 1.0;
        doubleArray0[2] = 1.0;
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
        double double0 = MathArrays.safeNorm(doubleArray1);
        assertEquals(2.7110473990692234E-20, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test4854() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 2257.5;
        double double0 = MathArrays.safeNorm(doubleArray0);
        assertEquals(2257.5, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test4955() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        double[][] doubleArray0 = new double[3][4];
        try {
            MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test5056() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        double[][] doubleArray1 = new double[5][3];
        doubleArray1[0] = null;
        try {
            MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test5157() throws Throwable {
        double[] doubleArray0 = new double[3];
        double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5258() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
        try {
            MathArrays.linearCombination(doubleArray1, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 5 != 3
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test5359() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[2] = 1.7976931348623157E308;
        double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5460() throws Throwable {
        double double0 = MathArrays.linearCombination((-2086.71767911782), (-2086.71767911782), (-2086.71767911782), (-2086.71767911782));
        assertEquals(8708781.344685722, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5561() throws Throwable {
        double double0 = MathArrays.linearCombination(Double.NaN, 1581.8793585643725, Double.NaN, 1581.8793585643725);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5662() throws Throwable {
        double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5763() throws Throwable {
        double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1582.0916516897635, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5864() throws Throwable {
        double double0 = MathArrays.linearCombination((double) 2859.6653F, (double) 2859.6653F, (double) 2859.6653F, (double) 2859.6653F, (double) 2859.6653F, (double) 2859.6653F, (double) 2859.6653F, (double) 2859.6653F);
        assertEquals(3.2710742127828836E7, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5965() throws Throwable {
        double double0 = MathArrays.linearCombination(0.0, 1582.0916516897635, Double.NaN, Double.NaN, 3.834E-20, 0.0, 0.0, 1582.0916516897635);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test6066() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6167() throws Throwable {
        float[] floatArray0 = new float[3];
        boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6268() throws Throwable {
        float[] floatArray0 = new float[5];
        boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6369() throws Throwable {
        boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6470() throws Throwable {
        float[] floatArray0 = new float[2];
        float[] floatArray1 = new float[9];
        boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6571() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[4] = Float.NaN;
        boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6672() throws Throwable {
        float[] floatArray0 = new float[10];
        boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6773() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6874() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6975() throws Throwable {
        boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7076() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = new float[0];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7177() throws Throwable {
        float[] floatArray0 = new float[1];
        floatArray0[0] = 18.842045F;
        float[] floatArray1 = new float[1];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7278() throws Throwable {
        boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7379() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7480() throws Throwable {
        double[] doubleArray0 = new double[8];
        boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7581() throws Throwable {
        double[] doubleArray0 = new double[2];
        boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7682() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = new double[2];
        boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7783() throws Throwable {
        boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7884() throws Throwable {
        double[] doubleArray0 = new double[2];
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7985() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8086() throws Throwable {
        double[] doubleArray0 = new double[8];
        boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8187() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8288() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
        assertArrayEquals(new double[] { 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test8289() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8390() throws Throwable {
        double[] doubleArray0 = new double[10];
        try {
            MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot normalize to an infinite value
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test8491() throws Throwable {
        try {
            MathArrays.normalizeArray((double[]) null, Double.NaN);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot normalize to NaN
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test8592() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
        try {
            MathArrays.normalizeArray(doubleArray0, (-1558.77));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array contains an infinite element, \u221E at index 0
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test8693() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[1] = Double.NaN;
        try {
            MathArrays.normalizeArray(doubleArray0, 0.0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // array sums to zero
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test8794() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = 1582.0916516897635;
        doubleArray0[1] = Double.NaN;
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1582.0916516897635);
        assertArrayEquals(new double[] { 0.0, Double.NaN, 1582.0916516897637 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test8895() throws Throwable {
        Class<FieldElement> class0 = FieldElement.class;
        Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(field0).getRuntimeClass();
        doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
        Object[][] objectArray0 = MathArrays.buildArray(field0, 18, 18);
        assertEquals(18, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test8996() throws Throwable {
        double[] doubleArray0 = new double[0];
        try {
            MathArrays.convolve(doubleArray0, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no data
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test9097() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[0];
        try {
            MathArrays.convolve(doubleArray0, doubleArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no data
            //
            verifyException("org.apache.commons.math3.util.MathArrays", e);
        }
    }
}
