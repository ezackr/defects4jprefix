/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:19:40 GMT 2024
 */
package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Cos;
import org.apache.commons.math3.analysis.function.Inverse;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.097, 0.097);
        Power power0 = new Power(0.097);
        GoalType goalType0 = GoalType.MAXIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(507, (UnivariateFunction) power0, goalType0, (-1637.876917), 0.097, (double) 507);
        assertEquals(1.8116677666849854, univariatePointValuePair0.getValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        BrentOptimizer brentOptimizer0 = null;
        try {
            brentOptimizer0 = new BrentOptimizer((-1668.75207687), (-1668.75207687));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -1,668.752 is smaller than the minimum (0)
            //
            verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        BrentOptimizer brentOptimizer0 = null;
        try {
            brentOptimizer0 = new BrentOptimizer(2.0, (-0.36699607515349436));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -0.367 is smaller than, or equal to, the minimum (0)
            //
            verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.097, 0.097);
        Inverse inverse0 = new Inverse();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2146557459, (UnivariateFunction) inverse0, goalType0, 412.858873588, (double) 2146557459, 412.858873588);
        assertEquals(1.8861330396812537E9, univariatePointValuePair0.getPoint(), 0.01);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.097, 0.097);
        Power power0 = new Power(0.097);
        GoalType goalType0 = GoalType.MAXIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(507, (UnivariateFunction) power0, goalType0, (double) 507, (double) 507, 0.097);
        assertEquals(1.801953550297659, univariatePointValuePair0.getValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.097, 0.097);
        Cos cos0 = new Cos();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(535, (UnivariateFunction) cos0, goalType0, 0.097, (double) 535, 0.097);
        assertEquals(184.48682408009063, univariatePointValuePair0.getPoint(), 0.01);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.097, 0.097);
        Power power0 = new Power(0.097);
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(513, (UnivariateFunction) power0, goalType0, (-335.3), (-335.3), (double) 513);
        assertEquals(0.643741527048949, univariatePointValuePair0.getValue(), 0.01);
    }
}
