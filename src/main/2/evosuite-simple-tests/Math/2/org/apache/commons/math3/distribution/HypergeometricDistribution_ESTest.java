/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 16:26:33 GMT 2024
 */
package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2269, 2269, 2269);
        hypergeometricDistribution0.getNumericalVariance();
        double double0 = hypergeometricDistribution0.getNumericalVariance();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2269, 2269, 2269);
        hypergeometricDistribution0.getNumericalVariance();
        double double0 = hypergeometricDistribution0.getNumericalVariance();
        assertEquals(2269.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3693, 1922, 202);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(957);
        assertEquals(105.12970484700786, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3693, 1922, 202);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(957);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Well512a well512a0 = new Well512a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2241, 2241, 2241);
        int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.5476909198201638);
        assertEquals(2241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Well512a well512a0 = new Well512a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2241, 2241, 2241);
        int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.5476909198201638);
        assertEquals(2241, int0);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 367, 367, 367);
        boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
        assertEquals(367.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 367, 367, 367);
        boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 1922);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // population size (0)
            //
            verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(202, (-6), 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // number of successes (-6)
            //
            verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
        }
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        ISAACRandom iSAACRandom0 = new ISAACRandom((-84L));
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 226, 226, (-1856));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // number of samples (-1,856)
            //
            verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
        }
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(1269, 2309, 2309);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // number of successes (2,309) must be less than or equal to population size (1,269)
            //
            verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
        }
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(242, 242, 871);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // sample size (871) must be less than or equal to population size (242)
            //
            verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
        }
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1281, 1281, 202);
        double double0 = hypergeometricDistribution0.cumulativeProbability((-420));
        assertEquals(202.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1281, 1281, 202);
        double double0 = hypergeometricDistribution0.cumulativeProbability((-420));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3693, 1922, 202);
        int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1352.551503433, (-726), 731);
        assertEquals(105.12970484700786, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3693, 1922, 202);
        int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1352.551503433, (-726), 731);
        assertEquals(731, int0);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        Well512a well512a0 = new Well512a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2274, 2274, 2274);
        double double0 = hypergeometricDistribution0.probability((-593));
        assertEquals(2274.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        Well512a well512a0 = new Well512a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2274, 2274, 2274);
        double double0 = hypergeometricDistribution0.probability((-593));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3693, 1922, 202);
        double double0 = hypergeometricDistribution0.probability(3693);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3693, 1922, 202);
        double double0 = hypergeometricDistribution0.probability(3693);
        assertEquals(105.12970484700786, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        Well512a well512a0 = new Well512a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2241, 2241, 2241);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
        assertEquals(2241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1322() throws Throwable {
        Well512a well512a0 = new Well512a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2241, 2241, 2241);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1423() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3693, 1922, 202);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(202);
        assertEquals(2.416068447785971E-60, double0, 0.01);
    }
}
