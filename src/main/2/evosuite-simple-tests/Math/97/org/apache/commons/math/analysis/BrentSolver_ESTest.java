/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:16:34 GMT 2024
 */
package org.apache.commons.math.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.PolynomialFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[7];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-16.509743), 1.1106963449947216E-4, (-1.0));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[7];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        // Undeclared exception!
        try {
            brentSolver0.solve((-1382.2856743257173), 6.095308085605211E-4, 2.0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Initial guess is not in search interval.  Initial: 2.0  Endpoints: [-1382.2856743257173,6.095308085605211E-4]
            //
            verifyException("org.apache.commons.math.analysis.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[] doubleArray0 = new double[7];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve(0.7937025125013369, 2900.99845, Double.NaN);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[1] = 2.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-1.0), 0.5, 0.5);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        double[] doubleArray0 = new double[7];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve(Double.NaN, (-2182.08), Double.NaN);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[1] = 2.0;
        doubleArray0[4] = (-1.0);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        double double0 = brentSolver0.solve((-3833.479), 2.0, 0.5);
        assertEquals(0.7937005710980757, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[1] = (-136.308);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-3282.6), 49.8000993744);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        double[] doubleArray0 = new double[7];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        // Undeclared exception!
        try {
            brentSolver0.solve(0.0, 1.0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Function values at endpoints do not have different signs.  Endpoints: [0.0,1.0]  Values: [0.0,0.0]
            //
            verifyException("org.apache.commons.math.analysis.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 1.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        try {
            brentSolver0.solve(0.0, 5.00000000069889E-7, Double.NaN);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Maximal number of iterations (100) exceeded
            //
            verifyException("org.apache.commons.math.analysis.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-3913.8556);
        doubleArray0[5] = 951.0100571;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-3282.6), 49.8000993744);
        assertEquals(1.3270397604815476, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[1] = 2.0;
        doubleArray0[5] = (-1.0);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
        BrentSolver brentSolver0 = new BrentSolver(univariateRealFunction0);
        double double0 = brentSolver0.solve((-383.698), 1.0E-6);
        assertEquals((-0.7952707710581995), double0, 0.01);
    }
}
