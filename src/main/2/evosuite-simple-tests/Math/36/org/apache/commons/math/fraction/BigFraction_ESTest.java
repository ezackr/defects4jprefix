/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:45:02 GMT 2024
 */
package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.apache.commons.math.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) 610272733);
        BigFraction bigFraction1 = bigFraction0.ONE.divide((long) 610272733);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) 610272733);
        BigFraction bigFraction1 = bigFraction0.ONE.divide((long) 610272733);
        assertEquals((short) 1501, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) 610272733);
        BigFraction bigFraction1 = bigFraction0.ONE.divide((long) 610272733);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1237.0598207545925);
        int int0 = bigFraction0.ONE_THIRD.compareTo(bigFraction0);
        assertEquals((short) 1237, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1237.0598207545925);
        int int0 = bigFraction0.ONE_THIRD.compareTo(bigFraction0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
        double double0 = bigFraction0.pow((double) 400);
        assertEquals(1.821797716821873E-89, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_THIRD;
        long long0 = bigFraction0.THREE_QUARTERS.getNumeratorAsLong();
        assertEquals(3L, long0);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) 610272733);
        BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(2236);
        assertEquals((short) 2236, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) 610272733);
        BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(2236);
        assertEquals((byte) (-35), bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
        BigFraction bigFraction1 = bigFraction0.multiply(682L);
        assertEquals((byte) (-58), bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
        BigFraction bigFraction1 = bigFraction0.MINUS_ONE.abs();
        assertEquals((byte) 1, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
        BigFraction bigFraction1 = bigFraction0.MINUS_ONE.abs();
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        long long0 = bigFraction0.longValue();
        assertEquals(553L, long0);
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328, 610272733);
        double double0 = bigFraction0.THREE_FIFTHS.percentageValue();
        assertEquals(60.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328, 610272733);
        double double0 = bigFraction0.THREE_FIFTHS.percentageValue();
        assertEquals((byte) 37, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.multiply(454);
        assertEquals((byte) 90, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        int int0 = bigFraction0.TWO_THIRDS.intValue();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        BigFraction bigFraction0 = BigFraction.getReducedFraction(1105, 1105);
        assertEquals((short) 1, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        int int0 = bigFraction0.TWO.getDenominatorAsInt();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-1));
        BigInteger bigInteger0 = bigFraction0.getDenominator();
        assertEquals((short) 1, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-1));
        BigInteger bigInteger0 = bigFraction0.getDenominator();
        assertEquals((short) (-1), bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328, (-2147483638));
        BigFraction bigFraction1 = bigFraction0.subtract((-2147483638));
        assertEquals((short) 2843, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        bigFraction0.ZERO.bigDecimalValue();
        assertEquals((short) 553, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(0.0);
        BigFractionField bigFractionField0 = bigFraction0.ONE_QUARTER.getField();
        assertNotNull(bigFractionField0);
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1683.1609);
        BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigFraction0);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1683.1609);
        BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigFraction0);
        assertEquals((short) (-1682), bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
        float float0 = bigFraction0.TWO_THIRDS.floatValue();
        assertEquals(0.6666667F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(293, 866);
        BigInteger bigInteger0 = bigFraction0.getNumerator();
        assertEquals((short) 293, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(293, 866);
        BigInteger bigInteger0 = bigFraction0.getNumerator();
        assertEquals((short) 0, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = bigFraction0.ONE.add(378L);
        BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
        boolean boolean0 = bigFraction2.equals(bigFraction0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = bigFraction0.ONE.add(378L);
        BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
        boolean boolean0 = bigFraction2.equals(bigFraction0);
        assertEquals((short) 1, bigFraction2.shortValue());
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = bigFraction0.ONE.add(378L);
        BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
        boolean boolean0 = bigFraction2.equals(bigFraction0);
        assertEquals((byte) 41, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1.0);
        // Undeclared exception!
        try {
            bigFraction0.TWO_QUARTERS.bigDecimalValue(531);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid rounding mode
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigFraction bigFraction0 = new BigFraction(bigInteger0);
        BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
        assertEquals((byte) 1, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test2234() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigFraction bigFraction0 = new BigFraction(bigInteger0);
        BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
        assertEquals((byte) 10, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328);
        BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(737);
        assertEquals((short) 2853, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328);
        BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(737);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        bigFraction0.ONE_QUARTER.getDenominatorAsLong();
        assertEquals((short) 553, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test2538() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
        BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.subtract(126575L);
        assertEquals((byte) (-110), bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(293, 866);
        bigFraction0.TWO.getNumeratorAsInt();
        assertEquals((short) 0, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test2640() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(293, 866);
        bigFraction0.TWO.getNumeratorAsInt();
        assertEquals((byte) 0, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test2741() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        bigFraction0.hashCode();
        assertEquals((byte) 1, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test2842() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-1131L), (-9223372036854775808L));
        assertEquals((short) 0, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test2943() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(0.3970000000000482, (-1919));
        // Undeclared exception!
        try {
            bigFraction0.bigDecimalValue((-1919), 4151);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid rounding mode
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test3044() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(2853.8645328, (-107), (-2817));
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Unable to convert 2,853.865 to fraction after -2,817 iterations
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3145() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // denominator must be different from 0
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3246() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-4.4703076268400615E-80));
        BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(707L);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test3247() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-4.4703076268400615E-80));
        BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(707L);
        assertEquals((byte) 0, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test3248() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-4.4703076268400615E-80));
        BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(707L);
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test3349() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(1.528388084444653E68, 1.528388084444653E68, 52);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert 152,838,808,444,465,300,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3450() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-4181.8), 1237.0598207545925, 6);
        assertEquals((short) (-4182), bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test3551() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction((double) 610272733, 610272733);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert 610,272,733 to fraction (9,223,372,036,244,503,076/9,223,372,036,854,775,807)
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3652() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction((-2785), (-2785), (-2785));
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert -2,785 to fraction (-9,223,372,036,854,773,022/9,223,372,036,854,775,807)
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3753() throws Throwable {
        BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 806);
        assertEquals((byte) 0, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test3854() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_HALF;
        BigFraction bigFraction1 = bigFraction0.abs();
        assertSame(bigFraction1, bigFraction0);
    }

    @Test(timeout = 4000)
    public void test3955() throws Throwable {
        BigFraction bigFraction0 = BigFraction.MINUS_ONE;
        BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
        assertEquals((short) (-2), bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test4056() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-1067.22430265));
        // Undeclared exception!
        try {
            bigFraction0.TWO_FIFTHS.add((BigFraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4157() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
        assertSame(bigFraction1, bigFraction0);
    }

    @Test(timeout = 4000)
    public void test4258() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-1067.22430265));
        BigInteger bigInteger0 = BigInteger.TEN;
        BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(bigInteger0);
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        assertEquals((short) (-1061), bigFraction2.shortValue());
    }

    @Test(timeout = 4000)
    public void test4359() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328);
        BigInteger bigInteger0 = BigInteger.ZERO;
        // Undeclared exception!
        try {
            bigFraction0.THREE_FIFTHS.divide(bigInteger0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // denominator must be different from 0
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4460() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-555.8669871590973));
        // Undeclared exception!
        try {
            bigFraction0.divide((BigFraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4561() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = BigFraction.ZERO;
        // Undeclared exception!
        try {
            bigFraction0.divide(bigFraction1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // denominator must be different from 0
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        boolean boolean0 = bigFraction0.equals((Object) null);
        assertEquals((short) 553, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test4663() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        boolean boolean0 = bigFraction0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4764() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = new BigFraction(553.603);
        boolean boolean0 = bigFraction1.equals(bigFraction0);
        assertEquals((short) 553, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test4765() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = new BigFraction(553.603);
        boolean boolean0 = bigFraction1.equals(bigFraction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4866() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328);
        // Undeclared exception!
        try {
            bigFraction0.TWO_FIFTHS.multiply((BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4967() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-2991.7116617774313));
        // Undeclared exception!
        try {
            bigFraction0.ONE_HALF.multiply((BigFraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test5068() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_THIRD;
        BigFraction bigFraction1 = bigFraction0.ZERO.multiply(bigFraction0);
        assertNotSame(bigFraction1, bigFraction0);
    }

    @Test(timeout = 4000)
    public void test5069() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_THIRD;
        BigFraction bigFraction1 = bigFraction0.ZERO.multiply(bigFraction0);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test5170() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328, 610272733);
        BigFraction bigFraction1 = new BigFraction(0.0);
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        assertTrue(bigFraction2.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test5171() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328, 610272733);
        BigFraction bigFraction1 = new BigFraction(0.0);
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        assertEquals((byte) 37, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test5272() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
        BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(151);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test5273() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
        BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(151);
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test5374() throws Throwable {
        BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
        BigFraction bigFraction1 = bigFraction0.TWO.pow((-2793));
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test5375() throws Throwable {
        BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
        BigFraction bigFraction1 = bigFraction0.TWO.pow((-2793));
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test5476() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_HALF;
        BigFraction bigFraction1 = bigFraction0.TWO.pow((-1470L));
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test5477() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_HALF;
        BigFraction bigFraction1 = bigFraction0.TWO.pow((-1470L));
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test5578() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
        assertTrue(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test5579() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test5680() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(0.828710000000001);
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) (-82);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(bigInteger0);
        assertEquals((short) 0, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test5681() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(0.828710000000001);
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) (-82);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(bigInteger0);
        assertEquals((short) 32106, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test5782() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(554.0);
        // Undeclared exception!
        try {
            bigFraction0.subtract((BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test5883() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-494.326252852));
        // Undeclared exception!
        try {
            bigFraction0.ONE.subtract((BigFraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
            //
            verifyException("org.apache.commons.math.fraction.BigFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test5984() throws Throwable {
        BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
        BigFraction bigFraction1 = BigFraction.ZERO;
        BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
        assertSame(bigFraction2, bigFraction0);
    }

    @Test(timeout = 4000)
    public void test5985() throws Throwable {
        BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
        BigFraction bigFraction1 = BigFraction.ZERO;
        BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
        assertFalse(bigFraction2.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test6086() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = BigFraction.MINUS_ONE;
        BigFraction bigFraction2 = bigFraction0.ZERO.subtract(bigFraction1);
        assertEquals((byte) 1, bigFraction2.byteValue());
    }

    @Test(timeout = 4000)
    public void test6087() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = BigFraction.MINUS_ONE;
        BigFraction bigFraction2 = bigFraction0.ZERO.subtract(bigFraction1);
        assertFalse(bigFraction2.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test6088() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(553.603);
        BigFraction bigFraction1 = BigFraction.MINUS_ONE;
        BigFraction bigFraction2 = bigFraction0.ZERO.subtract(bigFraction1);
        assertEquals((short) 553, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test6189() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2853.8645328, 610272733);
        String string0 = bigFraction0.toString();
        assertEquals("1783665333 / 625000", string0);
    }

    @Test(timeout = 4000)
    public void test6290() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) 610272733);
        String string0 = bigFraction0.toString();
        assertEquals("610272733", string0);
    }

    @Test(timeout = 4000)
    public void test6391() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(0.0);
        String string0 = bigFraction0.toString();
        assertEquals("0", string0);
    }
}
