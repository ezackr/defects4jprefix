/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:51:41 GMT 2024
 */
package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        vector3D0.NEGATIVE_INFINITY.getDelta();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D.angle(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1.9998000000000005, 1.9998000000000005);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        vector3D0.PLUS_K.add(1771.060242952833, vector3D0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D.distanceInf(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D.distance1(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        vector3D0.NaN.negate();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        vector3D0.getAlpha();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D.distance(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        vector3D0.toString();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        vector3D0.add(vector3D0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        vector3D0.NEGATIVE_INFINITY.subtract(1.9998000000000005, vector3D0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        vector3D0.PLUS_I.getNorm1();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1400.969342918, 1400.969342918, 700.3623);
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D.distanceSq(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        vector3D0.NEGATIVE_INFINITY.subtract(vector3D0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        vector3D0.getNormInf();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = new Vector3D(1.1102230246251565E-16, vector3D0, 1.1102230246251565E-16, vector3D0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = new Vector3D((-2129.856), vector3D0, (-2129.856), vector3D0, 1530.643640371068, vector3D0, 196.7415, vector3D0);
        Vector3D.angle(vector3D0, vector3D1);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        vector3D0.normalize();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        // Undeclared exception!
        try {
            vector3D0.ZERO.normalize();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // cannot normalize a zero norm vector
            //
            verifyException("org.apache.commons.math.geometry.Vector3D", e);
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
        Vector3D.angle(vector3D0, vector3D1);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.orthogonal();
        Vector3D vector3D2 = vector3D0.orthogonal();
        vector3D1.equals(vector3D2);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        vector3D0.orthogonal();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        vector3D0.orthogonal();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1400.969342918, 1400.969342918, 700.3623);
        vector3D0.orthogonal();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        // Undeclared exception!
        try {
            Vector3D.angle(vector3D1, vector3D1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // zero norm
            //
            verifyException("org.apache.commons.math.geometry.Vector3D", e);
        }
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = Vector3D.NaN;
        vector3D0.equals(vector3D1);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
        vector3D1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Vector3D vector3D0 = new Vector3D(3315.2878303, 3315.2878303, Double.NaN);
        vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
        vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-0.6), Double.NEGATIVE_INFINITY, (-3311.15));
        vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1098.652555984, 1098.652555984, Double.NEGATIVE_INFINITY);
        vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        vector3D0.equals(vector3D0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        vector3D0.equals("?.R");
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = new Vector3D((-0.6), Double.NEGATIVE_INFINITY, (-3311.15));
        vector3D0.equals(vector3D1);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.orthogonal();
        vector3D0.equals(vector3D1);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = new Vector3D(1.9998000000000005, vector3D0);
        vector3D1.equals(vector3D0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1400.969342918, 1400.969342918, 700.3623);
        vector3D0.hashCode();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        vector3D0.NaN.hashCode();
    }
}
