/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:56:36 GMT 2024
 */
package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BracketingNthOrderBrentSolver_ESTest extends BracketingNthOrderBrentSolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        int int0 = bracketingNthOrderBrentSolver0.getMaximalOrder();
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, 61.169381773, (double) 1063, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, 61.169381773, (double) 1063, allowedSolution0);
        assertEquals(790.1105524166819, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
        // Undeclared exception!
        try {
            bracketingNthOrderBrentSolver0.solve(442379102, (UnivariateFunction) null, (double) 442379102, (double) 442379102, (double) 442379102, allowedSolution0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
        try {
            bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-15), (-15));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -15 is smaller than the minimum (2)
            //
            verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(5.581050118053099E-6, 5.581050118053099E-6, 1489);
        assertEquals(1489, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
        try {
            bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.5, 0.5, (-4));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -4 is smaller than the minimum (2)
            //
            verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.5, 0.5, 0.5, 3);
        assertEquals(3, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
        try {
            bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.5, 0.5, 0.5, (-4));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -4 is smaller than the minimum (2)
            //
            verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Gaussian gaussian0 = new Gaussian();
        AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(464, (UnivariateFunction) gaussian0, (-1.0E-6), (double) 464, allowedSolution0);
        assertEquals(231.9999995, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Gaussian gaussian0 = new Gaussian();
        AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(464, (UnivariateFunction) gaussian0, (-1.0E-6), (double) 464, allowedSolution0);
        assertEquals(231.9999995, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Sin sin0 = new Sin();
        AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) sin0, 0.0, (double) 1063, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Sin sin0 = new Sin();
        AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) sin0, 0.0, (double) 1063, allowedSolution0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(908, (UnivariateFunction) cos0, 6.636396724067746E-8, (double) 908, allowedSolution0);
        assertEquals(221.4822820423843, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Sin sin0 = new Sin();
        AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(718971921, (UnivariateFunction) sin0, (-1.4379095864E-313), 0.0, allowedSolution0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Sin sin0 = new Sin();
        AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(718971921, (UnivariateFunction) sin0, (-1.4379095864E-313), 0.0, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        // Undeclared exception!
        try {
            bracketingNthOrderBrentSolver0.solve(1948561481, (UnivariateFunction) cos0, (double) 1948561481);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
            //
            verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Sinc sinc0 = new Sinc();
        AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) sinc0, (double) 1063, 1.65748157925005E114, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Sinc sinc0 = new Sinc();
        AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) sinc0, (double) 1063, 1.65748157925005E114, allowedSolution0);
        assertEquals(4.143703948125125E113, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, (double) 1063, 4174.799063495198, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, (double) 1063, 4174.799063495198, allowedSolution0);
        assertEquals(2854.136925806633, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, 240.65268080156102, (double) 1063, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, 240.65268080156102, (double) 1063, allowedSolution0);
        assertEquals(997.4556675147594, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, (-567.4784685300746), (double) 1063, allowedSolution0);
        assertEquals(940.9069990525118, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Sin sin0 = new Sin();
        AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) sin0, 9.194752488516188E-21, (double) 1063, allowedSolution0);
        assertEquals(3.1415926535897927, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, (double) 1063, 1259.9729, allowedSolution0);
        assertEquals(1220.5087459196357, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Cos cos0 = new Cos();
        AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1063, (UnivariateFunction) cos0, (double) 1063, 1259.9729, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Identity identity0 = new Identity();
        AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1242, (UnivariateFunction) identity0, (-8.846040040259342E-8), (double) 1242, allowedSolution0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
        Identity identity0 = new Identity();
        AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
        double double0 = bracketingNthOrderBrentSolver0.solve(1242, (UnivariateFunction) identity0, (-8.846040040259342E-8), (double) 1242, allowedSolution0);
        assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
    }
}
