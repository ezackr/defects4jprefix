/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:40:54 GMT 2024
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
        assertArrayEquals(new double[] { 0.0 }, doubleArray2, 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        try {
            eigenDecompositionImpl0.getImagEigenvalue((-2147480981));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -2147480981
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        try {
            eigenDecompositionImpl0.getRealEigenvalue((-1808));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1808
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
        assertFalse(doubleArray2.equals((Object) doubleArray1));
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(33, 33);
        array2DRowRealMatrix0.addToEntry(11, 19, 19);
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, Double.NEGATIVE_INFINITY);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // eigen decomposition of assymetric matrices not supported yet
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        eigenDecompositionImpl0.getV();
        RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
        assertFalse(realMatrix1.equals((Object) realMatrix0));
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(11, 11);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 11);
        eigenDecompositionImpl0.getVT();
        RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
        assertEquals(11, realMatrix0.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(11, 11);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 11);
        eigenDecompositionImpl0.getVT();
        RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
        assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(43, 43);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 43);
        eigenDecompositionImpl0.getD();
        RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
        assertNotNull(realMatrix0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(43, 43);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 43);
        eigenDecompositionImpl0.getD();
        RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
        assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(11, 11);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 11);
        eigenDecompositionImpl0.getVT();
        eigenDecompositionImpl0.getVT();
        assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
        RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
        assertTrue(realMatrix2.equals((Object) realMatrix1));
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(11, 11);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 11);
        eigenDecompositionImpl0.getVT();
        try {
            eigenDecompositionImpl0.getEigenvector(11);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 11
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(29, 29);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 29);
        // Undeclared exception!
        eigenDecompositionImpl0.getEigenvector(29);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix1.multiply((RealMatrix) array2DRowRealMatrix0);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
        double double0 = eigenDecompositionImpl0.getDeterminant();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
        eigenDecompositionImpl0.getSolver();
        assertFalse(realMatrix0.equals((Object) realMatrix1));
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(38, 38);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-529.2814));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.5);
        assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(42, 42);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(4.994390187397353E-26);
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4.994390187397353E-26);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // cannot solve degree 3 equation
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(23, 23);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(3.935841233061558E-13);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3.935841233061558E-13);
        RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, (-12.598181764962263));
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(23, 23);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(3.935841233061558E-13);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3.935841233061558E-13);
        RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, (-12.598181764962263));
        assertEquals(-0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(6, 6);
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, Double.POSITIVE_INFINITY);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(38, 38);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.08325);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.08325);
        assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(8, 8);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(8);
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-0.6));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(20, 20);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-1944.4224536114048));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1944.4224536114048));
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(37, 37);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.08325);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.5);
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(36, 36);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-533.758699274462));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.5);
        assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(12, 12);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-637.4379853));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-637.4379853));
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(6, 6);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(3649.397923);
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(6, 6);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-1899.49026155403));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN);
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(38, 38);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.08);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.2250738585072014E-308);
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(23, 23);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-1908.8013432639));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1908.8013432639));
        assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(33, 33);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.08325);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.08325);
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(19, 19);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.038221794416886334);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.038221794416886334);
        assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(38, 38);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(7.551830004248926E-34);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 7.551830004248926E-34);
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(38, 38);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-1899.49026155403));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1899.49026155403));
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(38, 38);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd((-1899.490261554));
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1899.490261554));
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
        assertNotNull(realMatrix1);
    }

    @Test(timeout = 4000)
    public void test3337() throws Throwable {
        double[][] doubleArray0 = new double[1][6];
        double[] doubleArray1 = new double[6];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix1);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0);
        RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, (-992.56609879789));
        DecompositionSolver decompositionSolver0 = eigenDecompositionImpl1.getSolver();
        assertTrue(decompositionSolver0.isNonSingular());
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[8];
        doubleArray1[6] = (-1166.702504832132);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1119.0628380440305);
        RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
        assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3439() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[8];
        doubleArray1[6] = (-1166.702504832132);
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1119.0628380440305);
        RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
        assertNotNull(realMatrix0);
    }
}
