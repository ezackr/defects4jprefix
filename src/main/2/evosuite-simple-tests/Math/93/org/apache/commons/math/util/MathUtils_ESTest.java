/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:09:36 GMT 2024
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        int int0 = MathUtils.hash((double) 1);
        assertEquals(1072693248, int0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        int int0 = MathUtils.hash((double[]) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.lcm(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: gcd is 2^31
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        float float0 = MathUtils.round((float) 3, 3, 3);
        assertEquals(2.999F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        long long0 = MathUtils.addAndCheck((-40L), (-40L));
        assertEquals((-80L), long0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double double0 = MathUtils.sinh(1230.098278448103);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = MathUtils.normalizeAngle((-893.3853697343), (-893.3853697343));
        assertEquals((-893.3853697343), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(778, 778);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        float float0 = MathUtils.round((-4976.5386F), 3);
        assertEquals((-4976.539F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        double double0 = MathUtils.cosh(776);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 1);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        double double0 = MathUtils.log(4.9E-324, 4.9E-324);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck((-2147483646), (-2147483646));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        int int0 = MathUtils.addAndCheck(13, 13);
        assertEquals(26, int0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck(1879048192, 1879048192);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        long long0 = MathUtils.subAndCheck(1L, 9223372036854775802L);
        assertEquals((-9223372036854775801L), long0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        long long0 = MathUtils.subAndCheck(0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck((-9223372036854775792L), (long) 8388607);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(9223372036854773237L, (-2620L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(5, (-1));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient(25, 52);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient((-1), (-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(10256, 10256);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(5, 0);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(5, 1);
        assertEquals(5L, long0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(0, (-1));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient(10256, 402);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // result too large to represent in a long integer
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientLog((-22), 1525);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientLog((-10), (-10));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(510, 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(2625, 1);
        assertEquals(7.872836175025724, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(0, (-1));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) Float.NaN, 1.1102230246251565E-16);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) Float.NaN, (double) Float.NaN);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        double[] doubleArray0 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        double[] doubleArray0 = new double[9];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        double[] doubleArray0 = new double[5];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = (double) 159;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        long long0 = MathUtils.factorial(5);
        assertEquals(120L, long0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial(41);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // factorial value is too large to fit in a long
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for n!
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorialLog((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n > 0 for n!
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        int int0 = MathUtils.gcd(0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        int int0 = MathUtils.gcd(2146709319, 0);
        assertEquals(2146709319, int0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.lcm(1879048192, (-1335));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        int int0 = MathUtils.lcm(904, 1479);
        assertEquals(1337016, int0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        int int0 = MathUtils.lcm(10256, 10256);
        assertEquals(10256, int0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) (-15));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) 11);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        double double0 = MathUtils.indicator(487.08311134098);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        double double0 = MathUtils.indicator((double) Float.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        double double0 = MathUtils.indicator((-2001.0));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        float float0 = MathUtils.indicator(Float.NaN);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        int int0 = MathUtils.indicator((-526));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        int int0 = MathUtils.indicator(1879048192);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        long long0 = MathUtils.indicator((-23L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        long long0 = MathUtils.indicator(220L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        short short0 = MathUtils.indicator((short) (-13));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        short short0 = MathUtils.indicator((short) 0);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck(1879048171, 1879048171);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-23L), (-23L));
        assertEquals(529L, long0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        long long0 = MathUtils.mulAndCheck((long) 0, (long) (-487));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        long long0 = MathUtils.mulAndCheck(0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((long) (-1017), (-9223372036854775792L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        long long0 = MathUtils.mulAndCheck(226L, (-1L));
        assertEquals((-226L), long0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((long) (-1017), 9223372036854775795L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck(20922789888013L, 20922789888013L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        long long0 = MathUtils.mulAndCheck(10256L, 10256L);
        assertEquals(105185536L, long0);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        double double0 = MathUtils.nextAfter(Double.NaN, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        float float0 = MathUtils.round((float) 159, 159, 5);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        float float0 = MathUtils.round(0.0F, (-3016));
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        double double0 = MathUtils.nextAfter(0.0, (-655.69904));
        assertEquals((-4.9E-324), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        double double0 = MathUtils.nextAfter(0.9999999999999999, 1879048192);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        double double0 = MathUtils.nextAfter(1, (-85));
        assertEquals(0.9999999999999999, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        double double0 = MathUtils.scalb(0, 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 776);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        double double0 = MathUtils.scalb(Double.NaN, 1);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        double double0 = MathUtils.scalb((-2637), (-2637));
        assertEquals((-1.3014955385397873E-174), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        double double0 = MathUtils.round(Double.NaN, 0, 0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        float float0 = MathUtils.round((float) 0, 0, 0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        float float0 = MathUtils.round((float) 1, 1, 1);
        assertEquals(0.9F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        float float0 = MathUtils.round((-778.0F), 5, 2);
        assertEquals((-778.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        float float0 = MathUtils.round(0.0F, 2542, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round(0.55408376F, 7, 7);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Inexact result from rounding
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round((float) (-12), (-12), (-12));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid rounding method.
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        float float0 = MathUtils.round((float) 5, 5, 2);
        assertEquals(5.00001F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        float float0 = MathUtils.round((-4976.5386F), 3, 3);
        assertEquals((-4976.539F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        float float0 = MathUtils.round((float) 5, 5, 5);
        assertEquals(5.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        float float0 = MathUtils.round((-0.07242349F), 1, 6);
        assertEquals((-0.1F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        float float0 = MathUtils.round((float) 6, 6, 6);
        assertEquals(6.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        float float0 = MathUtils.round((float) 6, 2542, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        float float0 = MathUtils.round(2.1887798F, 7, 7);
        assertEquals(2.1887798F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        byte byte0 = MathUtils.sign((byte) (-15));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 12);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        double double0 = MathUtils.sign((double) (-1));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        double double0 = MathUtils.sign((double) Float.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        double double0 = MathUtils.sign(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        double double0 = MathUtils.sign((double) 51);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        float float0 = MathUtils.sign((float) (-1));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        float float0 = MathUtils.sign((float) 0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        float float0 = MathUtils.sign((float) 10252);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        int int0 = MathUtils.sign(22);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        int int0 = MathUtils.sign(0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        int int0 = MathUtils.sign((-3816));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        long long0 = MathUtils.sign(3234L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        long long0 = MathUtils.sign((long) 0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        long long0 = MathUtils.sign((long) (-1017));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        short short0 = MathUtils.sign((short) (-1814));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        short short0 = MathUtils.sign((short) 1555);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck((-2147483634), 1073741824);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        int int0 = MathUtils.subAndCheck((-487), (-487));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(1073741791, (-2147483645));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        long long0 = MathUtils.subAndCheck((-9223372036854775801L), (-9223372036854775801L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(2192L, (-9223372036854775808L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }
}
