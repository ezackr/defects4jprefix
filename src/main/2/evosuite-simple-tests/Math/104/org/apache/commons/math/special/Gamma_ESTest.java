/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:45:15 GMT 2024
 */
package org.apache.commons.math.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.special.Gamma;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Gamma_ESTest extends Gamma_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double double0 = Gamma.regularizedGammaP(0.0, 0.0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double double0 = Gamma.regularizedGammaQ((-1698.802), (-1698.802));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        try {
            Gamma.regularizedGammaP(877.0632454, 1359.9, Double.NaN, (-2650));
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Continued fraction convergents failed to converge for value 1,359.9
            //
            verifyException("org.apache.commons.math.util.ContinuedFraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double double0 = Gamma.regularizedGammaQ(518.8835943175, 2040.2);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        double double0 = Gamma.logGamma(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double double0 = Gamma.logGamma((-687.46539928));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        double double0 = Gamma.regularizedGammaP(Double.NaN, 0.0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        double double0 = Gamma.regularizedGammaP((-709.2616322867505), Double.NaN, (-709.2616322867505), 2);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        double double0 = Gamma.regularizedGammaP(167.44735991, (-58.63948820614387), 0.0, Integer.MAX_VALUE);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double double0 = Gamma.regularizedGammaP(0.9996698932320628, 0.0, 3.399464998481189E-5, (-1));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double double0 = Gamma.regularizedGammaP(3.399464998481189E-5, 3.399464998481189E-5);
        assertEquals(0.9996698932320628, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        double double0 = Gamma.regularizedGammaQ(124.43883913, 3.6899182659531625E-6, 2.0, 1209);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        try {
            Gamma.regularizedGammaQ(1.0E-8, 1.0E-8, 2145.387567852, (-1266));
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Maximal number of iterations (-1,266) exceeded
            //
            verifyException("org.apache.commons.math.special.Gamma", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        double double0 = Gamma.regularizedGammaQ(Double.NaN, (-129.416292093), 0.0, 0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        double double0 = Gamma.regularizedGammaQ((-2918.636115), Double.NaN, 0.0, (-2448));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        double double0 = Gamma.regularizedGammaQ(1077.5222676607787, (-955.8121887));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        double double0 = Gamma.regularizedGammaQ(57.15623566586292, 0.0, 0.0, 0);
        assertEquals(1.0, double0, 0.01);
    }
}
