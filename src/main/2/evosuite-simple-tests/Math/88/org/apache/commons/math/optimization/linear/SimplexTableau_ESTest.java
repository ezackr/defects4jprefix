/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:58:05 GMT 2024
 */
package org.apache.commons.math.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVectorImpl;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        RealVectorImpl realVectorImpl0 = new RealVectorImpl(41);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 41);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 41);
        double[][] doubleArray0 = simplexTableau0.getData();
        assertEquals(1, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[5];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
        // Undeclared exception!
        try {
            simplexTableau0.setEntry((-1261), (-1261), 0.0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // no entry at indices (-1,261, -1,261) in a 1x7 matrix
            //
            verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1.0E-12);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        simplexTableau0.discardArtificialVariables();
        assertEquals(0, simplexTableau0.getNumVariables());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[1];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 333.42532994058);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 333.42532994058);
        int int0 = simplexTableau0.getNumDecisionVariables();
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Double[] doubleArray0 = new Double[3];
        Double double0 = new Double((-1551.41512));
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        doubleArray0[2] = double0;
        RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, (double) doubleArray0[0]);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray0[0]);
        int int0 = simplexTableau0.getNumSlackVariables();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[1];
        RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, false);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-256.97));
        int int0 = simplexTableau0.getNumArtificialVariables();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        double[] doubleArray0 = new double[1];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 333.42532994058);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 333.42532994058);
        simplexTableau0.hashCode();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Relationship relationship0 = Relationship.LEQ;
        double[] doubleArray0 = new double[5];
        doubleArray0[3] = 1.0E-12;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1.0E-12);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        linkedList0.push(linearConstraint0);
        linkedList0.add(linearConstraint0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
        assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        simplexTableau0.discardArtificialVariables();
        assertEquals(0, simplexTableau0.getNumVariables());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double[] doubleArray0 = new double[5];
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
        assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Relationship relationship0 = Relationship.EQ;
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = (-1.0);
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        linkedList0.add(linearConstraint0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
        assertEquals((-2.0), realPointValuePair0.getValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Relationship relationship0 = Relationship.EQ;
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1.0);
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        linkedList0.add(linearConstraint0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
        assertEquals((-2.0), realPointValuePair0.getValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        simplexTableau0.divideRow(0, 0);
        assertEquals(0, simplexTableau0.getNumVariables());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
        boolean boolean0 = simplexTableau0.equals(simplexTableau1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        boolean boolean0 = simplexTableau0.equals(simplexTableau0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        boolean boolean0 = simplexTableau0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        boolean boolean0 = simplexTableau1.equals(simplexTableau0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        RealVectorImpl realVectorImpl0 = new RealVectorImpl();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 1.0E-12);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        double[] doubleArray0 = new double[1];
        LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 0.0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        boolean boolean0 = simplexTableau1.equals(simplexTableau0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1.0E-12);
        linkedList0.add(linearConstraint0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
        boolean boolean0 = simplexTableau0.equals(simplexTableau1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        assertTrue(simplexTableau1.equals((Object) simplexTableau0));
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        simplexTableau1.numArtificialVariables = (-2144666647);
        boolean boolean0 = simplexTableau0.equals(simplexTableau1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 799.0);
        boolean boolean0 = simplexTableau1.equals(simplexTableau0);
        assertFalse(simplexTableau0.equals((Object) simplexTableau1));
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 799.0);
        boolean boolean0 = simplexTableau1.equals(simplexTableau0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        RealVectorImpl realVectorImpl0 = new RealVectorImpl();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 1.0E-12);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 1.0E-12);
        simplexTableau1.equals(simplexTableau0);
        assertTrue(simplexTableau0.equals((Object) simplexTableau1));
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, false, 1.0E-12);
        assertTrue(simplexTableau1.equals((Object) simplexTableau0));
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, false, 1.0E-12);
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1.0E-12);
        linkedList1.add(linearConstraint0);
        boolean boolean0 = simplexTableau0.equals(simplexTableau1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
        GoalType goalType1 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, true, 1.0E-12);
        boolean boolean0 = simplexTableau0.equals(simplexTableau1);
        assertFalse(boolean0);
    }
}
