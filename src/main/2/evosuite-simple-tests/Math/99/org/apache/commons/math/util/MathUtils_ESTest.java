/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:28:37 GMT 2024
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        int int0 = MathUtils.hash(Double.NaN);
        assertEquals(2146959360, int0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double[] doubleArray0 = new double[6];
        int int0 = MathUtils.hash(doubleArray0);
        assertEquals(887503681, int0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        float float0 = MathUtils.round((float) 25, 5, 5);
        assertEquals(25.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        long long0 = MathUtils.addAndCheck((long) 1233, (long) 1233);
        assertEquals(2466L, long0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        double double0 = MathUtils.sinh(3.141592653589793);
        assertEquals(11.548739357257748, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double double0 = MathUtils.normalizeAngle(2.2250738585072014E-308, 8);
        assertEquals(6.283185307179586, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = MathUtils.cosh((-1737.804974407));
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double double0 = MathUtils.round(Double.NaN, 3579);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double double0 = MathUtils.log((-850.631269), 3579);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck((-2147483631), (-2147483631));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        int int0 = MathUtils.addAndCheck(1073741799, 1073741799);
        assertEquals(2147483598, int0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck(1073741824, 1073741824);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck(9223372036854775671L, 2466L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck((-9223372036854775589L), (-9223372036854775589L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        long long0 = MathUtils.addAndCheck((long) (-202), (long) (-202));
        assertEquals((-404L), long0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient(0, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient((-202), (-202));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(0, 0);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(8, 0);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(226, 1);
        assertEquals(226L, long0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(0, (-1));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(21, 17);
        assertEquals(8.697011617992073, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(66, 17);
        assertEquals(35.46142409808149, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient(226, 28);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(2796, (-2147483645));
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(11, 0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientDouble((-381), 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientDouble((-715827883), (-715827883));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(1451, 1451);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(243, 222);
        assertEquals(69.0845726485775, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(1015, 1);
        assertEquals(1015.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(5, 4);
        assertEquals(5.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(1, (-59));
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientLog((-715827883), (-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientLog((-759), (-759));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k)
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(6, 6);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(6, 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(5, 1);
        assertEquals(1.6094379124341003, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(9, 8);
        assertEquals(2.1972245773362196, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1086, 1068);
        assertEquals(89.28752492802583, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, 2402.73003877);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) (-25), (double) (-25), (double) (-25));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) (-3986), (double) 1L, (double) 0L);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) (-25), (double) (-40), (double) (-25));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        boolean boolean0 = MathUtils.equals(0.0, 995.2839268474839, 995.2839268474839);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        boolean boolean0 = MathUtils.equals(11.548739357257748, 3.141592653589793, 58.7084336621204);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        double[] doubleArray0 = new double[9];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        double[] doubleArray0 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        double[] doubleArray0 = new double[15];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 2.2250738585072014E-308;
        double[] doubleArray1 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        double double0 = MathUtils.factorialDouble(8);
        assertEquals(40320.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial((-1408));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for n!
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial(554);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // factorial value is too large to fit in a long
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorialDouble((-8));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for n!
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        double double0 = MathUtils.factorialDouble(23);
        assertEquals(2.5852016738885062E22, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorialLog((-3));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n > 0 for n!
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        double double0 = MathUtils.factorialLog(0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        int int0 = MathUtils.gcd(0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        int int0 = MathUtils.gcd(8, 0);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        int int0 = MathUtils.lcm((-512), (-512));
        assertEquals(512, int0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) (-10));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) 111);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        double double0 = MathUtils.indicator((double) (-202));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        double double0 = MathUtils.indicator(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        double double0 = MathUtils.indicator(1053.120105);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 6, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round((-1079.558F), 2, 7);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Inexact result from rounding
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        int int0 = MathUtils.indicator((-483));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        int int0 = MathUtils.indicator(8);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        long long0 = MathUtils.indicator((-9223372036854775808L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        long long0 = MathUtils.indicator((long) 1414);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        short short0 = MathUtils.indicator((short) (-27));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        short short0 = MathUtils.indicator((short) 1952);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        int int0 = MathUtils.lcm(0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        int int0 = MathUtils.lcm(2552, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.lcm(1073741824, (-2211));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck(1073741813, 1073741813);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-90L), 6L);
        assertEquals((-540L), long0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-92L), (-990L));
        assertEquals(91080L, long0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((long) (-2147428959), (-9223372036854775602L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        long long0 = MathUtils.mulAndCheck(0L, (-2L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((-868L), 9223372036854775799L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        long long0 = MathUtils.mulAndCheck(0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, (-2146496677));
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        float float0 = MathUtils.round(1.0F, 64, 5);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        float float0 = MathUtils.round((float) (-1815), (-1815), 2);
        assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        float float0 = MathUtils.round((float) (-507), (-507));
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        double double0 = MathUtils.nextAfter(0.9999999999999999, 0.9999999999999999);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        double double0 = MathUtils.nextAfter(0.5, (-957.41));
        assertEquals(0.49999999999999994, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        double double0 = MathUtils.scalb(0.0, 1);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        double double0 = MathUtils.scalb(Double.NaN, (-202));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        double double0 = MathUtils.scalb(1, 1);
        assertEquals(2.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 4958);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 8, 64);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        float float0 = MathUtils.round((float) 0, 0, 0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        float float0 = MathUtils.round((float) 1, 1, 1);
        assertEquals(0.9F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        float float0 = MathUtils.round((float) 3, 3, 3);
        assertEquals(2.999F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round((float) 21, 21, 21);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid rounding method.
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        float float0 = MathUtils.round((float) 6, 6, 2);
        assertEquals(6.000001F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        float float0 = MathUtils.round((-3743.65F), 3, 3);
        assertEquals((-3743.651F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        float float0 = MathUtils.round((float) 418608, (-1), 6);
        assertEquals(418610.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        float float0 = MathUtils.round((float) 6, 6, 6);
        assertEquals(6.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        float float0 = MathUtils.round((float) 6, 64, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        float float0 = MathUtils.round((float) 8, (-1));
        assertEquals(10.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        float float0 = MathUtils.round((float) 49, 7, 7);
        assertEquals(49.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        byte byte0 = MathUtils.sign((byte) (-10));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 111);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        double double0 = MathUtils.sign(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        double double0 = MathUtils.sign(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        double double0 = MathUtils.sign((double) 481);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        double double0 = MathUtils.sign((-526.386));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        float float0 = MathUtils.sign((float) (-202));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        float float0 = MathUtils.sign(0.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        float float0 = MathUtils.sign((float) 162L);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        int int0 = MathUtils.sign((-3986));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        int int0 = MathUtils.sign(0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        int int0 = MathUtils.sign(1073741799);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        long long0 = MathUtils.sign(162L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        long long0 = MathUtils.sign(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        long long0 = MathUtils.sign((-937L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        short short0 = MathUtils.sign((short) 1955);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        short short0 = MathUtils.sign((short) (-8066));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck((-2147483646), 1073741824);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        int int0 = MathUtils.subAndCheck((-1), (-32));
        assertEquals(31, int0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(969, (-2147483085));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        long long0 = MathUtils.subAndCheck((long) 226, (long) 1);
        assertEquals(225L, long0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        long long0 = MathUtils.subAndCheck((-310L), (-9223372036854775606L));
        assertEquals(9223372036854775296L, long0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(847L, (-9223372036854775808L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }
}
