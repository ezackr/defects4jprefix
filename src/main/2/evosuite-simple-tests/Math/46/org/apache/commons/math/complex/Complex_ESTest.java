/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:10:40 GMT 2024
 */
package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.ZERO;
        complex0.ONE.asin();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.ZERO;
        String string0 = complex0.NaN.toString();
        assertEquals("(NaN, NaN)", string0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.pow(complex0);
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.pow(complex0);
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.INF;
        ComplexField complexField0 = complex0.getField();
        assertNotNull(complexField0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.ONE;
        boolean boolean0 = complex0.isNaN();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
        assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
        assertEquals(1179.48246475, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.sqrt();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.sqrt();
        assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.INF.sqrt();
        assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        Complex complex0 = new Complex(3.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        assertEquals(3.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        Complex complex0 = new Complex(3.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        Complex complex0 = new Complex(3.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        Complex complex0 = new Complex(3.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.acos();
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        Complex complex0 = Complex.NaN;
        double double0 = complex0.abs();
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.INF.asin();
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370461E15), (-4.503599627370461E15));
        Complex complex1 = complex0.NaN.add((-4.503599627370461E15));
        assertEquals((-4.503599627370461E15), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370461E15), (-4.503599627370461E15));
        Complex complex1 = complex0.NaN.add((-4.503599627370461E15));
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370461E15), (-4.503599627370461E15));
        Complex complex1 = complex0.NaN.add((-4.503599627370461E15));
        assertEquals((-4.503599627370461E15), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370461E15), (-4.503599627370461E15));
        Complex complex1 = complex0.NaN.add((-4.503599627370461E15));
        assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370461E15), (-4.503599627370461E15));
        Complex complex1 = complex0.NaN.add((-4.503599627370461E15));
        assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.add(3308.474457311909);
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.add(3308.474457311909);
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.add(3308.474457311909);
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1128() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.add(3308.474457311909);
        assertEquals(3308.474457311909, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ZERO.add(Double.NaN);
        assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.conjugate();
        assertEquals(2.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.conjugate();
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.conjugate();
        assertEquals(-0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1333() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.conjugate();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test1334() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.conjugate();
        assertTrue(complex1.equals((Object) complex0));
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.conjugate();
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.divide(complex0);
        assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1637() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.atan();
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1638() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.atan();
        assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1739() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.INF.divide(complex1);
        assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test1840() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.divide(complex0);
        assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0);
        Complex complex1 = complex0.INF.atan();
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test1942() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0);
        Complex complex1 = complex0.INF.atan();
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1943() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0);
        Complex complex1 = complex0.INF.atan();
        assertEquals(1.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1944() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0);
        Complex complex1 = complex0.INF.atan();
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test2045() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.ZERO.divide(complex1);
        assertSame(complex2, complex0);
    }

    @Test(timeout = 4000)
    public void test2146() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.divide(1050.0);
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test2247() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.divide(912.180014);
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test2248() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.divide(912.180014);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2249() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.divide(912.180014);
        assertEquals(1.2930369517501836, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2250() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.divide(912.180014);
        assertEquals(1179.48246475, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2251() throws Throwable {
        Complex complex0 = Complex.valueOf(1179.48246475);
        Complex complex1 = complex0.divide(912.180014);
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2352() throws Throwable {
        Complex complex0 = new Complex(0.5205562661585317, 0.5205562661585317);
        Complex complex1 = complex0.divide(Double.NaN);
        assertEquals(0.5205562661585317, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2353() throws Throwable {
        Complex complex0 = new Complex(0.5205562661585317, 0.5205562661585317);
        Complex complex1 = complex0.divide(Double.NaN);
        assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test2354() throws Throwable {
        Complex complex0 = new Complex(0.5205562661585317, 0.5205562661585317);
        Complex complex1 = complex0.divide(Double.NaN);
        assertEquals(0.5205562661585317, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2355() throws Throwable {
        Complex complex0 = new Complex(0.5205562661585317, 0.5205562661585317);
        Complex complex1 = complex0.divide(Double.NaN);
        assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2356() throws Throwable {
        Complex complex0 = new Complex(0.5205562661585317, 0.5205562661585317);
        Complex complex1 = complex0.divide(Double.NaN);
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test2457() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370507E15), (-4.503599627370507E15));
        Complex complex1 = complex0.divide(0.0);
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test2458() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370507E15), (-4.503599627370507E15));
        Complex complex1 = complex0.divide(0.0);
        assertEquals((-4.503599627370507E15), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2459() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370507E15), (-4.503599627370507E15));
        Complex complex1 = complex0.divide(0.0);
        assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2460() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370507E15), (-4.503599627370507E15));
        Complex complex1 = complex0.divide(0.0);
        assertEquals((-4.503599627370507E15), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2561() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ZERO.divide(0.0);
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test2662() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2663() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2664() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2665() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NEGATIVE_INFINITY);
        assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2766() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2767() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2768() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2769() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2770() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2771() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test2772() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.divide(Double.NEGATIVE_INFINITY);
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test2873() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        boolean boolean0 = complex0.equals(complex1);
        assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2874() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        boolean boolean0 = complex0.equals(complex1);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2875() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        boolean boolean0 = complex0.equals(complex1);
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test2876() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        boolean boolean0 = complex0.equals(complex1);
        assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2877() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        boolean boolean0 = complex0.equals(complex1);
        assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2878() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        boolean boolean0 = complex0.equals(complex1);
        assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test2879() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.INF.negate();
        boolean boolean0 = complex0.equals(complex1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2980() throws Throwable {
        Complex complex0 = Complex.ZERO;
        boolean boolean0 = complex0.equals(complex0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3081() throws Throwable {
        Complex complex0 = Complex.ZERO;
        boolean boolean0 = complex0.equals("OUT_OF_BOUND_SIGNIFICANCE_LEVEL");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3182() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.INF;
        boolean boolean0 = complex1.equals(complex0);
        assertFalse(complex0.equals((Object) complex1));
    }

    @Test(timeout = 4000)
    public void test3183() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.INF;
        boolean boolean0 = complex1.equals(complex0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3284() throws Throwable {
        Complex complex0 = new Complex((-4.5035996273704945E15), (-4.5035996273704945E15));
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test3285() throws Throwable {
        Complex complex0 = new Complex((-4.5035996273704945E15), (-4.5035996273704945E15));
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3286() throws Throwable {
        Complex complex0 = new Complex((-4.5035996273704945E15), (-4.5035996273704945E15));
        Complex complex1 = (Complex) complex0.readResolve();
        boolean boolean0 = complex0.equals(complex1);
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test3387() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = Complex.valueOf(2.0, 2.0);
        boolean boolean0 = complex0.equals(complex1);
        assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3388() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = Complex.valueOf(2.0, 2.0);
        boolean boolean0 = complex0.equals(complex1);
        assertEquals(2.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3389() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = Complex.valueOf(2.0, 2.0);
        boolean boolean0 = complex0.equals(complex1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3390() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = Complex.valueOf(2.0, 2.0);
        boolean boolean0 = complex0.equals(complex1);
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test3391() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = Complex.valueOf(2.0, 2.0);
        boolean boolean0 = complex0.equals(complex1);
        assertEquals(2.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3392() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = Complex.valueOf(2.0, 2.0);
        boolean boolean0 = complex0.equals(complex1);
        assertFalse(complex1.equals((Object) complex0));
    }

    @Test(timeout = 4000)
    public void test3493() throws Throwable {
        Complex complex0 = Complex.NaN;
        complex0.INF.hashCode();
    }

    @Test(timeout = 4000)
    public void test3594() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.multiply(complex1);
        assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test3695() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.multiply(complex1);
        assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3796() throws Throwable {
        Complex complex0 = new Complex((-4.5035996273704945E15), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.multiply(complex0);
        assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test3797() throws Throwable {
        Complex complex0 = new Complex((-4.5035996273704945E15), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.multiply(complex0);
        assertEquals((-4.5035996273704945E15), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3798() throws Throwable {
        Complex complex0 = new Complex((-4.5035996273704945E15), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.multiply(complex0);
        assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3799() throws Throwable {
        Complex complex0 = new Complex((-4.5035996273704945E15), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.I.multiply(complex0);
        assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38100() throws Throwable {
        Complex complex0 = Complex.valueOf(857.814272);
        Complex complex1 = complex0.NaN.multiply(857.814272);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38101() throws Throwable {
        Complex complex0 = Complex.valueOf(857.814272);
        Complex complex1 = complex0.NaN.multiply(857.814272);
        assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test38102() throws Throwable {
        Complex complex0 = Complex.valueOf(857.814272);
        Complex complex1 = complex0.NaN.multiply(857.814272);
        assertEquals(857.814272, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38103() throws Throwable {
        Complex complex0 = Complex.valueOf(857.814272);
        Complex complex1 = complex0.NaN.multiply(857.814272);
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test38104() throws Throwable {
        Complex complex0 = Complex.valueOf(857.814272);
        Complex complex1 = complex0.NaN.multiply(857.814272);
        assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test39105() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ONE.pow(Double.NaN);
        assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test40106() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.pow(2.0);
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test40107() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.pow(2.0);
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test41108() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(2.0);
        assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41109() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(2.0);
        assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test41110() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(2.0);
        assertEquals(2.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41111() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(2.0);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41112() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(2.0);
        assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41113() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(2.0);
        assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41114() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.createComplex(2.0, Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(2.0);
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test42115() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.pow(2.0);
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test42116() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.pow(2.0);
        assertEquals(1.2246467991473532E-16, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test42117() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.pow(2.0);
        assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test42118() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.I.pow(2.0);
        assertEquals((-1.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test43119() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.negate();
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test44120() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.NaN.subtract(complex0);
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test45121() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.sqrt1z();
        assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test45122() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.sqrt1z();
        assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test46123() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.subtract((-282.0));
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test47124() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.ONE.subtract(Double.NaN);
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test48125() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.subtract((-282.0));
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test48126() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.subtract((-282.0));
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test48127() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.subtract((-282.0));
        assertEquals(282.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test48128() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.subtract((-282.0));
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test49129() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.acos();
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test50130() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.atan();
        assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test51131() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.cos();
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test51132() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.cos();
        assertEquals(-0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test51133() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.cos();
        assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test51134() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ZERO.cos();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test52135() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.NaN.cos();
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test53136() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.cosh();
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test53137() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.cosh();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test54138() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.cosh();
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test55139() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.sin();
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test55140() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.sin();
        assertEquals(0.8414709848078965, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test55141() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.sin();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test55142() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.sin();
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test56143() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.sin();
        assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test57144() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.sinh();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test57145() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.sinh();
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test57146() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.sinh();
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test57147() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.ZERO.sinh();
        assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test58148() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.sinh();
        assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test59149() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.I.sqrt();
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test59150() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.I.sqrt();
        assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test59151() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.I.sqrt();
        assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test59152() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.I.sqrt();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test60153() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.tan();
        assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test60154() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.tan();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test60155() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.tan();
        assertEquals((-2.185039863261519), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test60156() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.tan();
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test61157() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.NaN.tan();
        assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test61158() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.NaN.tan();
        assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test61159() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.NaN.tan();
        assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test61160() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.NaN.tan();
        assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test61161() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.NaN.tan();
        assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test62162() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ONE.tanh();
        assertEquals(0.761594155955765, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test62163() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ONE.tanh();
        assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test62164() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ONE.tanh();
        assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test62165() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ONE.tanh();
        assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test63166() throws Throwable {
        Complex complex0 = Complex.I;
        List<Complex> list0 = complex0.nthRoot(126);
        assertEquals(126, list0.size());
    }

    @Test(timeout = 4000)
    public void test64167() throws Throwable {
        Complex complex0 = Complex.ONE;
        // Undeclared exception!
        try {
            complex0.NaN.nthRoot((-345));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot compute nth root for null or negative n: -345
            //
            verifyException("org.apache.commons.math.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test65168() throws Throwable {
        Complex complex0 = Complex.ZERO;
        List<Complex> list0 = complex0.NaN.nthRoot(1934);
        assertFalse(list0.contains(complex0));
    }

    @Test(timeout = 4000)
    public void test65169() throws Throwable {
        Complex complex0 = Complex.ZERO;
        List<Complex> list0 = complex0.NaN.nthRoot(1934);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test66170() throws Throwable {
        Complex complex0 = Complex.INF;
        List<Complex> list0 = complex0.nthRoot(126);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test66171() throws Throwable {
        Complex complex0 = Complex.INF;
        List<Complex> list0 = complex0.nthRoot(126);
        assertTrue(list0.contains(complex0));
    }

    @Test(timeout = 4000)
    public void test67172() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2418350219482042, Double.NaN);
        assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test68173() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }
}
