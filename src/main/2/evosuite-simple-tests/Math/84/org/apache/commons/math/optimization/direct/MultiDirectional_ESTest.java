/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:49:43 GMT 2024
 */
package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MultiDirectional_ESTest extends MultiDirectional_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional();
        RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
        double[] doubleArray0 = new double[0];
        RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1.0E-12, false);
        realPointValuePairArray0[0] = realPointValuePair0;
        multiDirectional0.simplex = realPointValuePairArray0;
        Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn(9, 9, (-260), (-2732)).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class), any(org.apache.commons.math.optimization.RealPointValuePair.class));
        multiDirectional0.iterateSimplex(comparator0);
        assertEquals(2, multiDirectional0.getIterations());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional(0.0, 0.0);
        assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional();
        RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
        double[] doubleArray0 = new double[0];
        RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1.0E-12, false);
        realPointValuePairArray0[0] = realPointValuePair0;
        multiDirectional0.simplex = realPointValuePairArray0;
        Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn(2398, 2398, (-528), 2983).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class), any(org.apache.commons.math.optimization.RealPointValuePair.class));
        multiDirectional0.iterateSimplex(comparator0);
        assertEquals(2, multiDirectional0.getIterations());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional();
        RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
        double[] doubleArray0 = new double[0];
        RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1.0E-12, false);
        realPointValuePairArray0[0] = realPointValuePair0;
        multiDirectional0.simplex = realPointValuePairArray0;
        Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn(748, (-913)).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class), any(org.apache.commons.math.optimization.RealPointValuePair.class));
        multiDirectional0.iterateSimplex(comparator0);
        assertEquals(1, multiDirectional0.getIterations());
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional();
        RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
        double[] doubleArray0 = new double[5];
        RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1.0E-12, false);
        realPointValuePairArray0[0] = realPointValuePair0;
        realPointValuePairArray0[1] = realPointValuePair0;
        multiDirectional0.simplex = realPointValuePairArray0;
        Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            multiDirectional0.iterateSimplex(comparator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.optimization.direct.MultiDirectional", e);
        }
    }
}
