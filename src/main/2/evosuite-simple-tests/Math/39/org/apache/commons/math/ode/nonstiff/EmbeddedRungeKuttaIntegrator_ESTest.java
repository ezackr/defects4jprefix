/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 18:53:48 GMT 2024
 */
package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.ExpandableStatefulODE;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        double[] doubleArray0 = new double[2];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        double double0 = dormandPrince853Integrator0.getSafety();
        assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        double[] doubleArray0 = new double[2];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        double double0 = dormandPrince853Integrator0.getSafety();
        assertEquals(0.9, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        double[] doubleArray0 = new double[2];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        double double0 = dormandPrince853Integrator0.getSafety();
        assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.4997124671936035, 1.4997124671936035, doubleArray0, doubleArray0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.4997124671936035, 1.4997124671936035, doubleArray0, doubleArray0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(0.2, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.4997124671936035, 1.4997124671936035, doubleArray0, doubleArray0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        double[] doubleArray0 = new double[5];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3599.8, 3599.8, doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
        assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        double[] doubleArray0 = new double[5];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3599.8, 3599.8, doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
        assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        double[] doubleArray0 = new double[5];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3599.8, 3599.8, doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
        assertEquals(10.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0, 0.0, doubleArray0, doubleArray0);
        // Undeclared exception!
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (double) 0);
    }

    @Test(timeout = 4000)
    public void test410() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.setTime((-7.315860999413894E129));
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-7.315860999413894E129), (-1.0), (-2117.89646));
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 2229.3);
        assertEquals(2229.3, expandableStatefulODE0.getTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test511() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1479.022332533, 1479.022332533, 0.9, 0.9);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        highamHall54Integrator0.integrate(expandableStatefulODE0, 1479.022332533);
    }

    @Test(timeout = 4000)
    public void test612() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3102.845, 0.9, 3102.845, 1869.080269);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(91).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.setTime(3.1170298734336303E-169);
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
        assertEquals(0.0, expandableStatefulODE0.getTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test613() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3102.845, 0.9, 3102.845, 1869.080269);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(91).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.setTime(3.1170298734336303E-169);
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
        assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
    }
}
