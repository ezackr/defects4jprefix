/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:15:46 GMT 2024
 */
package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.sampling.FixedStepHandler;
import org.apache.commons.math.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        double[] doubleArray0 = new double[0];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.2, 0.2, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        // Undeclared exception!
        highamHall54Integrator0.integrate(firstOrderConverter0, 0.2, doubleArray0, (-4006.415436221), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, (-1149.81200018), 100.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, (-1149.81200018), 100.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        assertEquals(0.9, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, (-1149.81200018), 100.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, (-1149.81200018), 100.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, (-1149.81200018), 100.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(0.2, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 2944.345829634848, (-1149.81200018), 100.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0419047619047619, 0.0419047619047619, 0.0419047619047619, 0.0625);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0419047619047619, 0.0419047619047619, 0.0419047619047619, 0.0625);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        assertEquals(10.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0419047619047619, 0.0419047619047619, 0.0419047619047619, 0.0625);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
    }

    @Test(timeout = 4000)
    public void test410() throws Throwable {
        double[] doubleArray0 = new double[0];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.2, 0.2, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray1 = new double[0];
        // Undeclared exception!
        highamHall54Integrator0.integrate(firstOrderConverter0, (-3249.932), doubleArray1, (-906.98742), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test511() throws Throwable {
        double[] doubleArray0 = new double[0];
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1149.81200018), (-1149.81200018), doubleArray0, doubleArray0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer((-3518.382), fixedStepHandler0);
        highamHall54Integrator0.addStepHandler(stepNormalizer0);
        // Undeclared exception!
        highamHall54Integrator0.integrate(firstOrderConverter0, (-3518.382), doubleArray0, 0.2, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test612() throws Throwable {
        double[] doubleArray0 = new double[0];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.2, 0.2, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        highamHall54Integrator0.addEventHandler(eventHandler0, 0.2, 0.2, 0);
        // Undeclared exception!
        highamHall54Integrator0.integrate(firstOrderConverter0, (-4006.415436221), doubleArray0, 0.2, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test713() throws Throwable {
        double[] doubleArray0 = new double[0];
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-412.1), (-1808.87157920281), 0.9, (-234.71719));
        // Undeclared exception!
        dormandPrince853Integrator0.integrate(firstOrderConverter0, 0, doubleArray0, 0.9, doubleArray0);
    }
}
