/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 17:40:17 GMT 2024
 */
package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 2543.554034948279, 5, 441.3415053, 2543.554034948279);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        try {
            adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 1.0667524445105459E-7);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // matrix must have at least one column
            //
            verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.2737367544323206E-10);
        double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
        assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.2737367544323206E-10);
        double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(441.3415053, 441.3415053, doubleArray0, doubleArray0);
        int int0 = dormandPrince54Integrator0.getEvaluations();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(441.3415053, 441.3415053, doubleArray0, doubleArray0);
        int int0 = dormandPrince54Integrator0.getMaxEvaluations();
        assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4.792366790407664));
        double double0 = midpointIntegrator0.getCurrentStepStart();
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4.792366790407664));
        double double0 = midpointIntegrator0.getCurrentStepStart();
        assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-18.53175702217937), 441.3415053, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince54Integrator0.getStepHandlers();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        double[] doubleArray0 = new double[1];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4.792366790407664), 441.3415053, doubleArray0, doubleArray0);
        String string0 = graggBulirschStoerIntegrator0.getName();
        assertEquals("Gragg-Bulirsch-Stoer", string0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(693.4991);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(567).when(secondOrderDifferentialEquations0).getDimension();
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((double) (-426), 0.0, (double) (-426), 0.0, 693.4991).when(eventHandler0).g(anyDouble(), any(double[].class));
        midpointIntegrator0.addEventHandler(eventHandler0, 693.4991, (double) (-426), 567);
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        midpointIntegrator0.integrate(expandableStatefulODE0, 0.0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(693.4991);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        threeEighthesIntegrator0.addEventHandler(eventHandler0, 693.4991, (double) 567, 567);
        Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
        assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(693.4991);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        threeEighthesIntegrator0.addEventHandler(eventHandler0, 693.4991, (double) 567, 567);
        Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
        assertTrue(collection0.contains(eventHandler0));
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(693.4991);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        threeEighthesIntegrator0.addEventHandler(eventHandler0, 693.4991, (double) 567, 567);
        Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
        assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(693.4991);
        midpointIntegrator0.setMaxEvaluations(424);
        assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(693.4991);
        midpointIntegrator0.setMaxEvaluations(424);
        assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 441.3415053, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        try {
            dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 441.3415053, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 0 != 10
            //
            verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 441.3415053, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray1 = new double[5];
        try {
            dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 441.3415053, doubleArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 5 != 0
            //
            verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.setTime((-365.0));
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(441.3415053);
        midpointIntegrator0.integrate(expandableStatefulODE0, 441.3415053);
        assertEquals("midpoint", midpointIntegrator0.getName());
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(693.4991);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(567).when(secondOrderDifferentialEquations0).getDimension();
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((double) (-426), 1291.1229545711453, (double) (-426), 0.0, 693.4991).when(eventHandler0).g(anyDouble(), any(double[].class));
        midpointIntegrator0.addEventHandler(eventHandler0, 693.4991, (double) (-426), 567);
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(693.4991, fixedStepHandler0);
        midpointIntegrator0.addStepHandler(stepNormalizer0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        midpointIntegrator0.integrate(expandableStatefulODE0, 0.0);
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.1368683772161603E-10);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.setTime(1.1368683772161603E-10);
        try {
            midpointIntegrator0.integrate(expandableStatefulODE0, 1.1368683772161603E-10);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // too small integration interval: length = 0
            //
            verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
        }
    }
}
