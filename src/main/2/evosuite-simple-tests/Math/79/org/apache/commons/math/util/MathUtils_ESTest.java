/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:36:47 GMT 2024
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        int int0 = MathUtils.hash((double) 5256);
        assertEquals(1085573120, int0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        int int0 = MathUtils.hash((double[]) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        float float0 = MathUtils.round((float) Integer.MIN_VALUE, 2, 2);
        assertEquals((-2.14748365E9F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck(4643808563098105472L, 4643808563098105472L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        double double0 = MathUtils.sinh((-3198.5203321));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double double0 = MathUtils.normalizeAngle(Double.NaN, Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 536610048);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double double0 = MathUtils.cosh(2708.388F);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double double0 = MathUtils.round((double) 55, 55);
        assertEquals(55.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        double double0 = MathUtils.log((-3197.50430451666), (-3197.50430451666));
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.addAndCheck(2147483631, 2147483631);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        int int0 = MathUtils.addAndCheck((-2685), (-2685));
        assertEquals((-5370), int0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        long long0 = MathUtils.subAndCheck(6L, 6L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        long long0 = MathUtils.addAndCheck((-3612L), (-3612L));
        assertEquals((-7224L), long0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck((-9223372036854771190L), 524288L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        long long0 = MathUtils.addAndCheck(3621L, 3621L);
        assertEquals(7242L, long0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(66, 66);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(66, 29);
        assertEquals(4472995859186094240L, long0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(237, 0);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(1417, 1);
        assertEquals(1417L, long0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(5, 4);
        assertEquals(5L, long0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(17, 14);
        assertEquals(6.522092798170153, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(1030, 4);
        assertEquals(46623504655L, long0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(81, 81);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(17, (-724));
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(102, 0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(129, 1);
        assertEquals(129.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(0, (-1));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(191, 102);
        assertEquals(129.0974374683421, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(14, 14);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(4131, 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(61, 1);
        assertEquals(4.110873864173311, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(0, (-1));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(2135, 1078);
        assertEquals(1475.7069790914022, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficientLog((-545), 3252);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= k for binomial coefficient (n,k), got n = -545, k = 3,252
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.binomialCoefficient((-2070), (-2070));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for binomial coefficient (n,k), got n = -2,070
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        int int0 = MathUtils.compareTo((-2274.233576074), 11, (-2274.233576074));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        int int0 = MathUtils.compareTo(1, 1, 1);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        int int0 = MathUtils.compareTo(1, (-2274.233576074), 1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, (double) 15);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        boolean boolean0 = MathUtils.equals(3.141592653589793, (double) 3, 3.141592653589793);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.equals((double) 2147483619, (double) 2147483619, 2147483619);
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.equals((double) 0, 0.0, (-1));
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        boolean boolean0 = MathUtils.equals((-2820.696316688), (-2820.696316688), 191);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) 191, 289.955261592615, 191);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        double[] doubleArray0 = new double[7];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) (-584);
        double[] doubleArray1 = new double[7];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial(4855);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // factorial value is too large to fit in a long
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorial((-2069));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for n!, got n = -2,069
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        double double0 = MathUtils.factorialDouble(9);
        assertEquals(362880.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorialDouble((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for n!, got n = -1
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        double double0 = MathUtils.factorialDouble(191);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.factorialLog((-12));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have n >= 0 for n!, got n = -12
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        double double0 = MathUtils.factorialLog(17);
        assertEquals(33.50507345013689, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.gcd(0, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: gcd(0, -2,147,483,648) is 2^31
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: gcd(-2,147,483,648, 0) is 2^31
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        int int0 = MathUtils.gcd(1030, 0);
        assertEquals(1030, int0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: lcm is 2^31
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.lcm(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) (-127));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) 0);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        double double0 = MathUtils.indicator((double) (-1));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        double double0 = MathUtils.indicator(Double.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        double double0 = MathUtils.indicator(1.0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        float float0 = MathUtils.round((float) 5, 243, 5);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        int int0 = MathUtils.indicator(Integer.MIN_VALUE);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        int int0 = MathUtils.indicator(444);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        long long0 = MathUtils.indicator((-2695L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        long long0 = MathUtils.indicator(6L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        short short0 = MathUtils.indicator((short) (-1156));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        short short0 = MathUtils.indicator((short) 0);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        int int0 = MathUtils.lcm(0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        int int0 = MathUtils.lcm(Integer.MIN_VALUE, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        int int0 = MathUtils.lcm((-280), (-280));
        assertEquals(280, int0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.lcm((-3600), Integer.MAX_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck(Integer.MAX_VALUE, Integer.MAX_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        long long0 = MathUtils.mulAndCheck((long) 0, (long) (-1642));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((-9223372036854775808L), (-9223372036854775808L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        long long0 = MathUtils.mulAndCheck((long) (-1642), (long) (-1642));
        assertEquals(2696164L, long0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck((-17207783650848462L), 4690L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-1L), 2916L);
        assertEquals((-2916L), long0);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.mulAndCheck(4642501300743345013L, 4642501300743345013L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: multiply
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        float float0 = MathUtils.round((float) 0, 0, 0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        float float0 = MathUtils.round((float) 1, Integer.MIN_VALUE, 1);
        assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        float float0 = MathUtils.round((float) Integer.MIN_VALUE, 3, 3);
        assertEquals((-2.14748365E9F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        double double0 = MathUtils.nextAfter(3.9999999999999996, 3.9999999999999996);
        assertEquals(4.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        double double0 = MathUtils.nextAfter(4, (-1456.5));
        assertEquals(3.9999999999999996, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        double double0 = MathUtils.scalb(0, 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        double double0 = MathUtils.scalb(Float.NaN, 216);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, (-33554267));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        double double0 = MathUtils.scalb(102, 102);
        assertEquals(5.172014448931176E32, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        double[] doubleArray0 = new double[5];
        try {
            MathUtils.normalizeArray(doubleArray0, Float.NaN);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot normalize to NaN
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        double[] doubleArray0 = new double[4];
        try {
            MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot normalize to an infinite value
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NEGATIVE_INFINITY;
        try {
            MathUtils.normalizeArray(doubleArray0, (-494.6617646945591));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Array contains an infinite element, -\u221E at index 0
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.NaN;
        try {
            MathUtils.normalizeArray(doubleArray0, 1080999936);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Array sums to zero
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[3] = (-946.8671145457);
        doubleArray0[0] = Double.NaN;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1080999936);
        assertArrayEquals(new double[] { Double.NaN, -0.0, -0.0, 1.080999936E9, -0.0, -0.0, -0.0, -0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        double double0 = MathUtils.round(Double.NaN, 11, 11);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (-549), (-549));
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        float float0 = MathUtils.round((float) 6, 381, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        float float0 = MathUtils.round((float) 7, 7, 7);
        assertEquals(7.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round((float) (-5), (-5), (-5));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // invalid rounding method -5, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        float float0 = MathUtils.round((float) 6, 2, 2);
        assertEquals(6.01F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        float float0 = MathUtils.round((float) 4, 4, 3);
        assertEquals(3.9999F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        float float0 = MathUtils.round((float) 5, 5, 5);
        assertEquals(5.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        float float0 = MathUtils.round((float) 6, (-1), 6);
        assertEquals(10.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        float float0 = MathUtils.round((float) 6, 6, 6);
        assertEquals(6.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 6, 6);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        float float0 = MathUtils.round((-3526.82F), (-1), 4);
        assertEquals((-3530.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.round(Float.NaN, 215, 7);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Inexact result from rounding
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        byte byte0 = MathUtils.sign((byte) (-57));
        assertEquals((byte) (-1), byte0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 6);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        double double0 = MathUtils.sign(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        double double0 = MathUtils.sign((double) Float.NaN);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        double double0 = MathUtils.sign((-1982.601497557839));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        double double0 = MathUtils.sign(1483.1687965871422);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        float float0 = MathUtils.sign((float) (-1648));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        float float0 = MathUtils.sign(0.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        float float0 = MathUtils.sign(2708.388F);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        int int0 = MathUtils.sign((-280));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        int int0 = MathUtils.sign(0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        int int0 = MathUtils.sign(245);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        long long0 = MathUtils.sign((-2695L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        long long0 = MathUtils.sign((long) 0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        long long0 = MathUtils.sign(21L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        short short0 = MathUtils.sign((short) (-2));
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        short short0 = MathUtils.sign((short) 8);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(Integer.MIN_VALUE, 799);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        int int0 = MathUtils.subAndCheck(216, 216);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(2147483646, (-3600));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        long long0 = MathUtils.subAndCheck((-9223372036854775808L), (-9223372036854775808L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        // Undeclared exception!
        try {
            MathUtils.subAndCheck(319879744234974L, (-9223372036854775808L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: subtract
            //
            verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        int int0 = MathUtils.pow(2147483641, 2147483641);
        assertEquals((-1998270663), int0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        try {
            MathUtils.pow((-839), (-839));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot raise an integral value to a negative power (-839^-839)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        int int0 = MathUtils.pow((-902), 246L);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        try {
            MathUtils.pow((-902), (long) (-902));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot raise an integral value to a negative power (-902^-902)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        long long0 = MathUtils.pow((long) 11, 11);
        assertEquals(285311670611L, long0);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        try {
            MathUtils.pow((-2550L), (-563));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot raise an integral value to a negative power (-2,550^-563)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        long long0 = MathUtils.pow(6L, 6L);
        assertEquals(46656L, long0);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        try {
            MathUtils.pow((-2L), (-2L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot raise an integral value to a negative power (-2^-2)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        assertEquals((short) 1, bigInteger1.shortValue());
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        try {
            MathUtils.pow(bigInteger0, (-4294));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot raise an integral value to a negative power (10^-4,294)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1799L);
        assertEquals((byte) 0, bigInteger1.byteValue());
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        try {
            MathUtils.pow(bigInteger0, (-4L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot raise an integral value to a negative power (0^-4)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = bigInteger0.not();
        try {
            MathUtils.pow(bigInteger1, bigInteger1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cannot raise an integral value to a negative power (-1^-1)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        assertEquals((short) (-7168), bigInteger1.shortValue());
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        double[] doubleArray0 = new double[4];
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = MathUtils.distance1(intArray0, intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        double[] doubleArray0 = new double[3];
        double double0 = MathUtils.distance(doubleArray0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        int[] intArray0 = new int[20];
        double double0 = MathUtils.distance(intArray0, intArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        double[] doubleArray0 = new double[9];
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        int[] intArray0 = new int[3];
        int int0 = MathUtils.distanceInf(intArray0, intArray0);
        assertEquals(0, int0);
    }
}
