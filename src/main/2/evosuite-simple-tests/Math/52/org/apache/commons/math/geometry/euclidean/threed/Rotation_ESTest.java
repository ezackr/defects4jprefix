/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 19:23:03 GMT 2024
 */
package org.apache.commons.math.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Rotation_ESTest extends Rotation_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        Rotation.distance(rotation0, rotation0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getQ3();
        assertEquals(-0.0, rotation0.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getQ3();
        assertEquals(1.0, rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getQ3();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getQ3();
        assertEquals(-0.0, rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        double double0 = rotation0.getQ1();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        double double0 = rotation0.getQ1();
        assertEquals(1.0, rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        double double0 = rotation0.getQ1();
        assertEquals(0.0, rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        double double0 = rotation0.getQ2();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999999999, (-1.0), 396.865438907721);
        Rotation rotation0 = new Rotation(vector3D0, (-1010.0));
        double double0 = rotation0.getQ0();
        assertEquals((-0.69927235564838), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999999999, (-1.0), 396.865438907721);
        Rotation rotation0 = new Rotation(vector3D0, (-1010.0));
        double double0 = rotation0.getQ0();
        assertEquals(0.0018012422902804533, rotation0.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999999999, (-1.0), 396.865438907721);
        Rotation rotation0 = new Rotation(vector3D0, (-1010.0));
        double double0 = rotation0.getQ0();
        assertEquals(0.7148508121827858, rotation0.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999999999, (-1.0), 396.865438907721);
        Rotation rotation0 = new Rotation(vector3D0, (-1010.0));
        double double0 = rotation0.getQ0();
        assertEquals((-0.0018012422904605775), rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.ZXY;
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double[][] doubleArray0 = rotation0.getMatrix();
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1663779930243623);
        assertEquals(0.0, rotation0.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1663779930243623);
        assertEquals(-0.0, rotation1.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1663779930243623);
        assertEquals(1.0, rotation1.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1663779930243623);
        assertEquals(-0.0, rotation1.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(vector3D0, 0.25);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // zero norm for rotation axis
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        double[][] doubleArray0 = new double[0][0];
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(doubleArray0, 1.5924105542994823E7);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        double[][] doubleArray0 = new double[3][8];
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(doubleArray0, 1198.6);
            fail("Expecting exception: Exception");
        } catch (Throwable e) {
            //
            // a 3x8 matrix cannot be a rotation matrix
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.YZY;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        double[][] doubleArray1 = new double[3][8];
        doubleArray1[0] = doubleArray0;
        Rotation rotation1 = null;
        try {
            rotation1 = new Rotation(doubleArray1, 1198.6);
            fail("Expecting exception: Exception");
        } catch (Throwable e) {
            //
            // a 3x3 matrix cannot be a rotation matrix
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.YZY;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        double[][] doubleArray1 = new double[3][8];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        Rotation rotation1 = null;
        try {
            rotation1 = new Rotation(doubleArray1, 1198.6);
            fail("Expecting exception: Exception");
        } catch (Throwable e) {
            //
            // a 3x3 matrix cannot be a rotation matrix
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        Rotation rotation0 = new Rotation(1.151043466116255, 0.5442725510127008, 0.5442725510127008, 0.5, false);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = null;
        try {
            rotation1 = new Rotation(doubleArray0, 2.1225866787366636E12);
            fail("Expecting exception: Exception");
        } catch (Throwable e) {
            //
            // the closest orthogonal matrix has a negative determinant -426.375
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test1325() throws Throwable {
        Rotation rotation0 = new Rotation(0.0, (-1076.8572575), 0.0, (-2837.9), true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1663779930243623);
        assertEquals(0.35477301678382106, rotation1.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        Rotation rotation0 = new Rotation(0.0, (-1076.8572575), 0.0, (-2837.9), true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1663779930243623);
        assertEquals((-0.9349524621937239), rotation0.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        Rotation rotation0 = new Rotation(0.0, (-1076.8572575), 0.0, (-2837.9), true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1663779930243623);
        assertEquals(-0.0, rotation1.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1428() throws Throwable {
        Rotation rotation0 = new Rotation((-1076.8572575), (-2837.9), (-2837.9), 1374.9676255291, true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1);
        assertEquals(0.2460303049801574, rotation1.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1429() throws Throwable {
        Rotation rotation0 = new Rotation((-1076.8572575), (-2837.9), (-2837.9), 1374.9676255291, true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1);
        assertEquals(0.31413978212127824, rotation0.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        Rotation rotation0 = new Rotation((-1076.8572575), (-2837.9), (-2837.9), 1374.9676255291, true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1);
        assertEquals((-0.3141397821212783), rotation1.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        Rotation rotation0 = new Rotation((-1076.8572575), (-2837.9), (-2837.9), 1374.9676255291, true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1);
        assertEquals((-0.6483769298487442), rotation0.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        Rotation rotation0 = new Rotation((-1076.8572575), (-2837.9), (-2837.9), 1374.9676255291, true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1);
        assertEquals((-0.24603030498015732), rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        Rotation rotation0 = new Rotation((-1076.8572575), (-2837.9), (-2837.9), 1374.9676255291, true);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 0.1);
        assertEquals((-0.6483769298487442), rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1534() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.XZX;
        Rotation rotation0 = new Rotation(rotationOrder0, (-1.0), (-624.8967), (-1127.584645689701));
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 2399.30755);
        assertEquals(0.12988173275193501, rotation0.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1535() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.XZX;
        Rotation rotation0 = new Rotation(rotationOrder0, (-1.0), (-624.8967), (-1127.584645689701));
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 2399.30755);
        assertEquals(0.05134126191527967, rotation1.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.XZX;
        Rotation rotation0 = new Rotation(rotationOrder0, (-1.0), (-624.8967), (-1127.584645689701));
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 2399.30755);
        assertEquals((-0.8038495092326235), rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1537() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.XZX;
        Rotation rotation0 = new Rotation(rotationOrder0, (-1.0), (-624.8967), (-1127.584645689701));
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = new Rotation(doubleArray0, 2399.30755);
        assertEquals(0.5782047879676993, rotation0.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1638() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // zero norm for rotation defining vector
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1739() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = Vector3D.ZERO;
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // zero norm for rotation defining vector
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1840() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // zero norm for rotation defining vector
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0);
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // zero norm for rotation defining vector
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = Vector3D.MINUS_K;
        RotationOrder rotationOrder0 = RotationOrder.ZYX;
        Vector3D vector3D2 = rotationOrder0.getA3();
        Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D1, vector3D2);
        assertEquals((-0.7071067811865476), rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2143() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Rotation rotation0 = null;
        try {
            rotation0 = new Rotation(vector3D0, vector3D0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // zero norm for rotation defining vector
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test2244() throws Throwable {
        Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        Vector3D vector3D1 = rotation0.getAxis();
        assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2245() throws Throwable {
        Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        Vector3D vector3D1 = rotation0.getAxis();
        assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2346() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        Vector3D vector3D1 = rotation0.IDENTITY.getAxis();
        assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2347() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        Vector3D vector3D1 = rotation0.IDENTITY.getAxis();
        assertEquals(1.0, vector3D1.getX(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2448() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.ZXY;
        Rotation rotation0 = new Rotation(rotationOrder0, (-2874.531173913888), (-2874.531173913888), (-2874.531173913888));
        Vector3D vector3D0 = rotation0.getAxis();
        assertEquals((-0.9997467142829212), rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2449() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.ZXY;
        Rotation rotation0 = new Rotation(rotationOrder0, (-2874.531173913888), (-2874.531173913888), (-2874.531173913888));
        Vector3D vector3D0 = rotation0.getAxis();
        assertEquals((-0.587397362925838), vector3D0.getX(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2450() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.ZXY;
        Rotation rotation0 = new Rotation(rotationOrder0, (-2874.531173913888), (-2874.531173913888), (-2874.531173913888));
        Vector3D vector3D0 = rotation0.getAxis();
        assertEquals(0.5722605778960193, vector3D0.getY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2551() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        double double0 = Rotation.distance(rotation0, rotation0);
        assertEquals(1.0, rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2552() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        double double0 = Rotation.distance(rotation0, rotation0);
        assertEquals(0.0, rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2553() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        double double0 = Rotation.distance(rotation0, rotation0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2654() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getAngle();
        assertEquals(-0.0, rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2655() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getAngle();
        assertEquals(-0.0, rotation0.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2656() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getAngle();
        assertEquals(1.0, rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2657() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getAngle();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        double double0 = rotation0.getAngle();
        assertEquals(0.0, rotation0.getQ3(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2759() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999999999, (-1.0), 396.865438907721);
        Rotation rotation0 = new Rotation(vector3D0, (-1010.0));
        RotationOrder rotationOrder0 = RotationOrder.YXY;
        Rotation rotation1 = new Rotation(rotationOrder0, (-0.1), 0.0, (-3961306.4455905547));
        Rotation rotation2 = rotation0.applyInverseTo(rotation1);
        double double0 = Rotation.distance(rotation2, rotation0);
        assertEquals(3.1340944646268083, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2760() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999999999, (-1.0), 396.865438907721);
        Rotation rotation0 = new Rotation(vector3D0, (-1010.0));
        RotationOrder rotationOrder0 = RotationOrder.YXY;
        Rotation rotation1 = new Rotation(rotationOrder0, (-0.1), 0.0, (-3961306.4455905547));
        Rotation rotation2 = rotation0.applyInverseTo(rotation1);
        double double0 = Rotation.distance(rotation2, rotation0);
        assertEquals((-0.7136283953469859), rotation2.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2861() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.XYZ;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2962() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        RotationOrder rotationOrder0 = RotationOrder.XYZ;
        Vector3D vector3D1 = rotationOrder0.getA3();
        Rotation rotation0 = new Rotation(vector3D0, vector3D1);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test3063() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.XYZ;
        Rotation rotation0 = new Rotation(2904.39, 2904.39, 0.7249995199969751, 9.0, false);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test3164() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.XZY;
        Rotation rotation0 = new Rotation(2.7011204750985622E7, 2.7011204750985622E7, 1646.231498766, 1646.231498766, false);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test3265() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = Vector3D.MINUS_J;
        RotationOrder rotationOrder0 = RotationOrder.XZY;
        Rotation rotation0 = new Rotation(vector3D1, vector3D0);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test3366() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.XZY;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3467() throws Throwable {
        Rotation rotation0 = new Rotation(0.0, 0.0, 2752.0588632667345, 1757.9917, false);
        RotationOrder rotationOrder0 = RotationOrder.YXZ;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test3568() throws Throwable {
        Rotation rotation0 = new Rotation(1407.18, 1407.18, 0.0, (-0.5), false);
        Rotation rotation1 = rotation0.revert();
        RotationOrder rotationOrder0 = RotationOrder.YXZ;
        try {
            rotation1.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test3669() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        RotationOrder rotationOrder0 = RotationOrder.YXZ;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        rotation0.getAngles(rotationOrder0);
        assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3770() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        RotationOrder rotationOrder0 = RotationOrder.YZX;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertArrayEquals(new double[] { -0.0, -0.0, -0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3771() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D0, 0.0);
        RotationOrder rotationOrder0 = RotationOrder.YZX;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertEquals(-0.0, rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3872() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        RotationOrder rotationOrder0 = RotationOrder.YXY;
        Vector3D vector3D1 = rotationOrder0.getA1();
        Vector3D vector3D2 = Vector3D.MINUS_I;
        Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D2);
        RotationOrder rotationOrder1 = RotationOrder.YZX;
        try {
            rotation0.getAngles(rotationOrder1);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test3973() throws Throwable {
        Rotation rotation0 = new Rotation(1326.6019, 1326.6019, 1326.6019, 0.1663779930243623, false);
        RotationOrder rotationOrder0 = RotationOrder.YZX;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test4074() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = vector3D0.orthogonal();
        RotationOrder rotationOrder0 = RotationOrder.ZXY;
        Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test4175() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.ZXY;
        Rotation rotation0 = new Rotation((-0.9999999999), 0.9999999999, (-0.9999999999), (-0.9999999999), true);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test4276() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.ZYX;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertArrayEquals(new double[] { 0.0, -0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test4277() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.ZYX;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertEquals(1.0, rotation0.getQ0(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4278() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.ZYX;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertEquals(0.0, rotation0.getQ2(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4379() throws Throwable {
        Rotation rotation0 = new Rotation(1407.18, 1407.18, 0.0, (-0.5), false);
        RotationOrder rotationOrder0 = RotationOrder.ZYX;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test4480() throws Throwable {
        Rotation rotation0 = new Rotation(1.4652806994556449, 0.25, 0.8888640065921691, 0.8888640065921691, false);
        RotationOrder rotationOrder0 = RotationOrder.ZYX;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Cardan angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test4581() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.XYX;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test4682() throws Throwable {
        Rotation rotation0 = new Rotation(0.0, 0.0, 0.7010980167027278, 0.0, false);
        RotationOrder rotationOrder0 = RotationOrder.XYX;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test4783() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.XYX;
        Vector3D vector3D0 = rotationOrder0.getA1();
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test4884() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.XZX;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test4985() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = Vector3D.MINUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D1);
        RotationOrder rotationOrder0 = RotationOrder.XZX;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5086() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        RotationOrder rotationOrder0 = RotationOrder.XZX;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5187() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.YXY;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test5288() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = Vector3D.MINUS_J;
        RotationOrder rotationOrder0 = RotationOrder.YXY;
        Rotation rotation0 = new Rotation(vector3D1, vector3D0);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5389() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        RotationOrder rotationOrder0 = RotationOrder.YXY;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5490() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        try {
            rotation0.getAngles((RotationOrder) null);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5591() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-2187.8387646496), (-1294.6328), (-2187.8387646496));
        Vector3D vector3D1 = vector3D0.negate();
        Rotation rotation0 = new Rotation(vector3D0, vector3D1);
        RotationOrder rotationOrder0 = RotationOrder.YZY;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5692() throws Throwable {
        RotationOrder rotationOrder0 = RotationOrder.YZY;
        Rotation rotation0 = Rotation.IDENTITY;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5793() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.ZXZ;
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test5894() throws Throwable {
        Rotation rotation0 = new Rotation(1248.2238428486883, 1248.2238428486883, 1248.2238428486883, (-8.0E298), true);
        RotationOrder rotationOrder0 = RotationOrder.ZXZ;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test5995() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0);
        RotationOrder rotationOrder0 = RotationOrder.ZXZ;
        try {
            rotation0.getAngles(rotationOrder0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test6096() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        RotationOrder rotationOrder0 = RotationOrder.XZY;
        Vector3D vector3D1 = Vector3D.MINUS_J;
        RotationOrder rotationOrder1 = RotationOrder.ZYZ;
        Vector3D vector3D2 = rotationOrder0.getA1();
        Rotation rotation0 = new Rotation(vector3D1, vector3D2, vector3D0, vector3D2);
        try {
            rotation0.getAngles(rotationOrder1);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Euler angles singularity
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }

    @Test(timeout = 4000)
    public void test6197() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D1, vector3D0);
        double[] doubleArray0 = rotation0.getAngles((RotationOrder) null);
        assertArrayEquals(new double[] { (-1.5707963267948966), 1.5707963267948963, 1.5707963267948966 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test6198() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        Vector3D vector3D1 = Vector3D.MINUS_K;
        Rotation rotation0 = new Rotation(vector3D1, vector3D0);
        double[] doubleArray0 = rotation0.getAngles((RotationOrder) null);
        assertEquals((-0.7071067811865475), rotation0.getQ1(), 0.01);
    }

    @Test(timeout = 4000)
    public void test6299() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        double[][] doubleArray0 = rotation0.getMatrix();
        Rotation rotation1 = null;
        try {
            rotation1 = new Rotation(doubleArray0, Double.NaN);
            fail("Expecting exception: Exception");
        } catch (Throwable e) {
            //
            // unable to orthogonalize matrix in 10 iterations
            //
            verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
        }
    }
}
