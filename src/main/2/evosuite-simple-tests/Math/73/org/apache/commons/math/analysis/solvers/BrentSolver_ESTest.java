/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 23:19:16 GMT 2024
 */
package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        // Undeclared exception!
        try {
            brentSolver0.solve(0.0, 0.0, 0.0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // invalid interval, initial value parameters:  lower=0, initial=0, upper=0
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[9];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-489.965), 2215.1);
        assertEquals((-489.965), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        double[] doubleArray0 = new double[15];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-849.538929898693), 1448.8035413435139, 5.6593888333729865);
        assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        double[] doubleArray0 = new double[15];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-849.538929898693), 1448.8035413435139, 5.6593888333729865);
        assertEquals(5.6593888333729865, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver();
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, 0.0, Double.POSITIVE_INFINITY, 10.1788743134);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver();
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, 0.0, Double.POSITIVE_INFINITY, 10.1788743134);
        assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        double[] doubleArray0 = new double[12];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-489.965), Double.POSITIVE_INFINITY, 5.86333223343534E-6);
        assertEquals(10, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        double[] doubleArray0 = new double[12];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-489.965), Double.POSITIVE_INFINITY, 5.86333223343534E-6);
        assertEquals(1.2323309559363612E-6, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver();
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-489.965), 0.0, (-454.7999221526411));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver();
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-489.965), 0.0, (-454.7999221526411));
        assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = (-454.411525103);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-489.965), 1178.7109168556685, (-454.411525103));
        assertEquals(1, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = (-454.411525103);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-489.965), 1178.7109168556685, (-454.411525103));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        double[] doubleArray0 = new double[10];
        doubleArray0[4] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-454.411525103), 1.720285095864648E-19);
        assertEquals(1.720285095864648E-19, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        double[] doubleArray0 = new double[10];
        doubleArray0[4] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-454.411525103), 1.720285095864648E-19);
        assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[2] = (-1.393221495475263);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-1.3926637620895787E-12), 1.6628168190640695E15);
        assertEquals((-1.3926637620895787E-12), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[4] = (-454.411525103);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        // Undeclared exception!
        try {
            brentSolver0.solve((-599.89), (-454.411525103));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // function values at endpoints do not have different signs.  Endpoints: [-599.89, -454.412], Values: [-58,848,558,257,051.12, -19,375,222,057,621.98]
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-489.965), 2215.1);
        assertEquals(86, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-489.965), 2215.1);
        assertEquals((-7.195084863263031E-7), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[7] = (-454.411525103);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        double double0 = brentSolver0.solve((-599.89), 0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        double[] doubleArray0 = new double[10];
        doubleArray0[3] = (-489.965);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        brentSolver0.setRelativeAccuracy((-489.965));
        brentSolver0.setAbsoluteAccuracy(0.0);
        try {
            brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-489.965), (-70.83616494932362), (-454.411525103));
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Maximal number of iterations (100) exceeded
            //
            verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        double[] doubleArray0 = new double[16];
        doubleArray0[0] = 7.715206369472485E-12;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-849.538929898693), 1448.8035413435139, 7.715206369472485E-12);
        assertEquals(31, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        double[] doubleArray0 = new double[16];
        doubleArray0[0] = 7.715206369472485E-12;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        double double0 = brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-849.538929898693), 1448.8035413435139, 7.715206369472485E-12);
        assertEquals(965.869027512113, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-454.411525103);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver();
        brentSolver0.setAbsoluteAccuracy(Double.NaN);
        try {
            brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-997.9), 3380.20896, (-489.965));
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Maximal number of iterations (100) exceeded
            //
            verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }
}
