/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:20:44 GMT 2024
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BigMatrixImpl_ESTest extends BigMatrixImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        assertEquals(1, bigMatrixImpl0.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.copy();
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.copy();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.copy();
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.copy();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        // Undeclared exception!
        try {
            bigMatrixImpl0.getEntryAsDouble(7, 7);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        // Undeclared exception!
        try {
            bigMatrixImpl0.getPermutation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        bigMatrixImpl0.setRoundingMode(0);
        assertEquals(0, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[11][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        int int0 = bigMatrixImpl0.getScale();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[11][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        int int0 = bigMatrixImpl0.getScale();
        assertEquals(64, int0);
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        bigMatrixImpl0.setScale(4);
        assertEquals(4, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray1[0] = bigDecimal0;
        BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
        bigDecimalArray1[1] = bigDecimal1;
        bigDecimalArray0[0] = bigDecimalArray1;
        BigDecimal[] bigDecimalArray2 = new BigDecimal[2];
        BigInteger bigInteger0 = BigInteger.ONE;
        BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
        bigDecimalArray2[0] = bigDecimal2;
        bigDecimalArray2[1] = bigDecimal1;
        bigDecimalArray0[1] = bigDecimalArray2;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        bigMatrixImpl0.solve(bigDecimalArray2);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray1[0] = bigDecimal0;
        BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
        bigDecimalArray1[1] = bigDecimal1;
        bigDecimalArray0[0] = bigDecimalArray1;
        BigDecimal[] bigDecimalArray2 = new BigDecimal[2];
        BigInteger bigInteger0 = BigInteger.ONE;
        BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
        bigDecimalArray2[0] = bigDecimal2;
        bigDecimalArray2[1] = bigDecimal1;
        bigDecimalArray0[1] = bigDecimalArray2;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        bigMatrixImpl0.solve(bigDecimalArray2);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        // Undeclared exception!
        try {
            bigMatrixImpl0.preMultiply((BigMatrix) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[20][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        int int0 = bigMatrixImpl0.getRoundingMode();
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[20][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        int int0 = bigMatrixImpl0.getRoundingMode();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        // Undeclared exception!
        try {
            bigMatrixImpl0.inverse();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl((-1), (-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // row and column dimensions must be positive
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
        int[] intArray0 = new int[1];
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        assertTrue(bigMatrixImpl0.isSquare());
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
        int[] intArray0 = new int[1];
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
        int[] intArray0 = new int[1];
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
        int[] intArray0 = new int[1];
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
        int[] intArray0 = new int[1];
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        assertEquals(1, bigMatrixImpl0.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
        int[] intArray0 = new int[1];
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(2972, (-3747));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // row and column dimensions must be positive
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][3];
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one row.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1528() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][0];
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one column.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1629() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[3][0];
        bigDecimalArray1[0] = bigDecimalArray0;
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // All input rows must have the same length.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1730() throws Throwable {
        double[][] doubleArray0 = new double[0][8];
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one row.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1831() throws Throwable {
        double[][] doubleArray0 = new double[1][3];
        double[] doubleArray1 = new double[0];
        doubleArray0[0] = doubleArray1;
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one column.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1932() throws Throwable {
        double[][] doubleArray0 = new double[4][9];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        assertEquals(9, bigMatrixImpl0.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test1933() throws Throwable {
        double[][] doubleArray0 = new double[4][9];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        assertEquals(4, bigMatrixImpl0.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test1934() throws Throwable {
        double[][] doubleArray0 = new double[4][9];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test1935() throws Throwable {
        double[][] doubleArray0 = new double[4][9];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test2036() throws Throwable {
        double[][] doubleArray0 = new double[4][9];
        double[] doubleArray1 = new double[0];
        doubleArray0[2] = doubleArray1;
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // All input rows must have the same length.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2137() throws Throwable {
        String[][] stringArray0 = new String[0][4];
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one row.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2238() throws Throwable {
        String[][] stringArray0 = new String[1][3];
        String[] stringArray1 = new String[0];
        stringArray0[0] = stringArray1;
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one column.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2339() throws Throwable {
        String[][] stringArray0 = new String[16][7];
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test2440() throws Throwable {
        String[][] stringArray0 = new String[16][7];
        String[] stringArray1 = new String[1];
        stringArray0[0] = stringArray1;
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // All input rows must have the same length.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2541() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[10][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrix bigMatrix0 = bigMatrixImpl0.transpose();
        try {
            bigMatrixImpl0.add(bigMatrix0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // matrix dimension mismatch
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2642() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[9][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(4);
        try {
            bigMatrixImpl0.add(bigMatrix0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // matrix dimension mismatch
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2743() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test2744() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test2745() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
        assertFalse(bigMatrixImpl1.equals((Object) bigMatrixImpl0));
    }

    @Test(timeout = 4000)
    public void test2746() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test2847() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrix bigMatrix0 = bigMatrixImpl0.transpose();
        try {
            bigMatrixImpl0.subtract(bigMatrix0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // matrix dimension mismatch
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2948() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2034, 703);
        BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(703);
        try {
            bigMatrixImpl0.subtract(bigMatrix0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // matrix dimension mismatch
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test3049() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3050() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test3051() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3052() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test3053() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
        assertFalse(bigMatrixImpl1.equals((Object) bigMatrixImpl0));
    }

    @Test(timeout = 4000)
    public void test3154() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarAdd(bigDecimal0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3155() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarAdd(bigDecimal0);
        assertFalse(bigMatrixImpl1.equals((Object) bigMatrixImpl0));
    }

    @Test(timeout = 4000)
    public void test3156() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarAdd(bigDecimal0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test3157() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarAdd(bigDecimal0);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3158() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarAdd(bigDecimal0);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test3259() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarMultiply(bigDecimal0);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test3260() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarMultiply(bigDecimal0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test3261() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.scalarMultiply(bigDecimal0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3362() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrices are not multiplication compatible.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test3463() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test3464() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3465() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        assertTrue(bigMatrixImpl1.equals((Object) bigMatrixImpl0));
    }

    @Test(timeout = 4000)
    public void test3466() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test3467() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3568() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[][] doubleArray0 = bigMatrixImpl0.getDataAsDoubleArray();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test3569() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[][] doubleArray0 = bigMatrixImpl0.getDataAsDoubleArray();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3570() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[][] doubleArray0 = bigMatrixImpl0.getDataAsDoubleArray();
        assertEquals(1, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3671() throws Throwable {
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getNorm();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test3672() throws Throwable {
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getNorm();
        assertNotSame(bigDecimal1, bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test3673() throws Throwable {
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getNorm();
        assertEquals((short) 1, bigDecimal1.shortValue());
    }

    @Test(timeout = 4000)
    public void test3674() throws Throwable {
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getNorm();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test3775() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        try {
            bigMatrixImpl0.getSubMatrix((-133), (-133), (-133), (-133));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test3876() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2108, 2108);
        try {
            bigMatrixImpl0.getSubMatrix(2108, 2108, 2108, (-2875));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test3977() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        try {
            bigMatrixImpl0.getSubMatrix(3, 0, 3, 0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4078() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        try {
            bigMatrixImpl0.getSubMatrix(22, 22, 22, 22);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4179() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        try {
            bigMatrixImpl0.getSubMatrix(2, 2, (-4), (-4));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4280() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[11][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
        assertTrue(bigMatrixImpl1.isSquare());
    }

    @Test(timeout = 4000)
    public void test4281() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[11][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test4282() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[11][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test4383() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        try {
            bigMatrixImpl0.getSubMatrix(0, 0, 8, 8);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4484() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        int[] intArray0 = new int[0];
        try {
            bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // selected row and column index arrays must be non-empty
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4585() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[12][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.setSubMatrix(bigDecimalArray0, (-169), (-169));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4686() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 323, (-1));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4787() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][7];
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one row.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4888() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][0];
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Matrix must have at least one column.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4989() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[4][3];
        bigDecimalArray1[0] = bigDecimalArray0;
        BigMatrixImpl bigMatrixImpl0 = null;
        try {
            bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // All input rows must have the same length.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test5090() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        try {
            bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 0, 3327);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test5191() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        try {
            bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 3749, 3749);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // matrix must be initialized to perfom this method
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test5292() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][8];
        try {
            bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 0, 1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // matrix must be initialized to perfom this method
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test5393() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[8][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 1800, 1800);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // invalid row or column index selection
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test5494() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrix bigMatrix0 = bigMatrixImpl0.getColumnMatrix(0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test5495() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrix bigMatrix0 = bigMatrixImpl0.getColumnMatrix(0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test5496() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrix bigMatrix0 = bigMatrixImpl0.getColumnMatrix(0);
        assertEquals(4, bigMatrix0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test5597() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
        try {
            bigMatrixImpl0.getColumnMatrix((-590));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // illegal column argument
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test5698() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        bigMatrixImpl0.getRow(1);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test5699() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        bigMatrixImpl0.getRow(1);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test57100() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        try {
            bigMatrixImpl0.getRow(9);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // illegal row argument
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test58101() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.getRowAsDoubleArray(685);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // illegal row argument
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test59102() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test59103() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test59104() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(0);
        assertArrayEquals(new double[] { 1.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test60105() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getColumn(0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test60106() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getColumn(0);
        assertEquals(2, bigDecimalArray1.length);
    }

    @Test(timeout = 4000)
    public void test60107() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getColumn(0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test61108() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        try {
            bigMatrixImpl0.getColumn((-22));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // illegal column argument
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test62109() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(400, 400);
        try {
            bigMatrixImpl0.getColumnAsDoubleArray(400);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // illegal column argument
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test63110() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[] doubleArray0 = bigMatrixImpl0.getColumnAsDoubleArray(0);
        assertArrayEquals(new double[] { 10.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test63111() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[] doubleArray0 = bigMatrixImpl0.getColumnAsDoubleArray(0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test63112() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        double[] doubleArray0 = bigMatrixImpl0.getColumnAsDoubleArray(0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test64113() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.getDeterminant();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // matrix is not square
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test65114() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        assertTrue(bigMatrixImpl0.isSquare());
    }

    @Test(timeout = 4000)
    public void test65115() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test65116() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        assertEquals((byte) 0, bigDecimal1.byteValue());
    }

    @Test(timeout = 4000)
    public void test65117() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        assertNotSame(bigDecimal1, bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test65118() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test66119() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        BigDecimal bigDecimal2 = bigMatrixImpl0.getDeterminant();
        assertSame(bigDecimal2, bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test66120() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        BigDecimal bigDecimal2 = bigMatrixImpl0.getDeterminant();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test66121() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        BigDecimal bigDecimal2 = bigMatrixImpl0.getDeterminant();
        assertSame(bigDecimal2, bigDecimal1);
    }

    @Test(timeout = 4000)
    public void test66122() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
        BigDecimal bigDecimal2 = bigMatrixImpl0.getDeterminant();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test67123() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
        assertNull(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test67124() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test67125() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test68126() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[5][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.getTrace();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // matrix is not square
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test69127() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1052, 1052);
        // Undeclared exception!
        try {
            bigMatrixImpl0.getTrace();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test70128() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[20];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.operate(bigDecimalArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // vector has wrong length
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test71129() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.operate(bigDecimalArray0);
        assertNotSame(bigDecimalArray1, bigDecimalArray0);
    }

    @Test(timeout = 4000)
    public void test71130() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.operate(bigDecimalArray0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test71131() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.operate(bigDecimalArray0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test72132() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        double[] doubleArray0 = new double[1];
        // Undeclared exception!
        try {
            bigMatrixImpl0.operate(doubleArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test73133() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[39][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
        try {
            bigMatrixImpl0.preMultiply(bigDecimalArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // vector has wrong length
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test74134() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test74135() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test74136() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
        assertNotSame(bigDecimalArray1, bigDecimalArray0);
    }

    @Test(timeout = 4000)
    public void test75137() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[33][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
        try {
            bigMatrixImpl0.solve(bigDecimalArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // constant vector has wrong length
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test76138() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        double[] doubleArray0 = new double[1];
        // Undeclared exception!
        try {
            bigMatrixImpl0.solve(doubleArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test77139() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[12][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(0);
        try {
            bigMatrixImpl0.solve(bigMatrix0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Incorrect row dimension
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test78140() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.solve(bigDecimalArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // coefficient matrix is not square
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test79141() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        try {
            bigMatrixImpl0.solve(bigDecimalArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Matrix is singular.
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test80142() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test80143() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test80144() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test81145() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        String string0 = bigMatrixImpl0.toString();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test81146() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        String string0 = bigMatrixImpl0.toString();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test81147() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        String string0 = bigMatrixImpl0.toString();
        assertEquals("BigMatrixImpl{}", string0);
    }

    @Test(timeout = 4000)
    public void test82148() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[12][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        String string0 = bigMatrixImpl0.toString();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test82149() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[12][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        String string0 = bigMatrixImpl0.toString();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test82150() throws Throwable {
        BigDecimal[][] bigDecimalArray0 = new BigDecimal[12][2];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        String string0 = bigMatrixImpl0.toString();
        assertEquals("BigMatrixImpl{{null,null},{null,null},{null,null},{null,null},{null,null},{null,null},{null,null},{null,null},{null,null},{null,null},{null,null},{null,null}}", string0);
    }

    @Test(timeout = 4000)
    public void test83151() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test83152() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test83153() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test84154() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        boolean boolean0 = bigMatrixImpl0.equals("");
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test84155() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        boolean boolean0 = bigMatrixImpl0.equals("");
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test84156() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        boolean boolean0 = bigMatrixImpl0.equals("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test85157() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][1];
        bigDecimalArray1[0] = bigDecimalArray0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test85158() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][1];
        bigDecimalArray1[0] = bigDecimalArray0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test85159() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][1];
        bigDecimalArray1[0] = bigDecimalArray0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test85160() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][1];
        bigDecimalArray1[0] = bigDecimalArray0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test85161() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][1];
        bigDecimalArray1[0] = bigDecimalArray0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test86162() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test86163() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test86164() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test86165() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test86166() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal[][] bigDecimalArray1 = new BigDecimal[15][1];
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test87167() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test87168() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test87169() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test88170() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(1, 1);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test88171() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(1, 1);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test88172() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(1, 1);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test88173() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(1, 1);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test88174() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(1, 1);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertTrue(bigMatrixImpl1.isSquare());
    }

    @Test(timeout = 4000)
    public void test88175() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(1, 1);
        boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test89176() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        bigMatrixImpl0.hashCode();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test89177() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        bigMatrixImpl0.hashCode();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test90178() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test90179() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getLUMatrix();
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test90180() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getLUMatrix();
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test90181() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getLUMatrix();
        assertEquals(64, bigMatrixImpl1.getScale());
    }

    @Test(timeout = 4000)
    public void test90182() throws Throwable {
        BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
        BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
        bigDecimalArray0[0] = bigDecimal0;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        boolean boolean0 = bigMatrixImpl0.isSingular();
        BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl) bigMatrixImpl0.getLUMatrix();
        assertEquals(4, bigMatrixImpl1.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test91183() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
        // Undeclared exception!
        try {
            bigMatrixImpl0.getLUMatrix();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test92184() throws Throwable {
        String[][] stringArray0 = new String[1][7];
        String[] stringArray1 = new String[1];
        stringArray1[0] = "6";
        stringArray0[0] = stringArray1;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        assertEquals(1, bigMatrixImpl0.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test92185() throws Throwable {
        String[][] stringArray0 = new String[1][7];
        String[] stringArray1 = new String[1];
        stringArray1[0] = "6";
        stringArray0[0] = stringArray1;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        assertEquals(64, bigMatrixImpl0.getScale());
    }

    @Test(timeout = 4000)
    public void test92186() throws Throwable {
        String[][] stringArray0 = new String[1][7];
        String[] stringArray1 = new String[1];
        stringArray1[0] = "6";
        stringArray0[0] = stringArray1;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        assertEquals(4, bigMatrixImpl0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test92187() throws Throwable {
        String[][] stringArray0 = new String[1][7];
        String[] stringArray1 = new String[1];
        stringArray1[0] = "6";
        stringArray0[0] = stringArray1;
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        assertEquals(1, bigMatrixImpl0.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test93188() throws Throwable {
        BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(333, 333);
        try {
            bigMatrixImpl0.getRowMatrix((-3973));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // illegal row argument
            //
            verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
        }
    }
}
