/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 20:38:08 GMT 2024
 */
package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MockRandom mockRandom0 = new MockRandom(1823L);
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        int[] intArray0 = new int[0];
        EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
        LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
        linkedList0.add(euclideanIntegerPoint0);
        linkedList0.offerFirst(euclideanIntegerPoint0);
        MockRandom mockRandom0 = new MockRandom();
        KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE;
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
        kMeansPlusPlusClusterer0.cluster(linkedList0, 2, 2);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        int[] intArray0 = new int[0];
        EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
        LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
        linkedList0.add(euclideanIntegerPoint0);
        MockRandom mockRandom0 = new MockRandom();
        KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT;
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
        List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, (-12), (-12));
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        int[] intArray0 = new int[0];
        EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
        LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
        linkedList0.add(euclideanIntegerPoint0);
        linkedList0.offerFirst(euclideanIntegerPoint0);
        MockRandom mockRandom0 = new MockRandom();
        KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT;
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
        List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 2, 2);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        int[] intArray0 = new int[0];
        EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
        LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
        linkedList0.add(euclideanIntegerPoint0);
        linkedList0.offerFirst(euclideanIntegerPoint0);
        MockRandom mockRandom0 = new MockRandom();
        KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
        List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 2, 2);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        int[] intArray0 = new int[0];
        EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
        LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
        linkedList0.add(euclideanIntegerPoint0);
        linkedList0.offerFirst(euclideanIntegerPoint0);
        MockRandom mockRandom0 = new MockRandom();
        KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
        // Undeclared exception!
        try {
            kMeansPlusPlusClusterer0.cluster(linkedList0, 2, 2);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // empty cluster in k-means
            //
            verifyException("org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer", e);
        }
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = Integer.MAX_VALUE;
        EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
        LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
        linkedList0.add(euclideanIntegerPoint0);
        linkedList0.add(euclideanIntegerPoint0);
        MockRandom mockRandom0 = new MockRandom(0L);
        KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT;
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
        List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 3833);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        int[] intArray0 = new int[0];
        EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
        LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
        linkedList0.add(euclideanIntegerPoint0);
        MockRandom mockRandom0 = new MockRandom();
        KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
        // Undeclared exception!
        kMeansPlusPlusClusterer0.cluster(linkedList0, 2, 2);
    }
}
