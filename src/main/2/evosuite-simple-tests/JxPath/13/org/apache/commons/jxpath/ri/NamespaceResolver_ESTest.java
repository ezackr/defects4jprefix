/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 10:33:42 GMT 2024
 */
package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        NamespaceResolver namespaceResolver1 = (NamespaceResolver) namespaceResolver0.clone();
        assertFalse(namespaceResolver1.isSealed());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        NamespaceResolver namespaceResolver1 = (NamespaceResolver) namespaceResolver0.clone();
        assertNotNull(namespaceResolver1);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        NamespaceResolver namespaceResolver1 = (NamespaceResolver) namespaceResolver0.clone();
        assertNotSame(namespaceResolver1, namespaceResolver0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        namespaceResolver0.seal();
        // Undeclared exception!
        try {
            namespaceResolver0.registerNamespace("", "");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Cannot register namespaces on a sealed NamespaceResolver
            //
            verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        QName qName0 = new QName("6w");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        namespaceResolver0.setNamespaceContextPointer(variablePointer0);
        VariablePointer variablePointer1 = (VariablePointer) namespaceResolver0.getNamespaceContextPointer();
        assertFalse(variablePointer1.isAttribute());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
        Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
        assertNull(pointer0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        namespaceResolver0.registerNamespace("Cannot register namespaces on a sealed NamespaceResolver", "Cannot register namespaces on a sealed NamespaceResolver");
        String string0 = namespaceResolver0.getNamespaceURI("Cannot register namespaces on a sealed NamespaceResolver");
        assertEquals("Cannot register namespaces on a sealed NamespaceResolver", string0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        namespaceResolver0.pointer = (NodePointer) variablePointer0;
        String string0 = namespaceResolver0.getNamespaceURI("<<unknown namespace>>");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
        String string0 = namespaceResolver1.getNamespaceURI("Cannot find an element by ke - no KeyManager has been specified");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        namespaceResolver1.reverseMap = hashMap0;
        // Undeclared exception!
        try {
            namespaceResolver1.getPrefix(">,$=ocQ");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        namespaceResolver0.pointer = (NodePointer) variablePointer0;
        String string0 = namespaceResolver0.getPrefix("<<unknown namespace>>");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        namespaceResolver0.registerNamespace("<<unknown namespace>>", "<<unknown namespace>>");
        namespaceResolver0.pointer = (NodePointer) variablePointer0;
        String string0 = namespaceResolver0.getPrefix("<<unknown namespace>>");
        assertEquals("<<unknown namespace>>", string0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
        namespaceResolver1.seal();
        assertTrue(namespaceResolver1.isSealed());
    }
}
