/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 09:30:05 GMT 2024
 */
package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLBRElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFontElementImpl;
import org.apache.html.dom.HTMLImageElementImpl;
import org.apache.html.dom.HTMLQuoteElementImpl;
import org.apache.html.dom.HTMLTableCaptionElementImpl;
import org.apache.html.dom.HTMLTableSectionElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLIElementImpl;
import org.apache.wml.dom.WMLPrevElementImpl;
import org.apache.wml.dom.WMLWmlElementImpl;
import org.apache.xerces.dom.CDATASectionImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.apache.xerces.utils.StringPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StringPool stringPool0 = new StringPool();
        DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(stringPool0);
        Attr attr0 = deferredDocumentImpl0.createAttributeNS("(jLQ`ea)N", "ccesekey");
        Locale locale0 = Locale.KOREAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0, "(jLQ`ea)N");
        QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "ccesekey", "(jLQ`ea)N");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        WMLIElementImpl wMLIElementImpl0 = new WMLIElementImpl(wMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, wMLIElementImpl0);
        int int0 = nodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment("id('");
        Locale locale0 = Locale.PRC;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("id('", object0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Attr attr0 = hTMLDocumentImpl0.createAttributeNS("org.apacheHwml.dom.WMLSeLvarElementImpl", "org.apacheHwml.dom.WMLSeLvarElementImpl");
        Locale locale0 = Locale.CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isCollection();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ITALIAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
        QName qName0 = new QName("<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace");
        // Undeclared exception!
        try {
            dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) qName0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Factory is not set on the JXPathContext - cannot create path:
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("http://www.w3.org/XML/1998/namespace");
        assertFalse(nodePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CANADA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        int int0 = dOMNodePointer0.getLength();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.KOREAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.hashCode();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
        namespaceResolver0.setNamespaceContextPointer(dOMNodePointer0);
        namespaceResolver0.registerDefaultNamespaceURI("<<unknown namespace>>");
        dOMNodePointer0.setNamespaceResolver(namespaceResolver0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
        String string0 = dOMNodePointer1.asPath();
        assertEquals("/node()[2]", string0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isActual();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
        boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        QName qName0 = dOMNodePointer0.getName();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
        NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(nodeNameTest0, false, dOMNodePointer0);
        assertEquals(0, nodeIterator0.getPosition());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        boolean boolean0 = DOMNodePointer.testNode((Node) null, (NodeTest) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "");
        QName qName0 = new QName("");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLImageElementImpl0, (NodeTest) nodeNameTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLQuoteElementImpl hTMLQuoteElementImpl0 = new HTMLQuoteElementImpl(hTMLDocumentImpl0, "%\"+'SX[5&iW1/");
        QName qName0 = new QName("%\"+'SX[5&iW1/");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLQuoteElementImpl0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstruction processingInstruction0 = hTMLDocumentImpl0.createProcessingInstruction("nQbhaV", "nQbhaV");
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("nQbhaV");
        boolean boolean0 = DOMNodePointer.testNode((Node) processingInstruction0, (NodeTest) processingInstructionTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLElement0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        TextImpl textImpl0 = new TextImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
        boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
        CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "P;");
        boolean boolean0 = DOMNodePointer.testNode((Node) commentImpl0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstruction processingInstruction0 = hTMLDocumentImpl0.createProcessingInstruction("nvbhaPV", "nvbhaPV");
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
        boolean boolean0 = DOMNodePointer.testNode((Node) processingInstruction0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("Cannot remove roCt DOM node");
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        boolean boolean0 = DOMNodePointer.testNode((Node) cDATASection0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("eut=}e\"2dVUWwvCZz");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) processingInstructionTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "H");
        QName qName0 = new QName("H");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLImageElementImpl0, (NodeTest) nodeNameTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
        namespaceResolver0.registerDefaultNamespaceURI("");
        dOMNodePointer0.setNamespaceResolver(namespaceResolver0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
        String string0 = dOMNodePointer1.asPath();
        assertEquals("/BODY[1]", string0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "H");
        QName qName0 = new QName("H");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "H");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLImageElementImpl0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, (Locale) null);
        QName qName0 = dOMNodePointer0.getName();
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLElement0);
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        assertEquals("BODY", qName0.getName());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstruction processingInstruction0 = hTMLDocumentImpl0.createProcessingInstruction("comment", "comment");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstruction0, (Locale) null);
        QName qName0 = dOMNodePointer0.getName();
        assertEquals("comment", qName0.getName());
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI("");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", string0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI("xml");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getNamespaceURI("Fo?1Ne'~q5");
        String string0 = dOMNodePointer0.getNamespaceURI("Fo?1Ne'~q5");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getDefaultNamespaceURI();
        String string0 = dOMNodePointer0.getNamespaceURI((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
        String string0 = dOMNodePointer0.getDefaultNamespaceURI();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.PRC;
        hTMLDocumentImpl0.getTitle();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isLeaf();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.PRC;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isLeaf();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.KOREAN;
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, (String) null, (String) null, (String) null);
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        WMLPrevElementImpl wMLPrevElementImpl0 = new WMLPrevElementImpl(wMLDocumentImpl0, (String) null);
        wMLPrevElementImpl0.setXmlLang("-o");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLPrevElementImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isLanguage("Rj;");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
        Locale locale0 = Locale.TAIWAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        boolean boolean0 = dOMNodePointer0.isLanguage("<<unknown namespace>>");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        Locale locale0 = Locale.UK;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Text text0 = hTMLDocumentImpl0.createTextNode("http://www.w3.org/XML/1998/namespace");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
        dOMNodePointer0.setValue(locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("Cannot remove root DOM node");
        Locale locale0 = Locale.GERMAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.setValue((Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("pGf]Mg1lk7KQ@");
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.setValue(linkedList0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
        Locale locale0 = Locale.TAIWAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.setValue((Object) null);
        assertFalse(dOMNodePointer0.isCollection());
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        Locale locale0 = Locale.TAIWAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        dOMNodePointer0.setValue(hTMLDocumentImpl0);
        assertNull(hTMLDocumentImpl0.getDomain());
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
        dOMNodePointer0.setValue(hTMLFontElementImpl0);
        assertTrue(dOMNodePointer0.isActual());
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
        // Undeclared exception!
        try {
            dOMNodePointer0.setValue(cDATASectionImpl0);
            fail("Expecting exception: DOMException");
        } catch (DOMException e) {
            //
            // DOM006 Hierarchy request error
            //
            verifyException("org.apache.xerces.dom.ParentNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.setValue(dOMNodePointer0);
        assertTrue(dOMNodePointer0.isNode());
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.setValue(locale0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        QName qName0 = dOMNodePointer0.getName();
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
        // Undeclared exception!
        try {
            dOMNodePointer0.createChild(jXPathContext0, qName0, (-465));
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Factory is not set on the JXPathContext - cannot create path:
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, (Locale) null);
        QName qName0 = new QName("<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace");
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLElement0);
        // Undeclared exception!
        try {
            dOMNodePointer0.createAttribute(jXPathContext0, qName0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Unknown namespace prefix: <<unknown namespace>>
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.createAttribute((JXPathContext) null, (QName) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot create an attribute for path /@null, operation is not allowed for this type of node
            //
            verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLImageElementImpl0, locale0);
        QName qName0 = new QName("xmlns", "");
        NodePointer nodePointer0 = dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        assertTrue(nodePointer0.isNode());
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
        Locale locale0 = Locale.TAIWAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        dOMNodePointer0.remove();
        assertTrue(dOMNodePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.remove();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot remove root DOM node
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, "x;0vB \"");
        String string0 = dOMNodePointer0.asPath();
        assertEquals("id('x;0vB &quot;')", string0);
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        Attr attr0 = hTMLDocumentImpl0.createAttribute("J");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        Locale locale0 = Locale.UK;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Text text0 = hTMLDocumentImpl0.createTextNode("http://www.w3.org/XML/1998/namespace");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("/text()[1]", string0);
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ITALY;
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection((String) null);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("/text()[1]", string0);
    }

    @Test(timeout = 4000)
    public void test6061() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.JAPAN;
        EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(hTMLDocumentImpl0, (String) null);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReferenceImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "F$&pPY[M|I7s");
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6263() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ProcessingInstruction processingInstruction0 = hTMLDocumentImpl0.createProcessingInstruction("n1g", "n1g");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstruction0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("/processing-instruction('n1g')[1]", string0);
    }

    @Test(timeout = 4000)
    public void test6364() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment("id('");
        Locale locale0 = Locale.PRC;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6465() throws Throwable {
        DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
        Locale locale0 = Locale.ITALY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6566() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.KOREAN;
        QName qName0 = new QName(">;s(lc 688D", ">;s(lc 688D");
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, wMLWmlElementImpl0);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer1, wMLWmlElementImpl0);
        // Undeclared exception!
        try {
            dOMNodePointer0.asPath();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test6667() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
        HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLTableSectionElementImpl0);
        // Undeclared exception!
        try {
            dOMNodePointer1.asPath();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test6768() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, "idt'YvO')");
        String string0 = dOMNodePointer0.asPath();
        assertEquals("id('idt&apos;YvO&apos;)')", string0);
    }

    @Test(timeout = 4000)
    public void test6869() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        Locale locale0 = Locale.GERMAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6970() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TAIWAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        QName qName0 = dOMNodePointer0.getName();
        HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, hTMLTableCaptionElementImpl0);
        nodePointer0.compareTo(dOMNodePointer0);
        assertFalse(nodePointer0.equals((Object) dOMNodePointer0));
    }

    @Test(timeout = 4000)
    public void test7071() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.equals(hTMLDocumentImpl0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7172() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
        boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7273() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>", "http://www.w3.org/2000/xmlns/");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        Element element0 = wMLDocumentImpl0.createElementNS("http://www.w3.org/2000/xmlns/", "Ss:");
        String string0 = DOMNodePointer.getPrefix(element0);
        assertEquals("Ss", string0);
    }

    @Test(timeout = 4000)
    public void test7374() throws Throwable {
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
        Element element0 = wMLDocumentImpl0.createElementNS("/processing-instruction('", "java.home");
        QName qName0 = new QName("/processing-instruction('", "java.home");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
        boolean boolean0 = DOMNodePointer.testNode((Node) element0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7475() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINESE;
        Comment comment0 = hTMLDocumentImpl0.createComment((String) null);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0, (String) null);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("", object0);
    }

    @Test(timeout = 4000)
    public void test7576() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        Text text0 = hTMLDocumentImpl0.createTextNode("/text()");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0, "/text()");
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("/text()", object0);
    }

    @Test(timeout = 4000)
    public void test7677() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection((String) null);
        Locale locale0 = Locale.TAIWAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("", object0);
    }

    @Test(timeout = 4000)
    public void test7778() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        ProcessingInstruction processingInstruction0 = hTMLDocumentImpl0.createProcessingInstruction("n1g", "n1g");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstruction0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("n1g", object0);
    }

    @Test(timeout = 4000)
    public void test7879() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINESE;
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, (String) null, (String) null);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0, (String) null);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("", object0);
    }

    @Test(timeout = 4000)
    public void test7980() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        hTMLDocumentImpl0.setTitle("org.apache.xerces.dom.CDATASectionImpl@0000000003");
        Locale locale0 = Locale.GERMAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test8081() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, (Locale) null);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
        DOMNodePointer dOMNodePointer1 = (DOMNodePointer) dOMNodePointer0.getPointerByID(jXPathContext0, "");
        assertFalse(dOMNodePointer1.isCollection());
    }

    @Test(timeout = 4000)
    public void test8182() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
        NullPointer nullPointer0 = (NullPointer) dOMNodePointer0.getPointerByID(jXPathContext0, "http://www.w3.org/XML/1998/namespace");
        assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test8283() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Attr attr0 = hTMLDocumentImpl0.createAttributeNS("org.apacheHwml.dom.WMLSeLvarElementImpl", "org.apacheHwml.dom.WMLSeLvarElementImpl");
        Locale locale0 = Locale.CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0);
        HTMLBRElementImpl hTMLBRElementImpl0 = new HTMLBRElementImpl(hTMLDocumentImpl0, "LS5O7+A~C\"IYB$GVD");
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLBRElementImpl0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test8384() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.KOREA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
        hTMLDocumentImpl0.appendChild(hTMLTableCaptionElementImpl0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLTableCaptionElementImpl0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test8485() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CANADA_FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
        hTMLDocumentImpl0.appendChild(hTMLTableCaptionElementImpl0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLTableCaptionElementImpl0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test8586() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        hTMLDocumentImpl0.getTitle();
        Locale locale0 = Locale.KOREAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLTableCaptionElementImpl0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
        assertEquals(0, int0);
    }
}
