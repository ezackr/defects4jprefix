/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 10:00:17 GMT 2024
 */
package org.apache.commons.jxpath.ri.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodePointer_ESTest extends NodePointer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isAttribute();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isAttribute();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isAttribute();
        assertTrue(variablePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Class<String> class0 = String.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
        BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
        beanPropertyPointer0.setAttribute(true);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "<<unknown namespace>>");
        QName qName0 = beanPropertyPointer0.getName();
        // Undeclared exception!
        try {
            beanPropertyPointer0.createChild(jXPathContext0, qName0, 95, (Object) qName0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Factory is not set on the JXPathContext - cannot create path: /@*
            //
            verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyPointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        QName qName0 = new QName("!6(fHy&#");
        Locale locale0 = Locale.US;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "!6(fHy&#");
        // Undeclared exception!
        try {
            nodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot create an object for path //!6(fHy&#[-2147483647], operation is not allowed for this type of node
            //
            verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        assertNotNull(nodePointer0);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        assertTrue(variablePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        nodePointer0.printPointerChain();
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        nodePointer0.printPointerChain();
        assertFalse(nodePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        nodePointer0.printPointerChain();
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
        Object object0 = new Object();
        // Undeclared exception!
        try {
            nodePointer0.createPath(jXPathContext0, object0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot set undefined variable: null
            //
            verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, (QName) null, (Object) null);
        NodePointer nodePointer2 = variablePointer0.getImmediateValuePointer();
        int int0 = nodePointer2.compareTo(nodePointer1);
        assertFalse(nodePointer1.isAttribute());
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, (QName) null, (Object) null);
        NodePointer nodePointer2 = variablePointer0.getImmediateValuePointer();
        int int0 = nodePointer2.compareTo(nodePointer1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, (QName) null, (Object) null);
        NodePointer nodePointer2 = variablePointer0.getImmediateValuePointer();
        int int0 = nodePointer2.compareTo(nodePointer1);
        assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        variablePointer0.namespaceIterator();
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        variablePointer0.namespaceIterator();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
        Variables variables0 = jXPathContext0.getVariables();
        QName qName0 = new QName("");
        VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
        variablePointer0.getDefaultNamespaceURI();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
        Variables variables0 = jXPathContext0.getVariables();
        QName qName0 = new QName("");
        VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
        variablePointer0.getDefaultNamespaceURI();
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        // Undeclared exception!
        try {
            variablePointer0.getNodeValue();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Undefined variable: null
            //
            verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
        }
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "<<unknown namespace>>");
        // Undeclared exception!
        try {
            variablePointer0.createAttribute(jXPathContext0, (QName) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot create an attribute for path $null/@null, operation is not allowed for this type of node
            //
            verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        QName qName0 = new QName("f(Rzg*]A.i?");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, linkedList0);
        assertNotNull(nodePointer0);
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        QName qName0 = new QName("f(Rzg*]A.i?");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, linkedList0);
        nodePointer0.remove();
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        QName qName0 = new QName("f(Rzg*]A.i?");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, linkedList0);
        nodePointer0.remove();
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        QName qName0 = new QName("2", "2");
        Locale locale0 = Locale.ITALIAN;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        assertNotNull(nodePointer0);
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        QName qName0 = new QName("2", "2");
        Locale locale0 = Locale.ITALIAN;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
        NodePointer nodePointer1 = nodePointer0.createPath(jXPathContext0);
        assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        QName qName0 = new QName("2", "2");
        Locale locale0 = Locale.ITALIAN;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
        NodePointer nodePointer1 = nodePointer0.createPath(jXPathContext0);
        assertFalse(nodePointer1.isAttribute());
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        QName qName0 = new QName("2", "2");
        Locale locale0 = Locale.ITALIAN;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
        NodePointer nodePointer1 = nodePointer0.createPath(jXPathContext0);
        assertTrue(nodePointer1.isRoot());
    }

    @Test(timeout = 4000)
    public void test1227() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        QName qName0 = new QName("\"pe 8]%? <flnx7(", "5x3NI");
        BeanPointer beanPointer0 = new BeanPointer(qName0, "VnFgL,a-=PM", (JXPathBeanInfo) null, locale0);
        beanPointer0.getNamespaceURI();
        assertTrue(beanPointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        QName qName0 = new QName("\"pe 8]%? <flnx7(", "5x3NI");
        BeanPointer beanPointer0 = new BeanPointer(qName0, "VnFgL,a-=PM", (JXPathBeanInfo) null, locale0);
        beanPointer0.getNamespaceURI();
        assertFalse(beanPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        QName qName0 = new QName("\"pe 8]%? <flnx7(", "5x3NI");
        BeanPointer beanPointer0 = new BeanPointer(qName0, "VnFgL,a-=PM", (JXPathBeanInfo) null, locale0);
        beanPointer0.getNamespaceURI();
        assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        variablePointer0.namespacePointer("<<unknown namespace>>");
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        variablePointer0.namespacePointer("<<unknown namespace>>");
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        Class<String> class0 = String.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
        BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "<<unknown namespace>>");
        QName qName0 = beanPropertyPointer0.getName();
        // Undeclared exception!
        try {
            beanPropertyPointer0.createChild(jXPathContext0, qName0, 95, (Object) qName0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Factory is not set on the JXPathContext - cannot create path: /*
            //
            verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyPointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1533() throws Throwable {
        QName qName0 = new QName("7n0}X'l=p~>");
        QName qName1 = new QName("7n0}X'l=p~>", "7n0}X'l=p~>");
        Locale locale0 = Locale.CHINA;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test1534() throws Throwable {
        QName qName0 = new QName("7n0}X'l=p~>");
        QName qName1 = new QName("7n0}X'l=p~>", "7n0}X'l=p~>");
        Locale locale0 = Locale.CHINA;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertTrue(nodePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test1535() throws Throwable {
        QName qName0 = new QName("7n0}X'l=p~>");
        QName qName1 = new QName("7n0}X'l=p~>", "7n0}X'l=p~>");
        Locale locale0 = Locale.CHINA;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        QName qName0 = new QName("7n0}X'l=p~>");
        QName qName1 = new QName("7n0}X'l=p~>", "7n0}X'l=p~>");
        Locale locale0 = Locale.CHINA;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1637() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
        // Undeclared exception!
        try {
            variablePointer0.getPointerByKey(jXPathContext0, "<<unknown namespace>>", "<<unknown namespace>>");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot find an element by key - no KeyManager has been specified
            //
            verifyException("org.apache.commons.jxpath.JXPathContext", e);
        }
    }

    @Test(timeout = 4000)
    public void test1738() throws Throwable {
        QName qName0 = new QName("!6(fHy&#");
        Locale locale0 = Locale.US;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
        // Undeclared exception!
        try {
            nodePointer0.createChild(jXPathContext0, qName0, (-1216), (Object) qName0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot create an object for path //!6(fHy&#[-1215], operation is not allowed for this type of node
            //
            verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1839() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
        // Undeclared exception!
        try {
            variablePointer0.getPointerByID(jXPathContext0, "<<unknown namespace>>");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot find an element by ID - no IdentityManager has been specified
            //
            verifyException("org.apache.commons.jxpath.JXPathContext", e);
        }
    }

    @Test(timeout = 4000)
    public void test1940() throws Throwable {
        QName qName0 = new QName("0S4^V2mvrz}BP2(");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        variablePointer0.setNamespaceResolver(namespaceResolver0);
        variablePointer0.getNamespaceResolver();
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        QName qName0 = new QName("0S4^V2mvrz}BP2(");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        NamespaceResolver namespaceResolver0 = new NamespaceResolver();
        variablePointer0.setNamespaceResolver(namespaceResolver0);
        variablePointer0.getNamespaceResolver();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        nodePointer0.getNamespaceResolver();
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2043() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        nodePointer0.getNamespaceResolver();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2144() throws Throwable {
        QName qName0 = new QName("UW^._");
        Locale locale0 = new Locale("UW^._", "UW^._", "UW^._");
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanPointer beanPointer1 = (BeanPointer) beanPropertyPointer0.getParent();
        assertFalse(beanPropertyPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2145() throws Throwable {
        QName qName0 = new QName("UW^._");
        Locale locale0 = new Locale("UW^._", "UW^._", "UW^._");
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanPointer beanPointer1 = (BeanPointer) beanPropertyPointer0.getParent();
        assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2146() throws Throwable {
        QName qName0 = new QName("UW^._");
        Locale locale0 = new Locale("UW^._", "UW^._", "UW^._");
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanPointer beanPointer1 = (BeanPointer) beanPropertyPointer0.getParent();
        assertTrue(beanPointer1.isRoot());
    }

    @Test(timeout = 4000)
    public void test2147() throws Throwable {
        QName qName0 = new QName("UW^._");
        Locale locale0 = new Locale("UW^._", "UW^._", "UW^._");
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanPointer beanPointer1 = (BeanPointer) beanPropertyPointer0.getParent();
        assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
    }

    @Test(timeout = 4000)
    public void test2148() throws Throwable {
        QName qName0 = new QName("UW^._");
        Locale locale0 = new Locale("UW^._", "UW^._", "UW^._");
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanPointer beanPointer1 = (BeanPointer) beanPropertyPointer0.getParent();
        assertNotNull(beanPointer1);
    }

    @Test(timeout = 4000)
    public void test2149() throws Throwable {
        QName qName0 = new QName("UW^._");
        Locale locale0 = new Locale("UW^._", "UW^._", "UW^._");
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanPointer beanPointer1 = (BeanPointer) beanPropertyPointer0.getParent();
        assertFalse(beanPointer1.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2250() throws Throwable {
        QName qName0 = new QName("C|.+\"tU6:kioK");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = nodePointer0.getParent();
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2251() throws Throwable {
        QName qName0 = new QName("C|.+\"tU6:kioK");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = nodePointer0.getParent();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2252() throws Throwable {
        QName qName0 = new QName("C|.+\"tU6:kioK");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = nodePointer0.getParent();
        assertNull(nodePointer1);
    }

    @Test(timeout = 4000)
    public void test2353() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Class<VariablePointer> class0 = VariablePointer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, (Object) null, jXPathBasicBeanInfo0);
        boolean boolean0 = beanPointer0.isRoot();
        assertFalse(beanPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2354() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Class<VariablePointer> class0 = VariablePointer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, (Object) null, jXPathBasicBeanInfo0);
        boolean boolean0 = beanPointer0.isRoot();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2355() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Class<VariablePointer> class0 = VariablePointer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, (Object) null, jXPathBasicBeanInfo0);
        boolean boolean0 = beanPointer0.isRoot();
        assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2456() throws Throwable {
        BasicVariables basicVariables0 = new BasicVariables();
        VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
        boolean boolean0 = variablePointer0.isRoot();
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2457() throws Throwable {
        BasicVariables basicVariables0 = new BasicVariables();
        VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
        boolean boolean0 = variablePointer0.isRoot();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2458() throws Throwable {
        BasicVariables basicVariables0 = new BasicVariables();
        VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
        boolean boolean0 = variablePointer0.isRoot();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2559() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        Class<Integer> class0 = Integer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, (QName) null, nodeTypeTest0, jXPathBasicBeanInfo0);
        PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
        boolean boolean0 = propertyPointer0.testNode(nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2560() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        Class<Integer> class0 = Integer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, (QName) null, nodeTypeTest0, jXPathBasicBeanInfo0);
        PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
        boolean boolean0 = propertyPointer0.testNode(nodeTypeTest0);
        assertFalse(propertyPointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test2561() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        Class<Integer> class0 = Integer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, (QName) null, nodeTypeTest0, jXPathBasicBeanInfo0);
        PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
        boolean boolean0 = propertyPointer0.testNode(nodeTypeTest0);
        assertFalse(propertyPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2562() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        Class<Integer> class0 = Integer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, (QName) null, nodeTypeTest0, jXPathBasicBeanInfo0);
        PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
        boolean boolean0 = propertyPointer0.testNode(nodeTypeTest0);
        assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2663() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2664() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2665() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2766() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        // Undeclared exception!
        try {
            variablePointer0.getValue();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Undefined variable: null
            //
            verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
        }
    }

    @Test(timeout = 4000)
    public void test2867() throws Throwable {
        QName qName0 = new QName("rc]{Y).q");
        Locale locale0 = new Locale("rc]{Y).q", "rc]{Y).q", "rc]{Y).q");
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        boolean boolean0 = nodePointer0.isActual();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2868() throws Throwable {
        QName qName0 = new QName("rc]{Y).q");
        Locale locale0 = new Locale("rc]{Y).q", "rc]{Y).q", "rc]{Y).q");
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        boolean boolean0 = nodePointer0.isActual();
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test2869() throws Throwable {
        QName qName0 = new QName("rc]{Y).q");
        Locale locale0 = new Locale("rc]{Y).q", "rc]{Y).q", "rc]{Y).q");
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        boolean boolean0 = nodePointer0.isActual();
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2870() throws Throwable {
        QName qName0 = new QName("rc]{Y).q");
        Locale locale0 = new Locale("rc]{Y).q", "rc]{Y).q", "rc]{Y).q");
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        boolean boolean0 = nodePointer0.isActual();
        assertTrue(nodePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test2971() throws Throwable {
        QName qName0 = new QName("!6(fHy&#");
        Locale locale0 = Locale.US;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        nodePointer0.setIndex((-951));
        boolean boolean0 = nodePointer0.isActual();
        assertEquals((-951), nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test2972() throws Throwable {
        QName qName0 = new QName("!6(fHy&#");
        Locale locale0 = Locale.US;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        nodePointer0.setIndex((-951));
        boolean boolean0 = nodePointer0.isActual();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3073() throws Throwable {
        QName qName0 = new QName("!6A(fHD#:~QhS>+");
        Locale locale0 = Locale.CHINA;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3074() throws Throwable {
        QName qName0 = new QName("!6A(fHD#:~QhS>+");
        Locale locale0 = Locale.CHINA;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        nodePointer0.setIndex(1);
        boolean boolean0 = nodePointer0.isActual();
        assertEquals(1, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3075() throws Throwable {
        QName qName0 = new QName("!6A(fHD#:~QhS>+");
        Locale locale0 = Locale.CHINA;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        nodePointer0.setIndex(1);
        boolean boolean0 = nodePointer0.isActual();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3176() throws Throwable {
        QName qName0 = new QName("!6A(fHD#:~QhS>+", "!6A(fHD#:~QhS>+");
        Locale locale0 = Locale.CHINA;
        Class<NodeTypeTest> class0 = NodeTypeTest.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
        BeanPointer beanPointer0 = new BeanPointer(qName0, "!6A(fHD#:~QhS>+", jXPathBasicBeanInfo0, locale0);
        assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3177() throws Throwable {
        QName qName0 = new QName("!6A(fHD#:~QhS>+", "!6A(fHD#:~QhS>+");
        Locale locale0 = Locale.CHINA;
        Class<NodeTypeTest> class0 = NodeTypeTest.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
        BeanPointer beanPointer0 = new BeanPointer(qName0, "!6A(fHD#:~QhS>+", jXPathBasicBeanInfo0, locale0);
        beanPointer0.setIndex(0);
        boolean boolean0 = beanPointer0.isActual();
        assertEquals(0, beanPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3178() throws Throwable {
        QName qName0 = new QName("!6A(fHD#:~QhS>+", "!6A(fHD#:~QhS>+");
        Locale locale0 = Locale.CHINA;
        Class<NodeTypeTest> class0 = NodeTypeTest.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
        BeanPointer beanPointer0 = new BeanPointer(qName0, "!6A(fHD#:~QhS>+", jXPathBasicBeanInfo0, locale0);
        beanPointer0.setIndex(0);
        boolean boolean0 = beanPointer0.isActual();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3279() throws Throwable {
        QName qName0 = new QName("7n0}X'l=p~>");
        Locale locale0 = Locale.CHINA;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
        assertTrue(nodePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test3280() throws Throwable {
        QName qName0 = new QName("7n0}X'l=p~>");
        Locale locale0 = Locale.CHINA;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
        jXPathContext0.getRelativeContext(nodePointer0);
        jXPathContext0.getRelativeContext(nodePointer0);
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3281() throws Throwable {
        QName qName0 = new QName("7n0}X'l=p~>");
        Locale locale0 = Locale.CHINA;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
        jXPathContext0.getRelativeContext(nodePointer0);
        jXPathContext0.getRelativeContext(nodePointer0);
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test3382() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        // Undeclared exception!
        try {
            nodePointer0.getRootNode();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Undefined variable: null
            //
            verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test3483() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.testNode((NodeTest) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3484() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.testNode((NodeTest) null);
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3485() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.testNode((NodeTest) null);
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test3586() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
        boolean boolean0 = beanPropertyPointer0.testNode(nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3587() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
        boolean boolean0 = beanPropertyPointer0.testNode(nodeNameTest0);
        assertFalse(beanPropertyPointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test3588() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
        boolean boolean0 = beanPropertyPointer0.testNode(nodeNameTest0);
        assertFalse(beanPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test3589() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
        boolean boolean0 = beanPropertyPointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3590() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
        boolean boolean0 = beanPropertyPointer0.testNode(nodeNameTest0);
        assertFalse(beanPropertyPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test3591() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
        boolean boolean0 = beanPropertyPointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3692() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
        boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3693() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
        boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3694() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
        boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test3795() throws Throwable {
        QName qName0 = new QName("D_");
        Locale locale0 = Locale.CANADA_FRENCH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        QName qName1 = beanPropertyPointer0.getName();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
        boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test3796() throws Throwable {
        QName qName0 = new QName("D_");
        Locale locale0 = Locale.CANADA_FRENCH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        QName qName1 = beanPropertyPointer0.getName();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
        boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
        assertFalse(beanPropertyPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test3797() throws Throwable {
        QName qName0 = new QName("D_");
        Locale locale0 = Locale.CANADA_FRENCH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        QName qName1 = beanPropertyPointer0.getName();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
        boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
        assertFalse(beanPropertyPointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test3798() throws Throwable {
        QName qName0 = new QName("D_");
        Locale locale0 = Locale.CANADA_FRENCH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        QName qName1 = beanPropertyPointer0.getName();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
        boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
        assertFalse(beanPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test3799() throws Throwable {
        QName qName0 = new QName("D_");
        Locale locale0 = Locale.CANADA_FRENCH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        QName qName1 = beanPropertyPointer0.getName();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
        boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test37100() throws Throwable {
        QName qName0 = new QName("D_");
        Locale locale0 = Locale.CANADA_FRENCH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        QName qName1 = beanPropertyPointer0.getName();
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
        boolean boolean0 = beanPointer0.testNode(nodeNameTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test38101() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
        boolean boolean0 = variablePointer0.testNode(processingInstructionTest0);
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test38102() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
        boolean boolean0 = variablePointer0.testNode(processingInstructionTest0);
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test38103() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
        boolean boolean0 = variablePointer0.testNode(processingInstructionTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test39104() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
        boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test39105() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
        boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test39106() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
        boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test40107() throws Throwable {
        QName qName0 = new QName(" w&pKqedU:p");
        QName qName1 = new QName(" w&pKqedU:p");
        Locale locale0 = new Locale(" w&pKqedU:p", " w&pKqedU:p", " w&pKqedU:p");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test40108() throws Throwable {
        QName qName0 = new QName(" w&pKqedU:p");
        QName qName1 = new QName(" w&pKqedU:p");
        Locale locale0 = new Locale(" w&pKqedU:p", " w&pKqedU:p", " w&pKqedU:p");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test40109() throws Throwable {
        QName qName0 = new QName(" w&pKqedU:p");
        QName qName1 = new QName(" w&pKqedU:p");
        Locale locale0 = new Locale(" w&pKqedU:p", " w&pKqedU:p", " w&pKqedU:p");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test41110() throws Throwable {
        QName qName0 = new QName(", propertiies = ", ", propertiies = ");
        QName qName1 = new QName(", propertiies = ");
        Locale locale0 = Locale.GERMANY;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test41111() throws Throwable {
        QName qName0 = new QName(", propertiies = ", ", propertiies = ");
        QName qName1 = new QName(", propertiies = ");
        Locale locale0 = Locale.GERMANY;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test41112() throws Throwable {
        QName qName0 = new QName(", propertiies = ", ", propertiies = ");
        QName qName1 = new QName(", propertiies = ");
        Locale locale0 = Locale.GERMANY;
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, nodeNameTest0, locale0);
        boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test42113() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Locale locale0 = Locale.GERMANY;
        NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, locale0);
        boolean boolean0 = nodePointer0.isLanguage("<<unknown namespace>>");
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test42114() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Locale locale0 = Locale.GERMANY;
        NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, locale0);
        boolean boolean0 = nodePointer0.isLanguage("<<unknown namespace>>");
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test42115() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Locale locale0 = Locale.GERMANY;
        NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, locale0);
        boolean boolean0 = nodePointer0.isLanguage("<<unknown namespace>>");
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test42116() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Locale locale0 = Locale.GERMANY;
        NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, locale0);
        boolean boolean0 = nodePointer0.isLanguage("<<unknown namespace>>");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test42117() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Locale locale0 = Locale.GERMANY;
        NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, locale0);
        boolean boolean0 = nodePointer0.isLanguage("<<unknown namespace>>");
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test43118() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        nodePointer0.getLocale();
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test43119() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        nodePointer0.getLocale();
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test44120() throws Throwable {
        Class<NodeTypeTest> class0 = NodeTypeTest.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
        BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
        NodeIterator nodeIterator0 = beanPropertyPointer0.childIterator((NodeTest) null, false, (NodePointer) null);
        assertNotNull(nodeIterator0);
    }

    @Test(timeout = 4000)
    public void test44121() throws Throwable {
        Class<NodeTypeTest> class0 = NodeTypeTest.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
        BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
        NodeIterator nodeIterator0 = beanPropertyPointer0.childIterator((NodeTest) null, false, (NodePointer) null);
        assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test44122() throws Throwable {
        Class<NodeTypeTest> class0 = NodeTypeTest.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
        BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
        NodeIterator nodeIterator0 = beanPropertyPointer0.childIterator((NodeTest) null, false, (NodePointer) null);
        assertFalse(beanPropertyPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test45123() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPropertyPointer0.attributeIterator(qName0);
        assertFalse(beanPropertyPointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test45124() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPropertyPointer0.attributeIterator(qName0);
        assertNotNull(beanAttributeIterator0);
    }

    @Test(timeout = 4000)
    public void test45125() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPropertyPointer0.attributeIterator(qName0);
        assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test45126() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPropertyPointer0.attributeIterator(qName0);
        assertTrue(beanPointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test45127() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPropertyPointer0.attributeIterator(qName0);
        assertFalse(beanPropertyPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test45128() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPropertyPointer0.attributeIterator(qName0);
        assertFalse(beanPointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test45129() throws Throwable {
        QName qName0 = new QName("D");
        Locale locale0 = Locale.ENGLISH;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPropertyPointer0.attributeIterator(qName0);
        assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test46130() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isDefaultNamespace("<<unknown namespace>>");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test46131() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isDefaultNamespace("<<unknown namespace>>");
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test46132() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isDefaultNamespace("<<unknown namespace>>");
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test47133() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test47134() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test47135() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test48136() throws Throwable {
        QName qName0 = new QName("No value for xpth");
        Locale locale0 = new Locale("No value for xpth", "No value for xpth", "No value for xpth");
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, qName0, locale0);
        BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer) beanPointer0.getPropertyPointer();
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
        // Undeclared exception!
        try {
            beanPropertyPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-4008), (Object) jXPathContextReferenceImpl0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot set property: /No value for xpth - no such property
            //
            verifyException("org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test49137() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Class<VariablePointer> class0 = VariablePointer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, (Object) null, jXPathBasicBeanInfo0);
        PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
        // Undeclared exception!
        try {
            propertyPointer0.setValue(variablePointer0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot set property: $null/* - no such property
            //
            verifyException("org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test50138() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        nodePointer1.compareTo(nodePointer0);
        assertFalse(nodePointer1.isRoot());
    }

    @Test(timeout = 4000)
    public void test50139() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        nodePointer1.compareTo(nodePointer0);
        assertFalse(nodePointer1.isAttribute());
    }

    @Test(timeout = 4000)
    public void test50140() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        nodePointer1.compareTo(nodePointer0);
        assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
    }

    @Test(timeout = 4000)
    public void test51141() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        int int0 = variablePointer0.compareTo(variablePointer0);
        assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test51142() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        int int0 = variablePointer0.compareTo(variablePointer0);
        assertFalse(variablePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test51143() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        int int0 = variablePointer0.compareTo(variablePointer0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test52144() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, (QName) null, nodePointer0);
        int int0 = variablePointer0.compareTo(nodePointer1);
        assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
    }

    @Test(timeout = 4000)
    public void test52145() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, (QName) null, nodePointer0);
        int int0 = variablePointer0.compareTo(nodePointer1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test53146() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Class<VariablePointer> class0 = VariablePointer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, (Object) null, jXPathBasicBeanInfo0);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(beanPointer0, (QName) null, beanPointer0);
        int int0 = nodePointer0.compareTo(variablePointer0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test53147() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Class<VariablePointer> class0 = VariablePointer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, (Object) null, jXPathBasicBeanInfo0);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(beanPointer0, (QName) null, beanPointer0);
        int int0 = nodePointer0.compareTo(variablePointer0);
        assertFalse(nodePointer0.isAttribute());
    }

    @Test(timeout = 4000)
    public void test53148() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        Class<VariablePointer> class0 = VariablePointer.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
        BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, (Object) null, jXPathBasicBeanInfo0);
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(beanPointer0, (QName) null, beanPointer0);
        int int0 = nodePointer0.compareTo(variablePointer0);
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test54149() throws Throwable {
        VariablePointer variablePointer0 = new VariablePointer((QName) null);
        NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
        BasicVariables basicVariables0 = new BasicVariables();
        VariablePointer variablePointer1 = new VariablePointer(basicVariables0, (QName) null);
        // Undeclared exception!
        try {
            nodePointer0.compareTo(variablePointer1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot compare pointers that do not belong to the same tree: '$null' and '$null'
            //
            verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
        }
    }
}
