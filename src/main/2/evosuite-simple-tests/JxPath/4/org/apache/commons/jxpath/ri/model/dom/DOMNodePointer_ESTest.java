/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 09:49:10 GMT 2024
 */
package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAnchorElementImpl;
import org.apache.html.dom.HTMLAppletElementImpl;
import org.apache.html.dom.HTMLButtonElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLIFrameElementImpl;
import org.apache.html.dom.HTMLLabelElementImpl;
import org.apache.html.dom.HTMLLinkElementImpl;
import org.apache.html.dom.HTMLModElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLTableSectionElementImpl;
import org.apache.wml.dom.WMLBigElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLSelectElementImpl;
import org.apache.wml.dom.WMLTableElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
        boolean boolean0 = dOMNodePointer0.isCollection();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "\"h22wS");
        QName qName0 = new QName("xeTb%= \"l:FC>,", "eJ'!|2/");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLTableSectionElementImpl0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLTableSectionElementImpl0);
        // Undeclared exception!
        try {
            dOMNodePointer1.asPath();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "GmdL*hL");
        Locale locale0 = new Locale("GmdL*hL", "GmdL*hL", "GmdL*hL");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAnchorElementImpl0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLAnchorElementImpl0);
        QName qName0 = new QName("<<unknown namespace>>", "GmdL*hL");
        // Undeclared exception!
        try {
            dOMNodePointer0.createChild(jXPathContext0, qName0, (-1624636489), (Object) jXPathContext0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Factory is not set on the JXPathContext - cannot create path:
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.JAPANESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("http://www.w3.org/2000/xmlns/");
        assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "");
        Locale locale0 = Locale.ITALIAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
        int int0 = dOMNodePointer0.getLength();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = new Locale("xX)Ns68_v=#U:E~cw");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "xX)Ns68_v=#U:E~cw");
        dOMNodePointer0.hashCode();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NodeIterator nodeIterator0 = dOMNodePointer0.childIterator((NodeTest) null, true, dOMNodePointer0);
        assertEquals(0, nodeIterator0.getPosition());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.JAPANESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isActual();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
        boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ROOT;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "defaultChe3cked");
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
        NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
        namespaceResolver0.setNamespaceContextPointer(dOMNodePointer0);
        namespaceResolver0.registerDefaultNamespaceURI("http://www.w3.org/XML/1998/namespace");
        dOMNodePointer0.setNamespaceResolver(namespaceResolver0);
        String string0 = dOMNodePointer1.asPath();
        assertEquals("id('defaultChe3cked')/node()[2]", string0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        boolean boolean0 = DOMNodePointer.testNode((Node) null, (NodeTest) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "xml:lang");
        QName qName0 = new QName("xml:lang", "xml:lang");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "xml:lang");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLIFrameElementImpl0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "_\");L!");
        QName qName0 = new QName("_\");L!", "_\");L!");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "_\");L!");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLIFrameElementImpl0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "schm/3", "schm/3");
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("schm/3");
        boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "w@;[z_mn{U");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLButtonElementImpl0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        boolean boolean0 = DOMNodePointer.testNode((Node) attrNSImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = DOMNodePointer.testNode((Node) attrNSImpl0, (NodeTest) nodeTypeTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("ZQ%Wt#j+V");
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        boolean boolean0 = DOMNodePointer.testNode((Node) cDATASection0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Text text0 = hTMLDocumentImpl0.createTextNode("xml");
        boolean boolean0 = DOMNodePointer.testNode((Node) text0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
        Comment comment0 = hTMLDocumentImpl0.createComment("charoff");
        boolean boolean0 = DOMNodePointer.testNode((Node) comment0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
        DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, (String) null, (String) null);
        boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) nodeTypeTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("l{GZS9pB!/;");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) processingInstructionTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "_\");L!");
        QName qName0 = new QName("_\");L!", "_\");L!");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLIFrameElementImpl0, (NodeTest) nodeNameTest0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "t4{My_SWS,cX", "t4{My_SWS,cX");
        Locale locale0 = Locale.ROOT;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        QName qName0 = dOMNodePointer0.getName();
        assertEquals("t4{My_SWS,cX", qName0.toString());
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLLinkElementImpl hTMLLinkElementImpl0 = new HTMLLinkElementImpl(hTMLDocumentImpl0, "Cannot create an object for path ");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLinkElementImpl0, (Locale) null, "*Xa!Ng]P]jWBt V;");
        QName qName0 = dOMNodePointer0.getName();
        assertEquals("CANNOT CREATE AN OBJECT FOR PATH ", qName0.toString());
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.JAPANESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        QName qName0 = dOMNodePointer0.getName();
        assertNull(qName0.getName());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI("");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", string0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI("xml");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getNamespaceURI("zmy;?$0M``0`E`TY(Q");
        String string0 = dOMNodePointer0.getNamespaceURI("zmy;?$0M``0`E`TY(Q");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getDefaultNamespaceURI();
        String string0 = dOMNodePointer0.getDefaultNamespaceURI();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
        String string0 = dOMNodePointer0.getDefaultNamespaceURI();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "eBM@B[T~");
        dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        boolean boolean0 = dOMNodePointer0.isLeaf();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isLeaf();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLLinkElementImpl hTMLLinkElementImpl0 = new HTMLLinkElementImpl(hTMLDocumentImpl0, "Cannot create an object for path ");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLinkElementImpl0, (Locale) null, "*Xa!Ng]P]jWBt V;");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
        WMLSelectElementImpl wMLSelectElementImpl0 = new WMLSelectElementImpl(wMLDocumentImpl0, "!OzNv{fu");
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLSelectElementImpl0);
        wMLSelectElementImpl0.setXmlLang("*Xa!Ng]P]jWBt V;");
        boolean boolean0 = dOMNodePointer1.isLanguage("org.apache.html.dom.HTMLScriptElementImpl");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLLinkElementImpl hTMLLinkElementImpl0 = new HTMLLinkElementImpl(hTMLDocumentImpl0, "Cannot create an object for path ");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLinkElementImpl0, (Locale) null, "*Xa!Ng]P]jWBt V;");
        // Undeclared exception!
        try {
            dOMNodePointer0.isLanguage("<<unknown namespace>>");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Element element0 = hTMLDocumentImpl0.getDocumentElement();
        Locale locale0 = Locale.KOREAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0);
        String string0 = dOMNodePointer0.getLanguage();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        TextImpl textImpl0 = new TextImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, textImpl0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
        // Undeclared exception!
        try {
            dOMNodePointer0.createPath(jXPathContext0, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("Dz!gB'w=");
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        dOMNodePointer0.setValue(hTMLDocumentImpl0);
        assertFalse(dOMNodePointer0.isContainer());
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("");
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.setValue("");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getDefaultNamespaceURI();
        dOMNodePointer0.setValue(hTMLDocumentImpl0);
        assertNull(hTMLDocumentImpl0.getReferrer());
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "DEL");
        HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTFoot();
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        dOMNodePointer0.setValue(hTMLTableElementImpl0);
        assertFalse(dOMNodePointer0.isCollection());
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, " 22KHRrC`-LQytJy");
        // Undeclared exception!
        try {
            dOMNodePointer0.setValue(attrNSImpl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.xerces.dom.NodeImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.setValue((Object) null);
        assertTrue(dOMNodePointer0.isActual());
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.setValue(locale0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
        QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "http://www.w3.org/XML/1998/namespace");
        // Undeclared exception!
        try {
            dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, " Size: ");
        HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTFoot();
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
        QName qName0 = new QName(" Size: ");
        // Undeclared exception!
        try {
            dOMNodePointer0.createAttribute(jXPathContext0, qName0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Unknown namespace prefix:  Size
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("j@G<=&N");
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
        // Undeclared exception!
        try {
            dOMNodePointer0.createAttribute(jXPathContext0, qName0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot create an attribute for path /text()[1]/@http://www.w3.org/XML/1998/namespace, operation is not allowed for this type of node
            //
            verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "    ");
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableElementImpl0, locale0);
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "_\":9", "Cannot add null object", "_\":9");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl(wMLDocumentImpl0, "h4<");
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLBigElementImpl0);
        QName qName0 = new QName("xml");
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        NodePointer nodePointer0 = dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        assertFalse(nodePointer0.isRoot());
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLModElementImpl hTMLModElementImpl0 = new HTMLModElementImpl(hTMLDocumentImpl0, "T0f*");
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLModElementImpl0, locale0, "T0f*");
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "T0f*");
        QName qName0 = new QName("xmlns:");
        // Undeclared exception!
        try {
            dOMNodePointer0.createAttribute(jXPathContext0, qName0);
            fail("Expecting exception: DOMException");
        } catch (DOMException e) {
            //
            // NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
            //
            verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        Locale locale0 = Locale.ITALY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
        dOMNodePointer0.remove();
        assertFalse(dOMNodePointer0.isContainer());
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        // Undeclared exception!
        try {
            dOMNodePointer0.remove();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot remove root DOM node
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, (Locale) null);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        TextImpl textImpl0 = new TextImpl();
        Locale locale0 = Locale.FRANCE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("/text()[1]", string0);
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.GERMANY;
        EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(hTMLDocumentImpl0, "&quot;");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReferenceImpl0, locale0);
        String string0 = dOMNodePointer0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6061() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ITALY;
        EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "xo");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "9t4M{My_SWS,LcX", "9t4M{My_SWS,LcX");
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("/processing-instruction('9t4M{My_SWS,LcX')[1]", string0);
    }

    @Test(timeout = 4000)
    public void test6263() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment("}?iL26)7");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, (Locale) null);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6364() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CANADA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6465() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.GERMAN;
        DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(hTMLDocumentImpl0);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test6566() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Element element0 = hTMLDocumentImpl0.getDocumentElement();
        Locale locale0 = Locale.KOREAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
        NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
        dOMNodePointer0.setNamespaceResolver(namespaceResolver0);
        String string0 = dOMNodePointer1.asPath();
        assertEquals("/HTML[1]", string0);
    }

    @Test(timeout = 4000)
    public void test6667() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ROOT;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "defaultChe3cked");
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
        NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
        namespaceResolver0.registerNamespace("http://www.w3.org/2000/xmlns/", (String) null);
        namespaceResolver0.setNamespaceContextPointer(dOMNodePointer0);
        namespaceResolver0.registerDefaultNamespaceURI("http://www.w3.org/XML/1998/namespace");
        dOMNodePointer0.setNamespaceResolver(namespaceResolver0);
        String string0 = dOMNodePointer1.asPath();
        assertEquals("id('defaultChe3cked')/http://www.w3.org/2000/xmlns/:BODY[1]", string0);
    }

    @Test(timeout = 4000)
    public void test6768() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, "C'#s5>$;#KJ");
        String string0 = dOMNodePointer0.asPath();
        assertEquals("id('C&apos;#s5>$;#KJ')", string0);
    }

    @Test(timeout = 4000)
    public void test6869() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "\"+gsG{BSnJ");
        String string0 = dOMNodePointer0.toString();
        assertEquals("id('&quot;+gsG{BSnJ')", string0);
    }

    @Test(timeout = 4000)
    public void test6970() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CANADA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7071() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        TextImpl textImpl0 = new TextImpl();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(textImpl0, locale0, "<<unknown namespace>>");
        boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7172() throws Throwable {
        Locale locale0 = Locale.PRC;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
        boolean boolean0 = dOMNodePointer0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7273() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.GERMAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "g4");
        boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7374() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Attr attr0 = hTMLDocumentImpl0.createAttributeNS(" Si$e: ", " Si$e: ", " Si$e: ");
        String string0 = DOMNodePointer.getPrefix(attr0);
        assertEquals(" Si$e", string0);
    }

    @Test(timeout = 4000)
    public void test7475() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "http://wBw.w3.rg/2000/xmlns/");
        String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLAppletElementImpl0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test7576() throws Throwable {
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        Element element0 = pSVIDocumentImpl0.createElementNS((String) null, (String) null, ">746=");
        QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.Expression$ValueIterator", "<<unknown namespace>>");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        boolean boolean0 = DOMNodePointer.testNode((Node) element0, (NodeTest) nodeNameTest0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7677() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test7778() throws Throwable {
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        Element element0 = pSVIDocumentImpl0.createElementNS("g-0S5cA>7D](B|suH(", "g-0S5cA>7D](B|suH(", "g-0S5cA>7D](B|suH(");
        String string0 = DOMNodePointer.getNamespaceURI((Node) element0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test7779() throws Throwable {
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        Element element0 = pSVIDocumentImpl0.createElementNS("g-0S5cA>7D](B|suH(", "g-0S5cA>7D](B|suH(", "g-0S5cA>7D](B|suH(");
        String string0 = DOMNodePointer.getNamespaceURI((Node) element0);
        assertEquals("g-0S5cA>7D](B|suH(", string0);
    }

    @Test(timeout = 4000)
    public void test7880() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment((String) null);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, (Locale) null);
        dOMNodePointer0.setValue(dOMNodePointer0);
        assertTrue(dOMNodePointer0.isNode());
    }

    @Test(timeout = 4000)
    public void test7981() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment("}?iL26)7");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, (Locale) null);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("}?iL26)7", object0);
    }

    @Test(timeout = 4000)
    public void test8082() throws Throwable {
        Locale locale0 = Locale.CHINA;
        TextImpl textImpl0 = new TextImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "<<unknown namespace>>");
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("", object0);
    }

    @Test(timeout = 4000)
    public void test8183() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("fr");
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("fr", object0);
    }

    @Test(timeout = 4000)
    public void test8284() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "{BE7G_SBd[Ex_Dv&L", "{BE7G_SBd[Ex_Dv&L");
        Locale locale0 = Locale.GERMAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("{BE7G_SBd[Ex_Dv&L", object0);
    }

    @Test(timeout = 4000)
    public void test8385() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "java.util.Locale@0000000003", (String) null);
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("", object0);
    }

    @Test(timeout = 4000)
    public void test8486() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        hTMLDocumentImpl0.setTitle((String) null);
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        Object object0 = dOMNodePointer0.getValue();
        assertEquals("null", object0);
    }

    @Test(timeout = 4000)
    public void test8587() throws Throwable {
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, (Locale) null);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
        // Undeclared exception!
        try {
            dOMNodePointer0.getPointerByID(jXPathContext0, "=");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test8688() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ITALY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "g   ");
        DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
        DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(deferredDocumentImpl0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) documentFragmentImpl0);
        NullPointer nullPointer0 = (NullPointer) dOMNodePointer0.getPointerByID(jXPathContext0, "");
        assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
    }

    @Test(timeout = 4000)
    public void test8789() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ITALY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "g   ");
        dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
        DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(deferredDocumentImpl0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) documentFragmentImpl0);
        DOMNodePointer dOMNodePointer1 = (DOMNodePointer) dOMNodePointer0.getPointerByID(jXPathContext0, "");
        assertFalse(dOMNodePointer1.isAttribute());
    }

    @Test(timeout = 4000)
    public void test8890() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "$O^I,=?-\"P3@R(");
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(attrNSImpl0, locale0, "<<unknown namespace>>");
        int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test8991() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Y7kmAnM~yF\"`syZ");
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, attrNSImpl0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test9092() throws Throwable {
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        Locale locale0 = Locale.ITALIAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "node()");
        AttrNSImpl attrNSImpl1 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(attrNSImpl1, locale0, "http://www.w3.org/XML/1998/namespace");
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        WMLTableElementImpl wMLTableElementImpl0 = new WMLTableElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
        wMLTableElementImpl0.setId("http://www.w3.org/2000/xmlns/");
        DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, wMLTableElementImpl0);
        int int0 = dOMNodePointer2.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test9193() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "g   ");
        String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test9194() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "g   ");
        String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", (String) null, "<<unknown namespace>>");
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(documentTypeImpl0, locale0, "g   ");
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test9295() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TAIWAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
        HTMLElement hTMLElement0 = hTMLTableElementImpl0.insertRow(Integer.MIN_VALUE);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLElement0, locale0, "http://www.w3.org/XML/1998/namespace");
        DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer0, hTMLTableElementImpl0);
        int int0 = dOMNodePointer2.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
        assertEquals((-1), int0);
    }
}
