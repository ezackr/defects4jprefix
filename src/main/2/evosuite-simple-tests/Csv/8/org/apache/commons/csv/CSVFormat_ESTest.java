/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:00:21 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat0.format(objectArray0);
        assertEquals("\"\",,,,,", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        assertEquals(0L, cSVParser0.getCurrentLineNumber());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertEquals('\\', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertEquals('T', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("'BabUP");
        cSVFormat2.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("'BabUP");
        cSVFormat2.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("'BabUP");
        cSVFormat2.hashCode();
        assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("'BabUP");
        cSVFormat2.hashCode();
        assertFalse(cSVFormat2.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test0417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("'BabUP");
        cSVFormat2.hashCode();
        assertTrue(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("'BabUP");
        cSVFormat2.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0519() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0520() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test0521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0522() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test0525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test0526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test0627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test0628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        cSVFormat1.parse(stringReader0);
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test0629() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        cSVFormat1.parse(stringReader0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test0630() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        cSVFormat1.parse(stringReader0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0631() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        cSVFormat1.parse(stringReader0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0632() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        cSVFormat1.parse(stringReader0);
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test0633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        cSVFormat1.parse(stringReader0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0634() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
        cSVFormat1.parse(stringReader0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0735() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        // Undeclared exception!
        try {
            cSVFormat0.withDelimiter('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The delimiter cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test0836() throws Throwable {
        // Undeclared exception!
        try {
            CSVFormat.newFormat('\r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The delimiter cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test0937() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test1038() throws Throwable {
        Character character0 = new Character('\r');
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withQuoteChar(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1341() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1545() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test1546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test1547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test1549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test1550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test1551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test1656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test1657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test1659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test1661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('1', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test1663() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test1764() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1865() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertFalse(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertFalse(cSVFormat3.isQuoting());
    }

    @Test(timeout = 4000)
    public void test1968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertFalse(cSVFormat3.isEscaping());
    }

    @Test(timeout = 4000)
    public void test1969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test1970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertFalse(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1972() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertEquals("&", cSVFormat3.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test1973() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertEquals('&', (char) cSVFormat3.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test1974() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertEquals('&', cSVFormat3.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1975() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertEquals("OU|", cSVFormat3.getNullString());
    }

    @Test(timeout = 4000)
    public void test1976() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("OU|");
        boolean boolean0 = cSVFormat3.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test2078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test2079() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test2080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test2081() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test2082() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2083() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test2084() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test2085() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("1", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test2086() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('1');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test2187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test2188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test2189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('/', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test2191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test2192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test2193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test2194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test2195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test2196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test2297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test2298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test2299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test22100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test22101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("Fg3<,-Zx%l&I>!SB)2b", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test22102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test22103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test22104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test22105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Fg3<,-Zx%l&I>!SB)2b");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test23106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test23107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test23108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test23109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test23110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test23111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test23112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test23113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test23114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test23115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test24116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test24117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test24118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test24119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test24120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test24121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test24122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('e', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test24123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test24124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test24125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test25126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test25127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test25128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("00C", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test25129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("\r\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test25130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test25131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test25133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test25134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test25135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("00C");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test26136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertEquals('&', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test26137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test26138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertFalse(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test26139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test26140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertEquals('7', cSVFormat2.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test26141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertTrue(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test26142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertFalse(cSVFormat1.equals((Object) cSVFormat2));
    }

    @Test(timeout = 4000)
    public void test26143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test26144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("OU|");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("OU|");
        boolean boolean0 = cSVFormat2.equals(cSVFormat3);
        assertFalse(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test27145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test27146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test27147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test27148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test27149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test27150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test27151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test27152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test27153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test28154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test28155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test28156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test28157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test28158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test28159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test28160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test28161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test29162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test30164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test30165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('w', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test30166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test30167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test30168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test30169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test31171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('w', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test31172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test31173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test31174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test32175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test33176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test33177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test33178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test33179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test33180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test33181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test33182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test33183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test34184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('[');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test34185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('[');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        cSVFormat1.hashCode();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test34186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('[');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test34187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('[');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        cSVFormat1.hashCode();
        assertEquals('[', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test34188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('[');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test34189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('[');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test35190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test35191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test35192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test35193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test35194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test35195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test36196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
        cSVFormat0.hashCode();
        assertEquals('-', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test36197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test36198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test37199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> QuoteChar=<\"> CommentStart=<h> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test38200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> Escape=<\\> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test39201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
        String string0 = cSVFormat0.toString();
        assertEquals("Delimiter=<h> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test40202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false Header:[null, null]", string0);
    }

    @Test(timeout = 4000)
    public void test41203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        Character character0 = Character.valueOf('s');
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
        try {
            cSVFormat1.validate();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The quoteChar character and the delimiter cannot be the same ('s')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test42204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        try {
            cSVFormat1.validate();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The escape character and the delimiter cannot be the same ('t')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test43205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test43206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test43207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test43208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test43209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test43210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test43211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertEquals('4', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test43212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test43213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
        cSVFormat1.validate();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test44214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        Character character0 = Character.valueOf('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        try {
            cSVFormat1.validate();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the delimiter cannot be the same ('s')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test45215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('`');
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        try {
            cSVFormat2.validate();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('`')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test46216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('M');
        Character character0 = new Character('M');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        Character character1 = Character.valueOf('');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character1);
        Object[] objectArray0 = new Object[6];
        // Undeclared exception!
        try {
            cSVFormat3.format(objectArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start and the escape character cannot be the same ('M')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test47217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        try {
            cSVFormat1.validate();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No quotes mode set but no escape character is set
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test48218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[6];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        try {
            cSVFormat1.validate();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The header contains duplicate names: [null, null, null, null, null, null]
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test49219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = new Character('\r');
        // Undeclared exception!
        try {
            cSVFormat0.withCommentStart(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test50220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        // Undeclared exception!
        try {
            cSVFormat0.withEscape('\r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }
}
