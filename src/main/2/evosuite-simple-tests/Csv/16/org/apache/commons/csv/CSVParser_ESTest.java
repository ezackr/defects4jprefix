/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:19:53 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVParser cSVParser0 = CSVParser.parse("CSVParsr has been closed", cSVFormat0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        assertEquals(1L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("6", cSVFormat0);
        cSVParser0.getFirstEndOfLine();
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PipedReader pipedReader0 = new PipedReader(116);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
        cSVParser0.getCurrentLineNumber();
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            CSVParser.parse(uRL0, charset0, (CSVFormat) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'format' must not be null!
            //
            verifyException("org.apache.commons.csv.Assertions", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.ORACLE;
        MockFile mockFile0 = new MockFile("path", "path");
        Path path0 = mockFile0.toPath();
        // Undeclared exception!
        try {
            CSVParser.parse(path0, (Charset) null, cSVFormat0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.nio.file.Files", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        PipedInputStream pipedInputStream0 = new PipedInputStream(4369);
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVParser cSVParser0 = CSVParser.parse("Unexpected Token type: ", cSVFormat0);
        long long0 = cSVParser0.getRecordNumber();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        // Undeclared exception!
        try {
            CSVParser.parse(",", cSVFormat1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate name: \"\" in [, ]
            //
            verifyException("org.apache.commons.csv.CSVParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVParser cSVParser0 = CSVParser.parse("];<s@MlGz^xye#MzLh,", cSVFormat0);
        cSVParser0.nextRecord();
        assertEquals(1L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVParser cSVParser0 = CSVParser.parse("CSVParsr has been closed", cSVFormat0);
        cSVParser0.close();
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVParser cSVParser0 = CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat1);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVParser cSVParser0 = CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat1);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertNotNull(map0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVParser cSVParser0 = CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat1);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertFalse(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser cSVParser0 = CSVParser.parse("dlA ", cSVFormat0);
        cSVParser0.getHeaderMap();
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat0);
        cSVParser0.getRecords();
        assertEquals(1L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat2);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        Charset charset0 = Charset.defaultCharset();
        File file0 = MockFile.createTempFile("inputStream", "inputStream", (File) null);
        CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.ORACLE;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
        CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVFormat$Predefined", cSVFormat2);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVParser cSVParser0 = CSVParser.parse("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat1);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }
}
