/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:08:57 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, '\u000E');
        CSVParser cSVParser0 = cSVFormat0.RFC4180.parse(pipedReader0);
        assertFalse(cSVParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertTrue(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertFalse(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertTrue(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertEquals("\"\"", string0);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Object[] objectArray0 = new Object[4];
        String string0 = cSVFormat2.format(objectArray0);
        assertFalse(cSVFormat2.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        // Undeclared exception!
        try {
            cSVFormat0.MYSQL.print((Appendable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'out' must not be null!
            //
            verifyException("org.apache.commons.csv.Assertions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        // Undeclared exception!
        try {
            cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No quotes mode set but no escape character is set
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        // Undeclared exception!
        try {
            CSVFormat.newFormat('\r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The delimiter cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        // Undeclared exception!
        try {
            CSVFormat.valueOf("XS/v");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.XS/v
            //
            verifyException("java.lang.Enum", e);
        }
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test0619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test0723() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0724() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("\u000E", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test0726() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0727() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0729() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0730() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test0731() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0732() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test0733() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u000E');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0834() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        assertFalse(cSVFormat0.isCommentMarkerSet());
    }

    @Test(timeout = 4000)
    public void test1036() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withDelimiter('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The delimiter cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test1139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        // Undeclared exception!
        try {
            cSVFormat0.withQuote('\r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test1448() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1449() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1450() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1451() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1452() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1453() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1454() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1455() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1456() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1557() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1759() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1860() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1861() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('D', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1862() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1863() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1864() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1865() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test1866() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test1867() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1868() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1869() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1870() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1972() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test1973() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1974() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1975() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1976() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1977() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1978() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1979() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1980() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test2081() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test2082() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test2083() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('r', (char) cSVFormat1.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test2084() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test2085() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test2086() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test2087() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test2088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test2089() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test2090() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test2091() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test2193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test2194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test2195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('r', (char) cSVFormat1.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test2196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test2197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test2198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test2199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test21100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test21101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test22102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test22103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test22104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test22105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test22106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test22107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test22108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test22109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test22110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test22111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test23112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test23113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test23114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test23115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test23116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test23117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test23118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test23119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test23120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test23121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test24122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test24123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test24124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat0.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test24125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test24126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test24127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test24128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test24129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test25130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\"', (char) cSVFormat1.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test25131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test25132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test25133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test25135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(' ', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test25136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test25137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test25138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test26139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test26140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test26141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test26142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test26143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test26144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test26145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test26146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test26147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('W', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test27148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test27149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat2.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test27150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test27151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test27152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertTrue(cSVFormat2.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test27153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat2.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test27154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertTrue(cSVFormat2.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test27155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test28156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat2.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test28157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test28158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertTrue(cSVFormat2.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test28159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("e]w#xR^.B_2t");
        CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat2.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test29160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test29161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test29162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test29163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertEquals("", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test29164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test29165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test29166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test29167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test29168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test30169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test30170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test30171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test30172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test30173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test30175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test30176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test30177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test31178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test32180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test32181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test32182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test32183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test32185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test32186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test33187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test33188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test33189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test33190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test33191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test33192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test33193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test33194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test34195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test34196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('Y', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test34197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test34198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test34199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test35200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test35201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test35202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test36203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test36204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test36205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test36206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test36207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test36208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test36209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test37210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test37211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test37212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test37213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test37214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test37215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test38216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test38217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test38218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test38219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test38220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test38221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        cSVFormat1.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test39222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test39223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test39224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test40225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test40226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test40227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test40228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test40229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test40230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test41231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test41232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test41233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test41234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test41235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
        cSVFormat0.hashCode();
        assertEquals(']', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test42236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test42237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<}> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test43238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("N");
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<N> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test43239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("N");
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test44240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
        String string0 = cSVFormat0.toString();
        assertEquals("Delimiter=<7> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test44241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
        String string0 = cSVFormat0.toString();
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test45242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test45243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test46244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[8];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false HeaderComments:[null, null, null, null, null, null, null, null]", string0);
    }

    @Test(timeout = 4000)
    public void test46245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[8];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test47246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        String string0 = cSVFormat2.toString();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test47247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        String string0 = cSVFormat2.toString();
        assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]", string0);
    }

    @Test(timeout = 4000)
    public void test47248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        String string0 = cSVFormat2.toString();
        assertTrue(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test47249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        String string0 = cSVFormat2.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test48250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('C');
        Character character0 = new Character('C');
        // Undeclared exception!
        try {
            cSVFormat1.withQuote(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar character and the delimiter cannot be the same ('C')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test49251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        // Undeclared exception!
        try {
            cSVFormat0.withEscape(':');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character and the delimiter cannot be the same (':')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test50252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('%');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the delimiter cannot be the same ('%')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test51253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('\"');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('\"')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test52254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('\\');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('\\')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test53255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        rowSetMetaDataImpl0.setColumnCount(2889);
        // Undeclared exception!
        try {
            cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test54256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start marker character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test55257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withEscape('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test56258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test56259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test56260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test57261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test57262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test57263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }
}
