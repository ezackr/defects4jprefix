/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:49:22 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVLexer;
import org.apache.commons.csv.ExtendedBufferedReader;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Lexer_ESTest extends Lexer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringReader stringReader0 = new StringReader("\n");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        int int0 = cSVLexer0.readEscape();
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        StringReader stringReader0 = new StringReader("($Q)->lf?");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        long long0 = cSVLexer0.getLineNumber();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringReader stringReader0 = new StringReader("");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        try {
            cSVLexer0.readEscape();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // EOF whilst processing escape sequence
            //
            verifyException("org.apache.commons.csv.Lexer", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("b7DDN~Rw}");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        int int0 = cSVLexer0.readEscape();
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringReader stringReader0 = new StringReader("fo=M81Qo1Wd6");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        int int0 = cSVLexer0.readEscape();
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringReader stringReader0 = new StringReader("n?*");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        int int0 = cSVLexer0.readEscape();
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringReader stringReader0 = new StringReader("rf/FY$;}lmf~nT2|");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        int int0 = cSVLexer0.readEscape();
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("t");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        int int0 = cSVLexer0.readEscape();
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringReader stringReader0 = new StringReader("J,R!zRPnuU%/sf[");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        cSVLexer0.readEscape();
        // Undeclared exception!
        try {
            cSVLexer0.nextToken((Token) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.csv.CSVLexer", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringReader stringReader0 = new StringReader("\r\n");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\r\n");
        cSVLexer0.trimTrailingSpaces(stringBuilder0);
        assertEquals("", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        StringReader stringReader0 = new StringReader("EOF whilst processing escape sequence");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "EOF whilst processing escape sequence");
        cSVLexer0.trimTrailingSpaces(stringBuilder0);
        assertEquals("EOF whilst processing escape sequence", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringReader stringReader0 = new StringReader("\r\n");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        cSVLexer0.readEscape();
        Token token0 = new Token();
        Token token1 = cSVLexer0.nextToken(token0);
        assertSame(token0, token1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringReader stringReader0 = new StringReader("");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        boolean boolean0 = cSVLexer0.readEndOfLine(13);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringReader stringReader0 = new StringReader("\r\n");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        Token token0 = new Token();
        Token token1 = cSVLexer0.nextToken(token0);
        assertSame(token0, token1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringReader stringReader0 = new StringReader("The comment start character and the quoteChar cannot be the same ('");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        boolean boolean0 = cSVLexer0.isWhitespace(44);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StringReader stringReader0 = new StringReader("($Q)->lf?");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        boolean boolean0 = cSVLexer0.isWhitespace(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringReader stringReader0 = new StringReader("");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        boolean boolean0 = cSVLexer0.isWhitespace(868);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringReader stringReader0 = new StringReader("($Q)->lf?");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        boolean boolean0 = cSVLexer0.isStartOfLine(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringReader stringReader0 = new StringReader("O0DsjNi9JAA/?_YL;F");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        Token token0 = new Token();
        Token token1 = cSVLexer0.nextToken(token0);
        assertSame(token0, token1);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        StringReader stringReader0 = new StringReader(",8pP6VE");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        Token token0 = new Token();
        Token token1 = cSVLexer0.nextToken(token0);
        assertSame(token1, token0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        StringReader stringReader0 = new StringReader("($Q)->lf?");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        boolean boolean0 = cSVLexer0.isQuoteChar(34);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        StringReader stringReader0 = new StringReader("");
        ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
        CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
        boolean boolean0 = cSVLexer0.isCommentStart(65534);
        assertTrue(boolean0);
    }
}
