/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:17:12 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat0.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[8];
        stringArray0[1] = "InformjixUnloadsv";
        stringArray0[2] = "^vGK9Hwa";
        stringArray0[3] = "The quoteChar cannot be a line break";
        stringArray0[4] = "ALL_NON_NULL";
        stringArray0[5] = "HeaderComments:";
        stringArray0[6] = "\r\n";
        stringArray0[7] = "xklp";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[8];
        stringArray0[1] = "InformjixUnloadsv";
        stringArray0[2] = "^vGK9Hwa";
        stringArray0[3] = "The quoteChar cannot be a line break";
        stringArray0[4] = "ALL_NON_NULL";
        stringArray0[5] = "HeaderComments:";
        stringArray0[6] = "\r\n";
        stringArray0[7] = "xklp";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[8];
        stringArray0[1] = "InformjixUnloadsv";
        stringArray0[2] = "^vGK9Hwa";
        stringArray0[3] = "The quoteChar cannot be a line break";
        stringArray0[4] = "ALL_NON_NULL";
        stringArray0[5] = "HeaderComments:";
        stringArray0[6] = "\r\n";
        stringArray0[7] = "xklp";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[8];
        stringArray0[1] = "InformjixUnloadsv";
        stringArray0[2] = "^vGK9Hwa";
        stringArray0[3] = "The quoteChar cannot be a line break";
        stringArray0[4] = "ALL_NON_NULL";
        stringArray0[5] = "HeaderComments:";
        stringArray0[6] = "\r\n";
        stringArray0[7] = "xklp";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertEquals("\\N", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[8];
        stringArray0[1] = "InformjixUnloadsv";
        stringArray0[2] = "^vGK9Hwa";
        stringArray0[3] = "The quoteChar cannot be a line break";
        stringArray0[4] = "ALL_NON_NULL";
        stringArray0[5] = "HeaderComments:";
        stringArray0[6] = "\r\n";
        stringArray0[7] = "xklp";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[8];
        stringArray0[1] = "InformjixUnloadsv";
        stringArray0[2] = "^vGK9Hwa";
        stringArray0[3] = "The quoteChar cannot be a line break";
        stringArray0[4] = "ALL_NON_NULL";
        stringArray0[5] = "HeaderComments:";
        stringArray0[6] = "\r\n";
        stringArray0[7] = "xklp";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[8];
        stringArray0[1] = "InformjixUnloadsv";
        stringArray0[2] = "^vGK9Hwa";
        stringArray0[3] = "The quoteChar cannot be a line break";
        stringArray0[4] = "ALL_NON_NULL";
        stringArray0[5] = "HeaderComments:";
        stringArray0[6] = "\r\n";
        stringArray0[7] = "xklp";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        // Undeclared exception!
        try {
            cSVFormat0.DEFAULT.print((Appendable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'out' must not be null!
            //
            verifyException("org.apache.commons.csv.Assertions", e);
        }
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            cSVFormat0.RFC4180.print((Path) null, charset0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.nio.file.Files", e);
        }
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test0417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('|', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test0522() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test0523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals("\\N\t\\N", string0);
    }

    @Test(timeout = 4000)
    public void test0524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertTrue(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test0525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test0527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test0628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = cSVFormat0.DEFAULT.printer();
        assertNotNull(cSVPrinter0);
    }

    @Test(timeout = 4000)
    public void test0729() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('#', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0730() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0731() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0732() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0733() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0734() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test0735() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getTrim());
    }

    @Test(timeout = 4000)
    public void test0736() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test0737() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("#", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test0738() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0739() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test0840() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test0841() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test0842() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test0843() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0844() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test0845() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0946() throws Throwable {
        // Undeclared exception!
        try {
            CSVFormat.valueOf(";X*IV7N4IUuKX=.");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.;X*IV7N4IUuKX=.
            //
            verifyException("java.lang.Enum", e);
        }
    }

    @Test(timeout = 4000)
    public void test1047() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test1048() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getTrim());
    }

    @Test(timeout = 4000)
    public void test1049() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1050() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1051() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1052() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertEquals('p', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1053() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test1054() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test1161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test1163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test1165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[10];
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('\\');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('\\')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertEquals("\\N", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test1368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1369() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1370() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test1371() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1372() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test1375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test1377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1478() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        MockFile mockFile0 = new MockFile("The comment start character and the quoteChar cannot be the same ('");
        Charset charset0 = Charset.defaultCharset();
        CSVPrinter cSVPrinter0 = cSVFormat0.EXCEL.print((File) mockFile0, charset0);
        assertNotNull(cSVPrinter0);
    }

    @Test(timeout = 4000)
    public void test1579() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        PipedReader pipedReader0 = new PipedReader();
        CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
        assertNull(cSVParser0.getFirstEndOfLine());
    }

    @Test(timeout = 4000)
    public void test1680() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1681() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test1683() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test1684() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test1685() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test1786() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1787() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test1788() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test1789() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1790() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test1791() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test1792() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test1793() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1794() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('S', (char) cSVFormat1.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test1795() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1796() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test1797() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1898() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test1899() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test18100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertEquals("\\N", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test18101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertTrue(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test18102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test18103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test18104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test18105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test18106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test18107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test18108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test18109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test19110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test19111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test19112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test19113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test19114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test19115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertEquals("org.apache.commons.csv.QuoteMode", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test19116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test19117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test19118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test19119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.QuoteMode");
        cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test20120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        assertArrayEquals(new char[] { ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test20121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test21122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test22123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String string0 = cSVFormat0.getNullString();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test23124() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test24125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        // Undeclared exception!
        try {
            cSVFormat0.withQuote((Character) '\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test25126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('\r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start marker character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test26127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test26128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test26129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test26130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test26131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test26132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test26133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test26134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test26135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test27136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test28137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        boolean boolean0 = cSVFormat0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test29138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
        boolean boolean0 = cSVFormat0.equals(cSVFormat_Predefined0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test31141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test31143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test31144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test31145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withFirstRecordAsHeader();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test32146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test32147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test32148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test32149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test32150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test32151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test32152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test32153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test32154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test32155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test32156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test32157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test32158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test32159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test33160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test33161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test33162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test33163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test33164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test33165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test33166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test33167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test33168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test34169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test34170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('`', (char) cSVFormat1.getCommentMarker());
    }

    @Test(timeout = 4000)
    public void test34171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test34172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test34173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test34174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test34175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test34176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test34177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test34178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test35179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test35180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test35181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test35182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test35183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test35184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test35185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test35186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test35187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test36188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test36189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test36190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test36191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test36192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\u001B', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test36193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test36194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test36195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test36196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test36197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u001B');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test37198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test37199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test37200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test37201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test37202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test37203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('A', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test37204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test37205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test37206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test38207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test38208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat2.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test38209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test38210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertTrue(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test38211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test38212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test38213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertEquals("c}$B#4%", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test38214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat2.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test38215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test38216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertTrue(cSVFormat2.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test38217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test38218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c}$B#4%");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat2.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test39219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test39220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test39221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test39222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test39223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test39224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test39225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test39226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test39227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test39228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test40229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test41230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test41231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test41232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test41233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test41234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test41235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test41236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test41237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test42238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test42239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test42240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getTrim());
    }

    @Test(timeout = 4000)
    public void test42241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test42242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test42243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('%', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test42244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test42245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test42246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test42247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test43248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test43249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test43250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getTrim());
    }

    @Test(timeout = 4000)
    public void test43251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertEquals("o", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test43252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test43253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test43254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test43255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test43256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('o');
        cSVFormat1.equals(cSVFormat0);
        assertEquals('o', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test44257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.format((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test45258() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test45259() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test45260() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test45261() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test46262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\"');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test46263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\"');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test46264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\"');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test46265() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\"');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test46266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\"');
        cSVFormat1.hashCode();
        assertEquals("\\N", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test46267() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\"');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test47268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        cSVFormat0.hashCode();
    }

    @Test(timeout = 4000)
    public void test48269() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test48270() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test48271() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test48272() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test48273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test49274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test49275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertEquals('\"', (char) cSVFormat1.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test49276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test49277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test49278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test49279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test49280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test49281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test50282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test50283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test50284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertEquals('4', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test50285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test50286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test50287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test50288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test50289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test51290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<!> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test51291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        String string0 = cSVFormat1.toString();
        assertTrue(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test51292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test51293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test51294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test52295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Object[] objectArray0 = new Object[1];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals("null\\Nnull", string0);
    }

    @Test(timeout = 4000)
    public void test52296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Object[] objectArray0 = new Object[1];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test52297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Object[] objectArray0 = new Object[1];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test52298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Object[] objectArray0 = new Object[1];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test52299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Object[] objectArray0 = new Object[1];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test52300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Object[] objectArray0 = new Object[1];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test53301() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        assertFalse(cSVFormat0.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test53302() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        assertFalse(cSVFormat0.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test53303() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test53304() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertEquals('K', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test53305() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test53306() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test53307() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test53308() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test53309() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getTrim());
    }

    @Test(timeout = 4000)
    public void test53310() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test53311() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test54312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[8];
        objectArray0[2] = (Object) "org.apache.commons.csv.CSVFormat$Predefined@0000000002\torg.apache.commons.csv.CSVFormat$Predefined@0000000003\torg.apache.commons.csv.CSVFormat$Predefined@0000000004\torg.apache.commons.csv.CSVFormat$Predefined@0000000005\torg.apache.commons.csv.CSVFormat$Predefined@0000000006\torg.apache.commons.csv.CSVFormat$Predefined@0000000007\torg.apache.commons.csv.CSVFormat$Predefined@0000000008\torg.apache.commons.csv.CSVFormat$Predefined@0000000009\torg.apache.commons.csv.CSVFormat$Predefined@0000000010";
        String string0 = cSVFormat0.format(objectArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test55313() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test55314() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test55315() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test55316() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test55317() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test55318() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertEquals("\\N", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test55319() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test56320() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        cSVFormat0.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat0.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test57321() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test57322() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test57323() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test57324() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test57325() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test57326() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test57327() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test58328() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test58329() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test58330() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test58331() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test58332() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test58333() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test58334() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test58335() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test58336() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test58337() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test59338() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test59339() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test59340() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test59341() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertEquals("", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test59342() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test59343() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.format(cSVFormat_PredefinedArray0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test60344() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) "";
        String string0 = cSVFormat0.format(objectArray0);
        assertEquals("\"\"|", string0);
    }

    @Test(timeout = 4000)
    public void test61345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) "\n";
        String string0 = cSVFormat0.format(objectArray0);
        assertEquals("\"\n\"|", string0);
    }

    @Test(timeout = 4000)
    public void test62346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) " ";
        String string0 = cSVFormat0.format(objectArray0);
        assertEquals("\" \"|", string0);
    }

    @Test(timeout = 4000)
    public void test63347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) "\"org.apache.commons.csv.CSVFormat$Predefined@0000000003\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000004\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000005\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000006\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000007\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000008\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000009\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000010\"\t\"org.apache.commons.csv.CSVFormat$Predefined@0000000011\"";
        cSVFormat0.format(objectArray0);
        assertTrue(cSVFormat0.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test64348() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[5];
        objectArray0[0] = (Object) ",org.apache.commons.csv.CSVFormat@0000000002,,";
        cSVFormat0.format(objectArray0);
        assertTrue(cSVFormat0.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test65349() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        char[] charArray0 = new char[1];
        charArray0[0] = '\u0086';
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        // Undeclared exception!
        try {
            cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.nio.Buffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test66350() throws Throwable {
        Object[] objectArray0 = new Object[18];
        objectArray0[1] = (Object) "&\n";
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        String string0 = cSVFormat0.format(objectArray0);
        assertEquals(",\"&\n\",,,,,,,,,,,,,,,,", string0);
    }

    @Test(timeout = 4000)
    public void test67351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) "i;A;xoH)3[z\"yM";
        String string0 = cSVFormat0.format(objectArray0);
        assertEquals("\"i;A;xoH)3[z\"\"yM\"", string0);
    }

    @Test(timeout = 4000)
    public void test68352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) "45,I!";
        String string0 = cSVFormat0.format(objectArray0);
        assertEquals("\"45,I!\"", string0);
    }

    @Test(timeout = 4000)
    public void test69353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        String[] stringArray0 = new String[4];
        stringArray0[2] = "(line ";
        String string0 = cSVFormat0.format(stringArray0);
        assertEquals(",,\"(line \",", string0);
    }

    @Test(timeout = 4000)
    public void test70354() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
        String string0 = cSVFormat0.toString();
        assertFalse(cSVFormat0.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test70355() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
        String string0 = cSVFormat0.toString();
        assertFalse(cSVFormat0.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test70356() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
        String string0 = cSVFormat0.toString();
        assertFalse(cSVFormat0.getTrim());
    }

    @Test(timeout = 4000)
    public void test70357() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
        String string0 = cSVFormat0.toString();
        assertEquals("Delimiter=< > SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test70358() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
        String string0 = cSVFormat0.toString();
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test71359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String string0 = cSVFormat0.toString();
        assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test72360() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test72361() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test72362() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test72363() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test72364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test73365() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test73366() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test73367() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test73368() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test73369() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertFalse(cSVFormat1.isCommentMarkerSet());
    }

    @Test(timeout = 4000)
    public void test73370() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test73371() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertFalse(cSVFormat0.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test73372() throws Throwable {
        CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
        cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test74373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test74374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test74375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:true Header:[]", string0);
    }

    @Test(timeout = 4000)
    public void test74376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test75377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[3];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals("||", string0);
    }

    @Test(timeout = 4000)
    public void test75378() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[3];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test75379() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[3];
        String string0 = cSVFormat1.format(objectArray0);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test75380() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[3];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test75381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[3];
        String string0 = cSVFormat1.format(objectArray0);
        assertTrue(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test75382() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Object[] objectArray0 = new Object[3];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test76383() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        char[] charArray0 = new char[7];
        charArray0[0] = 'e';
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        assertArrayEquals(new char[] { ',', '\"', ',', '\"', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test76384() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        char[] charArray0 = new char[7];
        charArray0[0] = 'e';
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test77385() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        char[] charArray0 = new char[7];
        charArray0[0] = 'Z';
        charArray0[6] = 'Z';
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        // Undeclared exception!
        try {
            cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.nio.HeapCharBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test78386() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withQuote(',');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar character and the delimiter cannot be the same (',')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test79387() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0018');
        // Undeclared exception!
        try {
            cSVFormat0.withEscape('\u0018');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character and the delimiter cannot be the same ('\u0018')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test80388() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('|');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the delimiter cannot be the same ('|')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test81389() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('\"');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('\"')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test82390() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        // Undeclared exception!
        try {
            cSVFormat0.withQuoteMode(quoteMode0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No quotes mode set but no escape character is set
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test83391() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        rowSetMetaDataImpl0.setColumnCount(35);
        // Undeclared exception!
        try {
            cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test84392() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertEquals('!', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test84393() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test84394() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test84395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test84396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test84397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test84398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test84399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test84400() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test85401() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        // Undeclared exception!
        try {
            cSVFormat0.withDelimiter('\r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The delimiter cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test86402() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withEscape('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test87403() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test87404() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test87405() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test87406() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test87407() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test87408() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test88409() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test88410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test88411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertEquals('|', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test88412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test88413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test88414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test88415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test88416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test88417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test89418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test89419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test89420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test89421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test89422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test89423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test90424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test90425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test90426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test90427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test90428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.getIgnoreHeaderCase());
    }

    @Test(timeout = 4000)
    public void test90429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.getTrailingDelimiter());
    }

    @Test(timeout = 4000)
    public void test90430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.getTrim());
    }

    @Test(timeout = 4000)
    public void test90431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test90432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.getAutoFlush());
    }

    @Test(timeout = 4000)
    public void test90433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test90434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test90435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }
}
