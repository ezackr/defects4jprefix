/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 15:08:32 GMT 2024
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[1];
        String string0 = cSVFormat0.TDF.format(objectArray0);
        assertEquals("\"\"", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
        assertNotNull(cSVPrinter0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        // Undeclared exception!
        try {
            cSVFormat0.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: 'null' in [null, null, null, null]
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        String string0 = cSVFormat0.MYSQL.toString();
        assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        String string0 = cSVFormat0.MYSQL.toString();
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        String string0 = cSVFormat0.MYSQL.toString();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        String string0 = cSVFormat0.MYSQL.toString();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        String string0 = cSVFormat0.MYSQL.toString();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0516() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        String string0 = cSVFormat0.MYSQL.toString();
        assertEquals(':', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(':', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(")", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test0623() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test0624() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        PipedReader pipedReader0 = new PipedReader();
        CSVParser cSVParser0 = cSVFormat0.TDF.parse(pipedReader0);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test0826() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('e');
        // Undeclared exception!
        try {
            cSVFormat1.withCommentMarker('e');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('e')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test0927() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0928() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("\r\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test0929() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0930() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0931() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0932() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("NullSRring=<", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test0933() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test0934() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1036() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test1139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('&', (char) cSVFormat1.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test1140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\"', (char) cSVFormat1.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test1246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAllowMissingColumnNames(false);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test1247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAllowMissingColumnNames(false);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1348() throws Throwable {
        // Undeclared exception!
        try {
            CSVFormat.newFormat('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The delimiter cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1449() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('\r');
        // Undeclared exception!
        try {
            cSVFormat0.withQuote(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1554() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test1655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test1659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test1660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "C/'FHP";
        stringArray0[1] = "The comment start and the escape character cannot be the same ('";
        stringArray0[2] = "Nz{=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1763() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1864() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1965() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        assertEquals(':', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test1966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test1968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test1969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test1970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test2071() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test2174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test2175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test2176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test2177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test2178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test2179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test2280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2482() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertEquals(';', (char) cSVFormat2.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test2483() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test2484() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat2.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test2485() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test2486() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertEquals('x', (char) cSVFormat2.getCommentMarker());
    }

    @Test(timeout = 4000)
    public void test2487() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test2488() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test2489() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test2490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(cSVFormat2.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test2491() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2592() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test2593() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('m', (char) cSVFormat1.getCommentMarker());
    }

    @Test(timeout = 4000)
    public void test2594() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test2595() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test2596() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test2597() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test2598() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test2599() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test26101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test26102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('u', (char) cSVFormat1.getCommentMarker());
    }

    @Test(timeout = 4000)
    public void test26103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test26104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test26105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test26106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test26107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test26108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test26109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test27110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("c9QA2", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test27111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test27112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test27113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test27114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test27115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test27116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test27117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test27118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("c9QA2");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test28119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test28120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test28121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test28122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertEquals("NullSRring=<", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test28123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test28124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test28125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test28126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test28127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSRring=<");
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullSRring=<");
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test29128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test30131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test30132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test30133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test30134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test30135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test30136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test31137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test31138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test31139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(':', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test31140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test31141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test31142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test32143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test32144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test32145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test32146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test32147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test32149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test32150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(")", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test32151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test33152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test33153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test33154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test33155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertFalse(cSVFormat2.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test33156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertEquals('&', (char) cSVFormat2.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test33157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test33158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertFalse(cSVFormat2.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test33159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "ZQx$Ym<>zOO'.";
        stringArray0[1] = "";
        stringArray0[2] = "}=rvj9:";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('&');
        cSVFormat2.getHeader();
        assertTrue(cSVFormat2.isQuoteCharacterSet());
    }

    @Test(timeout = 4000)
    public void test34160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('|');
        cSVFormat2.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test34161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('|');
        cSVFormat2.hashCode();
        assertEquals('|', (char) cSVFormat2.getQuoteCharacter());
    }

    @Test(timeout = 4000)
    public void test34162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('|');
        cSVFormat2.hashCode();
        assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
    }

    @Test(timeout = 4000)
    public void test34163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('|');
        cSVFormat2.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test34164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('|');
        cSVFormat2.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test34165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('|');
        cSVFormat2.hashCode();
        assertFalse(cSVFormat2.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test35166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test35167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
        cSVFormat0.hashCode();
        assertEquals('h', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test35168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test35169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test35170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test36171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
        cSVFormat1.hashCode();
        assertEquals('P', (char) cSVFormat1.getCommentMarker());
    }

    @Test(timeout = 4000)
    public void test36172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
        cSVFormat1.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test36173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test36174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test36175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test37176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("*0B/9zThtTi8K-&");
        cSVFormat1.hashCode();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test37177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("*0B/9zThtTi8K-&");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test37178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("*0B/9zThtTi8K-&");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test37179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("*0B/9zThtTi8K-&");
        cSVFormat1.hashCode();
        assertEquals("*0B/9zThtTi8K-&", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test38180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test38181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test38182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isNullStringSet());
    }

    @Test(timeout = 4000)
    public void test38183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test38184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test38185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test38186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isEscapeCharacterSet());
    }

    @Test(timeout = 4000)
    public void test39187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('<');
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test39188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('<');
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> QuoteChar=<\"> CommentStart=<<> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test40189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> QuoteChar=<\"> NullString=<y> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test40190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test41191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        String string0 = cSVFormat0.toString();
        assertEquals("Delimiter=<9> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test41192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        String string0 = cSVFormat0.toString();
        assertFalse(cSVFormat0.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test42193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
        assertFalse(cSVFormat1.getAllowMissingColumnNames());
    }

    @Test(timeout = 4000)
    public void test42194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]", string0);
    }

    @Test(timeout = 4000)
    public void test43195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
        // Undeclared exception!
        try {
            cSVFormat0.withQuote('d');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar character and the delimiter cannot be the same ('d')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test44196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('J');
        // Undeclared exception!
        try {
            cSVFormat1.withDelimiter('J');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character and the delimiter cannot be the same ('J')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test45197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker(',');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the delimiter cannot be the same (',')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test46198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
        // Undeclared exception!
        try {
            cSVFormat1.withEscape('P');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('P')
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test47199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        // Undeclared exception!
        try {
            cSVFormat0.withQuoteMode(quoteMode0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No quotes mode set but no escape character is set
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test48200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentMarker('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start marker character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test49201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        // Undeclared exception!
        try {
            cSVFormat0.withDelimiter('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The delimiter cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test50202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        // Undeclared exception!
        try {
            cSVFormat0.withEscape('\n');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character cannot be a line break
            //
            verifyException("org.apache.commons.csv.CSVFormat", e);
        }
    }
}
