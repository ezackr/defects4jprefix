/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 13:19:10 GMT 2024
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "The validated class can not be converted to the %s class", 1, 3, 0, 93, 1, (-1), 2, 0);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer(93);
        fastDateFormat0.format(calendar0, stringBuffer0);
        System.setCurrentTimeMillis(1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
        assertEquals(15, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getPattern();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("8:21:21 PM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE H:mm:ss");
        try {
            fastDateFormat0.parseObject("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE H:mm:ss");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Format.parseObject(String) failed
            //
            verifyException("java.text.Format", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        fastDateFormat0.getLocale();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(44, int0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        Long long0 = new Long(3);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(41, attributedCharacterIterator0.getRunLimit());
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        Locale locale0 = Locale.UK;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(88, 88, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 88
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[", locale0);
        fastDateFormat0.getTimeZone();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-4380), timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -4380
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        Locale locale0 = Locale.UK;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(264, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 264
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy/MM/dd H:mm:ss z");
        String string0 = fastDateFormat0.format((long) 3);
        assertEquals("1970/01/01 0:00:00 GMT", string0);
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CHINA;
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-330), timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -330
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("AV");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("-B");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("CuU(qP)-twf?/BE@h~=");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Z!5D");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("+Fb08 {|,ZriX00cCr");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: b
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("GJK1!8g%x^b;k(* vBj");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("KIy=sv&S~m7z,|oa@");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("4s2LC");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("N` G6?\"o7@(=dr");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: N
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("_/>OVER*#m");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: O
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("-ZPxbE9<ZmcbE#Rpy~");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("^=Q:2jr\"");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Q
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("#^mR2g");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(",aS[#");
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(",PM320[#", string0);
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("The string %s does not match the pattern %s");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("U");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("1V-JT");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W", (TimeZone) null);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W", (TimeZone) null);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3746() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W", (TimeZone) null);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test3847() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("8X1");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3948() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("({G %Y_hj#zy'^Xu");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Y
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4049() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Z!c");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4150() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("e=DjX\"o:,N}hl");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4251() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("9fur(\"W!d");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4352() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(")MgLR7 :/v@+:O(+jA");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4453() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("&KW>1;@i");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4554() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("jKmCJr35HE{");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: j
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4655() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("l|ZY");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4756() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("6#?En@6@P");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4857() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4958() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("p=QEM8Nf4b]L+U");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: p
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5059() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("(q,/|zS:6C>");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5160() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(",yr5v6wpI`cJE}");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5261() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(")>0$<_^tfdi}Dfa}=L");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5362() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("un&k#v1Hl_<]YZs");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: u
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5463() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(":?(_kSw2vWBN;3D'u");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5564() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("xo)26D");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: x
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5665() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2);
        assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5766() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]ZZ");
        MockDate mockDate0 = new MockDate(1);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("]+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test5867() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u65F6'mm'\u5206'ss'\u79D2'");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test5968() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm:ss 'o''clock' a z");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6069() throws Throwable {
        MockDate mockDate0 = new MockDate((-204L));
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((Object) mockDate0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6070() throws Throwable {
        MockDate mockDate0 = new MockDate((-204L));
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((Object) mockDate0);
        assertEquals("12/31/69 11:59 PM", string0);
    }

    @Test(timeout = 4000)
    public void test6171() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6272() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) fastDateFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: org.apache.commons.lang3.time.FastDateFormat
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6373() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals("Ybq:");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6374() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals("Ybq:");
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6475() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, (Locale) null);
        fastDateFormat0.equals(fastDateFormat1);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6476() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, (Locale) null);
        fastDateFormat0.equals(fastDateFormat1);
        assertEquals(20, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6577() throws Throwable {
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("~Z!k", locale0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("~Z!k");
        fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6578() throws Throwable {
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("~Z!k", locale0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("~Z!k");
        fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6679() throws Throwable {
        Locale locale0 = Locale.UK;
        Locale.setDefault(locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("~Z!k", locale0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("~Z!k");
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6680() throws Throwable {
        Locale locale0 = Locale.UK;
        Locale.setDefault(locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("~Z!k", locale0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("~Z!k");
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6781() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
        MockDate mockDate0 = new MockDate((-1918), 3, 2);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("April 2, 0019 12:00:00 AM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test6882() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 3);
        MockDate mockDate0 = new MockDate((-830), (-830), (-830));
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Sunday, July 24, 0998 12:00 AM", string0);
    }

    @Test(timeout = 4000)
    public void test6983() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1791), "Z!k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Z!k", (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) (-1791));
        assertEquals("-0000!23", string0);
    }

    @Test(timeout = 4000)
    public void test7084() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("~Z!k");
        assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test7085() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("~Z!k");
        MockDate mockDate0 = new MockDate(2);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("~+0000!24", string0);
    }

    @Test(timeout = 4000)
    public void test7186() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "KT@0`^oy", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("12:00:00 AM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test7287() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "KT@0`^oy", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        simpleTimeZone0.setStartRule(1, 1, 4056);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("12:00:00 AM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test7388() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "The validated class can not be converted to the %s class", 1, 3, 0, 93, 1, (-1), 2, 0);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        calendar0.setTimeInMillis((-1));
        StringBuffer stringBuffer0 = new StringBuffer(93);
        fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("January 1, 1970 12:00:00 AM GMT+00:00", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test7389() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "The validated class can not be converted to the %s class", 1, 3, 0, 93, 1, (-1), 2, 0);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        calendar0.setTimeInMillis((-1));
        StringBuffer stringBuffer0 = new StringBuffer(93);
        fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(37, stringBuffer0.length());
    }
}
