/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 15:29:50 GMT 2024
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " @<s");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, (Locale) null);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(55, int0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-1), (-1), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -1
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        fastDateFormat0.format((long) 0, stringBuffer0);
        assertEquals(15, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        fastDateFormat0.format((long) 0, stringBuffer0);
        assertEquals("12:00:00 AM GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("$n^aPA", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("zzB%kwweY:7", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MM d,yyyy");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("01 31,0001", string0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        try {
            fastDateFormat0.parseObject("The validated collection contains null element at index: ");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Format.parseObject(String) failed
            //
            verifyException("java.text.Format", e);
        }
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getLocale();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("MMMM d, yyyy h:mm:ss a z", string0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`0Z");
        assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`0Z");
        String string0 = fastDateFormat0.format((long) 3);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`0Z");
        String string0 = fastDateFormat0.format((long) 3);
        assertEquals("`0+0000", string0);
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k3(a0M");
        StringBuffer stringBuffer0 = new StringBuffer(0);
        fastDateFormat0.format((-2308L), stringBuffer0);
        assertEquals("233(PM012", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k3(a0M");
        StringBuffer stringBuffer0 = new StringBuffer(0);
        fastDateFormat0.format((-2308L), stringBuffer0);
        assertEquals(9, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(2);
        String string0 = fastDateFormat0.format((Object) mockDate0);
        assertEquals("1/1/70 12:00 AM", string0);
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(2);
        String string0 = fastDateFormat0.format((Object) mockDate0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0);
        MockDate mockDate0 = new MockDate((-20), 2, 1, 106, 0, 0);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("March 5, 1880 10:00:00 AM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat.getTimeInstance(0, timeZone0);
        MockDate mockDate0 = new MockDate(0, 3, 1, 2, 0, 1);
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        MockDate mockDate0 = new MockDate(1, 0, 0);
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.parsePattern();
        Locale locale1 = Locale.ENGLISH;
        FastDateFormat.getInstance("", timeZone0, locale0);
        Locale.LanguageRange locale_LanguageRange0 = null;
        try {
            locale_LanguageRange0 = new Locale.LanguageRange("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // range=
            //
            verifyException("java.util.Locale$LanguageRange", e);
        }
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("&|;Ay");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("5''}C");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Dwm");
        StringBuffer stringBuffer0 = new StringBuffer("Dwm");
        fastDateFormat0.format((-147L), stringBuffer0);
        assertEquals("Dwm365159", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Dwm");
        StringBuffer stringBuffer0 = new StringBuffer("Dwm");
        fastDateFormat0.format((-147L), stringBuffer0);
        assertEquals(9, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".a7]GFim$");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("HDycO].C");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Illegal pattern component: ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("J$l#.eteDTfB");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("9K!WjM_UftC ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: j
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3139() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("LNy");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3240() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("No date time pattern for locale: ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: N
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3341() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("O*`y9Ys rNDZ0{d");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: O
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3442() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("%KSP1a6E8Y| KmCZs");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3543() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("EQZOI");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Q
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("46Rizmur0Th");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("The validated object is null");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3846() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Unknown class: ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3947() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("[w(Vl}h43B");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4048() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("|%X{}MB;B<$#VkodP");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4149() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("*9)Y-!yog\"-V");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Y
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4250() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("&d;8MbB");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: b
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4351() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("eA");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4452() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("f");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4553() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule");
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("?(4ZZgTJ<{H", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4654() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("l");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4755() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("org.apache.commons.lang.Validate");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4856() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("4pGu}vQTEltC<");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: p
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4957() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("q0xZ V@e)Zzgw'3xHR");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5058() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("h;-^r5OPL#");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5159() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(" at index: ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5260() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("u1mZMuN )7_#CNS");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: u
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("vL6Skw$to0^.|rqv=G");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("xOnq}&=@Q.:Y=}$ J(");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: x
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        MockDate mockDate0 = new MockDate(0, 3, 1, 2, 0, 1);
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test5766() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5767() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(15, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test5868() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5869() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
        assertEquals(15, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test5970() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.formatToCharacterIterator((Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6071() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        // Undeclared exception!
        try {
            fastDateFormat0.formatToCharacterIterator("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: java.lang.String
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6172() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6273() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.equals("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6274() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.equals("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6375() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test6376() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(10, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6377() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6478() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test6579() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test6580() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6581() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6682() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test6683() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((-2421L));
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6684() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((-2421L));
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6685() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((-2421L));
        assertEquals("12/31/69 11:59 PM", string0);
    }

    @Test(timeout = 4000)
    public void test6786() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        MockDate mockDate0 = new MockDate((-1213), 1, 1, 93, 3, 0);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("February 4, 0687", string0);
    }

    @Test(timeout = 4000)
    public void test6887() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k3(a0M");
        StringBuffer stringBuffer0 = new StringBuffer(0);
        fastDateFormat0.format(0L, stringBuffer0);
        assertEquals("243(AM01", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test6888() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k3(a0M");
        StringBuffer stringBuffer0 = new StringBuffer(0);
        fastDateFormat0.format(0L, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6989() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1424), "zn5#x?3DKG^%;j`D", 0, 1, 0, 122, 0, 6, 1, 1, 1, (-105), 122);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
        MockDate mockDate0 = new MockDate((-1111), (-1111), 122, (-1111), 122, 5);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("7:02:03 PM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test7090() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1424), "zn5#x?3DKG^%;j`D", 0, 1, 0, 122, 0, 6, 1, 1, 1, (-105), 122);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format(3653L, stringBuffer0);
        assertEquals("12:00:02 AM GMT+00:00", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test7091() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1424), "zn5#x?3DKG^%;j`D", 0, 1, 0, 122, 0, 6, 1, 1, 1, (-105), 122);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format(3653L, stringBuffer0);
        assertEquals(21, stringBuffer0.length());
    }
}
