/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:44:57 GMT 2024
 */
package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Number number0 = NumberUtils.createNumber("0e+7");
        assertEquals((short) 0, number0.shortValue());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        int int0 = NumberUtils.stringToInt("gG");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        try {
            NumberUtils.createNumber("c:c9e[(9]+A!2$ETc[2");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Illegal embedded sign character
            //
            verifyException("java.math.BigInteger", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Number number0 = NumberUtils.createNumber((String) null);
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        try {
            NumberUtils.createNumber("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // \"\" is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Number number0 = NumberUtils.createNumber("--`");
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        try {
            NumberUtils.createNumber("0x0eC,7TVGd7");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"0eC,7TVGd7\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        try {
            NumberUtils.createNumber("-0xUPu~XPG^JX$r'E8");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"-UPu~XPG^JX$r'E8\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        try {
            NumberUtils.createNumber("mx!o\":.kQ(Yz.'O\"9l");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // mx!o\":.kQ(Yz.'O\"9l is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        try {
            NumberUtils.createNumber("PlH\"S`x.p*h#e%uT!8");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        try {
            NumberUtils.createNumber("\"\" is not a valid number.");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // \"\" is not a valid number. is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Number number0 = NumberUtils.createNumber("0f");
        assertEquals((byte) 0, number0.byteValue());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        try {
            NumberUtils.createNumber("8R_Lw[L}n14Ft{F?)eF");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 8R_Lw[L}n14Ft{F?)eF is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        try {
            NumberUtils.createNumber("0e");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0e is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        try {
            NumberUtils.createNumber("0eC");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0eC is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Number number0 = NumberUtils.createNumber("0D");
        assertEquals((short) 0, number0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        try {
            NumberUtils.createNumber("0eC,TVGd");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0eC,TVGd is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        try {
            NumberUtils.createNumber("Strings must not be null");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Strings must not be null is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Number number0 = NumberUtils.createNumber("-2l");
        assertEquals((-2L), number0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        try {
            NumberUtils.createNumber("-;l");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // -;l is not a valid number.
            //
            verifyException("org.apache.commons.lang.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Number number0 = NumberUtils.createNumber("6L");
        assertEquals(6L, number0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Number number0 = NumberUtils.createNumber("6f");
        assertEquals(6.0F, number0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Number number0 = NumberUtils.createNumber("6d");
        assertEquals(6.0, number0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        try {
            NumberUtils.createNumber("FB_r3");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"FB_r3\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Number number0 = NumberUtils.createNumber("582e7");
        assertEquals(5.8200003E9F, number0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        long long0 = NumberUtils.minimum(26L, 26L, 26L);
        assertEquals(26L, long0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        long long0 = NumberUtils.minimum(120L, 0L, (-2641L));
        assertEquals((-2641L), long0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        int int0 = NumberUtils.minimum(60, 60, (-973));
        assertEquals((-973), int0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        int int0 = NumberUtils.minimum(120, 0, 120);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        long long0 = NumberUtils.maximum(0L, (-92L), (long) 120);
        assertEquals(120L, long0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        long long0 = NumberUtils.maximum(1L, 15L, 1L);
        assertEquals(15L, long0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        int int0 = NumberUtils.maximum((-844), (-844), 61);
        assertEquals(61, int0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        int int0 = NumberUtils.maximum((-844), 2, (-844));
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        int int0 = NumberUtils.compare((double) 2020.38F, (-1365.0356));
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        int int0 = NumberUtils.compare((-673.03172983605), 0.0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        int int0 = NumberUtils.compare(0.0, 0.0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        int int0 = NumberUtils.compare(3342.0808F, 467.64606F);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        int int0 = NumberUtils.compare(0.0F, 1687.88F);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        int int0 = NumberUtils.compare(2338.33F, 2338.33F);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0e+7");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("--");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("8e7.C5");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0x0e");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0x");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0x3hY{hBWXKd\"N:S1");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x0eC,7TVGd7");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0eC");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("...");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0Ee7");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("EF<");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("--`");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(" is not aSvalid number.");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0e");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("E");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("d");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("6f");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("F");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("6l");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("L");
        assertFalse(boolean0);
    }
}
