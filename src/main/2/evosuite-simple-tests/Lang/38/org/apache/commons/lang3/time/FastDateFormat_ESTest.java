/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:17:40 GMT 2024
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
        assertEquals(40, attributedCharacterIterator0.getRunLimit());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss1a z");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1, 3, 0, 1);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(40, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss1a z");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1, 3, 0, 1);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167381199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EZEE, MMMM%dDyyy h(m3:ss a z");
        String string0 = fastDateFormat0.format((-1L));
        assertEquals("Wed+0000Wed, December%3136569 11(593:59 PM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EZEE, MMMM%dDyyy h(m3:ss a z");
        String string0 = fastDateFormat0.format((-1L));
        assertEquals(55, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getPattern();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
        assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z");
        try {
            fastDateFormat0.parseObject("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Format.parseObject(String) failed
            //
            verifyException("java.text.Format", e);
        }
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        fastDateFormat0.getLocale();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
        assertEquals("d-MMM-yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(3);
        String string0 = fastDateFormat0.format((Object) long0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(3);
        String string0 = fastDateFormat0.format((Object) long0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(3);
        String string0 = fastDateFormat0.format((Object) long0);
        assertEquals("1/1/70 12:00 AM", string0);
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test1323() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-1800), (-1800), (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -1800
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1424() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getTimeZone();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getTimeZone();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1526() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test1627() throws Throwable {
        Locale locale0 = Locale.US;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance((-1349), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -1349
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1728() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("2/14/14 8:21 PM", string0);
    }

    @Test(timeout = 4000)
    public void test1729() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1830() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1931() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GQ%[`w^p(J l8H/jG", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("January 1, 1970 12:00:00 AM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test2032() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy/MM/dd");
        assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test2033() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy/MM/dd");
        String string0 = fastDateFormat0.format((long) 0);
        assertEquals("1970/01/01", string0);
    }

    @Test(timeout = 4000)
    public void test2034() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy/MM/dd");
        String string0 = fastDateFormat0.format((long) 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test2135() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null, locale0);
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test2236() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test2237() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test2338() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("0z%2A|d~4Z}s;%Av_PI", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2540() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("B[1<Uxr%L^ebvB\"VP-");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("FMCA");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2742() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("?G`Kcq&7SwA$U|Fl#");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2843() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("dd/MM/yy H.mm.ss");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test2944() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("`#?I_");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3045() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("8aJS7O");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3146() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("L,6Jt!p}i");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3247() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("9ZN6GiA.");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: N
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3348() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("@O5;Z^]");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: O
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3449() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("mPoBLE-Uh)s");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3550() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("akQWGUaN");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Q
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3651() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("!{ZZ>RO}DLcd<5C");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3752() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("W#wS-ib&");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3853() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Te");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3954() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Unknown class: ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4055() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("F)Vywo7xFt }Pe=v4");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4156() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("XUcWoBF_[;_vC4nX");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4257() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("h=]Y");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Y
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(")F&*sb3!VhT{c9");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: b
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("/7(+,./Se");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("fFEL");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4661() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("9yg64K.TKx C50me2)J");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4762() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("jjp]0P[$Kgj");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: jj
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4863() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("EEEE, MlMM d,#yyyy h:mm:ss a z");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4964() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("<null>");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5065() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5166() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("0z%2|d~p4Z}s;%?v_PI");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: p
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5267() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("qS");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5368() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("/r4J_7l]V(~:e~LLu]");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5469() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("tN+>T;wA?%[* Is<");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5570() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("u}");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: u
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5671() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("vL-1o!e:> B-");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5772() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("#;xYd84,");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: x
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5873() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("<:(D'");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test5974() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss 'o''clock' a z");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6075() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(date0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6076() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(date0);
        assertEquals(15, attributedCharacterIterator0.getRunLimit());
    }

    @Test(timeout = 4000)
    public void test6177() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.formatToCharacterIterator((Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6278() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z");
        // Undeclared exception!
        try {
            fastDateFormat0.formatToCharacterIterator("EEEE, MMMM d, yyyy h:mm:ss a z");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: java.lang.String
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6379() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Te");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("Friday, February 14, 2014 8:21:21 PM GMT+00:00", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test6380() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Te");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(46, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test6481() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss1a z");
        boolean boolean0 = fastDateFormat0.equals("EEEE, MMMM d, yyyy h:mm:ss1a z");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6482() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss1a z");
        boolean boolean0 = fastDateFormat0.equals("EEEE, MMMM d, yyyy h:mm:ss1a z");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6583() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 3);
        fastDateFormat1.equals(fastDateFormat0);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6584() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 3);
        fastDateFormat1.equals(fastDateFormat0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6585() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 3);
        fastDateFormat1.equals(fastDateFormat0);
        assertEquals(42, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6686() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6687() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6788() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EZEE, MMMM%d yyy h(mm:ss a z");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("EZEE, MMMM%d yyy h(mm:ss a z", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6889() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6890() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6991() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "+)Y]J-");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
        MockDate mockDate0 = new MockDate((-921), 0, 0, 2, 2, (-921));
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Tuesday, December 31, 0978 1:46:39 AM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test7092() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k");
        String string0 = fastDateFormat0.format((-1L));
        assertEquals("23", string0);
    }

    @Test(timeout = 4000)
    public void test7193() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k");
        String string0 = fastDateFormat0.format((long) 3);
        assertEquals("24", string0);
    }

    @Test(timeout = 4000)
    public void test7194() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k");
        String string0 = fastDateFormat0.format((long) 3);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test7295() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "Te", 1, 1, 1, 1, 1, 1, 1, 1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("January 1, 1970 1:00:00 AM GMT+01:00", string0);
    }

    @Test(timeout = 4000)
    public void test7396() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1610), "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField");
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EZEE, MMMM%d( yyyy h(mm:ss a z", (TimeZone) simpleTimeZone0, locale0);
        String string0 = fastDateFormat0.format((long) (-1610));
        assertEquals("Mi-0000Mi, Dezember%31( 1969 11(59:56 PM GMT+00:00", string0);
    }
}
