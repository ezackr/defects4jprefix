/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:36:46 GMT 2024
 */
package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Entities_ESTest extends Entities_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Entities entities0 = new Entities();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Entities entities0 = Entities.HTML40;
        String string0 = entities0.unescape("Nq@+@&lt;E{eZ&quot; A#&amp;`0'");
        assertEquals("Nq@+@<E{eZ\" A#&`0'", string0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Entities entities0 = Entities.HTML40;
        String string0 = entities0.escape("Nq@+@<E{eZ\" A#&`0'");
        assertEquals("Nq@+@&lt;E{eZ&quot; A#&amp;`0'", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Entities entities0 = Entities.XML;
        Entities.fillWithHtml40Entities(entities0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
        entities_BinaryEntityMap0.add("g!maf", 127);
        int int0 = entities_BinaryEntityMap0.value("g!maf");
        assertEquals(127, int0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
        entities_TreeEntityMap0.add("Nq@+@<E{eZ\" A#&`0'", 1833);
        int int0 = entities_TreeEntityMap0.value("Nq@+@<E{eZ\" A#&`0'");
        assertEquals(1833, int0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
        String string0 = entities_TreeEntityMap0.name(128);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Entities entities0 = Entities.HTML32;
        StringWriter stringWriter0 = new StringWriter();
        entities0.unescape((Writer) stringWriter0, "oLc(`&$;-v");
        assertEquals("oLc(`&$;-v", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
        int int0 = entities_TreeEntityMap0.value("Nq@+@<E{eZ\" A#&`0'");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Entities entities0 = Entities.HTML40;
        String string0 = entities0.HTML40.entityName(647);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Entities entities0 = Entities.XML;
        Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
        entities0.map = (Entities.EntityMap) entities_ArrayEntityMap0;
        Entities.fillWithHtml40Entities(entities0);
        StringWriter stringWriter0 = new StringWriter();
        entities0.escape((Writer) stringWriter0, "2#8Kn+&EM-!?L.");
        assertEquals("2#8Kn+&amp;EM-!?L.", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
        entities_ArrayEntityMap0.add("$8SNzBVYP9~.I$~", 247);
        int int0 = entities_ArrayEntityMap0.value("QGNI:>qN7Jhe)V");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(115);
        entities_BinaryEntityMap0.add((String) null, (-1773));
        entities_BinaryEntityMap0.add("org.apache.commons.lang.IntHashMap$Entry", 115);
        entities_BinaryEntityMap0.add("org.apache.commons.lang.IntHashMap$Entry", 115);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
        entities_BinaryEntityMap0.add("sigmaf", 127);
        String string0 = entities_BinaryEntityMap0.name(127);
        assertEquals("sigmaf", string0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
        String string0 = entities_BinaryEntityMap0.name(124);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Entities entities0 = Entities.HTML32;
        String string0 = entities0.unescape("+ SW AWAwllz>");
        assertEquals("+ SW AWAwllz>", string0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Entities entities0 = Entities.HTML32;
        StringWriter stringWriter0 = new StringWriter();
        entities0.HTML40.unescape((Writer) stringWriter0, "DDb\"N+yvh");
        assertEquals("DDb\"N+yvh", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Entities entities0 = Entities.HTML32;
        String string0 = entities0.unescape("1`>(R&!7;\"&v");
        assertEquals("1`>(R&!7;\"&v", string0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Entities entities0 = Entities.HTML32;
        String string0 = entities0.unescape("o&1NLg`&!;\"5-v");
        assertEquals("o&1NLg`&!;\"5-v", string0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Entities entities0 = Entities.HTML32;
        String string0 = entities0.unescape("o1N,g`&;\"5-v");
        assertEquals("o1N,g`&;\"5-v", string0);
    }
}
