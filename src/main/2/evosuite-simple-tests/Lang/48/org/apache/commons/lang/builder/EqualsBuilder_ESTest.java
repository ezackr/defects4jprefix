/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:56:07 GMT 2024
 */
package org.apache.commons.lang.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class EqualsBuilder_ESTest extends EqualsBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "allPemDomain", (Object) "T^S\"<<\"O6D36", (String[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (Collection) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (Collection) null);
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) '<', (Object) '<', false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Class<Integer> class0 = Integer.class;
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "org.apache.commons.lang.builder.EqualcBilder", (Object) "org.apache.commons.lang.builder.EqualcBilder", false, (Class) class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        int[] intArray0 = new int[0];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append((int[]) null, intArray0);
        EqualsBuilder equalsBuilder2 = equalsBuilder0.appendSuper(false);
        assertSame(equalsBuilder2, equalsBuilder1);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Object object0 = new Object();
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) null, object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "allPermDomain", (Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) "lW,Kv<");
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) "lW,Kv<");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Class<String> class0 = String.class;
        String[] stringArray0 = new String[0];
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "lM,W,<", (Object) "allPe0mDomain", false, (Class) class0, stringArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "value";
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "ANNOTATION", (Object) "`+x6L}O;LIvG", stringArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object object0 = new Object();
        boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder0, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object object0 = new Object();
        boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder0, true);
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        Object object0 = new Object();
        Class<Object> class0 = Object.class;
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) class0, object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object[] objectArray0 = new Object[0];
        equalsBuilder0.append(objectArray0, (Object[]) null);
        Integer integer0 = new Integer(2356);
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) equalsBuilder0, (Object) integer0);
        assertSame(equalsBuilder1, equalsBuilder0);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        equalsBuilder0.append((Object) null, (Object) "org.apache.commonsZlang.builder.ToStringSVJle$1");
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[6];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        equalsBuilder0.setEquals(false);
        equalsBuilder0.append((-1L), (-1L));
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) (byte) (-128);
        double[] doubleArray1 = new double[6];
        equalsBuilder0.append(doubleArray0, doubleArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        equalsBuilder0.append('F', '');
        equalsBuilder0.append(9, 9);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        float[] floatArray0 = new float[1];
        float[] floatArray1 = new float[1];
        floatArray1[0] = 1944.6F;
        equalsBuilder0.append(floatArray0, floatArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[1];
        short[] shortArray1 = new short[1];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        equalsBuilder0.append((-528.23839), 0.0);
        equalsBuilder0.append((short) (-1), (short) (-1));
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) 9, (short) 1);
        EqualsBuilder equalsBuilder2 = equalsBuilder1.append('-', '0');
        assertSame(equalsBuilder2, equalsBuilder0);
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "KS/8QvdUK]*f", (Object) "KS/8QvdUK]*m");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2332() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) 9, (short) 1);
        equalsBuilder1.append((byte) 112, (byte) 112);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2434() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2435() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = new byte[2];
        byteArray1[0] = (byte) 73;
        equalsBuilder0.append(byteArray0, byteArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2536() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(false);
        equalsBuilder1.append((-201.386), (-201.386));
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        int[] intArray0 = new int[1];
        equalsBuilder0.append(intArray0, (int[]) null);
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0.0F, (-1.0F));
        assertSame(equalsBuilder0, equalsBuilder1);
    }

    @Test(timeout = 4000)
    public void test2739() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean[] booleanArray0 = new boolean[8];
        boolean[] booleanArray1 = new boolean[8];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray1, booleanArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test2840() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object[] objectArray0 = new Object[0];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, (Object[]) null);
        EqualsBuilder equalsBuilder2 = equalsBuilder1.append(true, false);
        assertFalse(equalsBuilder2.isEquals());
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test2942() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean[] booleanArray0 = new boolean[8];
        booleanArray0[1] = true;
        boolean[] booleanArray1 = new boolean[8];
        equalsBuilder0.append(booleanArray1, booleanArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3043() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3044() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) equalsBuilder0;
        Object[] objectArray1 = new Object[2];
        equalsBuilder0.append(objectArray0, objectArray1);
        equalsBuilder0.append(objectArray0, objectArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3145() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object[] objectArray0 = new Object[5];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test3246() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3247() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object[] objectArray0 = new Object[1];
        equalsBuilder0.append((Object[]) null, objectArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3348() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3349() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object[] objectArray0 = new Object[1];
        Object[] objectArray1 = new Object[3];
        equalsBuilder0.append(objectArray0, objectArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3450() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        Object[] objectArray0 = new Object[2];
        Object[] objectArray1 = new Object[2];
        objectArray1[0] = (Object) 2222.0F;
        objectArray0[0] = (Object) 2222.0F;
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test3551() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3552() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        long[] longArray0 = new long[0];
        equalsBuilder0.append(longArray0, (long[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3653() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3654() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        int[] intArray0 = new int[1];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, (int[]) null);
        long[] longArray0 = new long[2];
        equalsBuilder1.append(longArray0, longArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3755() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append((long[]) null, (long[]) null);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test3856() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3857() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        long[] longArray0 = new long[3];
        equalsBuilder0.append((long[]) null, longArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test3958() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        long[] longArray0 = new long[1];
        long[] longArray1 = new long[1];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test4059() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4060() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        long[] longArray0 = new long[5];
        long[] longArray1 = new long[4];
        equalsBuilder0.append(longArray0, longArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4161() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4162() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        long[] longArray0 = new long[7];
        longArray0[3] = 5273L;
        long[] longArray1 = new long[7];
        equalsBuilder0.append(longArray0, longArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4263() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4264() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        equalsBuilder0.append('i', '~');
        int[] intArray0 = new int[2];
        equalsBuilder0.append(intArray0, intArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4365() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        int[] intArray0 = new int[0];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test4466() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        int[] intArray0 = new int[4];
        int[] intArray1 = new int[4];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test4567() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4568() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        int[] intArray0 = new int[1];
        int[] intArray1 = new int[2];
        equalsBuilder0.append(intArray0, intArray1);
        double[] doubleArray0 = new double[0];
        equalsBuilder0.append(doubleArray0, doubleArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4669() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4670() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        int[] intArray1 = new int[4];
        equalsBuilder0.append(intArray0, intArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4771() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4772() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[7];
        short[] shortArray1 = new short[8];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
        equalsBuilder1.append(shortArray1, shortArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4873() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[7];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test4974() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test4975() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[1];
        equalsBuilder0.append((short[]) null, shortArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5076() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5077() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[5];
        equalsBuilder0.append(shortArray0, (short[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5178() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5179() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[3];
        shortArray0[0] = (short) 36;
        short[] shortArray1 = new short[3];
        equalsBuilder0.append(shortArray0, shortArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5280() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5281() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[7];
        short[] shortArray1 = new short[8];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
        equalsBuilder1.append((char[]) null, (char[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5382() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append((char[]) null, (char[]) null);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test5483() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5484() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        char[] charArray0 = new char[0];
        equalsBuilder0.append((char[]) null, charArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5585() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5586() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        char[] charArray0 = new char[5];
        equalsBuilder0.append(charArray0, (char[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5687() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5688() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        short[] shortArray0 = new short[7];
        short[] shortArray1 = new short[8];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
        equalsBuilder1.append((byte[]) null, (byte[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5789() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        byte[] byteArray0 = new byte[14];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test5890() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5891() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        byte[] byteArray0 = new byte[4];
        equalsBuilder0.append((byte[]) null, byteArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5992() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test5993() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        byte[] byteArray0 = new byte[5];
        equalsBuilder0.append(byteArray0, (byte[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test6094() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test6095() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        byte[] byteArray0 = new byte[3];
        byte[] byteArray1 = new byte[0];
        equalsBuilder0.append(byteArray0, byteArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test6196() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = new byte[2];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test6297() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        double[] doubleArray0 = new double[6];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test6398() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test6399() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        double[] doubleArray0 = new double[1];
        equalsBuilder0.append((double[]) null, doubleArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test64100() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test64101() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        double[] doubleArray0 = new double[1];
        equalsBuilder0.append(doubleArray0, (double[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test65102() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test65103() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = new double[7];
        equalsBuilder0.append(doubleArray0, doubleArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test66104() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test66105() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        float[] floatArray0 = new float[1];
        equalsBuilder0.append(floatArray0, (float[]) null);
        equalsBuilder0.append(floatArray0, floatArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test67106() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        float[] floatArray0 = new float[7];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test68107() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test68108() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        float[] floatArray0 = new float[0];
        equalsBuilder0.append((float[]) null, floatArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test69109() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test69110() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        float[] floatArray0 = new float[1];
        float[] floatArray1 = new float[4];
        equalsBuilder0.append(floatArray0, floatArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test70111() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test70112() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        float[] floatArray0 = new float[3];
        float[] floatArray1 = new float[3];
        floatArray1[0] = (float) (short) (-1);
        equalsBuilder0.append(floatArray0, floatArray1);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test71113() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test71114() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, true);
        boolean[] booleanArray0 = new boolean[0];
        equalsBuilder1.append(booleanArray0, booleanArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test72115() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean[] booleanArray0 = new boolean[1];
        EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
        assertTrue(equalsBuilder1.isEquals());
    }

    @Test(timeout = 4000)
    public void test73116() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test73117() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean[] booleanArray0 = new boolean[0];
        equalsBuilder0.append((boolean[]) null, booleanArray0);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test74118() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test74119() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean[] booleanArray0 = new boolean[1];
        equalsBuilder0.append(booleanArray0, (boolean[]) null);
        assertFalse(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test75120() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        assertTrue(equalsBuilder0.isEquals());
    }

    @Test(timeout = 4000)
    public void test75121() throws Throwable {
        EqualsBuilder equalsBuilder0 = new EqualsBuilder();
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = new boolean[4];
        equalsBuilder0.append(booleanArray0, booleanArray1);
        assertFalse(equalsBuilder0.isEquals());
    }
}
