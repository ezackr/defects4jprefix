/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 12:31:33 GMT 2024
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "MMM d, yyyy", 1, 2, 2, 3, 2, 1, 0, 0, 1);
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("12:00:00 AM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 1, 3, 0, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(42, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 1, 3, 0, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("Wednesday, February 1, 0002 3:00:00 AM GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
        assertEquals(15, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("HA(9i:v<0;=[m3PeJLN");
        Locale locale0 = new Locale("HA(9i:v<0;=[m3PeJLN");
        FastDateFormat.getInstance("HA(9i:v<0;=[m3PeJLN", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.getPattern();
        assertEquals("M/d/yy h:mm a", string0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance((-2130), timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -2130
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        try {
            fastDateFormat0.parseObject("MMMM d, yyyy h:mm a");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Format.parseObject(String) failed
            //
            verifyException("java.text.Format", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3);
        assertEquals("h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        String string0 = fastDateFormat0.format((long) 3);
        assertEquals("01/01/70", string0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(21, int0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3051, 1, 3, 0, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("Sunday, April 1, 0255", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3051, 1, 3, 0, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-1958), (-1958), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -1958
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getTimeZone();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals("M/d/yy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-1386), (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -1386
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("2/14/14 8:21 PM", string0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1405), "[Z(y=KG");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[Z(y=KG", (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) (-1405));
        assertEquals("[-0000(69=11AD", string0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(3);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(15, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        FastDateFormat.getInstance("]ZZzASg%,:yjb:B3P");
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        FastDateFormat.getInstance("%+#mW<^aBks");
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        FastDateFormat.getInstance("C`J>#[|NkNI|?WZwiN");
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        FastDateFormat.getInstance("`$DkVE^A0dy'_A;7c");
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        FastDateFormat.getInstance("-EE1x4}U%:l>LEazq[{");
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        FastDateFormat.getInstance("FastDateFormat[");
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        FastDateFormat.getInstance("GbO5@ c$Xu");
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        FastDateFormat.getInstance("Illegal pattern component: ");
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        FastDateFormat.getInstance("}J:U/']%");
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        FastDateFormat.getInstance("/L`F]]ql$S8>;GJMQ(");
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        FastDateFormat.getInstance("No date tixe pattrn fo6 local3 ");
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        FastDateFormat.getInstance("MMM d, yyyy h:Om:ss a");
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        FastDateFormat.getInstance("Z:P[Q");
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        FastDateFormat.getInstance("?5SQ%V~9'[^?");
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        FastDateFormat.getInstance("Rv/K`JUJO5)q");
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        FastDateFormat.getInstance("The validated collection contaiKs null element at >ndex: %d", (TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        FastDateFormat.getInstance("U\u0007 /E1XlQ.*=&{O");
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        FastDateFormat.getInstance("X");
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        FastDateFormat.getInstance("YC=t'IT!:4qU]");
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        FastDateFormat.getInstance("cI(%Gno~!%8l!O'=(@");
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        FastDateFormat.getInstance("whe validated array index is invalid: %d");
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        FastDateFormat.getInstance("#fbp~3DZrPI-BR]");
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        FastDateFormat.getInstance("gKuU[\u0000IVo/=(]EOR");
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        FastDateFormat.getInstance("i5Xcxbyz{");
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        FastDateFormat.getInstance("jvKUKcABjq");
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        FastDateFormat.getInstance("6|l9+SLk>G*hc{OVC6F");
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        FastDateFormat.getInstance("nTzLDl|DCtDwM");
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$1");
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        FastDateFormat.getInstance("p6.0{WmH['M\"ul");
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        FastDateFormat.getInstance("2`7q?ucU2:");
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        FastDateFormat.getInstance("M1r\"");
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        FastDateFormat.getInstance("uT");
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        FastDateFormat.getInstance("svN?!");
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("*");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("*", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
        assertEquals("2/14/14 8:21 PM", string0);
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) fastDateFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: org.apache.commons.lang3.time.FastDateFormat
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5860() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
            //
            verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5961() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(":P[Q");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5962() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(":P[Q");
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test6063() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6065() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(32, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "v5B-jGcu%VNC'['jqfv");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, (TimeZone) simpleTimeZone0);
        fastDateFormat1.equals(fastDateFormat0);
        assertEquals(38, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6167() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "v5B-jGcu%VNC'['jqfv");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, (TimeZone) simpleTimeZone0);
        fastDateFormat1.equals(fastDateFormat0);
        assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test6268() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test6269() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6370() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Dyd><^");
        String string0 = fastDateFormat0.format((-11L));
        assertEquals("3656931><^", string0);
    }

    @Test(timeout = 4000)
    public void test6471() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((-5696L));
        assertEquals("12/31/69 11:59 PM", string0);
    }

    @Test(timeout = 4000)
    public void test6572() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        String string0 = fastDateFormat0.format((long) 0);
        assertEquals("Thursday, January 1, 1970 12:00:00 AM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test6673() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[Z(H/kG");
        String string0 = fastDateFormat0.format((-2546L));
        assertEquals("[+0000(23/23AD", string0);
    }

    @Test(timeout = 4000)
    public void test6774() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[Z(H/kG");
        String string0 = fastDateFormat0.format((long) 2);
        assertEquals("[+0000(0/24AD", string0);
    }

    @Test(timeout = 4000)
    public void test6875() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "n~M", 3, 1, 0, 0, 0, 0, 2, 2, 0, 2, 1);
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        String string0 = fastDateFormat0.format((long) 2);
        assertEquals("00:00 Uhr GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test6976() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("ZZ(y=K");
        String string0 = fastDateFormat0.format((long) 0);
        assertEquals("+00:00(70=0", string0);
    }

    @Test(timeout = 4000)
    public void test7077() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 111, locale0);
    }
}
