/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:23:00 GMT 2024
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("{$>Z.)q<S)+dVh");
        String[] stringArray1 = new String[8];
        // Undeclared exception!
        try {
            StringUtils.replaceEachRepeatedly(",x1(g40~/", stringArray0, stringArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Search and Replace array lengths don't match: 1 vs 8
            //
            verifyException("org.apache.commons.lang3.StringUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        StringUtils stringUtils0 = new StringUtils();
        assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        String string0 = StringUtils.replaceEach("compat co", (String[]) null, (String[]) null);
        assertEquals("compat co", string0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        String string0 = StringUtils.abbreviate("{}", 65);
        assertEquals("{}", string0);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        String string0 = StringUtils.abbreviate("{}", 65);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparator("", "[]", 4);
        assertEquals(0, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparator("", "[]", 4);
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        String string0 = StringUtils.center("%$|B", 0);
        assertEquals("%$|B", string0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        String[] stringArray0 = StringUtils.split(" is less than 0:");
        assertEquals(4, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        String[] stringArray0 = StringUtils.split(" is less than 0:");
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test00710() throws Throwable {
        String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@.q1|*9tVd*D");
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test00711() throws Throwable {
        String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@.q1|*9tVd*D");
        assertEquals(10, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test00812() throws Throwable {
        String string0 = StringUtils.replaceOnce("L'QjF|&", "()clj!&K'2igR$^", "");
        assertEquals("L'QjF|&", string0);
    }

    @Test(timeout = 4000)
    public void test00913() throws Throwable {
        String string0 = StringUtils.leftPad("]H(%=&g", 4408);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test01014() throws Throwable {
        String string0 = StringUtils.strip("%$|B");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test01015() throws Throwable {
        String string0 = StringUtils.strip("%$|B");
        assertEquals("%$|B", string0);
    }

    @Test(timeout = 4000)
    public void test01116() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" m", "");
        assertEquals(2, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test01117() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" m", "");
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test01218() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("compat co", "1.3", 13);
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test01219() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("compat co", "1.3", 13);
        assertEquals(1, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test01320() throws Throwable {
        String[] stringArray0 = new String[4];
        boolean boolean0 = StringUtils.startsWithAny("TimeToLive of ", stringArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01421() throws Throwable {
        String[] stringArray0 = new String[0];
        String[] stringArray1 = StringUtils.stripAll(stringArray0);
        assertSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test01522() throws Throwable {
        boolean boolean0 = StringUtils.startsWithIgnoreCase(":/<9n>N'=", (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01623() throws Throwable {
        String string0 = StringUtils.substringBetween("", (String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test01724() throws Throwable {
        String string0 = StringUtils.rightPad("cv13;0hu5", (-3062));
        String string1 = StringUtils.replace(string0, "{$>Z.)q<S)+dVh", "b2l!{p:&-nBFd");
        assertEquals("cv13;0hu5", string1);
    }

    @Test(timeout = 4000)
    public void test01725() throws Throwable {
        String string0 = StringUtils.rightPad("cv13;0hu5", (-3062));
        String string1 = StringUtils.replace(string0, "{$>Z.)q<S)+dVh", "b2l!{p:&-nBFd");
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test01826() throws Throwable {
        String[] stringArray0 = StringUtils.split("y`y D*X>GS{t", "nosuchmethodexception occurred during 1.6 ba:/<9n>n'=code");
        // Undeclared exception!
        try {
            StringUtils.replaceEachRepeatedly("y`y D*X>GS{t", stringArray0, stringArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // TimeToLive of -1 is less than 0: y`y D*X>GS{t
            //
            verifyException("org.apache.commons.lang3.StringUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01927() throws Throwable {
        String string0 = StringUtils.chomp((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test02028() throws Throwable {
        String string0 = StringUtils.substringBeforeLast("", " is less than 0:");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test02129() throws Throwable {
        boolean boolean0 = StringUtils.isNotEmpty("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02230() throws Throwable {
        boolean boolean0 = StringUtils.isNotEmpty("TQ");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02331() throws Throwable {
        boolean boolean0 = StringUtils.isNotBlank("%$|B");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02432() throws Throwable {
        boolean boolean0 = StringUtils.isBlank("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02533() throws Throwable {
        boolean boolean0 = StringUtils.isBlank(" }j0A");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02634() throws Throwable {
        boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02735() throws Throwable {
        String string0 = StringUtils.trimToNull("");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test02836() throws Throwable {
        String string0 = StringUtils.trim((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test02937() throws Throwable {
        String string0 = StringUtils.trimToNull("%$|B");
        assertEquals("%$|B", string0);
    }

    @Test(timeout = 4000)
    public void test02938() throws Throwable {
        String string0 = StringUtils.trimToNull("%$|B");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03039() throws Throwable {
        String string0 = StringUtils.trimToEmpty("%$|B");
        assertEquals("%$|B", string0);
    }

    @Test(timeout = 4000)
    public void test03140() throws Throwable {
        String string0 = StringUtils.trimToEmpty((String) null);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test03241() throws Throwable {
        String string0 = StringUtils.stripToNull("normalize");
        assertEquals("normalize", string0);
    }

    @Test(timeout = 4000)
    public void test03242() throws Throwable {
        String string0 = StringUtils.stripToNull("normalize");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03343() throws Throwable {
        String string0 = StringUtils.stripToNull((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test03444() throws Throwable {
        String string0 = StringUtils.stripToNull("");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test03545() throws Throwable {
        String string0 = StringUtils.stripToEmpty("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test03646() throws Throwable {
        String string0 = StringUtils.stripToEmpty((String) null);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test03747() throws Throwable {
        String string0 = StringUtils.stripStart((String) null, "zbr>s'>'d%$|b");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test03848() throws Throwable {
        String string0 = StringUtils.stripStart("", "normalize");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test03949() throws Throwable {
        String string0 = StringUtils.stripStart("'up?LQlEl> \"-", "+wkx1t{oc");
        assertEquals("'up?LQlEl> \"-", string0);
    }

    @Test(timeout = 4000)
    public void test04050() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = " is less than 0: ";
        String[] stringArray1 = StringUtils.stripAll(stringArray0);
        assertEquals(4, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test04051() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = " is less than 0: ";
        String[] stringArray1 = StringUtils.stripAll(stringArray0);
        assertNotSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        String string0 = StringUtils.stripStart("SecurityException occurred during 1.6 backcompat code", "");
        assertEquals("SecurityException occurred during 1.6 backcompat code", string0);
    }

    @Test(timeout = 4000)
    public void test04253() throws Throwable {
        String string0 = StringUtils.stripEnd((String) null, "{$>Z.)q<S)+dVh");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test04354() throws Throwable {
        String string0 = StringUtils.strip("%J|B", "%J|B");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test04455() throws Throwable {
        String string0 = StringUtils.stripEnd("LNFm7E%BIjN", "");
        assertEquals("LNFm7E%BIjN", string0);
    }

    @Test(timeout = 4000)
    public void test04556() throws Throwable {
        String string0 = StringUtils.stripEnd("r'~oo)k +", "Z");
        assertEquals("r'~oo)k +", string0);
    }

    @Test(timeout = 4000)
    public void test04657() throws Throwable {
        String string0 = StringUtils.stripEnd("^msRO@8o==iHs", "^msRO@8o==iHs");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test04758() throws Throwable {
        String[] stringArray0 = StringUtils.stripAll((String[]) null);
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test04859() throws Throwable {
        String string0 = StringUtils.stripAccents(" is not in the range '0' - '9'");
        assertEquals(" is not in the range '0' - '9'", string0);
    }

    @Test(timeout = 4000)
    public void test04860() throws Throwable {
        String string0 = StringUtils.stripAccents(" is not in the range '0' - '9'");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test04961() throws Throwable {
        String string0 = StringUtils.stripAccents((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test05062() throws Throwable {
        boolean boolean0 = StringUtils.equals("%$|B", "33mXP_Tz'}avlQ|*j<");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05163() throws Throwable {
        boolean boolean0 = StringUtils.equals((String) null, "]H(%=&g");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05264() throws Throwable {
        boolean boolean0 = StringUtils.equals((String) null, (String) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05365() throws Throwable {
        boolean boolean0 = StringUtils.equalsIgnoreCase("", "TQ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05466() throws Throwable {
        boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "`jwlwb'");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05567() throws Throwable {
        boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05668() throws Throwable {
        int int0 = StringUtils.indexOf("%$|B        ", 'u');
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test05769() throws Throwable {
        int int0 = StringUtils.indexOf((String) null, 'S');
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test05870() throws Throwable {
        int int0 = StringUtils.indexOf("X", 'O', (-761));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test05971() throws Throwable {
        int int0 = StringUtils.indexOf((String) null, '6', (-1443));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06072() throws Throwable {
        String[] stringArray0 = new String[3];
        String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
        int int0 = StringUtils.indexOf(string0, string0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06173() throws Throwable {
        int int0 = StringUtils.indexOf("@C", "InvocationTargetException occurred during 1.6 backcompat code");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06274() throws Throwable {
        int int0 = StringUtils.indexOf("0", (String) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06375() throws Throwable {
        int int0 = StringUtils.ordinalIndexOf((String) null, "L,{tGJu/upi5>", 4408);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06476() throws Throwable {
        int int0 = StringUtils.ordinalIndexOf("The Character must not be null", (String) null, 5);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06577() throws Throwable {
        int int0 = StringUtils.ordinalIndexOf(";", ";", 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06678() throws Throwable {
        int int0 = StringUtils.ordinalIndexOf("]H(%=&g", "", 7);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test06779() throws Throwable {
        int int0 = StringUtils.ordinalIndexOf(";", ";", 12);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06880() throws Throwable {
        int int0 = StringUtils.indexOf((String) null, "Mac OS X", 3499);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test06981() throws Throwable {
        int int0 = StringUtils.indexOf("e~bUBA;gw HSy", "u{f4#3*", 147);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07082() throws Throwable {
        int int0 = StringUtils.indexOf("w|cN^aF", (String) null, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07183() throws Throwable {
        int int0 = StringUtils.indexOf("Minimum abbreviation width is 4", "", 1047);
        assertEquals(31, int0);
    }

    @Test(timeout = 4000)
    public void test07284() throws Throwable {
        int int0 = StringUtils.indexOf("", "", (-1));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07385() throws Throwable {
        int int0 = StringUtils.lastIndexOf("vu", 'a');
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07486() throws Throwable {
        int int0 = StringUtils.lastIndexOf("", '!');
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07587() throws Throwable {
        int int0 = StringUtils.lastIndexOf("pb", '{', (-195));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07688() throws Throwable {
        int int0 = StringUtils.lastIndexOf("", 'u', 3499);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07789() throws Throwable {
        int int0 = StringUtils.lastIndexOf((String) null, (String) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test07890() throws Throwable {
        int int0 = StringUtils.lastIndexOf("java.vm.version", "java.vm.version");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07991() throws Throwable {
        int int0 = StringUtils.lastIndexOf("java.awt.headless", (String) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test08092() throws Throwable {
        int int0 = StringUtils.lastIndexOf((String) null, "", (-2141));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test08193() throws Throwable {
        int int0 = StringUtils.lastIndexOf(" is less than 0: ", " is less than 0: ", 23);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08294() throws Throwable {
        int int0 = StringUtils.lastIndexOf("63Sx^1`=owlB/", (String) null, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test08395() throws Throwable {
        boolean boolean0 = StringUtils.contains(" vs ", 'X');
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08496() throws Throwable {
        boolean boolean0 = StringUtils.contains((String) null, 'Z');
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08597() throws Throwable {
        boolean boolean0 = StringUtils.contains("'; the SystemUtils property value will default to null.", '.');
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08698() throws Throwable {
        boolean boolean0 = StringUtils.contains((String) null, (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08799() throws Throwable {
        boolean boolean0 = StringUtils.contains(".<m \"L=M'_G^LMkMq", "ct;Lq\"%YoWv<");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088100() throws Throwable {
        boolean boolean0 = StringUtils.contains("ClassNotFoundException occurred during 1.6 backcompat code", (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test089101() throws Throwable {
        boolean boolean0 = StringUtils.contains(".<m \"L=M'_G^LMkMq", ".<m \"L=M'_G^LMkMq");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test090102() throws Throwable {
        boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test091103() throws Throwable {
        boolean boolean0 = StringUtils.containsIgnoreCase("InvocationTargetException occurred during 1.6 backcompat code", (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test092104() throws Throwable {
        boolean boolean0 = StringUtils.containsIgnoreCase("The Character must not be null", "tZN5$viX");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test093105() throws Throwable {
        boolean boolean0 = StringUtils.containsIgnoreCase("cw", "cw");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test094106() throws Throwable {
        char[] charArray0 = new char[1];
        int int0 = StringUtils.indexOfAny("", charArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test095107() throws Throwable {
        char[] charArray0 = new char[1];
        int int0 = StringUtils.indexOfAny("}", charArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test096108() throws Throwable {
        int int0 = StringUtils.indexOfAny("%$|B", (char[]) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test097109() throws Throwable {
        int int0 = StringUtils.indexOfAny("p<", "[5)qRp");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test098110() throws Throwable {
        int int0 = StringUtils.indexOfAny("", "");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test099111() throws Throwable {
        int int0 = StringUtils.indexOfAny("\u610F\u5927\u5229", "");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test100112() throws Throwable {
        boolean boolean0 = StringUtils.containsAny((String) null, "ht;-30Jn\"ULFs");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test101113() throws Throwable {
        boolean boolean0 = StringUtils.containsAny("%$|B", "java.text.Normalizer$Form");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test102114() throws Throwable {
        boolean boolean0 = StringUtils.containsAny("", "xsE\"-k5]");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test103115() throws Throwable {
        boolean boolean0 = StringUtils.containsAny("`Jc", (char[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test104116() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = StringUtils.containsAny("invocationtargetexception occurred djava.specification.namede", charArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test105117() throws Throwable {
        boolean boolean0 = StringUtils.containsAny("{$>Z.)q<S)+dVh", "U");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test106118() throws Throwable {
        boolean boolean0 = StringUtils.containsAny("9z\t", (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107119() throws Throwable {
        char[] charArray0 = new char[7];
        int int0 = StringUtils.indexOfAnyBut("", charArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test108120() throws Throwable {
        boolean boolean0 = StringUtils.containsOnly("{$>Z.)q<S)+dVh", "`V");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109121() throws Throwable {
        char[] charArray0 = new char[0];
        int int0 = StringUtils.indexOfAnyBut("b-_\"1d%.Rtr", charArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test110122() throws Throwable {
        boolean boolean0 = StringUtils.containsOnly("`jwlwb'", "`jwlwb'");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test111123() throws Throwable {
        int int0 = StringUtils.indexOfAnyBut("", "Strings must not be null");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test112124() throws Throwable {
        int int0 = StringUtils.indexOfAnyBut("%", "Search and Replace array lengths don't match: ");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test113125() throws Throwable {
        int int0 = StringUtils.indexOfAnyBut("63Sx^1`=owlB/", (String) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test114126() throws Throwable {
        int int0 = StringUtils.indexOfAnyBut("ctZ;Lq\"1%YoWv<", "ctZ;Lq\"1%YoWv<");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test115127() throws Throwable {
        boolean boolean0 = StringUtils.containsOnly("`jwlwb'", (char[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test116128() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117129() throws Throwable {
        boolean boolean0 = StringUtils.containsOnly("", "TQ");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test118130() throws Throwable {
        boolean boolean0 = StringUtils.containsOnly("<#:dDUu,6NoSuchMethodException occurred during 1.6 backcompat code<#:dDUu,6NoSuchMethodException occurred during 1.6 backcompat code<#:dDUu,6NoSuchMethodException occurred during 1.6 backcompat code<#:dDUu,6NoSuchMethodException occurred during 1.6 backcompat code<#:dDUu,6NoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat code", "");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119131() throws Throwable {
        boolean boolean0 = StringUtils.containsOnly((String) null, (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120132() throws Throwable {
        boolean boolean0 = StringUtils.containsOnly("acb&:`h*!PprP7yj", (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test121133() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test122134() throws Throwable {
        char[] charArray0 = new char[4];
        boolean boolean0 = StringUtils.containsNone("Ow},Oa1-&5&P<C5~K", charArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test123135() throws Throwable {
        boolean boolean0 = StringUtils.containsNone("ompat csde", (char[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test124136() throws Throwable {
        boolean boolean0 = StringUtils.containsNone("]~OXQ4aN/ZM#Cei5<", "]~OXQ4aN/ZM#Cei5<");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125137() throws Throwable {
        boolean boolean0 = StringUtils.containsNone((String) null, "zGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGrzGr");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test126138() throws Throwable {
        boolean boolean0 = StringUtils.containsNone("java.home", (String) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test127139() throws Throwable {
        String[] stringArray0 = new String[0];
        int int0 = StringUtils.indexOfAny((String) null, stringArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test128140() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("}");
        int int0 = StringUtils.indexOfAny(":fP", stringArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test128141() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("}");
        int int0 = StringUtils.indexOfAny(":fP", stringArray0);
        assertEquals(1, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test129142() throws Throwable {
        int int0 = StringUtils.indexOfAny("Windows 9", (String[]) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test130143() throws Throwable {
        String[] stringArray0 = new String[5];
        int int0 = StringUtils.indexOfAny("{S/hv*F7", stringArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test131144() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[0] = "{S/hv*F7";
        stringArray0[1] = "{S/hv*F7";
        int int0 = StringUtils.indexOfAny("{S/hv*F7", stringArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test132145() throws Throwable {
        String[] stringArray0 = new String[2];
        int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test133146() throws Throwable {
        String[] stringArray0 = new String[1];
        int int0 = StringUtils.lastIndexOfAny("ClassNotFoundException occurred during 1.6 backcompat code", stringArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test134147() throws Throwable {
        int int0 = StringUtils.lastIndexOfAny("\"hvkLo1Gu@F/3z&", (String[]) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test135148() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code");
        int int0 = StringUtils.lastIndexOfAny("NoSuchMethodException occurred during 1.6 backcompat code", stringArray0);
        assertEquals(58, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test135149() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code");
        int int0 = StringUtils.lastIndexOfAny("NoSuchMethodException occurred during 1.6 backcompat code", stringArray0);
        assertEquals(57, int0);
    }

    @Test(timeout = 4000)
    public void test136150() throws Throwable {
        String string0 = StringUtils.substring((String) null, 11);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test137151() throws Throwable {
        String string0 = StringUtils.substring("", (-2000));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test138152() throws Throwable {
        String string0 = StringUtils.substring("ackcompat", (-3662), (-3662));
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test138153() throws Throwable {
        String string0 = StringUtils.substring("ackcompat", (-3662), (-3662));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test139154() throws Throwable {
        String string0 = StringUtils.substring((String) null, 1, 2543);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test140155() throws Throwable {
        String string0 = StringUtils.substring("", 36, 36);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test141156() throws Throwable {
        String string0 = StringUtils.substring("v?*@ihi(m[ye1d", 9, 1564);
        assertEquals("[ye1d", string0);
    }

    @Test(timeout = 4000)
    public void test142157() throws Throwable {
        String string0 = StringUtils.left("java.vm.version", 29);
        assertEquals("java.vm.version", string0);
    }

    @Test(timeout = 4000)
    public void test142158() throws Throwable {
        String string0 = StringUtils.left("java.vm.version", 29);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test143159() throws Throwable {
        String string0 = StringUtils.left((String) null, 3);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test144160() throws Throwable {
        String string0 = StringUtils.left("pC<^)W&*{lVs1=", (-1));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test145161() throws Throwable {
        String string0 = StringUtils.left("NoSuchMethodExceLtion occurred during 1.6 backcompat csde", 2);
        assertEquals("No", string0);
    }

    @Test(timeout = 4000)
    public void test146162() throws Throwable {
        String string0 = StringUtils.right("[~0}", (-2141));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test147163() throws Throwable {
        String string0 = StringUtils.right((String) null, 1691);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test148164() throws Throwable {
        String string0 = StringUtils.right("i)", 16);
        assertEquals("i)", string0);
    }

    @Test(timeout = 4000)
    public void test149165() throws Throwable {
        String string0 = StringUtils.right("^h~6'to.vpa<{zhhpp", 1);
        assertEquals("p", string0);
    }

    @Test(timeout = 4000)
    public void test150166() throws Throwable {
        String string0 = StringUtils.mid("++<oZ[o", 1244, 1244);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test151167() throws Throwable {
        String string0 = StringUtils.mid((String) null, (-51), (-51));
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test152168() throws Throwable {
        String string0 = StringUtils.mid("`V", 5, (-51));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test153169() throws Throwable {
        String string0 = StringUtils.mid("", (-1991), 2314);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test154170() throws Throwable {
        String string0 = StringUtils.mid(",x1(g40~/", 1, 1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test154171() throws Throwable {
        String string0 = StringUtils.mid(",x1(g40~/", 1, 1);
        assertEquals("x", string0);
    }

    @Test(timeout = 4000)
    public void test155172() throws Throwable {
        String string0 = StringUtils.substringBefore((String) null, (String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test156173() throws Throwable {
        String string0 = StringUtils.substringBefore("2Ra_7~`N", "++<oZ[o");
        assertEquals("2Ra_7~`N", string0);
    }

    @Test(timeout = 4000)
    public void test157174() throws Throwable {
        String string0 = StringUtils.substringBefore("mO6BNAdzM[", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test157175() throws Throwable {
        String string0 = StringUtils.substringBefore("mO6BNAdzM[", (String) null);
        assertEquals("mO6BNAdzM[", string0);
    }

    @Test(timeout = 4000)
    public void test158176() throws Throwable {
        String string0 = StringUtils.substringBefore("@QG|K@{\"", "");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test159177() throws Throwable {
        String string0 = StringUtils.substringBefore("%$|B", "%$|B");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test160178() throws Throwable {
        String string0 = StringUtils.substringAfter("2Ra_7~`N", "++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o++<oZ[o");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test161179() throws Throwable {
        String string0 = StringUtils.substringAfter((String) null, "");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test162180() throws Throwable {
        String string0 = StringUtils.substringAfter("NFD", (String) null);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test163181() throws Throwable {
        String string0 = StringUtils.substringAfter("q1H8|SwM*", "");
        assertEquals("q1H8|SwM*", string0);
    }

    @Test(timeout = 4000)
    public void test164182() throws Throwable {
        String string0 = StringUtils.substringBeforeLast("{$>Z.)q<S)+dVh", "{$>Z.)q<S)+dVh");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test165183() throws Throwable {
        String string0 = StringUtils.substringBeforeLast("]H(%=&g", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test165184() throws Throwable {
        String string0 = StringUtils.substringBeforeLast("]H(%=&g", (String) null);
        assertEquals("]H(%=&g", string0);
    }

    @Test(timeout = 4000)
    public void test166185() throws Throwable {
        String string0 = StringUtils.substringBeforeLast("pL^G6*+nyt[Ci+m<Fb", "s-<[AeD:ouk08f F");
        assertEquals("pL^G6*+nyt[Ci+m<Fb", string0);
    }

    @Test(timeout = 4000)
    public void test167186() throws Throwable {
        String string0 = StringUtils.trim("VI #L[{_-7ew");
        assertEquals("VI #L[{_-7ew", string0);
    }

    @Test(timeout = 4000)
    public void test167187() throws Throwable {
        String string0 = StringUtils.trim("VI #L[{_-7ew");
        String string1 = StringUtils.substringAfterLast(string0, "IfnhL75B*$/{/VIhtQ>=");
        assertEquals("", string1);
    }

    @Test(timeout = 4000)
    public void test168188() throws Throwable {
        String string0 = StringUtils.substringAfterLast((String) null, "java.text.Normalizer");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test169189() throws Throwable {
        String string0 = StringUtils.substringAfterLast(">ZE#\"3", (String) null);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test170190() throws Throwable {
        String string0 = StringUtils.overlay("IfnhL75B*$/{/VIhtQ>", "=K", 2305, 2045);
        String string1 = StringUtils.substringAfterLast(string0, "IfnhL75B*$/{/VIhtQ>=");
        assertEquals("K", string1);
    }

    @Test(timeout = 4000)
    public void test171191() throws Throwable {
        String string0 = StringUtils.substringAfterLast("AFU", "AFU");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test172192() throws Throwable {
        String string0 = StringUtils.substringBetween((String) null, "TQ");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test173193() throws Throwable {
        String string0 = StringUtils.substringBetween("% {)dd)hfg}:", "H!Tbt<", "% {)dd)hfg}:");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test174194() throws Throwable {
        String string0 = StringUtils.substringBetween("<5K9 JI#$p~>\":AG,w", "TimeToLive of ", (String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test175195() throws Throwable {
        String string0 = StringUtils.substringBetween("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", "NoSuchMethodExceLtion occurred during 1.6 backcompat csde");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test176196() throws Throwable {
        String string0 = StringUtils.substringBetween("g 1.6 bac", "");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test176197() throws Throwable {
        String string0 = StringUtils.substringBetween("g 1.6 bac", "");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test177198() throws Throwable {
        String[] stringArray0 = StringUtils.substringsBetween((String) null, "SNSC", "ctZ;Lq\"1%YoWv<");
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test178199() throws Throwable {
        String[] stringArray0 = StringUtils.substringsBetween("ns.lang3.systemutils", "cw", "V%#xq1N1(5/)_h");
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test179200() throws Throwable {
        String[] stringArray0 = StringUtils.substringsBetween("|)!H0efu2'Cv&=ye|y&", "", "ufv");
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test180201() throws Throwable {
        String[] stringArray0 = StringUtils.substringsBetween("", "^msRO@8o==iHs", "");
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test181202() throws Throwable {
        String[] stringArray0 = StringUtils.substringsBetween("", "normalize", "]H(%=&g");
        assertEquals(0, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test182203() throws Throwable {
        String[] stringArray0 = StringUtils.substringsBetween("B", "cw", "Strings must not be null");
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test183204() throws Throwable {
        String[] stringArray0 = StringUtils.substringsBetween("{$>Z.)q<S)+dVh", "{$>Z.)q<S)+dVh", "`V");
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test184205() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test185206() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("u%$|B", "%$|B");
        assertEquals(2, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test186207() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("]H(%=&g", "]H(%=&g");
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals(2, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test186208() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("]H(%=&g", "]H(%=&g");
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test187209() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'm');
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test188210() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("S#0A%1_Cz7 UM{@#?4f5", '5');
        assertEquals(2, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test189211() throws Throwable {
        String string0 = StringUtils.reverseDelimited("pCV13;0hu5", 'p');
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test189212() throws Throwable {
        String string0 = StringUtils.reverseDelimited("pCV13;0hu5", 'p');
        assertEquals("CV13;0hu5", string0);
    }

    @Test(timeout = 4000)
    public void test190213() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, " Wa}p\"T}1:'9;B;!wc");
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test191214() throws Throwable {
        String[] stringArray0 = StringUtils.split("");
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test191215() throws Throwable {
        String[] stringArray0 = StringUtils.split("");
        boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test192216() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("w:[2zrBD", "B");
        assertEquals(2, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test193217() throws Throwable {
        String[] stringArray0 = StringUtils.split("}", "}");
        assertEquals(0, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test194218() throws Throwable {
        String[] stringArray0 = StringUtils.split("TimeToLive of ", "p{InCombiningDiacriticalMarks}+", 879);
        assertEquals(5, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test195219() throws Throwable {
        String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test196220() throws Throwable {
        String[] stringArray0 = StringUtils.splitByCharacterType("");
        assertEquals(0, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test197221() throws Throwable {
        String string0 = StringUtils.join((Object[]) null, '%');
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test198222() throws Throwable {
        String string0 = StringUtils.join((Object[]) null, 'u', (-1), (-2315));
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test199223() throws Throwable {
        String string0 = StringUtils.reverseDelimited("", 'p');
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test200224() throws Throwable {
        String[] stringArray0 = new String[4];
        String string0 = StringUtils.join((Object[]) stringArray0, 'X', 0, 4);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test200225() throws Throwable {
        String[] stringArray0 = new String[4];
        String string0 = StringUtils.join((Object[]) stringArray0, 'X', 0, 4);
        assertEquals("XXX", string0);
    }

    @Test(timeout = 4000)
    public void test201226() throws Throwable {
        String string0 = StringUtils.join((Object[]) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test202227() throws Throwable {
        String string0 = StringUtils.join((Object[]) null, "Hlz9-3}D^", (-703), 59);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test203228() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparator("cw", "cw");
        String string0 = StringUtils.join((Object[]) stringArray0, "nc");
        assertEquals(1, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test203229() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparator("cw", "cw");
        String string0 = StringUtils.join((Object[]) stringArray0, "nc");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test204230() throws Throwable {
        Object[] objectArray0 = new Object[3];
        String string0 = StringUtils.join(objectArray0, "[@?IXi:xo~hq9ZW", 2298, (-1540));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test205231() throws Throwable {
        Object[] objectArray0 = new Object[4];
        String string0 = StringUtils.join(objectArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test206232() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(comparator0);
        String string0 = StringUtils.join((Iterable<?>) priorityQueue0, 'Q');
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test207233() throws Throwable {
        String string0 = StringUtils.join((Iterator<?>) null, 'w');
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test208234() throws Throwable {
        ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
        Object object0 = new Object();
        arrayDeque0.add(object0);
        String string0 = StringUtils.join((Iterable<?>) arrayDeque0, 'u');
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test209235() throws Throwable {
        HashSet<Integer> hashSet0 = new HashSet<Integer>();
        Integer integer0 = new Integer(147);
        hashSet0.add((Integer) null);
        hashSet0.add(integer0);
        String string0 = StringUtils.join((Iterable<?>) hashSet0, 'k');
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test209236() throws Throwable {
        HashSet<Integer> hashSet0 = new HashSet<Integer>();
        Integer integer0 = new Integer(147);
        hashSet0.add((Integer) null);
        hashSet0.add(integer0);
        String string0 = StringUtils.join((Iterable<?>) hashSet0, 'k');
        assertEquals("k147", string0);
    }

    @Test(timeout = 4000)
    public void test210237() throws Throwable {
        Integer integer0 = new Integer(0);
        HashSet<Integer> hashSet0 = new HashSet<Integer>();
        hashSet0.add(integer0);
        hashSet0.add((Integer) null);
        String string0 = StringUtils.join((Iterable<?>) hashSet0, 'q');
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test210238() throws Throwable {
        Integer integer0 = new Integer(0);
        HashSet<Integer> hashSet0 = new HashSet<Integer>();
        hashSet0.add(integer0);
        hashSet0.add((Integer) null);
        String string0 = StringUtils.join((Iterable<?>) hashSet0, 'q');
        assertEquals("0q", string0);
    }

    @Test(timeout = 4000)
    public void test211239() throws Throwable {
        String string0 = StringUtils.join((Iterator<?>) null, " is less than 0: ");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test212240() throws Throwable {
        ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
        char[] charArray0 = new char[0];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        arrayDeque0.add(charBuffer0);
        Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
        String string0 = StringUtils.join(iterator0, "");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test213241() throws Throwable {
        Vector<String> vector0 = new Vector<String>();
        ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(vector0);
        String string0 = StringUtils.join((Iterable<?>) arrayDeque0, "D");
        assertFalse(vector0.contains(string0));
    }

    @Test(timeout = 4000)
    public void test214242() throws Throwable {
        String string0 = StringUtils.join((Iterable<?>) null, "");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test215243() throws Throwable {
        String string0 = StringUtils.deleteWhitespace("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test216244() throws Throwable {
        String string0 = StringUtils.deleteWhitespace("ClassNotFoundException occurred during 1.6 backcompat cod");
        assertEquals("ClassNotFoundExceptionoccurredduring1.6backcompatcod", string0);
    }

    @Test(timeout = 4000)
    public void test217245() throws Throwable {
        String string0 = StringUtils.removeStart("", (String) null);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test218246() throws Throwable {
        String string0 = StringUtils.removeStart("Ow},Oa1-&5&P<C5~K", "Ow},Oa1-&5&P<C5~K");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test219247() throws Throwable {
        String string0 = StringUtils.removeStart("Qu.e9l!", "");
        assertEquals("Qu.e9l!", string0);
    }

    @Test(timeout = 4000)
    public void test220248() throws Throwable {
        String string0 = StringUtils.removeStart("w3", "Mac OS X");
        assertEquals("w3", string0);
    }

    @Test(timeout = 4000)
    public void test221249() throws Throwable {
        String string0 = StringUtils.removeStartIgnoreCase("", "`V");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test222250() throws Throwable {
        String string0 = StringUtils.removeStartIgnoreCase(",@!@BNixZ lXh", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test222251() throws Throwable {
        String string0 = StringUtils.removeStartIgnoreCase(",@!@BNixZ lXh", (String) null);
        assertEquals(",@!@BNixZ lXh", string0);
    }

    @Test(timeout = 4000)
    public void test223252() throws Throwable {
        String string0 = StringUtils.removeStartIgnoreCase("+wkx1t{oc", "+wkx1t{oc");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test224253() throws Throwable {
        String string0 = StringUtils.removeStartIgnoreCase("java.awt.graphicsenv", "NoSuchMethodException occurred during 1.6 backcompat code");
        assertEquals("java.awt.graphicsenv", string0);
    }

    @Test(timeout = 4000)
    public void test225254() throws Throwable {
        String string0 = StringUtils.removeEnd("", "(39*u");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test226255() throws Throwable {
        String string0 = StringUtils.removeEnd("U[I>9?;}`2@,d", "(39*u");
        assertEquals("U[I>9?;}`2@,d", string0);
    }

    @Test(timeout = 4000)
    public void test227256() throws Throwable {
        String string0 = StringUtils.removeEnd(" must not be n", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test227257() throws Throwable {
        String string0 = StringUtils.removeEnd(" must not be n", (String) null);
        assertEquals(" must not be n", string0);
    }

    @Test(timeout = 4000)
    public void test228258() throws Throwable {
        String string0 = StringUtils.removeEndIgnoreCase("", "'; the SystemUtils property value will default to null.");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test229259() throws Throwable {
        String string0 = StringUtils.removeEndIgnoreCase("H!Tbt<", (String) null);
        assertEquals("H!Tbt<", string0);
    }

    @Test(timeout = 4000)
    public void test229260() throws Throwable {
        String string0 = StringUtils.removeEndIgnoreCase("H!Tbt<", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test230261() throws Throwable {
        String string0 = StringUtils.removeEndIgnoreCase("ctZ;Lq\"1%YoWv<", "edoc tapmockcab 6.1 gnirud derrucco noitpecxEytiruceS");
        assertEquals("ctZ;Lq\"1%YoWv<", string0);
    }

    @Test(timeout = 4000)
    public void test231262() throws Throwable {
        String string0 = StringUtils.removeEndIgnoreCase("9z\t", "9z\t");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test232263() throws Throwable {
        String string0 = StringUtils.remove("", "");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test233264() throws Throwable {
        String string0 = StringUtils.remove("U-/Ds@dBdg.:59MSmC{", "{$>Z.)q<S)+dVh");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test234265() throws Throwable {
        String string0 = StringUtils.remove("<5K9 JI#$p~>\":AG,w", (String) null);
        assertEquals("<5K9 JI#$p~>\":AG,w", string0);
    }

    @Test(timeout = 4000)
    public void test234266() throws Throwable {
        String string0 = StringUtils.remove("<5K9 JI#$p~>\":AG,w", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test235267() throws Throwable {
        String string0 = StringUtils.remove("", 'n');
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test236268() throws Throwable {
        String string0 = StringUtils.remove("java.text.Normalizer$Form", 'e');
        assertEquals("java.txt.Normalizr$Form", string0);
    }

    @Test(timeout = 4000)
    public void test237269() throws Throwable {
        String string0 = StringUtils.remove("B", 's');
        assertEquals("B", string0);
    }

    @Test(timeout = 4000)
    public void test238270() throws Throwable {
        String string0 = StringUtils.replace((String) null, "ng 1.6 ba", "ths don't match:", 3499);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test239271() throws Throwable {
        String string0 = StringUtils.replace("kT`E+&!ht~*}U*Q$Df3", "", "%-R%m%aJm'fUt", 5);
        assertEquals("kT`E+&!ht~*}U*Q$Df3", string0);
    }

    @Test(timeout = 4000)
    public void test240272() throws Throwable {
        String string0 = StringUtils.replace("normalize", "JfT\"0wbkOCfxRdb%F", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test240273() throws Throwable {
        String string0 = StringUtils.replace("normalize", "JfT\"0wbkOCfxRdb%F", (String) null);
        assertEquals("normalize", string0);
    }

    @Test(timeout = 4000)
    public void test241274() throws Throwable {
        String string0 = StringUtils.replace("ng 1.6 ba", "`V", "`jwlwb'", 0);
        assertEquals("ng 1.6 ba", string0);
    }

    @Test(timeout = 4000)
    public void test242275() throws Throwable {
        String string0 = StringUtils.replace("a_kco(pat", "a_kco(pat", "[I-?S4*=^oA.D41");
        assertEquals("[I-?S4*=^oA.D41", string0);
    }

    @Test(timeout = 4000)
    public void test243276() throws Throwable {
        String string0 = StringUtils.replace("lO:eXD.g2uUi>]I-", "lO:eXD.g2uUi>]I-", "%$|B");
        assertEquals("%$|B", string0);
    }

    @Test(timeout = 4000)
    public void test244277() throws Throwable {
        String string0 = StringUtils.replace("'; the SystemUtils property value will default to null.", "'; the SystemUtils property value will default to null.", "0", 35);
        assertEquals("0", string0);
    }

    @Test(timeout = 4000)
    public void test245278() throws Throwable {
        String string0 = StringUtils.replace("'; the SystemUtils property value will default to null.", "'; the SystemUtils property value will default to null.", "0", 2515);
        assertEquals("0", string0);
    }

    @Test(timeout = 4000)
    public void test246279() throws Throwable {
        String string0 = StringUtils.replaceEachRepeatedly("{)}d FT@N", (String[]) null, (String[]) null);
        assertEquals("{)}d FT@N", string0);
    }

    @Test(timeout = 4000)
    public void test247280() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparator("cw", "cw");
        StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
        assertEquals(1, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test248281() throws Throwable {
        String[] stringArray0 = new String[0];
        String string0 = StringUtils.replaceEachRepeatedly("%L`J3p{.vVk5Pd9\"\"", stringArray0, stringArray0);
        assertEquals("%L`J3p{.vVk5Pd9\"\"", string0);
    }

    @Test(timeout = 4000)
    public void test249282() throws Throwable {
        String[] stringArray0 = new String[2];
        String string0 = StringUtils.replaceEachRepeatedly("ng 1.6 ba", stringArray0, (String[]) null);
        assertEquals("ng 1.6 ba", string0);
    }

    @Test(timeout = 4000)
    public void test250283() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = new String[0];
        String string0 = StringUtils.replaceEachRepeatedly("1.4", stringArray0, stringArray1);
        assertEquals("1.4", string0);
    }

    @Test(timeout = 4000)
    public void test251284() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "}";
        String string0 = StringUtils.replaceEachRepeatedly("kCx", stringArray0, stringArray0);
        assertEquals("kCx", string0);
    }

    @Test(timeout = 4000)
    public void test252285() throws Throwable {
        String string0 = StringUtils.repeat("1EIOL0", "r1Cm/{Vt[FGu*'uM", 2900);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "1EIOL0";
        stringArray0[1] = "\"@l]@{g}t-ih";
        stringArray0[2] = "r1Cm/{Vt[FGu*'uM";
        stringArray0[3] = "";
        stringArray0[4] = string0;
        // Undeclared exception!
        try {
            StringUtils.replaceEachRepeatedly("r1Cm/{Vt[FGu*'uM", stringArray0, stringArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // TimeToLive of -1 is less than 0: r1Cm/{Vt[FGu*'uM
            //
            verifyException("org.apache.commons.lang3.StringUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test253286() throws Throwable {
        String string0 = StringUtils.replaceChars("]D&~&", 'x', 'Z');
        assertEquals("]D&~&", string0);
    }

    @Test(timeout = 4000)
    public void test253287() throws Throwable {
        String string0 = StringUtils.replaceChars("]D&~&", 'x', 'Z');
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test254288() throws Throwable {
        String string0 = StringUtils.replaceChars((String) null, '_', 'w');
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test255289() throws Throwable {
        String string0 = StringUtils.substring("L'QjF|&", 3499);
        String string1 = StringUtils.replaceChars("", "L'QjF|&", string0);
        assertTrue(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test256290() throws Throwable {
        String string0 = StringUtils.replaceChars("TimeToLive of ", "TimeToLive of ", "TimeToLive of ");
        assertEquals("TimeToLive of ", string0);
    }

    @Test(timeout = 4000)
    public void test257291() throws Throwable {
        String string0 = StringUtils.replaceChars("nEV2c%}9*>N<Jx]y`[~", (String) null, "X9f,q");
        assertEquals("nEV2c%}9*>N<Jx]y`[~", string0);
    }

    @Test(timeout = 4000)
    public void test257292() throws Throwable {
        String string0 = StringUtils.replaceChars("nEV2c%}9*>N<Jx]y`[~", (String) null, "X9f,q");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test258293() throws Throwable {
        String string0 = StringUtils.replaceChars("G~VV]{%1RRc{3^0", "!", (String) null);
        assertEquals("G~VV]{%1RRc{3^0", string0);
    }

    @Test(timeout = 4000)
    public void test259294() throws Throwable {
        String string0 = StringUtils.replaceChars("p6:(\"?b':$]p'0", "A{,y@M7*UpA[{", " vs ");
        assertEquals("6:(\"?b':$]'0", string0);
    }

    @Test(timeout = 4000)
    public void test260295() throws Throwable {
        String string0 = StringUtils.overlay((String) null, (String) null, (-1365), (-1));
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test261296() throws Throwable {
        String string0 = StringUtils.overlay("", (String) null, 1020, 91);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test262297() throws Throwable {
        String string0 = StringUtils.overlay("SecurityException occurred during 1.6 backcompat code", "*@ih", (-216), 3196);
        assertEquals("*@ih", string0);
    }

    @Test(timeout = 4000)
    public void test263298() throws Throwable {
        String string0 = StringUtils.overlay("", "[OvNK0^", 5, (-1));
        assertEquals("[OvNK0^", string0);
    }

    @Test(timeout = 4000)
    public void test264299() throws Throwable {
        String string0 = StringUtils.overlay("%$|B", "L':`", 1215, 0);
        assertEquals("L':`", string0);
    }

    @Test(timeout = 4000)
    public void test265300() throws Throwable {
        String string0 = StringUtils.chomp("hs don't match: ");
        assertEquals("hs don't match: ", string0);
    }

    @Test(timeout = 4000)
    public void test266301() throws Throwable {
        String string0 = StringUtils.chomp("7");
        assertEquals("7", string0);
    }

    @Test(timeout = 4000)
    public void test267302() throws Throwable {
        String string0 = StringUtils.chomp((String) null, "[OvNK0^");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test268303() throws Throwable {
        String string0 = StringUtils.chomp(";", ";");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test269304() throws Throwable {
        String string0 = StringUtils.chomp("Hlz9-3}D^", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test269305() throws Throwable {
        String string0 = StringUtils.chomp("Hlz9-3}D^", (String) null);
        assertEquals("Hlz9-3}D^", string0);
    }

    @Test(timeout = 4000)
    public void test270306() throws Throwable {
        String string0 = StringUtils.chomp("ctZ;Lq\"1%YoWv<", "3%,7[U)Cl)>dSzB)W");
        assertEquals("ctZ;Lq\"1%YoWv<", string0);
    }

    @Test(timeout = 4000)
    public void test271307() throws Throwable {
        String string0 = StringUtils.chop("{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test271308() throws Throwable {
        String string0 = StringUtils.chop("{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh");
        assertEquals("{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dvh{$>z.)q<s)+dv", string0);
    }

    @Test(timeout = 4000)
    public void test272309() throws Throwable {
        String string0 = StringUtils.chop((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test273310() throws Throwable {
        String string0 = StringUtils.chop("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test274311() throws Throwable {
        String string0 = StringUtils.repeat((String) null, "normalize", (-3110));
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test275312() throws Throwable {
        String string0 = StringUtils.repeat("", (-1));
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test276313() throws Throwable {
        String string0 = StringUtils.repeat("q1H8|SwM*", 1);
        assertEquals("q1H8|SwM*", string0);
    }

    @Test(timeout = 4000)
    public void test276314() throws Throwable {
        String string0 = StringUtils.repeat("q1H8|SwM*", 1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test277315() throws Throwable {
        String string0 = StringUtils.repeat("J", 8);
        assertEquals("JJJJJJJJ", string0);
    }

    @Test(timeout = 4000)
    public void test277316() throws Throwable {
        String string0 = StringUtils.repeat("J", 8);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test278317() throws Throwable {
        String string0 = StringUtils.repeat("2>", 839);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test279318() throws Throwable {
        String string0 = StringUtils.repeat("", (String) null, 256);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test280319() throws Throwable {
        String string0 = StringUtils.rightPad("Mac OS X", 3499, "");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test281320() throws Throwable {
        String string0 = StringUtils.rightPad((String) null, (-1), "TQ");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test282321() throws Throwable {
        String string0 = StringUtils.rightPad("]D&~&", (-2275), "YQe/>]cvgBk34");
        assertEquals("]D&~&", string0);
    }

    @Test(timeout = 4000)
    public void test283322() throws Throwable {
        String string0 = StringUtils.rightPad("1.3", 4, "1.3");
        assertEquals("1.31", string0);
    }

    @Test(timeout = 4000)
    public void test284323() throws Throwable {
        String string0 = StringUtils.center("AFU", 17, "AFU");
        assertEquals("AFUAFUAAFUAFUAFUA", string0);
    }

    @Test(timeout = 4000)
    public void test285324() throws Throwable {
        String string0 = StringUtils.leftPad((String) null, 0, '&');
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test286325() throws Throwable {
        String string0 = StringUtils.leftPad("]D&~&", (-4419), 'b');
        assertEquals("]D&~&", string0);
    }

    @Test(timeout = 4000)
    public void test287326() throws Throwable {
        String string0 = StringUtils.leftPad((String) null, 0, "%$|B");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test288327() throws Throwable {
        String string0 = StringUtils.leftPad("Minimum abbreviation width is 4", (-4088), (String) null);
        assertEquals("Minimum abbreviation width is 4", string0);
    }

    @Test(timeout = 4000)
    public void test289328() throws Throwable {
        String string0 = StringUtils.leftPad("Minimum abbreviation width is 4", 290, (String) null);
        assertEquals("                                                                                                                                                                                                                                                                   Minimum abbreviation width is 4", string0);
    }

    @Test(timeout = 4000)
    public void test290329() throws Throwable {
        String string0 = StringUtils.leftPad("]H(%=&g", 9, "+/y{i6lC|<");
        assertEquals("+/]H(%=&g", string0);
    }

    @Test(timeout = 4000)
    public void test291330() throws Throwable {
        int int0 = StringUtils.length("illegalargumentexcepti^h~6'to.vpa<{zhhpp 1.6 backcompat code");
        assertEquals(60, int0);
    }

    @Test(timeout = 4000)
    public void test292331() throws Throwable {
        int int0 = StringUtils.length((String) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test293332() throws Throwable {
        String string0 = StringUtils.center((String) null, 34);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test294333() throws Throwable {
        String string0 = StringUtils.center("0", 35);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test294334() throws Throwable {
        String string0 = StringUtils.center("0", 35);
        assertEquals("                 0                 ", string0);
    }

    @Test(timeout = 4000)
    public void test295335() throws Throwable {
        String string0 = StringUtils.center("                 0                 ", 34);
        assertEquals("                 0                 ", string0);
    }

    @Test(timeout = 4000)
    public void test296336() throws Throwable {
        String string0 = StringUtils.center((String) null, 0, (String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test297337() throws Throwable {
        String string0 = StringUtils.center("", 0, "1.1");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test298338() throws Throwable {
        String string0 = StringUtils.center("<z7\tPR']pXOJ]3={V7", 59, (String) null);
        assertEquals("                    <z7\tPR']pXOJ]3={V7                     ", string0);
    }

    @Test(timeout = 4000)
    public void test299339() throws Throwable {
        String string0 = StringUtils.center("0n39 ", 4, "ewXjGBT!ft(*?b[{");
        assertEquals("0n39 ", string0);
    }

    @Test(timeout = 4000)
    public void test300340() throws Throwable {
        String string0 = StringUtils.upperCase("qivQG~Ob");
        assertEquals("QIVQG~OB", string0);
    }

    @Test(timeout = 4000)
    public void test300341() throws Throwable {
        String string0 = StringUtils.upperCase("qivQG~Ob");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test301342() throws Throwable {
        String string0 = StringUtils.upperCase((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test302343() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        String string0 = StringUtils.upperCase("#+/t~.LgR_d", locale0);
        assertEquals("#+/T~.LGR_D", string0);
    }

    @Test(timeout = 4000)
    public void test302344() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        String string0 = StringUtils.upperCase("#+/t~.LgR_d", locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test303345() throws Throwable {
        Locale locale0 = Locale.US;
        String string0 = StringUtils.upperCase((String) null, locale0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test304346() throws Throwable {
        String string0 = StringUtils.lowerCase("#4^h_bwt");
        assertEquals("#4^h_bwt", string0);
    }

    @Test(timeout = 4000)
    public void test304347() throws Throwable {
        String string0 = StringUtils.lowerCase("#4^h_bwt");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test305348() throws Throwable {
        String string0 = StringUtils.lowerCase((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test306349() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        String string0 = StringUtils.lowerCase("%$|B", locale0);
        assertEquals("%$|b", string0);
    }

    @Test(timeout = 4000)
    public void test306350() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        String string0 = StringUtils.lowerCase("%$|B", locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test307351() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = StringUtils.lowerCase((String) null, locale0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test308352() throws Throwable {
        String string0 = StringUtils.capitalize((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test309353() throws Throwable {
        String string0 = StringUtils.capitalize("U[I>9?;}`2@,d");
        assertEquals("U[I>9?;}`2@,d", string0);
    }

    @Test(timeout = 4000)
    public void test310354() throws Throwable {
        String string0 = StringUtils.capitalize("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test311355() throws Throwable {
        String string0 = StringUtils.uncapitalize((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test312356() throws Throwable {
        String string0 = StringUtils.uncapitalize("/D8k&");
        assertEquals("/D8k&", string0);
    }

    @Test(timeout = 4000)
    public void test313357() throws Throwable {
        String string0 = StringUtils.uncapitalize("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test314358() throws Throwable {
        String string0 = StringUtils.swapCase((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test315359() throws Throwable {
        String string0 = StringUtils.swapCase("2Ra_7~`N");
        assertEquals("2rA_7~`n", string0);
    }

    @Test(timeout = 4000)
    public void test316360() throws Throwable {
        String string0 = StringUtils.swapCase("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test317361() throws Throwable {
        int int0 = StringUtils.countMatches((String) null, (String) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test318362() throws Throwable {
        int int0 = StringUtils.countMatches("The stripAccents(String) method is not supported until Java 1.6", "The stripAccents(String) method is not supported until Java 1.6");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test319363() throws Throwable {
        int int0 = StringUtils.countMatches("must not be nu", (String) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test320364() throws Throwable {
        boolean boolean0 = StringUtils.isAlpha("cv13;0hu5");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test321365() throws Throwable {
        boolean boolean0 = StringUtils.isAlpha((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test322366() throws Throwable {
        boolean boolean0 = StringUtils.isAlpha("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test323367() throws Throwable {
        boolean boolean0 = StringUtils.isAlphaSpace("ackcompat");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test324368() throws Throwable {
        boolean boolean0 = StringUtils.isAlphaSpace((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test325369() throws Throwable {
        boolean boolean0 = StringUtils.isAlphaSpace("ClassNotFoundException occurred during 1.6 backcompat code");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test326370() throws Throwable {
        boolean boolean0 = StringUtils.isAlphanumeric(" 1.6 backcompat co");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test327371() throws Throwable {
        boolean boolean0 = StringUtils.isAlphanumeric((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test328372() throws Throwable {
        boolean boolean0 = StringUtils.isAlphanumeric("qZ");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test329373() throws Throwable {
        boolean boolean0 = StringUtils.isAlphanumericSpace("classnotfoundexception occurred during 1.6 backcompat code");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test330374() throws Throwable {
        boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test331375() throws Throwable {
        boolean boolean0 = StringUtils.isAlphanumericSpace("TQ");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test332376() throws Throwable {
        boolean boolean0 = StringUtils.isAsciiPrintable("6>h$Z5m&iHf_'8.=qW");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test333377() throws Throwable {
        boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test334378() throws Throwable {
        boolean boolean0 = StringUtils.isAsciiPrintable("~V:Q!l(<z=mVC3");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test335379() throws Throwable {
        boolean boolean0 = StringUtils.isNumeric((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test336380() throws Throwable {
        boolean boolean0 = StringUtils.isNumeric("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test337381() throws Throwable {
        boolean boolean0 = StringUtils.isNumeric("9z\t");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test338382() throws Throwable {
        boolean boolean0 = StringUtils.isNumericSpace(" is less than 0: ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test339383() throws Throwable {
        boolean boolean0 = StringUtils.isNumericSpace((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test340384() throws Throwable {
        boolean boolean0 = StringUtils.isNumericSpace("52");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test341385() throws Throwable {
        boolean boolean0 = StringUtils.isWhitespace("}");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test342386() throws Throwable {
        boolean boolean0 = StringUtils.isWhitespace((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test343387() throws Throwable {
        boolean boolean0 = StringUtils.isWhitespace(" ");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test344388() throws Throwable {
        boolean boolean0 = StringUtils.isAllLowerCase((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test345389() throws Throwable {
        boolean boolean0 = StringUtils.isAllLowerCase("{$>Z.)q<S)+dVh");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test346390() throws Throwable {
        boolean boolean0 = StringUtils.isAllLowerCase("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test347391() throws Throwable {
        boolean boolean0 = StringUtils.isAllLowerCase("ackcompat");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test348392() throws Throwable {
        boolean boolean0 = StringUtils.isAllUpperCase((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test349393() throws Throwable {
        boolean boolean0 = StringUtils.isAllUpperCase("2Ra_7~`N");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test350394() throws Throwable {
        boolean boolean0 = StringUtils.isAllUpperCase("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test351395() throws Throwable {
        boolean boolean0 = StringUtils.isAllUpperCase("J");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test352396() throws Throwable {
        String string0 = StringUtils.defaultString("i)");
        assertEquals("i)", string0);
    }

    @Test(timeout = 4000)
    public void test353397() throws Throwable {
        String string0 = StringUtils.defaultString((String) null);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test354398() throws Throwable {
        String string0 = StringUtils.defaultString("]H(%=&g", "Minimum abbreviation width is 4");
        assertEquals("]H(%=&g", string0);
    }

    @Test(timeout = 4000)
    public void test355399() throws Throwable {
        String string0 = StringUtils.defaultString((String) null, "0-&`t_G]>M`,@6az[u@I");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test355400() throws Throwable {
        String string0 = StringUtils.defaultString((String) null, "0-&`t_G]>M`,@6az[u@I");
        assertEquals("0-&`t_G]>M`,@6az[u@I", string0);
    }

    @Test(timeout = 4000)
    public void test356401() throws Throwable {
        String string0 = StringUtils.defaultIfEmpty("X", "g&>96:qIxO^90966vs");
        assertEquals("X", string0);
    }

    @Test(timeout = 4000)
    public void test357402() throws Throwable {
        String string0 = StringUtils.defaultIfEmpty("", "L'QjF|&");
        assertEquals("L'QjF|&", string0);
    }

    @Test(timeout = 4000)
    public void test358403() throws Throwable {
        String string0 = StringUtils.reverse("Minimum abbreviation width with offset is 7");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test358404() throws Throwable {
        String string0 = StringUtils.reverse("Minimum abbreviation width with offset is 7");
        assertEquals("7 si tesffo htiw htdiw noitaiverbba muminiM", string0);
    }

    @Test(timeout = 4000)
    public void test359405() throws Throwable {
        String string0 = StringUtils.reverse((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test360406() throws Throwable {
        String string0 = StringUtils.reverseDelimited((String) null, 'p');
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test361407() throws Throwable {
        String string0 = StringUtils.abbreviate((String) null, 1372, (-1));
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test362408() throws Throwable {
        // Undeclared exception!
        try {
            StringUtils.abbreviate("9<5}iH>Y1Jf\"%8T", 1, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Minimum abbreviation width is 4
            //
            verifyException("org.apache.commons.lang3.StringUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test363409() throws Throwable {
        String string0 = StringUtils.abbreviate("@XC[q\"dQiI0x<n^[", (-2988), 7);
        assertEquals("@XC[...", string0);
    }

    @Test(timeout = 4000)
    public void test364410() throws Throwable {
        String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 1519, 7);
        assertEquals("...ks}+", string0);
    }

    @Test(timeout = 4000)
    public void test365411() throws Throwable {
        String string0 = StringUtils.difference("cw", "<z7\tPR']pXOJ]3={V7");
        assertEquals("<z7\tPR']pXOJ]3={V7", string0);
    }

    @Test(timeout = 4000)
    public void test366412() throws Throwable {
        String string0 = StringUtils.difference((String) null, "user.language");
        assertEquals("user.language", string0);
    }

    @Test(timeout = 4000)
    public void test366413() throws Throwable {
        String string0 = StringUtils.difference((String) null, "user.language");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test367414() throws Throwable {
        String string0 = StringUtils.difference("^h~6'to.vpa<{zhhpp", (String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test367415() throws Throwable {
        String string0 = StringUtils.difference("^h~6'to.vpa<{zhhpp", (String) null);
        assertEquals("^h~6'to.vpa<{zhhpp", string0);
    }

    @Test(timeout = 4000)
    public void test368416() throws Throwable {
        String string0 = StringUtils.difference("ackcompat", "ackcompat");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test369417() throws Throwable {
        int int0 = StringUtils.indexOfDifference((String) null, "Array element ");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test370418() throws Throwable {
        int int0 = StringUtils.indexOfDifference(" is less than 0:", (String) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test371419() throws Throwable {
        int int0 = StringUtils.indexOfDifference("", "");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test372420() throws Throwable {
        int int0 = StringUtils.indexOfDifference("jVsbP.", "");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test373421() throws Throwable {
        int int0 = StringUtils.indexOfDifference((String[]) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test374422() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8mu08/wZzZ(bJ`WA", (String) null, 398);
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals("8mu08/wZzZ(bJ`WA", string0);
    }

    @Test(timeout = 4000)
    public void test375423() throws Throwable {
        String[] stringArray0 = new String[9];
        stringArray0[0] = " ";
        int int0 = StringUtils.indexOfDifference(stringArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test376424() throws Throwable {
        String[] stringArray0 = StringUtils.splitByCharacterType("TimeToLive of ");
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals(9, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test376425() throws Throwable {
        String[] stringArray0 = StringUtils.splitByCharacterType("TimeToLive of ");
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test377426() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "H6yWYJaH8bHP={";
        stringArray0[1] = "H6yWYJaH8bHP={VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV";
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals("H6yWYJaH8bHP={", string0);
    }

    @Test(timeout = 4000)
    public void test378427() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "%$|B";
        stringArray0[1] = "%$|B";
        stringArray0[2] = "%$|B";
        stringArray0[3] = "%$|B";
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals("%$|B", string0);
    }

    @Test(timeout = 4000)
    public void test379428() throws Throwable {
        String string0 = StringUtils.getCommonPrefix((String[]) null);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test380429() throws Throwable {
        String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "TQ");
        StringUtils.getCommonPrefix(stringArray0);
        assertEquals(0, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test381430() throws Throwable {
        String[] stringArray0 = new String[2];
        String string0 = StringUtils.getCommonPrefix(stringArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test382431() throws Throwable {
        // Undeclared exception!
        try {
            StringUtils.getLevenshteinDistance((String) null, (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Strings must not be null
            //
            verifyException("org.apache.commons.lang3.StringUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test383432() throws Throwable {
        // Undeclared exception!
        try {
            StringUtils.getLevenshteinDistance("", (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Strings must not be null
            //
            verifyException("org.apache.commons.lang3.StringUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test384433() throws Throwable {
        int int0 = StringUtils.getLevenshteinDistance("boolean", "");
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test385434() throws Throwable {
        int int0 = StringUtils.getLevenshteinDistance("", "]");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test386435() throws Throwable {
        int int0 = StringUtils.getLevenshteinDistance("6)___#", "1r55=Tq>J");
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test387436() throws Throwable {
        int int0 = StringUtils.getLevenshteinDistance("Cannot pad a negative amount: ", "TimeToLive of ");
        assertEquals(23, int0);
    }

    @Test(timeout = 4000)
    public void test388437() throws Throwable {
        String[] stringArray0 = new String[0];
        boolean boolean0 = StringUtils.startsWithAny("nFND4=&p8O", stringArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test389438() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("%$|B", "%$|B");
        boolean boolean0 = StringUtils.startsWithAny("%$|B", stringArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test389439() throws Throwable {
        String[] stringArray0 = StringUtils.splitPreserveAllTokens("%$|B", "%$|B");
        boolean boolean0 = StringUtils.startsWithAny("%$|B", stringArray0);
        assertEquals(5, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test390440() throws Throwable {
        boolean boolean0 = StringUtils.endsWith((String) null, "");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test391441() throws Throwable {
        boolean boolean0 = StringUtils.endsWithIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test392442() throws Throwable {
        boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
        assertTrue(boolean0);
    }
}
