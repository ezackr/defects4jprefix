/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:51:19 GMT 2024
 */
package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln('l');
        strBuilder0.deleteAll('l');
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln('l');
        strBuilder0.deleteAll('l');
        strBuilder0.trim();
        assertEquals(0, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        strBuilder0.appendln(2595.1996682792);
        assertEquals(18, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.appendln(1364);
        assertEquals(60, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.appendln((-1.0F));
        assertEquals(18, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.capacity();
        assertEquals(32, int0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.getNewLineText();
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0);
        assertEquals(55, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test00710() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test00711() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0);
        assertArrayEquals(new char[] { '\'' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test00712() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test00813() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-3199));
        strBuilder0.asWriter();
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test00914() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln(false);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test01015() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.substring(23);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // end < start
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test01116() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrMatcher strMatcher0 = StrMatcher.trimMatcher();
        int int0 = strBuilder0.indexOf(strMatcher0);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test01117() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrMatcher strMatcher0 = StrMatcher.trimMatcher();
        int int0 = strBuilder0.indexOf(strMatcher0);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test01118() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrMatcher strMatcher0 = StrMatcher.trimMatcher();
        int int0 = strBuilder0.indexOf(strMatcher0);
        assertEquals(55, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test01219() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.ArrayUtils");
        StrTokenizer strTokenizer0 = strBuilder0.asTokenizer();
        strBuilder0.appendWithSeparators((Iterator) strTokenizer0, (String) null);
        assertEquals(0, strTokenizer0.previousIndex());
    }

    @Test(timeout = 4000)
    public void test01220() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.ArrayUtils");
        StrTokenizer strTokenizer0 = strBuilder0.asTokenizer();
        strBuilder0.appendWithSeparators((Iterator) strTokenizer0, (String) null);
        assertEquals(61, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test01321() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
        strBuilder0.appendln((Object) stringBuffer0);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test01422() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        int int0 = strBuilder0.indexOf("Invalid startIndex: ");
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test01423() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        int int0 = strBuilder0.indexOf("Invalid startIndex: ");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01524() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("eev%_");
        // Undeclared exception!
        try {
            strBuilder0.appendFixedWidthPadRight((Object) null, 243, 'F');
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test01625() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        // Undeclared exception!
        try {
            strBuilder0.insert((-2293), 4L);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -2293
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test01726() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.insert((-1), (-1));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -1
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.insert(1035, 0.0F);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: 1035
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.insert(25, 1997.595);
        assertEquals(63, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test02029() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1425), 0, 'f');
        assertEquals(1272, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test02030() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1425), 0, 'f');
        assertTrue(strBuilder1.isEmpty());
    }

    @Test(timeout = 4000)
    public void test02131() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        // Undeclared exception!
        try {
            strBuilder0.insert(597, '\'');
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: 597
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test02232() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.appendln(strBuilder0, 5, 5);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // startIndex must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test02333() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        strBuilder0.appendln(strBuilder0);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test02434() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
        StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_TrimMatcher0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test02535() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        String string0 = strBuilder_StrBuilderTokenizer0.getContent();
        assertEquals(34, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test02536() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        String string0 = strBuilder_StrBuilderTokenizer0.getContent();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test02537() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        String string0 = strBuilder_StrBuilderTokenizer0.getContent();
        assertEquals("K>", string0);
    }

    @Test(timeout = 4000)
    public void test02638() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.appendln((char[]) null, (-189), 142);
        assertEquals(14, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test02739() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("-");
        strBuilder0.asReader();
        assertEquals(1, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test02740() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("-");
        strBuilder0.asReader();
        assertEquals(33, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test02841() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[9];
        strBuilder0.appendln(charArray0);
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
        strBuilder0.deleteAll(strMatcher0);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test02942() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.lastIndexOf("])#");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test02943() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.lastIndexOf("])#");
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03044() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StringBuffer stringBuffer0 = new StringBuffer("");
        strBuilder0.appendln(stringBuffer0, 0, 0);
        assertEquals(1, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test03145() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        strBuilder_StrBuilderReader0.close();
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03246() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.ArrayUtils");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        strBuilder_StrBuilderReader0.reset();
        assertEquals(66, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03247() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.ArrayUtils");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        strBuilder_StrBuilderReader0.reset();
        assertEquals(34, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test03348() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Vq7c!VhQ _`");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
        assertEquals(44, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03349() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Vq7c!VhQ _`");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
        assertEquals(12, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test03350() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Vq7c!VhQ _`");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03451() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        strBuilder_StrBuilderReader0.mark(114);
        assertEquals(41, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03452() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        strBuilder_StrBuilderReader0.mark(114);
        assertEquals(9, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test03453() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        strBuilder_StrBuilderReader0.mark(114);
        assertEquals(9, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test03554() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        strBuilder_StrBuilderWriter0.close();
        assertEquals(1272, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03655() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        strBuilder_StrBuilderWriter0.write((String) null);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03756() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("-");
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        char[] charArray0 = new char[0];
        strBuilder_StrBuilderWriter0.write(charArray0);
        assertEquals(33, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03757() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("-");
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        char[] charArray0 = new char[0];
        strBuilder_StrBuilderWriter0.write(charArray0);
        assertEquals(1, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test03858() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        strBuilder_StrBuilderWriter0.flush();
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test03959() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        char[] charArray0 = new char[5];
        // Undeclared exception!
        try {
            strBuilder_StrBuilderWriter0.write(charArray0, 0, (-2572));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid length: -2572
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test04060() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("@");
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        strBuilder_StrBuilderWriter0.write((String) null, 1, (-1938));
        assertEquals(33, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test04061() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("@");
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        strBuilder_StrBuilderWriter0.write((String) null, 1, (-1938));
        assertEquals(1, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test04062() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("@");
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        strBuilder_StrBuilderWriter0.write((String) null, 1, (-1938));
        assertEquals(1, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test04163() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((String) null);
        StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test04164() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((String) null);
        StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
        assertTrue(strBuilder1.isEmpty());
    }

    @Test(timeout = 4000)
    public void test04265() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test04366() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StrBuilder strBuilder1 = strBuilder0.setNullText("");
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test04467() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.setLength(1426);
        // Undeclared exception!
        try {
            strBuilder1.append(strBuilder0, 1426, 1426);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // length must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test04568() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
        // Undeclared exception!
        try {
            strBuilder0.setLength((-1919));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -1919
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test04669() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.setLength(49);
        assertEquals(49, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test04770() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.setLength(0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test04771() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.setLength(0);
        assertEquals(0, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test04872() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        strBuilder_StrBuilderWriter0.append((CharSequence) "StrTokenizer[not tokenized yet]");
        strBuilder_StrBuilderWriter0.write((-2117));
        strBuilder0.minimizeCapacity();
        assertEquals(32, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test04973() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        assertEquals(45, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test04974() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.minimizeCapacity();
        assertEquals(13, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test05075() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        boolean boolean0 = strBuilder0.isEmpty();
        assertEquals(55, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test05076() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        boolean boolean0 = strBuilder0.isEmpty();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05077() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        boolean boolean0 = strBuilder0.isEmpty();
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test05178() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(830);
        boolean boolean0 = strBuilder0.isEmpty();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05179() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(830);
        boolean boolean0 = strBuilder0.isEmpty();
        assertEquals(830, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test05280() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        // Undeclared exception!
        try {
            strBuilder0.charAt((-1603));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -1603
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test05381() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        int int0 = strBuilder_StrBuilderReader0.read();
        assertEquals(9, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test05382() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        int int0 = strBuilder_StrBuilderReader0.read();
        assertEquals(32, int0);
    }

    @Test(timeout = 4000)
    public void test05383() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        int int0 = strBuilder_StrBuilderReader0.read();
        assertEquals(41, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test05484() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        // Undeclared exception!
        try {
            strBuilder0.charAt(99);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: 99
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test05585() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.setCharAt((-3822), 'J');
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -3822
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test05686() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = strBuilder0.setCharAt(0, 'z');
        assertEquals(45, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test05687() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = strBuilder0.setCharAt(0, 'z');
        assertEquals(13, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test05788() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(368);
        // Undeclared exception!
        try {
            strBuilder0.setCharAt(1, '}');
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: 1
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test05889() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        // Undeclared exception!
        try {
            strBuilder0.deleteCharAt((-1631));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -1631
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test05990() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.deleteCharAt(0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: 0
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test06091() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln("");
        assertEquals(1, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test06092() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln("");
        strBuilder0.deleteCharAt(0);
        assertEquals(0, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test06193() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("p)fL_?Qx<");
        char[] charArray0 = strBuilder0.toCharArray();
        assertEquals(41, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test06194() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("p)fL_?Qx<");
        char[] charArray0 = strBuilder0.toCharArray();
        assertArrayEquals(new char[] { 'p', ')', 'f', 'L', '_', '?', 'Q', 'x', '<' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test06195() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("p)fL_?Qx<");
        char[] charArray0 = strBuilder0.toCharArray();
        assertEquals(9, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test06296() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-40));
        strBuilder0.toCharArray();
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test06397() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        strBuilder0.appendln(charArray0);
        strBuilder0.toCharArray(0, 6);
        assertEquals(9, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test06498() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        char[] charArray0 = strBuilder0.toCharArray(39, 39);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test06499() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        char[] charArray0 = strBuilder0.toCharArray(39, 39);
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test064100() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        char[] charArray0 = strBuilder0.toCharArray(39, 39);
        assertEquals(55, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test065101() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = strBuilder0.getChars((char[]) null);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test065102() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = strBuilder0.getChars((char[]) null);
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test066103() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        char[] charArray0 = new char[0];
        char[] charArray1 = strBuilder0.getChars(charArray0);
        assertEquals(45, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test066104() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        char[] charArray0 = new char[0];
        char[] charArray1 = strBuilder0.getChars(charArray0);
        assertEquals(13, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test067105() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        char[] charArray1 = strBuilder0.getChars(charArray0);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test067106() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        char[] charArray1 = strBuilder0.getChars(charArray0);
        assertEquals(8, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test067107() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        char[] charArray1 = strBuilder0.getChars(charArray0);
        assertEquals(0, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test068108() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        char[] charArray0 = new char[1];
        // Undeclared exception!
        try {
            strBuilder0.getChars((-86), 101, charArray0, 0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -86
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test069109() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[0];
        // Undeclared exception!
        try {
            strBuilder0.getChars(32, (-994), charArray0, 13);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -994
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test070110() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(39);
        // Undeclared exception!
        try {
            strBuilder0.getChars(2172, 39, (char[]) null, 39);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: 39
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test071111() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        char[] charArray0 = new char[1];
        // Undeclared exception!
        try {
            strBuilder0.getChars(57, 0, charArray0, 0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // end < start
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test072112() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        strBuilder0.setNewLineText("9mK!");
        strBuilder0.appendln(charArray0);
        assertEquals(12, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test073113() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        strBuilder0.setNullText("Invalid startIndex: ");
        strBuilder0.appendln((String) null, (-3129), 0);
        assertEquals(29, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test074114() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        // Undeclared exception!
        try {
            strBuilder0.append(" ,M'WWb7t", (-5603), 2);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // startIndex must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test075115() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder strBuilder1 = strBuilder0.append("Mac OS X", 0, 0);
        assertEquals(8, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test075116() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder strBuilder1 = strBuilder0.append("Mac OS X", 0, 0);
        assertEquals(40, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test076117() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.append("", 666, 666);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // startIndex must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test077118() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.append("', is neither of type Map.Entry nor an Array", 3, (-4282));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // length must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test078119() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.appendln("", 0, 113);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // length must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test079120() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        strBuilder0.append("sEXS[+-o@]XLlfY-J", 0, 2);
        assertEquals(2, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test080121() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln((StringBuffer) null);
        assertEquals(1, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test081122() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StringBuffer stringBuffer0 = new StringBuffer(355);
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test082123() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 0, 0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test083124() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StringBuffer stringBuffer0 = new StringBuffer("F1}$>CNgUA3WZ");
        // Undeclared exception!
        try {
            strBuilder0.append(stringBuffer0, (-3243), 0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // startIndex must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test084125() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StringBuffer stringBuffer0 = new StringBuffer("aL=iz[7u&'%D");
        // Undeclared exception!
        try {
            strBuilder0.append(stringBuffer0, 3410, 3410);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // startIndex must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test085126() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StringBuffer stringBuffer0 = new StringBuffer();
        // Undeclared exception!
        try {
            strBuilder0.append(stringBuffer0, 0, (-2057));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // length must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test086127() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(3);
        StringBuffer stringBuffer0 = new StringBuffer("Mac OS X");
        // Undeclared exception!
        try {
            strBuilder0.append(stringBuffer0, 3, 17);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // length must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test087128() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StringBuffer stringBuffer0 = new StringBuffer("F1}$>CNgUA3WZ");
        strBuilder0.append(stringBuffer0, 0, 3);
        assertEquals(16, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test088129() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test089130() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        strBuilder1.append(strBuilder0);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test089131() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        strBuilder1.append(strBuilder0);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test090132() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(112);
        StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-1079), 112);
        assertEquals(112, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test091133() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        // Undeclared exception!
        try {
            strBuilder0.append(strBuilder0, (-2981), 1128);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // startIndex must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test092134() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
        assertEquals(0, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test092135() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test093136() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        // Undeclared exception!
        try {
            strBuilder1.append(strBuilder1, 1, (-1352));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // length must be valid
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test094137() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        strBuilder0.append(strBuilder0, 2, 2);
        assertEquals(10, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test095138() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln((char[]) null);
        assertEquals(1, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test096139() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-2417));
        char[] charArray0 = new char[6];
        // Undeclared exception!
        try {
            strBuilder0.append(charArray0, (-2417), (-2417));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid startIndex: -2417
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test097140() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        char[] charArray0 = new char[8];
        // Undeclared exception!
        try {
            strBuilder_StrBuilderWriter0.write(charArray0, 114, 117);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid startIndex: 117
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test098141() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Mac OS X");
        strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "The Array must not be null");
        assertEquals(35, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test099142() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        char[] charArray0 = new char[1];
        // Undeclared exception!
        try {
            strBuilder_StrBuilderWriter0.write(charArray0, 0, 6);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid length: 6
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test100143() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        char[] charArray0 = new char[8];
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
        assertTrue(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test100144() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
        char[] charArray0 = new char[8];
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test101145() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.append(true);
        assertEquals(59, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test102146() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(101);
        StrBuilder strBuilder1 = strBuilder0.appendAll((Object[]) null);
        assertEquals(101, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test103147() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        Object[] objectArray0 = new Object[5];
        StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
        assertEquals(41, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test103148() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        Object[] objectArray0 = new Object[5];
        StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
        assertEquals(9, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test104149() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        Object[] objectArray0 = new Object[0];
        StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test105150() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendAll((Collection) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test106151() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        StrBuilder strBuilder1 = strBuilder0.appendAll((Collection) linkedList0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test107152() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        Integer integer0 = new Integer(4);
        linkedList0.add(integer0);
        strBuilder0.appendAll((Collection) linkedList0);
        assertEquals(83, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test108153() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator) null);
        assertEquals(8, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test108154() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator) null);
        assertEquals(40, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test109155() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        char[] charArray0 = new char[15];
        StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
        strBuilder0.appendAll((Iterator) strTokenizer0);
        assertEquals(0, strTokenizer0.previousIndex());
    }

    @Test(timeout = 4000)
    public void test109156() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        char[] charArray0 = new char[15];
        StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
        strBuilder0.appendAll((Iterator) strTokenizer0);
        assertEquals(36, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test110157() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "");
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test111158() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        Object[] objectArray0 = new Object[5];
        strBuilder0.appendWithSeparators(objectArray0, ".");
        assertEquals(4, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test112159() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        Object[] objectArray0 = new Object[0];
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "wIp{s2qfiJD2");
        assertEquals(87, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test112160() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        Object[] objectArray0 = new Object[0];
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "wIp{s2qfiJD2");
        assertEquals(55, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test113161() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        Object[] objectArray0 = new Object[4];
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test114162() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "iqF2q/+h#(");
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test115163() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.ArrayUtils");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "The Array must not be null");
        assertEquals(34, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test115164() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.ArrayUtils");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "The Array must not be null");
        assertEquals(66, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test116165() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.addLast(strBuilder0);
        strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test117166() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.addLast("K>");
        linkedList0.addLast(strBuilder0);
        strBuilder0.appendWithSeparators((Collection) linkedList0, " [(+*ujf;`");
        assertEquals(90, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test118167() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "y{atk~|\"zPto<<Sqr");
        assertEquals(13, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test118168() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "y{atk~|\"zPto<<Sqr");
        assertEquals(45, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test119169() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "'; the SystemUtils property value will default to null.");
        assertEquals(2, strBuilder_StrBuilderTokenizer0.previousIndex());
    }

    @Test(timeout = 4000)
    public void test119170() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "'; the SystemUtils property value will default to null.");
        assertEquals(199, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test120171() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test121172() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.appendSeparator("(VS1");
        assertEquals(17, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test122173() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendSeparator("org.apache.commons.lang.text.StrBuilder");
        assertEquals(0, strBuilder1.size());
    }

    @Test(timeout = 4000)
    public void test122174() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendSeparator("org.apache.commons.lang.text.StrBuilder");
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test123175() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendSeparator('`');
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test123176() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendSeparator('`');
        assertEquals(0, strBuilder1.size());
    }

    @Test(timeout = 4000)
    public void test124177() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StrBuilder strBuilder1 = strBuilder0.appendln(0L);
        strBuilder1.appendSeparator('B');
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test124178() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StrBuilder strBuilder1 = strBuilder0.appendln(0L);
        strBuilder1.appendSeparator('B');
        assertEquals(3, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test125179() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, 32);
        assertEquals(1272, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test126180() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendSeparator("LT(+YTp:P1fWM", 40);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test127181() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("BdJ{+$");
        StrBuilder strBuilder1 = strBuilder0.appendSeparator("F+:[.", (-1130));
        assertEquals(6, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test127182() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("BdJ{+$");
        StrBuilder strBuilder1 = strBuilder0.appendSeparator("F+:[.", (-1130));
        assertEquals(38, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test128183() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrBuilder strBuilder1 = strBuilder0.appendSeparator('V', (-2182));
        assertEquals(2, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test128184() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrBuilder strBuilder1 = strBuilder0.appendSeparator('V', (-2182));
        assertEquals(34, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test129185() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.appendSeparator('\\', 355);
        assertEquals(14, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test130186() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        StrBuilder strBuilder1 = strBuilder0.appendPadding((-224), '.');
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test131187() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        Object object0 = new Object();
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(object0, (-926), '3');
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test132188() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        // Undeclared exception!
        try {
            strBuilder0.appendFixedWidthPadLeft((Object) null, 32, ']');
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test133189() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(".XuWgEfz`+n");
        strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 2, ')');
        assertEquals(13, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test134190() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        Integer integer0 = new Integer(110);
        strBuilder0.appendFixedWidthPadRight((Object) integer0, 110, '<');
        strBuilder0.insert(110, (char[]) null, 110, 110);
        assertEquals(110, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test135191() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        strBuilder0.appendFixedWidthPadRight(1105, 1, '');
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test136192() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.insert(0, (Object) "-*x{S");
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test137193() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        // Undeclared exception!
        try {
            strBuilder0.insert(2151, (Object) null);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: 2151
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test138194() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("BdJ{+$");
        char[] charArray0 = new char[0];
        StrBuilder strBuilder1 = strBuilder0.insert(5, charArray0);
        assertEquals(38, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test138195() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("BdJ{+$");
        char[] charArray0 = new char[0];
        StrBuilder strBuilder1 = strBuilder0.insert(5, charArray0);
        assertEquals(6, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test139196() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test140197() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[1];
        strBuilder0.insert(0, charArray0);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test141198() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        char[] charArray0 = new char[5];
        // Undeclared exception!
        try {
            strBuilder0.insert(1, charArray0, 1, 97);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid length: 97
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test142199() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        // Undeclared exception!
        try {
            strBuilder0.insert(0, charArray0, (-24), (-24));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid offset: -24
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test143200() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[4];
        strBuilder0.appendln(charArray0);
        // Undeclared exception!
        try {
            strBuilder0.insert(5, charArray0, 86, 5);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid offset: 86
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test144201() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        char[] charArray0 = new char[9];
        // Undeclared exception!
        try {
            strBuilder0.insert(0, charArray0, 0, (-1));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // Invalid length: -1
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test145202() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        strBuilder0.insert(0, charArray0, 1, 1);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test146203() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
        char[] charArray0 = new char[0];
        StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
        assertEquals(39, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test146204() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
        char[] charArray0 = new char[0];
        StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
        assertEquals(71, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test147205() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.insert(0, false);
        assertEquals(5, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test148206() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.insert(0, true);
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test149207() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendFixedWidthPadLeft(512, 512, '(');
        strBuilder0.delete(512, 512);
        assertEquals(512, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test150208() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendln('l');
        strBuilder0.trim();
        assertEquals(1, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test151209() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils pr]perty vlue willdefault to nu(l.");
        strBuilder0.deleteAll('.');
        assertEquals(52, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test152210() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.deleteAll('l');
        assertEquals(48, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test153211() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst('\"');
        assertEquals(13, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test153212() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst('\"');
        assertEquals(45, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test154213() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder strBuilder1 = strBuilder0.appendln('4');
        strBuilder1.deleteFirst('4');
        assertEquals(9, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test154214() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder strBuilder1 = strBuilder0.appendln('4');
        strBuilder1.deleteFirst('4');
        assertEquals(9, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test155215() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test156216() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        strBuilder0.deleteAll("Mac OS X");
        assertEquals(0, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test157217() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst("length must be valid");
        assertEquals(41, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test157218() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst("length must be valid");
        assertEquals(9, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test158219() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
        assertEquals(87, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test158220() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
        assertEquals(55, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test159221() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        strBuilder0.deleteFirst("Mac OS X");
        assertEquals(0, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test160222() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        strBuilder0.replace(0, 0, "Mac OS X");
        assertEquals(16, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test161223() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.replaceAll('>', '>');
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test162224() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-3199));
        StringBuffer stringBuffer0 = new StringBuffer(">ZkBzqx6P`yNR-&OXn6");
        strBuilder0.append(stringBuffer0);
        strBuilder0.replaceAll('Z', 'w');
        assertEquals(19, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test163225() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder strBuilder1 = strBuilder0.replaceFirst('9', '9');
        assertEquals(9, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test163226() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder strBuilder1 = strBuilder0.replaceFirst('9', '9');
        assertEquals(41, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test164227() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendln('l');
        strBuilder1.replaceFirst('N', '-');
        assertEquals(2, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test164228() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendln('l');
        strBuilder1.replaceFirst('N', '-');
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test165229() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test166230() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(3);
        StrBuilder strBuilder1 = strBuilder0.replaceAll("wIXodqyzIBZ=6v_", (String) null);
        assertEquals(3, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test167231() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = strBuilder0.replaceFirst("(w[ln MJ82+|K", "'; the SystemUtils property value will default to null.");
        assertEquals(87, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test167232() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = strBuilder0.replaceFirst("(w[ln MJ82+|K", "'; the SystemUtils property value will default to null.");
        assertEquals(55, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test168233() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "1.4");
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test169234() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = strBuilder0.replaceFirst("'; the SystemUtils property value will default to null.", "'; the SystemUtils property value will default to null.");
        assertEquals(55, strBuilder1.size());
    }

    @Test(timeout = 4000)
    public void test170235() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        strBuilder0.replaceFirst(" ,M'WWb7t", (String) null);
        assertTrue(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test171236() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) null);
        assertEquals(87, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test171237() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) null);
        assertEquals(55, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test172238() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendln('l');
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
        StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getIgnoredMatcher();
        strBuilder1.replaceAll(strMatcher0, "");
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test172239() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.appendln('l');
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
        StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getIgnoredMatcher();
        strBuilder1.replaceAll(strMatcher0, "");
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test173240() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.replaceAll("F1}$>CNgUA3WZ", "GQ?+REZy+?");
        StrMatcher strMatcher0 = StrMatcher.charMatcher('?');
        strBuilder0.replaceFirst(strMatcher0, "StrTokenizer");
        assertEquals(21, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test174241() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        StrBuilder strBuilder1 = strBuilder0.reverse();
        assertEquals(40, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test175242() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.reverse();
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test176243() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder strBuilder1 = strBuilder0.trim();
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test177244() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>NgUA3WZ");
        boolean boolean0 = strBuilder0.startsWith("F1}$>NgUA3WZ");
        assertEquals(44, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test177245() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>NgUA3WZ");
        boolean boolean0 = strBuilder0.startsWith("F1}$>NgUA3WZ");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test178246() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        boolean boolean0 = strBuilder0.startsWith((String) null);
        assertEquals(1272, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test178247() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        boolean boolean0 = strBuilder0.startsWith((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test179248() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.startsWith("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test179249() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.startsWith("");
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test180250() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        boolean boolean0 = strBuilder0.startsWith("w:_'P");
        assertEquals(1272, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test180251() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(1272);
        boolean boolean0 = strBuilder0.startsWith("w:_'P");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test181252() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        boolean boolean0 = strBuilder1.startsWith("*9({\u0004si7");
        assertEquals(9, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test181253() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[8];
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        boolean boolean0 = strBuilder1.startsWith("*9({\u0004si7");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test182254() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.endsWith("java.awt.headless");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test182255() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.endsWith("java.awt.headless");
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test183256() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.endsWith((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test183257() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.endsWith((String) null);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test184258() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.endsWith("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test184259() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.endsWith("");
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test185260() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("w");
        boolean boolean0 = strBuilder0.endsWith("w");
        assertEquals(34, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test185261() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("w");
        boolean boolean0 = strBuilder0.endsWith("w");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test186262() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[4];
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        boolean boolean0 = strBuilder1.endsWith("bL");
        assertEquals(5, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test186263() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[4];
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        boolean boolean0 = strBuilder1.endsWith("bL");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test187264() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        String string0 = strBuilder0.leftString(99);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test187265() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        String string0 = strBuilder0.leftString(99);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test188266() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-1));
        strBuilder0.leftString((-1301));
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test189267() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        strBuilder0.appendPadding(831, 'l');
        strBuilder0.leftString(99);
        assertEquals(831, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test190268() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        String string0 = strBuilder0.rightString(102);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test190269() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        String string0 = strBuilder0.rightString(102);
        assertEquals("'; the SystemUtils property value will default to null.", string0);
    }

    @Test(timeout = 4000)
    public void test191270() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(".");
        strBuilder0.rightString((-7));
        assertEquals(33, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test191271() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(".");
        strBuilder0.rightString((-7));
        assertEquals(1, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test192272() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        String string0 = strBuilder0.rightString(31);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test192273() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        String string0 = strBuilder0.rightString(31);
        assertEquals("rty value will default to null.", string0);
    }

    @Test(timeout = 4000)
    public void test193274() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
        String string0 = strBuilder0.midString(36, 2153);
        assertEquals(88, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test193275() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
        String string0 = strBuilder0.midString(36, 2153);
        assertEquals("der$StrBuilderReader", string0);
    }

    @Test(timeout = 4000)
    public void test194276() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        strBuilder0.midString((-2861), (-1301));
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test195277() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        String string0 = strBuilder0.midString(338, 4);
        assertEquals(40, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test195278() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        String string0 = strBuilder0.midString(338, 4);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test195279() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        String string0 = strBuilder0.midString(338, 4);
        assertEquals(8, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test196280() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        String string0 = strBuilder0.midString(0, 3);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test196281() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        String string0 = strBuilder0.midString(0, 3);
        assertEquals("'; ", string0);
    }

    @Test(timeout = 4000)
    public void test196282() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        String string0 = strBuilder0.midString(0, 3);
        assertEquals(55, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test197283() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[4];
        strBuilder0.appendln(charArray0);
        strBuilder0.contains('I');
        assertEquals(5, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test198284() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
        char[] charArray0 = new char[4];
        charArray0[0] = 'j';
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        boolean boolean0 = strBuilder1.contains('j');
        assertEquals(25, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test198285() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
        char[] charArray0 = new char[4];
        charArray0[0] = 'j';
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
        boolean boolean0 = strBuilder1.contains('j');
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test199286() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-3199));
        boolean boolean0 = strBuilder0.contains(">ZkBzqx6P`yNR-&OXn6");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test199287() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-3199));
        boolean boolean0 = strBuilder0.contains(">ZkBzqx6P`yNR-&OXn6");
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test200288() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        StringBuffer stringBuffer0 = new StringBuffer(">ZkBzqx6P`yNR-&OXn6");
        strBuilder0.append(stringBuffer0);
        boolean boolean0 = strBuilder0.contains("");
        assertFalse(strBuilder0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test200289() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        StringBuffer stringBuffer0 = new StringBuffer(">ZkBzqx6P`yNR-&OXn6");
        strBuilder0.append(stringBuffer0);
        boolean boolean0 = strBuilder0.contains("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test201290() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-1));
        StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
        boolean boolean0 = strBuilder0.contains(strMatcher0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test201291() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-1));
        StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
        boolean boolean0 = strBuilder0.contains(strMatcher0);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test202292() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrMatcher strMatcher0 = StrMatcher.splitMatcher();
        boolean boolean0 = strBuilder0.contains(strMatcher0);
        assertEquals(55, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test202293() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrMatcher strMatcher0 = StrMatcher.splitMatcher();
        boolean boolean0 = strBuilder0.contains(strMatcher0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test202294() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrMatcher strMatcher0 = StrMatcher.splitMatcher();
        boolean boolean0 = strBuilder0.contains(strMatcher0);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test203295() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        int int0 = strBuilder0.indexOf('\\', (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test203296() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("");
        int int0 = strBuilder0.indexOf('\\', (-1));
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test204297() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.replaceAll("F1}$>CNgUA3WZ", "GQ?+REZy+?");
        int int0 = strBuilder0.indexOf('?');
        assertEquals(10, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test204298() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        strBuilder0.replaceAll("F1}$>CNgUA3WZ", "GQ?+REZy+?");
        int int0 = strBuilder0.indexOf('?');
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test205299() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.indexOf("4.9", (-1095));
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test205300() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.indexOf("4.9", (-1095));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test206301() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.indexOf((String) null, 2697);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test206302() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.indexOf((String) null, 2697);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test207303() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[4];
        strBuilder0.appendln(charArray0);
        strBuilder0.deleteFirst("[");
        assertEquals(5, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test208304() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
        int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_TrimMatcher0, (-3243));
        assertEquals(34, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test208305() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
        int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_TrimMatcher0, (-3243));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test208306() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
        int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_TrimMatcher0, (-3243));
        assertEquals(2, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test209307() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        int int0 = strBuilder0.indexOf((StrMatcher) null, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test209308() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        int int0 = strBuilder0.indexOf((StrMatcher) null, 0);
        assertEquals(8, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test209309() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        int int0 = strBuilder0.indexOf((StrMatcher) null, 0);
        assertEquals(40, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test210310() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.lastIndexOf('y', 30);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test210311() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        int int0 = strBuilder0.lastIndexOf('y', 30);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test211312() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        int int0 = strBuilder0.lastIndexOf('S');
        assertEquals(40, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test211313() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        int int0 = strBuilder0.lastIndexOf('S');
        assertEquals(8, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test211314() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
        int int0 = strBuilder0.lastIndexOf('S');
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test212315() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-1100));
        int int0 = strBuilder0.lastIndexOf("-", 30);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test212316() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-1100));
        int int0 = strBuilder0.lastIndexOf("-", 30);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test213317() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-3448));
        int int0 = strBuilder0.lastIndexOf((String) null, 2302);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test213318() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-3448));
        int int0 = strBuilder0.lastIndexOf((String) null, 2302);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test214319() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        int int0 = strBuilder0.lastIndexOf("-", 105);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test214320() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        int int0 = strBuilder0.lastIndexOf("-", 105);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test214321() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        int int0 = strBuilder0.lastIndexOf("-", 105);
        assertEquals(55, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test215322() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("SN15\",a,8vP%");
        int int0 = strBuilder0.lastIndexOf("", 1290);
        assertEquals(12, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test215323() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("SN15\",a,8vP%");
        int int0 = strBuilder0.lastIndexOf("", 1290);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test215324() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("SN15\",a,8vP%");
        int int0 = strBuilder0.lastIndexOf("", 1290);
        assertEquals(44, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test216325() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[6];
        strBuilder0.appendln(charArray0);
        int int0 = strBuilder0.lastIndexOf("java.awt.headless", 57);
        assertEquals(7, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test216326() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[6];
        strBuilder0.appendln(charArray0);
        int int0 = strBuilder0.lastIndexOf("java.awt.headless", 57);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test217327() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        int int0 = strBuilder0.lastIndexOf(" ,M'WWb7t", 1924);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test217328() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        int int0 = strBuilder0.lastIndexOf(" ,M'WWb7t", 1924);
        assertEquals(41, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test218329() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[4];
        strBuilder0.appendln(charArray0);
        int int0 = strBuilder0.lastIndexOf("1.6", 86);
        assertEquals(5, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test218330() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[4];
        strBuilder0.appendln(charArray0);
        int int0 = strBuilder0.lastIndexOf("1.6", 86);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test219331() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        char[] charArray0 = new char[1];
        StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
        int int0 = strBuilder0.lastIndexOf(strMatcher0, (-2648));
        assertEquals(9, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test219332() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        char[] charArray0 = new char[1];
        StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
        int int0 = strBuilder0.lastIndexOf(strMatcher0, (-2648));
        assertEquals(41, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test219333() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        char[] charArray0 = new char[1];
        StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
        int int0 = strBuilder0.lastIndexOf(strMatcher0, (-2648));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test220334() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "*a-?]Y=ektgMrbA");
        StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
        StrMatcher strMatcher0 = StrMatcher.charSetMatcher("*a-?]Y=ektgMrbA");
        int int0 = strBuilder1.lastIndexOf(strMatcher0);
        assertEquals(16, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test220335() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "*a-?]Y=ektgMrbA");
        StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
        StrMatcher strMatcher0 = StrMatcher.charSetMatcher("*a-?]Y=ektgMrbA");
        int int0 = strBuilder1.lastIndexOf(strMatcher0);
        assertEquals(14, int0);
    }

    @Test(timeout = 4000)
    public void test221336() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
        int int0 = strBuilder0.lastIndexOf(strMatcher0, 439);
        assertEquals(45, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test221337() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
        int int0 = strBuilder0.lastIndexOf(strMatcher0, 439);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test221338() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
        int int0 = strBuilder0.lastIndexOf(strMatcher0, 439);
        assertEquals(13, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test222339() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test222340() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test223341() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder((-1100));
        boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
        assertEquals(55, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test223342() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder((-1100));
        boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test223343() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder((-1100));
        boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test223344() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder((-1100));
        boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test224345() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder2 = strBuilder0.replaceFirst('m', '0');
        boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder2);
        assertFalse(strBuilder1.equals((Object) strBuilder0));
    }

    @Test(timeout = 4000)
    public void test224346() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder2 = strBuilder0.replaceFirst('m', '0');
        boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder2);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test225347() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder2 = strBuilder1.replaceFirst('o', 'O');
        boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder0);
        assertFalse(strBuilder1.equals((Object) strBuilder0));
    }

    @Test(timeout = 4000)
    public void test225348() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder2 = strBuilder1.replaceFirst('o', 'O');
        boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test226349() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = new StrBuilder(0);
        boolean boolean0 = strBuilder0.equals(strBuilder1);
        assertFalse(strBuilder1.equals((Object) strBuilder0));
    }

    @Test(timeout = 4000)
    public void test226350() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = new StrBuilder(0);
        boolean boolean0 = strBuilder0.equals(strBuilder1);
        assertEquals(13, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test226351() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = new StrBuilder(0);
        boolean boolean0 = strBuilder0.equals(strBuilder1);
        assertEquals(45, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test226352() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = new StrBuilder(0);
        boolean boolean0 = strBuilder0.equals(strBuilder1);
        assertEquals(32, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test226353() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("F1}$>CNgUA3WZ");
        StrBuilder strBuilder1 = new StrBuilder(0);
        boolean boolean0 = strBuilder0.equals(strBuilder1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test227354() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        boolean boolean0 = strBuilder1.equals(strBuilder0);
        assertEquals(87, strBuilder1.capacity());
    }

    @Test(timeout = 4000)
    public void test227355() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        boolean boolean0 = strBuilder1.equals(strBuilder0);
        assertEquals(55, strBuilder1.length());
    }

    @Test(timeout = 4000)
    public void test227356() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        boolean boolean0 = strBuilder1.equals(strBuilder0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228357() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        assertTrue(strBuilder1.equals((Object) strBuilder0));
    }

    @Test(timeout = 4000)
    public void test228358() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.replaceFirst('m', '0');
        boolean boolean0 = strBuilder1.equals(strBuilder0);
        assertFalse(strBuilder1.equals((Object) strBuilder0));
    }

    @Test(timeout = 4000)
    public void test228359() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder strBuilder1 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.replaceFirst('m', '0');
        boolean boolean0 = strBuilder1.equals(strBuilder0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test229360() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("eev%_");
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.addLast("eev%_");
        boolean boolean0 = linkedList0.removeFirstOccurrence(strBuilder0);
        assertTrue(linkedList0.contains("eev%_"));
    }

    @Test(timeout = 4000)
    public void test229361() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("eev%_");
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.addLast("eev%_");
        boolean boolean0 = linkedList0.removeFirstOccurrence(strBuilder0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test230362() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test230363() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231364() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.hashCode();
        assertEquals(55, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test231365() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        strBuilder0.hashCode();
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test232366() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder((-1798));
        // Undeclared exception!
        try {
            strBuilder0.replace((-1798), (-3226), ">6CG7c}LI[U45r");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -1798
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test233367() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        // Undeclared exception!
        try {
            strBuilder0.toCharArray(102, 57);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // end < start
            //
            verifyException("org.apache.commons.lang.text.StrBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test234368() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        char[] charArray0 = new char[1];
        strBuilder_StrBuilderTokenizer0.reset(charArray0);
        strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "");
        assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
    }

    @Test(timeout = 4000)
    public void test234369() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        char[] charArray0 = new char[1];
        strBuilder_StrBuilderTokenizer0.reset(charArray0);
        strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "");
        assertEquals(82, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test235370() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        char[] charArray0 = new char[1];
        strBuilder_StrBuilderTokenizer0.reset(charArray0);
        String string0 = strBuilder_StrBuilderTokenizer0.getContent();
        assertEquals("\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test235371() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        char[] charArray0 = new char[1];
        strBuilder_StrBuilderTokenizer0.reset(charArray0);
        String string0 = strBuilder_StrBuilderTokenizer0.getContent();
        assertEquals(55, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test235372() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
        char[] charArray0 = new char[1];
        strBuilder_StrBuilderTokenizer0.reset(charArray0);
        String string0 = strBuilder_StrBuilderTokenizer0.getContent();
        assertEquals(87, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test236373() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        assertFalse(strBuilder_StrBuilderReader0.ready());
    }

    @Test(timeout = 4000)
    public void test236374() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        int int0 = strBuilder_StrBuilderReader0.read();
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test236375() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        int int0 = strBuilder_StrBuilderReader0.read();
        assertEquals(0, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test236376() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        int int0 = strBuilder_StrBuilderReader0.read();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test237377() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[9];
        // Undeclared exception!
        try {
            strBuilder_StrBuilderReader0.read(charArray0, (-49), (-49));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test238378() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
        char[] charArray0 = new char[0];
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        // Undeclared exception!
        try {
            strBuilder_StrBuilderReader0.read(charArray0, 0, (-3283));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test239379() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[3];
        // Undeclared exception!
        try {
            strBuilder_StrBuilderReader0.read(charArray0, 39, 0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test240380() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        char[] charArray0 = new char[6];
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        // Undeclared exception!
        try {
            strBuilder_StrBuilderReader0.read(charArray0, 6, 108);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test241381() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        // Undeclared exception!
        try {
            strBuilder_StrBuilderReader0.read(charArray0, 1, Integer.MAX_VALUE);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test242382() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
        assertEquals(41, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test242383() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test242384() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(" ,M'WWb7t");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[1];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
        assertEquals(9, strBuilder0.length());
    }

    @Test(timeout = 4000)
    public void test243385() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        CharBuffer charBuffer0 = CharBuffer.allocate(3);
        int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
        assertEquals(0, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test243386() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        CharBuffer charBuffer0 = CharBuffer.allocate(3);
        int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test243387() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        CharBuffer charBuffer0 = CharBuffer.allocate(3);
        int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test244388() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[4];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0);
        assertFalse(strBuilder_StrBuilderReader0.ready());
    }

    @Test(timeout = 4000)
    public void test244389() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder("K>");
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        char[] charArray0 = new char[4];
        int int0 = strBuilder_StrBuilderReader0.read(charArray0);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test245390() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        long long0 = strBuilder_StrBuilderReader0.skip((-1L));
        assertEquals(0, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test245391() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        long long0 = strBuilder_StrBuilderReader0.skip((-1L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test245392() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder();
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        long long0 = strBuilder_StrBuilderReader0.skip((-1L));
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test246393() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        long long0 = strBuilder_StrBuilderReader0.skip(1734L);
        assertEquals(32, strBuilder0.capacity());
    }

    @Test(timeout = 4000)
    public void test246394() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        long long0 = strBuilder_StrBuilderReader0.skip(1734L);
        assertEquals(0, strBuilder0.size());
    }

    @Test(timeout = 4000)
    public void test246395() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        long long0 = strBuilder_StrBuilderReader0.skip(1734L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test246396() throws Throwable {
        StrBuilder strBuilder0 = new StrBuilder(0);
        StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
        long long0 = strBuilder_StrBuilderReader0.skip(1734L);
        assertFalse(strBuilder_StrBuilderReader0.ready());
    }
}
