/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:50:33 GMT 2024
 */
package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StringEscapeUtils_ESTest extends StringEscapeUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(2117);
        StringEscapeUtils.escapeJava((Writer) stringWriter0, "T");
        assertEquals("T", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String string0 = StringEscapeUtils.escapeJavaScript(" \t\r\n\b");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        String string0 = StringEscapeUtils.escapeJavaScript(" \t\r\n\b");
        assertEquals(" \\t\\r\\n\\b", string0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeJavaScript((Writer) null, "l9_Bpvxl1X{!");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava(" \t\r\nRe");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava(" \t\r\nRe");
        assertEquals(" \\t\\r\\nRe", string0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.escapeJavaScript((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.escapeJavaScript((Writer) null, "iC$aWoN^");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava("zW4X8x|UQ\"'l");
        assertEquals("zW4X8x|UQ\\\"'l", string0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        String string0 = StringEscapeUtils.escapeJavaScript("Qt/,RE-u+rW,I");
        assertEquals("Qt\\/,RE-u+rW,I", string0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        String string0 = StringEscapeUtils.escapeJavaScript("ANcR3'(jSGHLvg`nBA");
        assertEquals("ANcR3\\'(jSGHLvg`nBA", string0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        String string0 = StringEscapeUtils.unescapeJavaScript((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeJava((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        String string0 = "\\u9o000";
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeJavaScript(string0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Unable to parse unicode value: 9o00
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        String string0 = StringEscapeUtils.unescapeJavaScript("The Wtiter mst ot be n\\l");
        assertEquals("The Wtiter mst ot be nl", string0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        String string0 = StringEscapeUtils.unescapeJavaScript("p");
        assertEquals("p", string0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        String string0 = StringEscapeUtils.escapeHtml("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        String string0 = StringEscapeUtils.escapeHtml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.escapeHtml((Writer) null, "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(0);
        StringEscapeUtils.escapeHtml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        String string0 = StringEscapeUtils.unescapeHtml("The Wtiter must not be nl");
        assertEquals("The Wtiter must not be nl", string0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        String string0 = StringEscapeUtils.unescapeHtml("The Wtiter must not be nl");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        String string0 = StringEscapeUtils.unescapeHtml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeHtml((Writer) null, "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeHtml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.escapeXml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.escapeXml((Writer) null, "F+UGzGr]f3");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(2633);
        StringEscapeUtils.escapeXml((Writer) stringWriter0, "tWpkwS~n@zO");
        assertEquals("tWpkwS~n@zO", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        String string0 = StringEscapeUtils.escapeXml("tWwS~n@O");
        assertEquals("tWwS~n@O", string0);
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        String string0 = StringEscapeUtils.escapeXml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeXml((Writer) stringWriter0, "n6GN~|>T(zzBGqf0pr");
        assertEquals("n6GN~|>T(zzBGqf0pr", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeXml((Writer) null, "!Bja#n");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeXml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        String string0 = StringEscapeUtils.unescapeXml("tWpkwS~n@zO");
        assertEquals("tWpkwS~n@zO", string0);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        String string0 = StringEscapeUtils.unescapeXml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        String string0 = StringEscapeUtils.escapeSql("WpkwS~@zO");
        assertEquals("WpkwS~@zO", string0);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        String string0 = StringEscapeUtils.escapeSql((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        String string0 = StringEscapeUtils.escapeCsv((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.escapeCsv((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(0);
        StringEscapeUtils.escapeCsv((Writer) stringWriter0, "w#KA|:9");
        assertEquals("w#KA|:9", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        String string0 = StringEscapeUtils.escapeCsv(";kz ,WNdAs^D6m`\"xht");
        assertEquals("\";kz ,WNdAs^D6m`\"\"xht\"", string0);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        String string0 = StringEscapeUtils.unescapeCsv("\">Dm/tEQQu<*~,HL\"");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        String string0 = StringEscapeUtils.unescapeCsv("\">Dm/tEQQu<*~,HL\"");
        assertEquals(">Dm/tEQQu<*~,HL", string0);
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        String string0 = StringEscapeUtils.unescapeCsv((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        StringEscapeUtils.unescapeCsv((Writer) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        String string0 = StringEscapeUtils.unescapeCsv("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        String string0 = StringEscapeUtils.unescapeCsv("uu000");
        assertEquals("uu000", string0);
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        String string0 = StringEscapeUtils.unescapeCsv("\"?(=s?[C.RwWh`u.wK");
        assertEquals("\"?(=s?[C.RwWh`u.wK", string0);
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeCsv((Writer) stringWriter0, "\"n\"");
        assertEquals("\"n\"", stringWriter0.toString());
    }
}
