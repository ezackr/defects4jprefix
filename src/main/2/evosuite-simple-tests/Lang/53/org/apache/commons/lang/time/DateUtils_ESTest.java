/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 15:17:33 GMT 2024
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.TimeZone;
import org.apache.commons.lang.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(2, DateUtils.RANGE_WEEK_MONDAY);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 0);
        Date date0 = DateUtils.addMinutes(mockDate0, 0);
        assertEquals("Sun Dec 31 00:00:00 GMT 1899", date0.toString());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addWeeks((Date) null, (-3907));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Date date1 = DateUtils.addYears(date0, (-2945));
        assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMilliseconds((Date) null, (-3907));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addDays(mockDate0, 1);
        assertEquals("Sat Feb 15 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addMonths(mockDate0, 0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addSeconds((Date) null, 1473);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 13, 13);
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 4);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61721827200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(543, 543, 543, 543, 543, 543);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.remove();
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.time.DateUtils$DateIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        dateUtils_DateIterator0.hasNext();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Date) mockDate0, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1), (-1), (-1));
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(23, 23, 23, 23, 23, 23);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ROOT;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Date) mockDate0, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Date date1 = DateUtils.addHours(date0, (-2945));
        boolean boolean0 = DateUtils.isSameInstant(date0, date1);
        assertEquals("Mon Jun 04 07:00:00 GMT 1582", date1.toString());
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Date date1 = DateUtils.addHours(date0, (-2945));
        boolean boolean0 = DateUtils.isSameInstant(date0, date1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 10);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392408000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 10);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 13, 13);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-2935), (-2935), (-2935));
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1, 1);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(1, (-169), (-169));
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133087540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        Calendar calendar0 = MockCalendar.getInstance();
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.set(1, 1);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        mockGregorianCalendar0.add(0, (-2944));
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        String[] stringArray0 = new String[0];
        // Undeclared exception!
        try {
            DateUtils.parseDate((String) null, stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.parseDate("{S/hv*F7", (String[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "#G~";
        // Undeclared exception!
        try {
            DateUtils.parseDate("", stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDate("", stringArray0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        try {
            DateUtils.parseDate("hji+v,(B:x3A)ULE{", stringArray0);
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Unable to parse the date: hji+v,(B:x3A)ULE{
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Date) null, (-2945));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Calendar) null, 1730);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.round((Object) mockGregorianCalendar0, (-2947));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field -2947 is not supported
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Object) null, 86400000);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        MockDate mockDate0 = new MockDate(3, 3, 0);
        Date date0 = DateUtils.round((Object) mockDate0, 0);
        assertEquals("Thu Jan 01 00:00:00 GMT 1903", date0.toString());
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            DateUtils.round(object0, 500);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not round java.lang.Object@421dbaed
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        MockDate mockDate0 = new MockDate((-751), (-751), (-751), (-751), (-751));
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) mockDate0, (-751));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field -751 is not supported
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Date) null, (-3894));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Calendar) null, 1000);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) null, (-6));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) mockGregorianCalendar0, 2014);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 2014 is not supported
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            DateUtils.truncate(object0, 500);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not truncate java.lang.Object@470441c9
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(280000000, 280000000, 280000000, 280000000, 280000000);
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) mockGregorianCalendar0, 1);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Calendar value too large for accurate calculations
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 14);
        assertNotSame(calendar0, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test5560() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 14);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        System.setCurrentTimeMillis(616L);
        Calendar calendar0 = MockCalendar.getInstance();
        // Undeclared exception!
        try {
            DateUtils.round(calendar0, (-1085));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field -1085 is not supported
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 13);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test5863() throws Throwable {
        MockDate mockDate0 = new MockDate((-2944));
        Date date0 = DateUtils.round((Date) mockDate0, 1001);
        assertEquals("Mon Dec 01 00:00:00 GMT 1969", date0.toString());
    }

    @Test(timeout = 4000)
    public void test5964() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 12);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409260000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test6065() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Date date1 = DateUtils.round(date0, 1);
        assertEquals("Mon Jan 01 00:00:00 GMT 1582", date1.toString());
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392508800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=47,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 13, 13);
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 9);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61721827200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        MockDate mockDate0 = new MockDate((-2947), (-2947), (-2947), (-2947), (-2947));
        Date date0 = DateUtils.round((Date) mockDate0, 1001);
        assertEquals("Tue Jan 01 00:00:00 GMT 1302", date0.toString());
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 9);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Iterator iterator0 = DateUtils.iterator((Object) date0, 1);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test6671() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Date) null, (-3848));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test6772() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) null, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test6873() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, 2, 2, 2);
        Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 2);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test6974() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 5);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test7075() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.iterator((Object) mockGregorianCalendar0, 6);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test7176() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 13, 13);
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) mockGregorianCalendar0, 13);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 13 is not valid.
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7277() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 1513);
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 3);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61934284800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=142,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test7378() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 4);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test7479() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7580() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) "", (-1));
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not iterate based on
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7681() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, (Calendar) null);
        dateUtils_DateIterator0.next();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test7782() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.next();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.time.DateUtils$DateIterator", e);
        }
    }
}
