/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 15:07:58 GMT 2024
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
        assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(21, int0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.toString();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Locale locale0 = Locale.CHINA;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(111, 111, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 111
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("M219Z");
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        fastDateFormat0.getTimeZone();
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        String string0 = fastDateFormat0.format((-2081L));
        assertEquals("23:59:57 o'clock GMT", string0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(15, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1143, 1143);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("Monday, May 17, 0101", string0);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(1999, 1999, timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 1999
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("zzZ", timeZone0);
        assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("zzZ", timeZone0);
        String string0 = fastDateFormat0.format(0L);
        assertEquals("GMT-18:00-1800", string0);
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        Locale locale0 = Locale.ROOT;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("AY`,8", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("kzz");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("20GMT", string0);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("kzz");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        try {
            fastDateFormat0.parseObject("org.apache.commons.lang.time.FastDateFormat$CharacterLiteral");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Format.parseObject(String) failed
            //
            verifyException("java.text.Format", e);
        }
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getLocale();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(103, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 103
            //
            verifyException("java.text.DateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null, locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", string0);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("{MM d, yEyy");
        String string0 = fastDateFormat0.format((-2658L));
        assertEquals("{12 31, 69Wed69", string0);
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("B");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("*CET6=r/t~!'aSK9YE!");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("D8c}FA");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("FastDateFormat[");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("kG0Z<O\"U");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: O
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".WI2f");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Jgv8O^tw.k!dd  _k");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("#Ke(k`V,a'c6");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("[EL");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3139() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("N\"2U:Uc-}KV/v,)6");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: N
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3240() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("S68P&'fk.");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3341() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("G8/3Q");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Q
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3442() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("7.Rw %Y");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3543() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("\"TSi");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("h{U_x+GM");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Va9tPLM?}g1^r");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3846() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("XU|j");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test3947() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Y`]8");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Y
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4048() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("8s|3&:b");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: b
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4149() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Z#f.f K#;mve?,K");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4250() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("gn");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4351() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("5s~ai#mkcrj!XkAq");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4452() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("-\"j");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: j
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4553() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("lo");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4654() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("<+&.6E~|nE");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4755() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("|G:o");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4856() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("pTf");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: p
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test4957() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("qr(<Dsv*sdoO>d>");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5058() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("=r5Ah|");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5159() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("<ul>");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: u
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5260() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("&+{v$J)QwN->w=p");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("a21wZ");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("xVO\"B$:Xd");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: x
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("zzZZ");
        String string0 = fastDateFormat0.format((long) 2);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test5564() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("zzZZ");
        String string0 = fastDateFormat0.format((long) 2);
        assertEquals("GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test5665() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5'");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test5766() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(3, 0, 2, 1, 2);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5767() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(3, 0, 2, 1, 2);
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
        assertEquals(14, attributedCharacterIterator0.getRunLimit());
    }

    @Test(timeout = 4000)
    public void test5868() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("+z^Z");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
        assertEquals(10, attributedCharacterIterator0.getRunLimit());
    }

    @Test(timeout = 4000)
    public void test5969() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.formatToCharacterIterator((Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6070() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Object object0 = new Object();
        // Undeclared exception!
        try {
            fastDateFormat0.formatToCharacterIterator(object0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: java.lang.Object
            //
            verifyException("org.apache.commons.lang.time.FastDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test6171() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 1);
        fastDateFormat0.equals(mockGregorianCalendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6172() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 1);
        fastDateFormat0.equals(mockGregorianCalendar0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6273() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 2);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test6274() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 2);
        fastDateFormat0.equals(fastDateFormat1);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6275() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 2);
        fastDateFormat0.equals(fastDateFormat1);
        assertEquals(28, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6376() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.equals(fastDateFormat0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6477() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMM d,yyy");
        Locale locale0 = Locale.TAIWAN;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("MMM d,yyy", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(11, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6478() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMM d,yyy");
        Locale locale0 = Locale.TAIWAN;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("MMM d,yyy", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6579() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("_=aS");
        String string0 = fastDateFormat0.format((-737L));
        assertEquals("_=PM263", string0);
    }

    @Test(timeout = 4000)
    public void test6580() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("_=aS");
        String string0 = fastDateFormat0.format((-737L));
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6681() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((long) (-609));
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6682() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((long) (-609));
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6683() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.format((long) (-609));
        assertEquals("12/31/69 11:59 PM", string0);
    }

    @Test(timeout = 4000)
    public void test6784() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 1);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("Friday, April 1, 0001", string0);
    }

    @Test(timeout = 4000)
    public void test6885() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        String string0 = fastDateFormat0.format((long) 0);
        assertEquals("Thursday, January 1, 1970 12:00:00 AM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test6986() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`zkW");
        String string0 = fastDateFormat0.format((long) 2);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test6987() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`zkW");
        String string0 = fastDateFormat0.format((long) 2);
        assertEquals("`GMT241", string0);
    }

    @Test(timeout = 4000)
    public void test7088() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "1", 1, 1, 1, 1, 1, 1, 1, 1, 1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("12:00:00 AM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test7189() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("12:00:00 AM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test7290() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "1", 1, 1, 1, 1, 1, 1, 1, 1, 1);
        simpleTimeZone0.setEndRule(1, 1, 110);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("12:00:00 AM GMT+00:00", string0);
    }
}
