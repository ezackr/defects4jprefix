/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 12:28:08 GMT 2024
 */
package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        float float0 = NumberUtils.max((-131.94F), (-131.94F), (-131.94F));
        assertEquals((-131.94F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double double0 = NumberUtils.toDouble("InvocationTargetException occurred");
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        double double0 = NumberUtils.min((double) (short) (-14), (double) (short) (-14), (double) (short) (-14));
        assertEquals((-14.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        int[] intArray0 = new int[2];
        intArray0[0] = (int) (short) numberUtils0.SHORT_ONE;
        int int0 = NumberUtils.min(intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        byte byte0 = NumberUtils.toByte("|ApV2AP");
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = NumberUtils.max((double) 0, (double) 0, (double) 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        long long0 = NumberUtils.toLong("%A%");
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        int int0 = NumberUtils.toInt("^o@kJusM]eIi|nk8rVVh");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        float float0 = NumberUtils.toFloat("MB");
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        short short0 = NumberUtils.toShort("'//");
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        int int0 = NumberUtils.toInt((String) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        long long0 = NumberUtils.toLong((String) null, 193L);
        assertEquals(193L, long0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        byte byte0 = NumberUtils.toByte((String) null, (byte) 70);
        assertEquals((byte) 70, byte0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        short short0 = NumberUtils.toShort((String) null, (short) (-19956));
        assertEquals((short) (-19956), short0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Number number0 = NumberUtils.createNumber("0.0F");
        assertEquals(0.0F, number0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        Number number0 = NumberUtils.createNumber((String) null);
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        try {
            NumberUtils.createNumber("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // A blank string is not a valid number
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Number number0 = NumberUtils.createNumber("--The Array must not be null");
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        try {
            NumberUtils.createNumber("0x");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        Number number0 = NumberUtils.createNumber("-0xdE");
        assertEquals((-222), number0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        try {
            NumberUtils.createNumber("0e~q6");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        try {
            NumberUtils.createNumber("YX.fkE2]>%M)oeRw");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // YX.fkE2]>%M)oeRw is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        try {
            NumberUtils.createNumber(" is not a valid number.");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            //  is not a valid number. is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        try {
            NumberUtils.createNumber(".(tAhE");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // .(tAhE is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        Number number0 = NumberUtils.createNumber("0F");
        assertEquals((short) 0, number0.shortValue());
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        try {
            NumberUtils.createNumber("OvYefyBZrq{}T+(mE");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // OvYefyBZrq{}T+(mE is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        try {
            NumberUtils.createNumber(" 0.");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        try {
            NumberUtils.createNumber("0em");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0em is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        Number number0 = NumberUtils.createNumber("1D");
        assertEquals(1.0, number0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        Number number0 = NumberUtils.createNumber("0L");
        assertEquals(0L, number0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        try {
            NumberUtils.createNumber("d");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // d is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        try {
            NumberUtils.createNumber("P=5T.56[B5-HA-;f");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // P=5T.56[B5-HA-;f is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        try {
            NumberUtils.createNumber("-0hxl");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // -0hxl is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        try {
            NumberUtils.createNumber("i.P5a'xIt$XR'M>k1l");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // i.P5a'xIt$XR'M>k1l is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        try {
            NumberUtils.createNumber("The Array must not be null");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // The Array must not be null is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        Number number0 = NumberUtils.createNumber("-0L");
        assertEquals(0L, number0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        Number number0 = NumberUtils.createNumber("12F");
        assertEquals(12.0F, number0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        try {
            NumberUtils.createNumber("-eEf2");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"eEf2\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        Number number0 = NumberUtils.createNumber("0.");
        assertEquals(0.0F, number0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        Number number0 = NumberUtils.createNumber(".82");
        assertEquals(0.82F, number0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        Float float0 = NumberUtils.createFloat((String) null);
        assertNull(float0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        Double double0 = NumberUtils.createDouble((String) null);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        Integer integer0 = NumberUtils.createInteger((String) null);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        Long long0 = NumberUtils.createLong((String) null);
        assertNull(long0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
        assertNull(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
        assertNull(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((long[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            NumberUtils.min(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        long[] longArray0 = new long[3];
        longArray0[2] = (-82L);
        long long0 = NumberUtils.min(longArray0);
        assertEquals((-82L), long0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            NumberUtils.min(intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = NumberUtils.min(intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        short[] shortArray0 = new short[0];
        // Undeclared exception!
        try {
            NumberUtils.min(shortArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        short[] shortArray0 = new short[8];
        shortArray0[7] = (short) (-10972);
        short short0 = NumberUtils.min(shortArray0);
        assertEquals((short) (-10972), short0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            NumberUtils.min(byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        byte[] byteArray0 = new byte[10];
        byteArray0[0] = (byte) 1;
        byte byte0 = NumberUtils.min(byteArray0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        double[] doubleArray0 = new double[3];
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        try {
            NumberUtils.min(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[1] = Double.NaN;
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1735.2377593656;
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        float[] floatArray0 = new float[0];
        // Undeclared exception!
        try {
            NumberUtils.min(floatArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        float[] floatArray0 = new float[4];
        floatArray0[2] = Float.NaN;
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        float[] floatArray0 = new float[17];
        floatArray0[0] = (float) (long) numberUtils0.LONG_ONE;
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            NumberUtils.max(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((long[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        long[] longArray0 = new long[10];
        longArray0[0] = (-40L);
        long long0 = NumberUtils.max(longArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = NumberUtils.max(intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            NumberUtils.max(intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        int[] intArray0 = new int[2];
        intArray0[0] = (int) (byte) numberUtils0.BYTE_MINUS_ONE;
        int int0 = NumberUtils.max(intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        short[] shortArray0 = new short[0];
        // Undeclared exception!
        try {
            NumberUtils.max(shortArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        short[] shortArray0 = new short[2];
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        short[] shortArray0 = new short[2];
        shortArray0[0] = (short) (-10951);
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            NumberUtils.max(byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[3] = (byte) 83;
        byte byte0 = NumberUtils.max(byteArray0);
        assertEquals((byte) 83, byte0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        try {
            NumberUtils.max(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[4] = Double.NaN;
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        double[] doubleArray0 = new double[13];
        doubleArray0[0] = (-1.0);
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        float[] floatArray0 = new float[0];
        // Undeclared exception!
        try {
            NumberUtils.max(floatArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[2] = Float.NaN;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        float[] floatArray0 = new float[2];
        floatArray0[1] = (float) (short) numberUtils0.SHORT_ONE;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        long long0 = NumberUtils.min(0L, 0L, (-5080L));
        assertEquals((-5080L), long0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        long long0 = NumberUtils.min(3193L, (-2599L), 2884L);
        assertEquals((-2599L), long0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        int int0 = NumberUtils.min(64, 64, (-85));
        assertEquals((-85), int0);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        int int0 = NumberUtils.min((-5), (-741), (-5));
        assertEquals((-741), int0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        short short0 = NumberUtils.min((short) (byte) 0, (short) (byte) 0, (short) (-1250));
        assertEquals((short) (-1250), short0);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        short short0 = NumberUtils.min((short) (byte) 0, (short) (byte) (-77), (short) (byte) (-77));
        assertEquals((short) (-77), short0);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        byte byte0 = NumberUtils.min((byte) (-43), (byte) (-43), (byte) (-64));
        assertEquals((byte) (-64), byte0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 68, (byte) 8, (byte) 101);
        assertEquals((byte) 8, byte0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        long long0 = NumberUtils.max((long) 0, (long) 0, (long) (short) 7410);
        assertEquals(7410L, long0);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        long long0 = NumberUtils.max((-1L), (long) (short) 0, (-1L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        int int0 = NumberUtils.max((-504), (-504), 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        int int0 = NumberUtils.max(23, 971, 23);
        assertEquals(971, int0);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        short short0 = NumberUtils.max((short) (-10951), (short) 7392, (short) (-10951));
        assertEquals((short) 7392, short0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        short short0 = NumberUtils.max((short) 0, (short) 0, (short) 995);
        assertEquals((short) 995, short0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 24, (byte) 100, (byte) 100);
        assertEquals((byte) 100, byte0);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 48, (byte) 48, (byte) 68);
        assertEquals((byte) 68, byte0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("4e.");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0x-");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("L");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0.L");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0xE");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x6u%]%dz");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0xBEdE|3");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("...");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0e.)");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("9El");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("8E+jCCOP!");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("6eeC");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("Etsn9py<9Q");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("7-(sq,nKV(24zQo8");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(".82");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("6e");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("E");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("..");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(".");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("d");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("D");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("f");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("F");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("--");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0L");
        assertTrue(boolean0);
    }
}
