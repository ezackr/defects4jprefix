/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 11:44:17 GMT 2024
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.FieldPosition;
import java.text.Format;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("s8> zzMMS +EM'/$Q\"b", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1, 1, 1, 1, (-4803), 0);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        assertEquals("08> GMT010 +\u67081/$Q\"b", string0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("s8> zzMMS +EM'/$Q\"b", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1, 1, 1, 1, (-4803), 0);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        assertEquals(26, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G)z;k", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        assertEquals("FastDatePrinter[G)z;k,zh,GMT]", string0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G)z;k", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        fastDatePrinter0.getLocale();
        assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        fastDatePrinter0.hashCode();
        assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Gz8", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, 1);
        String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
        assertEquals("\u897F\u66A6GMT8", string0);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Gz8", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, 1);
        String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
        assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G)z;k", timeZone0, locale0);
        fastDatePrinter0.getPattern();
        assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("HZZ", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 3);
        assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("HZZ", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 3);
        assertEquals("0+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getTimeZone();
        assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("HHH7Z", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 3);
        assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("HHH7Z", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 3);
        assertEquals("0007+0000", string0);
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hH<98Z", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((-5866L));
        assertEquals("1123<98+0000", string0);
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hH<98Z", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((-5866L));
        assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("EyyMS 8", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(10, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("EyyMS 8", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("Fr142320 8", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("}A", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("BnF]Y", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("ZC-drP8Oe?@(<M", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        TimeZone timeZone0 = TimeZone.getTimeZone("]8 D-zMMMUK:dQ");
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("]8 D-zMMMUK:dQ", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("FastDatePrinter[", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("Illegal pattern component: ", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("\"JQ}R;xb", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("Kq>6", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("akkzzL17", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("1N[$RbWf3-uS.M;b", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: N
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        Locale locale0 = Locale.KOREA;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("Ouy(6GyeO|.", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: O
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("Pk7KJug'`qd4l9T!&", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("s8> zzMMS +M/$Q\")b", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Q
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("0]?''-Ra+KL;{", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("T7p.`89@|r;vs#5", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("7VE{", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("=\"zMMW)2w", timeZone0, locale0);
        assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("XTg1|%Rz0oyGlk).", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("kY/|LI;jT!]*Au", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Y
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("HdbZ[[w", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: b
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("3a+'M.wosjOF.I'yc", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("Ze~hw8^C{|%6Ti}", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("]y8 -MMMMfvdQ", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("(g`ZbP", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("iB", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("s8> zzMjMS +M/$Q\")b");
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("s8> zzMjMS +M/$Q\")b", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: j
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3845() throws Throwable {
        Locale locale0 = Locale.KOREA;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("lr|Xdwz:t-Gh8~]UTc1", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3946() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("E*_m?yR%BR'f", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4047() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("ZZnR=xou{K", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4148() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("org.apache.commons.lang3.time.FastDatePrinter$StringLiteral", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4249() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("p", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: p
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4350() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("rj, Rp18J4%)^q_", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4451() throws Throwable {
        Locale locale0 = Locale.ROOT;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter(".<$uG", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: u
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4552() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("v[6h; y", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4653() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        try {
            fastDatePrinter0 = new FastDatePrinter("|4xjOc_v", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: x
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4754() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("EEEE", timeZone0, locale0);
        assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test4855() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(0, 1, 2, 3, 2);
        StringBuffer stringBuffer0 = new StringBuffer(0);
        fastDatePrinter0.format((Object) mockDate0, stringBuffer0, (FieldPosition) null);
        assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test4956() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("HH<Z", timeZone0, locale0);
        Long long0 = new Long(0L);
        FieldPosition fieldPosition0 = new FieldPosition(3);
        // Undeclared exception!
        try {
            fastDatePrinter0.format((Object) long0, (StringBuffer) null, fieldPosition0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral", e);
        }
    }

    @Test(timeout = 4000)
    public void test5057() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPANESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        StringBuffer stringBuffer0 = new StringBuffer(0);
        FieldPosition fieldPosition0 = new FieldPosition(3);
        fastDatePrinter0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5158() throws Throwable {
        Locale locale0 = Locale.KOREA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M|yS#8", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "M|yS#8");
        FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
        // Undeclared exception!
        try {
            fastDatePrinter0.format((Object) null, stringBuffer0, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test5259() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        // Undeclared exception!
        try {
            fastDatePrinter0.format((Object) locale0, stringBuffer0, (FieldPosition) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: java.util.Locale
            //
            verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
        }
    }

    @Test(timeout = 4000)
    public void test5360() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("H98Z", timeZone0, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter0);
        assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("H98Z", timeZone0, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'&>", (TimeZone) null, locale0);
        fastDatePrinter0.equals("'&>");
        assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("H98Z", timeZone0, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("098+0000", timeZone0, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5564() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("H98Z", timeZone0, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("098+0000", timeZone0, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5665() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("-8Z", "-8Z", "-8Z");
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3950), ".Wjew)|sfn,X$+|ZWj");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("]", timeZone0, locale0);
        fastDatePrinter0.equals(fastDatePrinter1);
        assertEquals(1, fastDatePrinter1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5666() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("-8Z", "-8Z", "-8Z");
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3950), ".Wjew)|sfn,X$+|ZWj");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("]", timeZone0, locale0);
        fastDatePrinter0.equals(fastDatePrinter1);
        assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5767() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'&>", timeZone0, locale0);
        Locale locale1 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'&>", timeZone0, locale1);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5768() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'&>", timeZone0, locale0);
        Locale locale1 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'&>", timeZone0, locale1);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        assertEquals(2, fastDatePrinter1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5869() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M|yS#8", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((-136L));
        assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test5870() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M|yS#8", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((-136L));
        assertEquals("12|1969864#8", string0);
    }

    @Test(timeout = 4000)
    public void test5971() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M*-|yS 8", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.set(3, (-2676), (-2676), 3, 3);
        StringBuffer stringBuffer0 = new StringBuffer("M*-|yS 8");
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(21, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test5972() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M*-|yS 8", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.set(3, (-2676), (-2676), 3, 3);
        StringBuffer stringBuffer0 = new StringBuffer("M*-|yS 8");
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(15, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6073() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("HHH7Z", "HHH7Z", "HHH7Z");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2, 2, 1, 0);
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" kDDW", timeZone0, locale0);
        mockGregorianCalendar0.set(1, 0, 0, 3, 3);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(" 33665", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test6074() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("HHH7Z", "HHH7Z", "HHH7Z");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2, 2, 1, 0);
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" kDDW", timeZone0, locale0);
        mockGregorianCalendar0.set(1, 0, 0, 3, 3);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135845020000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=366,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=3,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test6175() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hH<98Z", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 0);
        assertEquals("120<98+0000", string0);
    }

    @Test(timeout = 4000)
    public void test6176() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hH<98Z", timeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 0);
        assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6277() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "G)zk", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        Locale locale0 = new Locale("G)zk", "G)zk");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G)zk", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 1);
        assertEquals("AD)GMT+00:0024", string0);
    }

    @Test(timeout = 4000)
    public void test6278() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "G)zk", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        Locale locale0 = new Locale("G)zk", "G)zk");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G)zk", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 1);
        assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6379() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "G)zk", 1, 1, 1, 1, 1, 1, 1, 1);
        Locale locale0 = new Locale("G)zk", "G)zk");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G)zk", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 1);
        assertEquals("AD)GMT+01:001", string0);
    }

    @Test(timeout = 4000)
    public void test6380() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "G)zk", 1, 1, 1, 1, 1, 1, 1, 1);
        Locale locale0 = new Locale("G)zk", "G)zk");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G)zk", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) 1);
        assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6481() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1271), "&EyS 8");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("HH<Z", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) (-1271));
        assertEquals("23<-0000", string0);
    }

    @Test(timeout = 4000)
    public void test6482() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1271), "&EyS 8");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("HH<Z", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((long) (-1271));
        assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test6583() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 110, locale0);
    }
}
