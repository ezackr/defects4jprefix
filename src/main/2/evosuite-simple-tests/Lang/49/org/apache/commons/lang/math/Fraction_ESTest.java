/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 15:01:49 GMT 2024
 */
package org.apache.commons.lang.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-2147483643));
        // Undeclared exception!
        try {
            fraction0.add(fraction0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fraction0.TWO_THIRDS.hashCode();
        assertEquals(1, fraction0.getNumerator());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fraction0.TWO_THIRDS.hashCode();
        assertEquals(1, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2147483643), 977);
        String string0 = fraction0.toProperString();
        assertEquals("-2198038 517/977", string0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(63.0);
        long long0 = fraction0.longValue();
        assertEquals(63.0, fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(63.0);
        long long0 = fraction0.longValue();
        assertEquals(1, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(63.0);
        long long0 = fraction0.longValue();
        assertEquals(63L, long0);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(63.0);
        float float0 = fraction0.floatValue();
        assertEquals(63.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(63.0);
        float float0 = fraction0.floatValue();
        assertEquals(63, fraction0.getNumerator());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2571), 1, 46);
        int int0 = fraction0.intValue();
        assertEquals((-2571.0217F), fraction0.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2571), 1, 46);
        int int0 = fraction0.intValue();
        assertEquals((-2571), int0);
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        double double0 = fraction0.doubleValue();
        assertEquals(0.4, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals(1, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals((byte) 0, fraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction(0, 0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The denominator must not be zero
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2147483641), (-2147483641));
        Fraction fraction1 = Fraction.ONE;
        // Undeclared exception!
        try {
            fraction0.add(fraction1);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: can't negate
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction((-946), Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: can't negate
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction(0, 0, 0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The denominator must not be zero
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction((-2571), (-2571), (-2571));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The denominator must not be negative
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction(11, (-1), 11);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The numerator must not be negative
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction(2147483620, 2147483620, 2147483620);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Numerator too large to represent as an Integer.
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction((-67108863), 1879, 1879);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Numerator too large to represent as an Integer.
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getReducedFraction(0, 0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The denominator must not be zero
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getReducedFraction(1, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: can't negate
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getReducedFraction(Integer.MIN_VALUE, (-1));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: can't negate
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction((double) Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The value must not be greater than Integer.MAX_VALUE or NaN
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-307.269916));
        Fraction fraction1 = fraction0.TWO_QUARTERS.reduce();
        assertEquals(2, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-307.269916));
        Fraction fraction1 = fraction0.TWO_QUARTERS.reduce();
        assertEquals(0.5, fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-307.269916));
        Fraction fraction1 = fraction0.TWO_QUARTERS.reduce();
        assertEquals((-307.2699160091626), fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction("1 yw");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // The fraction could not be parsed as the format X Y/Z
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The string must not be null
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction("K/d4:gFCd5'8C.+2");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        // Undeclared exception!
        try {
            Fraction.getFraction("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        Fraction fraction0 = Fraction.getFraction("-2198038 517/977");
        assertEquals((-2198038.5291709313), fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-2147483641));
        Fraction fraction1 = fraction0.reduce();
        assertSame(fraction1, fraction0);
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-2147483641));
        Fraction fraction1 = fraction0.reduce();
        assertEquals((-2.147483641E9), fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-2147483641));
        Fraction fraction1 = fraction0.reduce();
        assertEquals((-2147483641), fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2147483641), 847);
        Fraction fraction1 = fraction0.invert();
        int int0 = fraction1.compareTo(fraction0);
        assertEquals((-3.944151116353021E-7), fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2147483641), 847);
        Fraction fraction1 = fraction0.invert();
        int int0 = fraction1.compareTo(fraction0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(1.4598424691314449E-9);
        // Undeclared exception!
        try {
            fraction0.invert();
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Unable to invert zero.
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3041() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, 494);
        // Undeclared exception!
        try {
            fraction0.divideBy(fraction1);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: can't negate numerator
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3142() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        // Undeclared exception!
        try {
            fraction0.THREE_QUARTERS.pow(Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 17);
        // Undeclared exception!
        try {
            fraction0.negate();
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: too large to negate
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        Fraction fraction1 = fraction0.abs();
        assertEquals((-1.0), fraction0.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3345() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        Fraction fraction1 = fraction0.abs();
        assertEquals(1.0, fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3446() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
        assertEquals(0.6F, fraction1.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test3547() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = fraction0.ONE_QUARTER.pow(0);
        assertEquals((short) 1, fraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test3648() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        // Undeclared exception!
        try {
            fraction0.pow((-5243));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3749() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-2147483643));
        Fraction fraction1 = Fraction.ONE_QUARTER;
        // Undeclared exception!
        try {
            fraction0.add(fraction1);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mul
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3850() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        // Undeclared exception!
        try {
            fraction0.pow(46);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: mulPos
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test3951() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.ONE;
        Fraction fraction2 = fraction0.add(fraction1);
        assertEquals(1.75F, fraction2.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test4052() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getReducedFraction((-294), 2147483633);
        // Undeclared exception!
        try {
            fraction1.subtract(fraction0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4153() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals(1, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test4154() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals(0.0F, fraction1.floatValue(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test4155() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals(1, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test4156() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = fraction0.subtract(fraction0);
        assertEquals(1, fraction0.intValue());
    }

    @Test(timeout = 4000)
    public void test4257() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 346);
        // Undeclared exception!
        try {
            fraction0.subtract(fraction1);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: add
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        // Undeclared exception!
        try {
            fraction0.add((Fraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fraction must not be null
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.add(fraction0);
        assertSame(fraction1, fraction0);
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = Fraction.TWO_FIFTHS;
        Fraction fraction2 = fraction1.add(fraction0);
        assertSame(fraction2, fraction1);
    }

    @Test(timeout = 4000)
    public void test4661() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.add(fraction0);
        assertEquals(2, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.add(fraction0);
        assertEquals((byte) 1, fraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test4763() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.getFraction((-2147483641), 4154);
        // Undeclared exception!
        try {
            fraction1.add(fraction0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // overflow: numerator too large after multiply
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4864() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        // Undeclared exception!
        try {
            fraction0.TWO_FIFTHS.multiplyBy((Fraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fraction must not be null
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test4965() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.multiplyBy(fraction0);
        assertEquals(0, fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test5066() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        // Undeclared exception!
        try {
            fraction0.divideBy((Fraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fraction must not be null
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test5167() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        // Undeclared exception!
        try {
            fraction0.divideBy(fraction0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // The fraction to divide by must not be zero
            //
            verifyException("org.apache.commons.lang.math.Fraction", e);
        }
    }

    @Test(timeout = 4000)
    public void test5268() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = Fraction.getFraction("2/5");
        boolean boolean0 = fraction1.equals(fraction0);
        assertEquals(2, fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test5269() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = Fraction.getFraction("2/5");
        boolean boolean0 = fraction1.equals(fraction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5270() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = Fraction.getFraction("2/5");
        boolean boolean0 = fraction1.equals(fraction0);
        assertEquals(5, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test5371() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        boolean boolean0 = fraction0.equals(fraction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5472() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        boolean boolean0 = fraction0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5573() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.TWO_QUARTERS;
        boolean boolean0 = fraction1.equals(fraction0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5574() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.TWO_QUARTERS;
        boolean boolean0 = fraction1.equals(fraction0);
        assertEquals(2, fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test5675() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.ONE_THIRD;
        boolean boolean0 = fraction1.equals(fraction0);
        assertEquals(3, fraction1.getDenominator());
    }

    @Test(timeout = 4000)
    public void test5676() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.ONE_THIRD;
        boolean boolean0 = fraction1.equals(fraction0);
        assertEquals(1, fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test5677() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.ONE_THIRD;
        boolean boolean0 = fraction1.equals(fraction0);
        assertFalse(fraction0.equals((Object) fraction1));
    }

    @Test(timeout = 4000)
    public void test5678() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.ONE_THIRD;
        boolean boolean0 = fraction1.equals(fraction0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5779() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        int int0 = fraction0.compareTo(fraction0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5880() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2147483641), 847);
        Fraction fraction1 = Fraction.getFraction((-2147483641), 847);
        int int0 = fraction1.compareTo(fraction0);
        assertEquals((-2147483641), fraction1.getNumerator());
    }

    @Test(timeout = 4000)
    public void test5881() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2147483641), 847);
        Fraction fraction1 = Fraction.getFraction((-2147483641), 847);
        int int0 = fraction1.compareTo(fraction0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5882() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-2147483641), 847);
        Fraction fraction1 = Fraction.getFraction((-2147483641), 847);
        int int0 = fraction1.compareTo(fraction0);
        assertEquals((-2535399.8122786307), fraction1.doubleValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test5983() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.ONE_THIRD;
        int int0 = fraction1.compareTo(fraction0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test6084() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = Fraction.ONE_HALF;
        int int0 = fraction1.compareTo(fraction0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test6185() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        String string0 = fraction0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test6186() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        String string0 = fraction0.toString();
        assertEquals("2/5", string0);
    }

    @Test(timeout = 4000)
    public void test6287() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        fraction0.toProperString();
        String string0 = fraction0.toProperString();
        assertEquals("-1", string0);
    }

    @Test(timeout = 4000)
    public void test6288() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        fraction0.toProperString();
        String string0 = fraction0.toProperString();
        assertEquals(1, fraction0.getDenominator());
    }

    @Test(timeout = 4000)
    public void test6289() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        fraction0.toProperString();
        String string0 = fraction0.toProperString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test6390() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        String string0 = fraction0.toProperString();
        assertEquals("0", string0);
    }

    @Test(timeout = 4000)
    public void test6491() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        String string0 = fraction0.toProperString();
        assertEquals("1", string0);
    }

    @Test(timeout = 4000)
    public void test6492() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        String string0 = fraction0.toProperString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test6593() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        String string0 = fraction0.toProperString();
        assertEquals("1/5", string0);
    }

    @Test(timeout = 4000)
    public void test6594() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        String string0 = fraction0.toProperString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test6695() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(47, 47, 47);
        String string0 = fraction0.toProperString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test6696() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(47, 47, 47);
        String string0 = fraction0.toProperString();
        assertEquals("48", string0);
    }
}
