/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 15:38:04 GMT 2024
 */
package org.apache.commons.lang.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        int int0 = NumberUtils.stringToInt("org.apache.commons.lang.StringUtls", 1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double double0 = NumberUtils.toDouble("VhQ _`@");
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        float float0 = NumberUtils.toFloat("Array cannot be empty.");
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        float float0 = NumberUtils.min((-3548.7278F), (-1.0F), (-3548.7278F));
        assertEquals((-3548.7278F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double double0 = NumberUtils.min((double) (-3364.344F), (double) (-3364.344F), (double) (-3364.344F));
        assertEquals((-3364.343994140625), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = NumberUtils.max(1.0, 1.0, (-186.086922));
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        long long0 = NumberUtils.toLong((String) null);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        float float0 = NumberUtils.max(3854.04F, 3854.04F, 1.0F);
        assertEquals(3854.04F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        int int0 = NumberUtils.stringToInt((String) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        long long0 = NumberUtils.toLong("", 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null, 2258.829296353432);
        assertEquals(2258.829296353432, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        try {
            NumberUtils.createNumber("Array cannot be empty.");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Array cannot be empty. is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Number number0 = NumberUtils.createNumber((String) null);
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        try {
            NumberUtils.createNumber("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // A blank string is not a valid number
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Number number0 = NumberUtils.createNumber("----Mvw[THob;L\"{-Bba");
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        try {
            NumberUtils.createNumber("0x");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        try {
            NumberUtils.createNumber("-0xon(");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"-on(\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        try {
            NumberUtils.createNumber("The Array must not be null");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // The Array must not be null is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        try {
            NumberUtils.createNumber("..");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // .. is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        try {
            NumberUtils.createNumber("\"Ww[Q;|.^#i[Ak_ (e");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // \"Ww[Q;|.^#i[Ak_ (e is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        try {
            NumberUtils.createNumber("0e8C>");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0e8C> is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        try {
            NumberUtils.createNumber("0e");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0e is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        try {
            NumberUtils.createNumber("fGED");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // fGED is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        try {
            NumberUtils.createNumber("mKfc!HpY.L");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // mKfc!HpY.L is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        try {
            NumberUtils.createNumber("K=2umd");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // K=2umd is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        Number number0 = NumberUtils.createNumber("5f");
        assertEquals(5.0F, number0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        try {
            NumberUtils.createNumber("<|C7xQoL");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // <|C7xQoL is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        Number number0 = NumberUtils.createNumber("0D");
        assertEquals((byte) 0, number0.byteValue());
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        Number number0 = NumberUtils.createNumber("2D");
        assertEquals(2.0, number0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        Number number0 = NumberUtils.createNumber("22e2");
        assertEquals(2200.0F, number0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        try {
            NumberUtils.createNumber("KR{.@/+9");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        Float float0 = NumberUtils.createFloat((String) null);
        assertNull(float0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        Double double0 = NumberUtils.createDouble((String) null);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        Integer integer0 = NumberUtils.createInteger((String) null);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        try {
            NumberUtils.createNumber("D:I!@vk8");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"D:I!@vk8\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        Long long0 = NumberUtils.createLong((String) null);
        assertNull(long0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
        assertNull(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
        assertNull(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        try {
            NumberUtils.createNumber("F");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // F is not a valid number.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        byte[] byteArray0 = new byte[2];
        boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        byte[] byteArray0 = new byte[8];
        boolean boolean0 = NumberUtils.equals((byte[]) null, byteArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        byte[] byteArray0 = new byte[1];
        boolean boolean0 = NumberUtils.equals(byteArray0, (byte[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byte[] byteArray1 = new byte[6];
        boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = new byte[1];
        boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) (-36);
        byte[] byteArray1 = new byte[5];
        boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = NumberUtils.equals(shortArray0, (short[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = NumberUtils.equals((short[]) null, shortArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = new short[5];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = new short[7];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[0] = (short) 30;
        short[] shortArray1 = new short[7];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = NumberUtils.equals((int[]) null, intArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        boolean boolean0 = NumberUtils.equals((int[]) null, (int[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = new int[1];
        boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        int[] intArray0 = new int[2];
        boolean boolean0 = NumberUtils.equals(intArray0, (int[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = new int[1];
        boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = 1;
        int[] intArray1 = new int[1];
        boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = new long[7];
        boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        boolean boolean0 = NumberUtils.equals((long[]) null, (long[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        long[] longArray0 = new long[1];
        boolean boolean0 = NumberUtils.equals((long[]) null, longArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        long[] longArray0 = new long[4];
        boolean boolean0 = NumberUtils.equals(longArray0, (long[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = new long[6];
        boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        long[] longArray0 = new long[7];
        longArray0[2] = 699L;
        long[] longArray1 = new long[7];
        boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        float[] floatArray0 = new float[4];
        boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        float[] floatArray0 = new float[5];
        boolean boolean0 = NumberUtils.equals((float[]) null, floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        float[] floatArray0 = new float[4];
        boolean boolean0 = NumberUtils.equals(floatArray0, (float[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        float[] floatArray0 = new float[2];
        float[] floatArray1 = new float[0];
        boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        float[] floatArray0 = new float[4];
        float[] floatArray1 = new float[4];
        boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        float[] floatArray0 = new float[4];
        floatArray0[0] = (float) (byte) (-37);
        float[] floatArray1 = new float[4];
        boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = new double[1];
        boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        boolean boolean0 = NumberUtils.equals((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        double[] doubleArray0 = new double[2];
        boolean boolean0 = NumberUtils.equals((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = NumberUtils.equals(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 3072.0;
        double[] doubleArray1 = new double[1];
        boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((long[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            NumberUtils.min(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[0] = 1629L;
        long long0 = NumberUtils.min(longArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            NumberUtils.min(intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        int[] intArray0 = new int[7];
        intArray0[0] = 2;
        int int0 = NumberUtils.min(intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        short[] shortArray0 = new short[0];
        // Undeclared exception!
        try {
            NumberUtils.min(shortArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        short[] shortArray0 = new short[4];
        shortArray0[0] = (short) 28106;
        short short0 = NumberUtils.min(shortArray0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            NumberUtils.min(byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 102;
        byte byte0 = NumberUtils.min(byteArray0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        try {
            NumberUtils.min(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 3.5468030122709826;
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        float[] floatArray0 = new float[0];
        // Undeclared exception!
        try {
            NumberUtils.min(floatArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[0] = 1107.6F;
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((long[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            NumberUtils.max(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        long[] longArray0 = new long[7];
        longArray0[0] = (long) (byte) (-37);
        long long0 = NumberUtils.max(longArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            NumberUtils.max(intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[5] = 1198;
        int int0 = NumberUtils.max(intArray0);
        assertEquals(1198, int0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        short[] shortArray0 = new short[0];
        // Undeclared exception!
        try {
            NumberUtils.max(shortArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        short[] shortArray0 = new short[2];
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        short[] shortArray0 = new short[2];
        shortArray0[1] = (short) 101;
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) 101, short0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            NumberUtils.max(byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[1] = (byte) 108;
        byte byte0 = NumberUtils.max(byteArray0);
        assertEquals((byte) 108, byte0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        try {
            NumberUtils.max(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (-2766.0F);
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        float[] floatArray0 = new float[4];
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        float[] floatArray0 = new float[0];
        // Undeclared exception!
        try {
            NumberUtils.max(floatArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        float[] floatArray0 = new float[2];
        floatArray0[1] = 1.0F;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        long long0 = NumberUtils.min((long) (short) (-38), (long) (byte) (-38), (long) (short) (-38));
        assertEquals((-38L), long0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        long long0 = NumberUtils.min(2528L, (long) (byte) 70, (-266L));
        assertEquals((-266L), long0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        int int0 = NumberUtils.min(2141568187, 2141568187, (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        int int0 = NumberUtils.min(2528, (int) (byte) (-1), (int) (byte) (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        short short0 = NumberUtils.min((short) (-3494), (short) (-3494), (short) 108);
        assertEquals((short) (-3494), short0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        short short0 = NumberUtils.min((short) 1042, (short) 117, (short) (-21600));
        assertEquals((short) (-21600), short0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 66, (byte) 1, (byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 0, (byte) 0, (byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        long long0 = NumberUtils.max(0L, (-1L), (-1902L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        long long0 = NumberUtils.max((-3028L), (-1566L), 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        int int0 = NumberUtils.max(0, 0, 1332);
        assertEquals(1332, int0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        int int0 = NumberUtils.max((int) (byte) (-102), (int) (byte) 0, (int) (byte) (-102));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        short short0 = NumberUtils.max((short) (-672), (short) 57, (short) (-672));
        assertEquals((short) 57, short0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        short short0 = NumberUtils.max((short) 1, (short) (-433), (short) 102);
        assertEquals((short) 102, short0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-1), (byte) (-1), (byte) 90);
        assertEquals((byte) 90, byte0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 70, (byte) 90, (byte) 53);
        assertEquals((byte) 90, byte0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        int int0 = NumberUtils.compare((-3390.498388), (double) 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        int int0 = NumberUtils.compare(1192.0334F, 165.487F);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("90");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0e8C>");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0x0D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0xd eJwaif47tN");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0xtx_(ZYTI,E");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("22e+");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("...");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("E:Sf5=\"&4)u-SCB}");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-+-1L");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("---RA&|hLe8");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("90");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("u");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("5e");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("d");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("5f");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("F");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("1L");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("L");
        assertFalse(boolean0);
    }
}
