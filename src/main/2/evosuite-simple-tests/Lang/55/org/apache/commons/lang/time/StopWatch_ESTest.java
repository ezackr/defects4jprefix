/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 15:24:03 GMT 2024
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.time.StopWatch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StopWatch_ESTest extends StopWatch_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.reset();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        // Undeclared exception!
        try {
            stopWatch0.toSplitString();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch must be split to get the split time.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        String string0 = stopWatch0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        stopWatch0.stop();
        // Undeclared exception!
        try {
            stopWatch0.start();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch must be reset before being restarted.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        // Undeclared exception!
        try {
            stopWatch0.start();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch already started.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        stopWatch0.suspend();
        stopWatch0.stop();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        // Undeclared exception!
        try {
            stopWatch0.stop();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch is not running.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        stopWatch0.split();
        stopWatch0.unsplit();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        // Undeclared exception!
        try {
            stopWatch0.split();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch is not running.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        // Undeclared exception!
        try {
            stopWatch0.unsplit();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch has not been split.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        // Undeclared exception!
        try {
            stopWatch0.suspend();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch must be running to suspend.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        stopWatch0.suspend();
        stopWatch0.resume();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        // Undeclared exception!
        try {
            stopWatch0.resume();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Stopwatch must be suspended to resume.
            //
            verifyException("org.apache.commons.lang.time.StopWatch", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        stopWatch0.stop();
        String string0 = stopWatch0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        stopWatch0.suspend();
        String string0 = stopWatch0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        String string0 = stopWatch0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        StopWatch stopWatch0 = new StopWatch();
        stopWatch0.start();
        stopWatch0.split();
        String string0 = stopWatch0.toSplitString();
        assertNotNull(string0);
    }
}
