/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:05:55 GMT 2024
 */
package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        float float0 = NumberUtils.max((-131.94F), (-131.94F), (-131.94F));
        assertEquals((-131.94F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        float float0 = NumberUtils.min(0.0F, 1.0F, 1.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        double double0 = NumberUtils.min((double) (short) 932, (double) (short) 932, (double) (short) 932);
        assertEquals(932.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        long long0 = NumberUtils.toLong((String) null, (long) numberUtils0.BYTE_ONE);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        byte byte0 = NumberUtils.toByte("|ApV524AP");
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = NumberUtils.max((double) 0L, (double) 0L, (double) 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        long long0 = NumberUtils.toLong("");
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        int int0 = NumberUtils.toInt("PpFB]r[E&mk[h-T");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        float float0 = NumberUtils.toFloat("--");
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        short short0 = NumberUtils.toShort("ddA@[elO<a@~ht");
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        int int0 = NumberUtils.toInt((String) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null, (-909.4696F));
        assertEquals((-909.4696F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        double double0 = NumberUtils.toDouble("|=cMEo\n`&r_a/aeEs`", 1.0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        byte byte0 = NumberUtils.toByte((String) null);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        short short0 = NumberUtils.toShort((String) null, (short) 20);
        assertEquals((short) 20, short0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Number number0 = NumberUtils.createNumber("0e4");
        assertEquals((byte) 0, number0.byteValue());
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Number number0 = NumberUtils.createNumber((String) null);
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        try {
            NumberUtils.createNumber("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // A blank string is not a valid number
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        Number number0 = NumberUtils.createNumber("--(..");
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        try {
            NumberUtils.createNumber("0xs2qfiJD");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"s2qfiJD\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        try {
            NumberUtils.createNumber("-0xNoSuchFieldException occurred during 1.6 backcompat code");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"-NoSuchFieldException occurred during 1.6 backcompat code\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        Number number0 = NumberUtils.createNumber("0.d");
        assertEquals(0.0, number0);
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        Number number0 = NumberUtils.createNumber("0.d");
        assertNotNull(number0);
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        try {
            NumberUtils.createNumber("E4.6e5");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        try {
            NumberUtils.createNumber("IllegalAccessException occurred during 1.6 backcompat code");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // IllegalAccessException occurred during 1.6 backcompat code is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        Number number0 = NumberUtils.createNumber("0F");
        assertEquals((byte) 0, number0.byteValue());
    }

    @Test(timeout = 4000)
    public void test02627() throws Throwable {
        try {
            NumberUtils.createNumber("0E");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0E is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02728() throws Throwable {
        try {
            NumberUtils.createNumber("0ESr9,N%)JW1UqgP_");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // 0ESr9,N%)JW1UqgP_ is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02829() throws Throwable {
        try {
            NumberUtils.createNumber("D");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // D is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02930() throws Throwable {
        Number number0 = NumberUtils.createNumber("-5L");
        assertEquals((-5L), number0);
    }

    @Test(timeout = 4000)
    public void test03031() throws Throwable {
        Number number0 = NumberUtils.createNumber("3f");
        assertEquals(3.0F, number0);
    }

    @Test(timeout = 4000)
    public void test03132() throws Throwable {
        try {
            NumberUtils.createNumber("The Array must not be null");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // The Array must not be null is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03233() throws Throwable {
        try {
            NumberUtils.createNumber("..l");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // ..l is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        Number number0 = NumberUtils.createNumber("3L");
        assertEquals(3L, number0);
    }

    @Test(timeout = 4000)
    public void test03435() throws Throwable {
        try {
            NumberUtils.createNumber("-sHX[4`<&[L");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // -sHX[4`<&[L is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03536() throws Throwable {
        Number number0 = NumberUtils.createNumber("3d");
        assertEquals(3.0, number0);
    }

    @Test(timeout = 4000)
    public void test03637() throws Throwable {
        Number number0 = NumberUtils.createNumber("0.0");
        assertEquals(0.0F, number0);
    }

    @Test(timeout = 4000)
    public void test03738() throws Throwable {
        try {
            NumberUtils.createNumber("4S) $KA%ikJ (rl1");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"4S) $KA\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test03839() throws Throwable {
        Number number0 = NumberUtils.createNumber("6e65");
        assertEquals(6.0E65, number0);
    }

    @Test(timeout = 4000)
    public void test03940() throws Throwable {
        Number number0 = NumberUtils.createNumber(".2");
        assertEquals(0.2F, number0);
    }

    @Test(timeout = 4000)
    public void test04041() throws Throwable {
        Float float0 = NumberUtils.createFloat((String) null);
        assertNull(float0);
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        Double double0 = NumberUtils.createDouble((String) null);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test04243() throws Throwable {
        Integer integer0 = NumberUtils.createInteger((String) null);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test04344() throws Throwable {
        Long long0 = NumberUtils.createLong((String) null);
        assertNull(long0);
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
        assertNull(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
        assertNull(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test04647() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            NumberUtils.min(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((long[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04849() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        long[] longArray0 = new long[3];
        longArray0[1] = (long) (int) numberUtils0.INTEGER_MINUS_ONE;
        long long0 = NumberUtils.min(longArray0);
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test04950() throws Throwable {
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            NumberUtils.min(intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05051() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        int[] intArray0 = new int[7];
        intArray0[3] = (int) (short) (-11);
        int int0 = NumberUtils.min(intArray0);
        assertEquals((-11), int0);
    }

    @Test(timeout = 4000)
    public void test05253() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05354() throws Throwable {
        short[] shortArray0 = new short[0];
        // Undeclared exception!
        try {
            NumberUtils.min(shortArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05455() throws Throwable {
        short[] shortArray0 = new short[4];
        shortArray0[1] = (short) (-101);
        short short0 = NumberUtils.min(shortArray0);
        assertEquals((short) (-101), short0);
    }

    @Test(timeout = 4000)
    public void test05556() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            NumberUtils.min(byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05657() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05758() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byte byte0 = NumberUtils.min(byteArray0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test05859() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[1] = (byte) (-16);
        byte byte0 = NumberUtils.min(byteArray0);
        assertEquals((byte) (-16), byte0);
    }

    @Test(timeout = 4000)
    public void test05960() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06061() throws Throwable {
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        try {
            NumberUtils.min(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = Double.NaN;
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06263() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1424.23297;
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06364() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06465() throws Throwable {
        float[] floatArray0 = new float[0];
        // Undeclared exception!
        try {
            NumberUtils.min(floatArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06566() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[1] = Float.NaN;
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test06667() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[0] = (float) (short) 76;
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test06768() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((long[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06869() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            NumberUtils.max(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06970() throws Throwable {
        long[] longArray0 = new long[12];
        longArray0[0] = (-3304L);
        long long0 = NumberUtils.max(longArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test07071() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07172() throws Throwable {
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            NumberUtils.max(intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07273() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        int[] intArray0 = new int[3];
        intArray0[1] = (int) (short) numberUtils0.SHORT_ONE;
        int int0 = NumberUtils.max(intArray0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test07374() throws Throwable {
        short[] shortArray0 = new short[0];
        // Undeclared exception!
        try {
            NumberUtils.max(shortArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07475() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07576() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        short[] shortArray0 = new short[3];
        shortArray0[0] = (short) (byte) numberUtils0.BYTE_MINUS_ONE;
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test07677() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07778() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            NumberUtils.max(byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07879() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
        byte byte0 = NumberUtils.max(byteArray0);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test07980() throws Throwable {
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        try {
            NumberUtils.max(doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08081() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08182() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[3] = Double.NaN;
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08283() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-887.1477018463587);
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08384() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08485() throws Throwable {
        float[] floatArray0 = new float[0];
        // Undeclared exception!
        try {
            NumberUtils.max(floatArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08586() throws Throwable {
        float[] floatArray0 = new float[9];
        floatArray0[8] = Float.NaN;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08687() throws Throwable {
        float[] floatArray0 = new float[2];
        floatArray0[1] = (float) 2731L;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(2731.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08788() throws Throwable {
        long long0 = NumberUtils.min((-1L), (-1L), (-141L));
        assertEquals((-141L), long0);
    }

    @Test(timeout = 4000)
    public void test08889() throws Throwable {
        long long0 = NumberUtils.min(18L, 0L, 1314L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test08990() throws Throwable {
        int int0 = NumberUtils.min((int) (byte) 1, (-1352), (int) (byte) 0);
        assertEquals((-1352), int0);
    }

    @Test(timeout = 4000)
    public void test09091() throws Throwable {
        int int0 = NumberUtils.min(883, 3425, 733);
        assertEquals(733, int0);
    }

    @Test(timeout = 4000)
    public void test09192() throws Throwable {
        short short0 = NumberUtils.min((short) 102, (short) 70, (short) (-10083));
        assertEquals((short) (-10083), short0);
    }

    @Test(timeout = 4000)
    public void test09293() throws Throwable {
        short short0 = NumberUtils.min((short) 102, (short) 102, (short) 102);
        assertEquals((short) 102, short0);
    }

    @Test(timeout = 4000)
    public void test09394() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test09495() throws Throwable {
        byte byte0 = NumberUtils.min((byte) (-43), (byte) (-43), (byte) (-48));
        assertEquals((byte) (-48), byte0);
    }

    @Test(timeout = 4000)
    public void test09596() throws Throwable {
        long long0 = NumberUtils.max(0L, 0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test09697() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        long long0 = NumberUtils.max((long) numberUtils0.SHORT_MINUS_ONE, (long) numberUtils0.INTEGER_ONE, (long) numberUtils0.SHORT_ZERO);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test09798() throws Throwable {
        long long0 = NumberUtils.max((-129L), (long) 0, 350L);
        assertEquals(350L, long0);
    }

    @Test(timeout = 4000)
    public void test09899() throws Throwable {
        int int0 = NumberUtils.max((-504), (-504), 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test099100() throws Throwable {
        int int0 = NumberUtils.max((-504), 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test100101() throws Throwable {
        short short0 = NumberUtils.max((short) 256, (short) 256, (short) 1114);
        assertEquals((short) 1114, short0);
    }

    @Test(timeout = 4000)
    public void test101102() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.BYTE_ONE, (short) numberUtils0.BYTE_ZERO);
        assertEquals((short) 1, short0);
    }

    @Test(timeout = 4000)
    public void test102103() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-84), (byte) (-84), (byte) (-84));
        assertEquals((byte) (-84), byte0);
    }

    @Test(timeout = 4000)
    public void test103104() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-84), (byte) (-53), (byte) (-2));
        assertEquals((byte) (-2), byte0);
    }

    @Test(timeout = 4000)
    public void test104105() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test105106() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0.d");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test106107() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107108() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test108109() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0xf");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test109110() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test110111() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x-0xMinimum abbreviation width is 4");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test111112() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0x8r f5bp}ISj");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112113() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0xF<e\"9");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test113114() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0Er");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test114115() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("...");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115116() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("2e.X`3'H]#o|!E");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test116117() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("2eEW");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117118() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("eD");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test118119() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("+MT.g)a&e");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119120() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0e-OTK6laA<$");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120121() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(".");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test121122() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test122123() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("e");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test123124() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("E");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124125() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("D");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125126() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("3f");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test126127() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("F");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test127128() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(".l");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test128129() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("3L");
        assertTrue(boolean0);
    }
}
