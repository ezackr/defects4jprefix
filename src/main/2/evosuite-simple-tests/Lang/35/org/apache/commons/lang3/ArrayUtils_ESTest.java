/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 14:03:10 GMT 2024
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-2240));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        float[] floatArray0 = ArrayUtils.add((float[]) null, (-4660.0F));
        assertArrayEquals(new float[] { (-4660.0F) }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        float[] floatArray0 = ArrayUtils.add((float[]) null, (-4660.0F));
        assertNotNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        char[] charArray0 = ArrayUtils.add((char[]) null, 'a');
        assertArrayEquals(new char[] { 'a' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        char[] charArray0 = ArrayUtils.add((char[]) null, 'a');
        assertNotNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
        assertEquals(6, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = ArrayUtils.add(intArray0, (-340));
        assertArrayEquals(new int[] { 0, 0, 0, (-340) }, intArray1);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[2] = (short) 1;
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 1);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Float[] floatArray0 = new Float[0];
        Integer integer0 = new Integer(0);
        int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) integer0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        Object object0 = new Object();
        boolean boolean0 = ArrayUtils.contains((Object[]) shortArray0, object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2832.675432163563), (-2832.675432163563));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        float[] floatArray0 = new float[9];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-5));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Object object0 = new Object();
        String string0 = ArrayUtils.toString(object0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) 69);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((char[]) null, 'U');
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        boolean[] booleanArray0 = new boolean[8];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        // Undeclared exception!
        try {
            ArrayUtils.add(booleanArray0, 621, true);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 621, Length: 7
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.add(shortArray0, (short) 2);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 2 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Integer[] integerArray0 = new Integer[1];
        Integer integer0 = new Integer(Integer.MAX_VALUE);
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        // Undeclared exception!
        try {
            ArrayUtils.add(intArray0, 2746, (int) integerArray0[0]);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 2746, Length: 1
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) 65);
        assertArrayEquals(new byte[] { (byte) 65 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) 65);
        assertNotNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        Object object0 = new Object();
        boolean boolean0 = ArrayUtils.isEquals(object0, object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-3478.3801964838003));
        assertArrayEquals(new double[] { 0.0, 0.0, (-3478.3801964838003) }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        int int0 = 9;
        Integer[] integerArray0 = new Integer[6];
        integerArray0[0] = (Integer) 9;
        Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int0);
        assertEquals(5, integerArray1.length);
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        float[] floatArray0 = new float[4];
        floatArray0[0] = (-2574.78F);
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2574.78F));
        assertArrayEquals(new float[] { (-2574.78F), 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        float[] floatArray0 = new float[4];
        floatArray0[0] = (-2574.78F);
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2574.78F));
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test02529() throws Throwable {
        // Undeclared exception!
        try {
            ArrayUtils.add((short[]) null, (-17), (short) 72);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -17, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02630() throws Throwable {
        double[] doubleArray0 = new double[0];
        int int0 = ArrayUtils.indexOf(doubleArray0, 1470.05194, (double) (-1.0F));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((char[]) null, 'U');
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test02832() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
        assertNotNull(booleanArray2);
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
        assertTrue(Arrays.equals(new boolean[] { false, false }, booleanArray2));
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) 5);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        short[] shortArray0 = new short[0];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3606));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'y';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'y');
        assertArrayEquals(new char[] { '\u0000', '\u0000' }, charArray1);
    }

    @Test(timeout = 4000)
    public void test03338() throws Throwable {
        double[] doubleArray0 = new double[3];
        // Undeclared exception!
        try {
            ArrayUtils.add(doubleArray0, (-3106), 1.0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -3106, Length: 3
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03439() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) 111);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 111 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test03540() throws Throwable {
        float[] floatArray0 = new float[2];
        // Undeclared exception!
        try {
            ArrayUtils.add(floatArray0, (-533), 0.0F);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -533, Length: 2
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03641() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.add(longArray0, (-1502L));
        assertArrayEquals(new long[] { (-1502L) }, longArray1);
    }

    @Test(timeout = 4000)
    public void test03742() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[4] = (-2110.34663772582);
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2110.34663772582));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test03843() throws Throwable {
        String[] stringArray0 = new String[5];
        String[] stringArray1 = ArrayUtils.toArray(stringArray0);
        assertEquals(5, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test03944() throws Throwable {
        double[] doubleArray0 = new double[7];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-3658));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test04045() throws Throwable {
        long[] longArray0 = new long[5];
        longArray0[0] = (long) 1;
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 1);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L }, longArray1);
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        long[] longArray0 = new long[5];
        longArray0[0] = (long) 1;
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 1);
        assertArrayEquals(new long[] { 1L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[1] = 2;
        int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
        int[] intArray2 = ArrayUtils.add(intArray1, 2, (-5940));
        assertArrayEquals(new int[] { 0, 0, (-5940) }, intArray2);
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[1] = 2;
        int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
        int[] intArray2 = ArrayUtils.add(intArray1, 2, (-5940));
        assertArrayEquals(new int[] { 0, 2, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test04149() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[1] = 2;
        int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
        int[] intArray2 = ArrayUtils.add(intArray1, 2, (-5940));
        assertEquals(2, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test04250() throws Throwable {
        char[] charArray0 = new char[4];
        // Undeclared exception!
        try {
            ArrayUtils.add(charArray0, (-1310), '>');
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1310, Length: 4
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04351() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[1] = (byte) (-69);
        byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-69));
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test04452() throws Throwable {
        String string0 = ArrayUtils.toString((Object) null, "duukyVHbX:9ODYC");
        assertEquals("duukyVHbX:9ODYC", string0);
    }

    @Test(timeout = 4000)
    public void test04553() throws Throwable {
        Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
        assertNull(map0);
    }

    @Test(timeout = 4000)
    public void test04654() throws Throwable {
        AbstractMap.SimpleImmutableEntry<Object, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
        Object object0 = new Object();
        Integer integer0 = new Integer((-3070));
        AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(object0, integer0);
        AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
        abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
        abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
        abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntryArray0[1];
        abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry1;
        Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleImmutableEntryArray0);
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test04755() throws Throwable {
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) objectArray0;
        // Undeclared exception!
        try {
            ArrayUtils.toMap(objectArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array element 1, 'null', is neither of type Map.Entry nor an Array
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04856() throws Throwable {
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) objectArray0;
        // Undeclared exception!
        try {
            ArrayUtils.toMap(objectArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array element 0, '[Ljava.lang.Object;@af61429', has a length less than 2
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04957() throws Throwable {
        Long[] longArray0 = new Long[9];
        Object[] objectArray0 = ArrayUtils.addAll((Object[]) longArray0, (Object[]) null);
        assertNotNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test04958() throws Throwable {
        Long[] longArray0 = new Long[9];
        Object[] objectArray0 = ArrayUtils.addAll((Object[]) longArray0, (Object[]) null);
        assertEquals(9, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test05059() throws Throwable {
        String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        long[] longArray0 = new long[10];
        long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
        assertEquals(10, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test05161() throws Throwable {
        long[] longArray0 = new long[10];
        long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test05262() throws Throwable {
        long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test05363() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test05464() throws Throwable {
        int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test05565() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test05666() throws Throwable {
        short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test05767() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test05768() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
        assertEquals(3, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test05869() throws Throwable {
        char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test05970() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test06071() throws Throwable {
        byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test06172() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
        assertEquals(9, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test06173() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test06274() throws Throwable {
        double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06375() throws Throwable {
        float[] floatArray0 = new float[2];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test06376() throws Throwable {
        float[] floatArray0 = new float[2];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
        assertEquals(2, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test06477() throws Throwable {
        float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test06578() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        Boolean[] booleanArray0 = new Boolean[6];
        booleanArray0[0] = boolean0;
        booleanArray0[1] = boolean0;
        booleanArray0[2] = boolean0;
        booleanArray0[3] = boolean0;
        booleanArray0[4] = boolean0;
        booleanArray0[5] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
        assertTrue(Arrays.equals(new boolean[] { true, true, true, true, true, true }, booleanArray2));
    }

    @Test(timeout = 4000)
    public void test06579() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        Boolean[] booleanArray0 = new Boolean[6];
        booleanArray0[0] = boolean0;
        booleanArray0[1] = boolean0;
        booleanArray0[2] = boolean0;
        booleanArray0[3] = boolean0;
        booleanArray0[4] = boolean0;
        booleanArray0[5] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
        assertNotNull(booleanArray2);
    }

    @Test(timeout = 4000)
    public void test06680() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test06781() throws Throwable {
        Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 2330, 1072);
        assertNull(integerArray0);
    }

    @Test(timeout = 4000)
    public void test06882() throws Throwable {
        Integer[] integerArray0 = new Integer[8];
        Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 4, (-1325));
        assertEquals(0, integerArray1.length);
    }

    @Test(timeout = 4000)
    public void test06983() throws Throwable {
        Integer integer0 = new Integer((byte) 80);
        Integer[] integerArray0 = new Integer[6];
        integerArray0[3] = integer0;
        Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) (-104), (int) integerArray0[3]);
        assertNotSame(integerArray1, integerArray0);
    }

    @Test(timeout = 4000)
    public void test06984() throws Throwable {
        Integer integer0 = new Integer((byte) 80);
        Integer[] integerArray0 = new Integer[6];
        integerArray0[3] = integer0;
        Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) (-104), (int) integerArray0[3]);
        assertEquals(6, integerArray1.length);
    }

    @Test(timeout = 4000)
    public void test07085() throws Throwable {
        long[] longArray0 = new long[1];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (-899), 2178);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test07086() throws Throwable {
        long[] longArray0 = new long[1];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (-899), 2178);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test07087() throws Throwable {
        long[] longArray0 = new long[1];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (-899), 2178);
        assertEquals(1, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test07188() throws Throwable {
        long[] longArray0 = ArrayUtils.subarray((long[]) null, 2734, (-44));
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test07289() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) 1483, 1);
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test07390() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.subarray(intArray0, (-406), (-906));
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test07391() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.subarray(intArray0, (-406), (-906));
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test07492() throws Throwable {
        int[] intArray0 = ArrayUtils.subarray((int[]) null, 111, (int) 'o');
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test07593() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 16, 83);
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test07694() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 2045);
        assertEquals(7, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test07695() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 2045);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test07796() throws Throwable {
        short[] shortArray0 = ArrayUtils.subarray((short[]) null, 64, 3);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test07897() throws Throwable {
        short[] shortArray0 = new short[2];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-48), (-1));
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test07998() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) 11, (int) (short) 89);
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test08099() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) 11, (int) (short) 89);
        assertEquals(3, shortArray2.length);
    }

    @Test(timeout = 4000)
    public void test081100() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (-1));
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test081101() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (-1));
        int int0 = ArrayUtils.lastIndexOf(charArray1, '-', (int) (byte) (-57));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test082102() throws Throwable {
        char[] charArray0 = ArrayUtils.subarray((char[]) null, (-69), 1);
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test083103() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) 0, 1553);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test084104() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (-2146776229), 5);
        assertEquals(5, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test084105() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (-2146776229), 5);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test085106() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-44), 937);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test085107() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-44), 937);
        assertEquals(8, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test085108() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-44), 937);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test086109() throws Throwable {
        byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-3478), (-5181));
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test087110() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) 2, (-919));
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test088111() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3509), 154);
        assertEquals(4, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test088112() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3509), 154);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test088113() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3509), 154);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test089114() throws Throwable {
        double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 73, 73);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test090115() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 329, 214);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test091116() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2146618659), (-2146618659));
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test092117() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1397);
        assertEquals(2, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test092118() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1397);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test093119() throws Throwable {
        char[] charArray0 = new char[3];
        float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) charArray0[1], 5);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test094120() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 237);
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test095121() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test096122() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 8, 8);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test097123() throws Throwable {
        boolean[] booleanArray0 = new boolean[4];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-6005), (-229));
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test098124() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 98);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test098125() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 98);
        assertEquals(2, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test099126() throws Throwable {
        Long[] longArray0 = new Long[3];
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray0, (Object[]) longArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100127() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test101128() throws Throwable {
        Long[] longArray0 = new Long[8];
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) longArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test102129() throws Throwable {
        short[] shortArray0 = new short[0];
        Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test102130() throws Throwable {
        short[] shortArray0 = new short[0];
        Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test103131() throws Throwable {
        short[] shortArray0 = new short[1];
        Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test104132() throws Throwable {
        Object[] objectArray0 = new Object[0];
        boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test105133() throws Throwable {
        Long[] longArray0 = new Long[3];
        Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
        boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) longArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test106134() throws Throwable {
        long[] longArray0 = new long[1];
        boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107135() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108136() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test109137() throws Throwable {
        long[] longArray0 = new long[1];
        boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test110138() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test111139() throws Throwable {
        long[] longArray0 = new long[1];
        boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test112140() throws Throwable {
        long[] longArray0 = new long[1];
        long[] longArray1 = new long[2];
        boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test113141() throws Throwable {
        int[] intArray0 = new int[1];
        boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test114142() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test115143() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test116144() throws Throwable {
        int[] intArray0 = new int[1];
        boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117145() throws Throwable {
        int[] intArray0 = new int[7];
        boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test118146() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test119147() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = new int[4];
        boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120148() throws Throwable {
        short[] shortArray0 = new short[5];
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test121149() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test122150() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test123151() throws Throwable {
        short[] shortArray0 = new short[18];
        boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124152() throws Throwable {
        short[] shortArray0 = new short[7];
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125153() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test126154() throws Throwable {
        short[] shortArray0 = new short[5];
        short[] shortArray1 = new short[0];
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test127155() throws Throwable {
        char[] charArray0 = new char[2];
        boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test128156() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test129157() throws Throwable {
        char[] charArray0 = new char[5];
        boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test130158() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test131159() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132160() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test133161() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = new char[2];
        boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test134162() throws Throwable {
        byte[] byteArray0 = new byte[0];
        boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test135163() throws Throwable {
        byte[] byteArray0 = new byte[1];
        boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test136164() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test137165() throws Throwable {
        byte[] byteArray0 = new byte[0];
        boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test138166() throws Throwable {
        byte[] byteArray0 = new byte[1];
        boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test139167() throws Throwable {
        byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
        boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140168() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = new byte[0];
        boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test141169() throws Throwable {
        double[] doubleArray0 = new double[9];
        boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test142170() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test143171() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144172() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test145173() throws Throwable {
        double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146174() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test147175() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test148176() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test149177() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test150178() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test151179() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test152180() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test153181() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test154182() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = new float[0];
        boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test155183() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156184() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test157185() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        Boolean[] booleanArray0 = new Boolean[3];
        booleanArray0[0] = boolean0;
        booleanArray0[1] = boolean0;
        booleanArray0[2] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
        assertTrue(Arrays.equals(new boolean[] { true, true, true }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test157186() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        Boolean[] booleanArray0 = new Boolean[3];
        booleanArray0[0] = boolean0;
        booleanArray0[1] = boolean0;
        booleanArray0[2] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test158187() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test159188() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test160189() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test161190() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        Boolean[] booleanArray0 = new Boolean[3];
        booleanArray0[0] = boolean0;
        booleanArray0[1] = boolean0;
        booleanArray0[2] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        boolean[] booleanArray2 = new boolean[0];
        boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray2);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test161191() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        Boolean[] booleanArray0 = new Boolean[3];
        booleanArray0[0] = boolean0;
        booleanArray0[1] = boolean0;
        booleanArray0[2] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        boolean[] booleanArray2 = new boolean[0];
        boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray2);
        assertTrue(Arrays.equals(new boolean[] { true, true, true }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test162192() throws Throwable {
        // Undeclared exception!
        try {
            ArrayUtils.remove((short[]) null, 48);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 48, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test163193() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            ArrayUtils.isSameType((Object) null, object0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test164194() throws Throwable {
        Object object0 = new Object();
        boolean boolean0 = ArrayUtils.isSameType(object0, object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test165195() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            ArrayUtils.isSameType(object0, (Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test166196() throws Throwable {
        Object[] objectArray0 = new Object[3];
        ArrayUtils.reverse(objectArray0);
        assertEquals(3, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test167197() throws Throwable {
        ArrayUtils.reverse((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test168198() throws Throwable {
        long[] longArray0 = new long[8];
        ArrayUtils.reverse(longArray0);
        assertEquals(8, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test169199() throws Throwable {
        ArrayUtils.reverse((long[]) null);
    }

    @Test(timeout = 4000)
    public void test170200() throws Throwable {
        int[] intArray0 = new int[4];
        ArrayUtils.reverse(intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test171201() throws Throwable {
        ArrayUtils.reverse((int[]) null);
    }

    @Test(timeout = 4000)
    public void test172202() throws Throwable {
        ArrayUtils.reverse((short[]) null);
    }

    @Test(timeout = 4000)
    public void test173203() throws Throwable {
        short[] shortArray0 = new short[3];
        ArrayUtils.reverse(shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test174204() throws Throwable {
        ArrayUtils.reverse((char[]) null);
    }

    @Test(timeout = 4000)
    public void test175205() throws Throwable {
        char[] charArray0 = new char[6];
        ArrayUtils.reverse(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test176206() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ArrayUtils.reverse(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test177207() throws Throwable {
        ArrayUtils.reverse((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test178208() throws Throwable {
        double[] doubleArray0 = new double[4];
        ArrayUtils.reverse(doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test179209() throws Throwable {
        ArrayUtils.reverse((double[]) null);
    }

    @Test(timeout = 4000)
    public void test180210() throws Throwable {
        float[] floatArray0 = new float[9];
        ArrayUtils.reverse(floatArray0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test181211() throws Throwable {
        ArrayUtils.reverse((float[]) null);
    }

    @Test(timeout = 4000)
    public void test182212() throws Throwable {
        ArrayUtils.reverse((boolean[]) null);
    }

    @Test(timeout = 4000)
    public void test183213() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        ArrayUtils.reverse(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test184214() throws Throwable {
        int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "n2I+47C?RDE~_#0I*,?", (-3568));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test185215() throws Throwable {
        double[] doubleArray0 = new double[1];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test185216() throws Throwable {
        double[] doubleArray0 = new double[1];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        int int0 = ArrayUtils.indexOf((Object[]) doubleArray1, (Object) null, (-6005));
        assertEquals(1, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test185217() throws Throwable {
        double[] doubleArray0 = new double[1];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        int int0 = ArrayUtils.indexOf((Object[]) doubleArray1, (Object) null, (-6005));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test186218() throws Throwable {
        Object[] objectArray0 = new Object[3];
        Byte[] byteArray0 = new Byte[4];
        boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, objectArray0[1]);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test187219() throws Throwable {
        Integer integer0 = new Integer((-985));
        int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, 114);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test188220() throws Throwable {
        char[] charArray0 = new char[5];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertNotNull(characterArray0);
    }

    @Test(timeout = 4000)
    public void test188221() throws Throwable {
        char[] charArray0 = new char[5];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        Object object0 = new Object();
        int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, object0, (-912));
        assertEquals(5, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test188222() throws Throwable {
        char[] charArray0 = new char[5];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        Object object0 = new Object();
        int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, object0, (-912));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test189223() throws Throwable {
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test190224() throws Throwable {
        Object[] objectArray0 = new Object[3];
        int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], 121);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test191225() throws Throwable {
        char[] charArray0 = new char[4];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertNotNull(characterArray0);
    }

    @Test(timeout = 4000)
    public void test191226() throws Throwable {
        char[] charArray0 = new char[4];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null, 2355);
        assertEquals(4, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test191227() throws Throwable {
        char[] charArray0 = new char[4];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null, 2355);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test192228() throws Throwable {
        Integer[] integerArray0 = new Integer[1];
        Integer integer0 = new Integer(Integer.MAX_VALUE);
        integerArray0[0] = integer0;
        int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0, Integer.MAX_VALUE);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test193229() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((long[]) null, (long) (byte) (-87));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test194230() throws Throwable {
        long[] longArray0 = new long[4];
        int int0 = ArrayUtils.indexOf(longArray0, (-3072L), (-1667));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test195231() throws Throwable {
        long[] longArray0 = new long[1];
        int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test196232() throws Throwable {
        long[] longArray0 = new long[0];
        int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-6005), (-6005));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test197233() throws Throwable {
        long[] longArray0 = new long[1];
        int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-919));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test198234() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test199235() throws Throwable {
        int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (byte) (-13));
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test200236() throws Throwable {
        int[] intArray0 = new int[4];
        int int0 = ArrayUtils.indexOf(intArray0, (-933), (-25));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test201237() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((int[]) null, 2, 2);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test202238() throws Throwable {
        Integer[] integerArray0 = new Integer[1];
        Integer integer0 = new Integer(Integer.MAX_VALUE);
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertNotNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test202239() throws Throwable {
        Integer[] integerArray0 = new Integer[1];
        Integer integer0 = new Integer(Integer.MAX_VALUE);
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, (-2479));
        assertArrayEquals(new int[] { Integer.MAX_VALUE }, intArray0);
    }

    @Test(timeout = 4000)
    public void test202240() throws Throwable {
        Integer[] integerArray0 = new Integer[1];
        Integer integer0 = new Integer(Integer.MAX_VALUE);
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, (-2479));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test203241() throws Throwable {
        int[] intArray0 = new int[7];
        int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test204242() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((int[]) null, 0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test205243() throws Throwable {
        int[] intArray0 = new int[7];
        boolean boolean0 = ArrayUtils.contains(intArray0, 0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test206244() throws Throwable {
        short[] shortArray0 = new short[9];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 1483, (-4));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test207245() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1737), (-1683));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test208246() throws Throwable {
        short[] shortArray0 = new short[0];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4040, (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test209247() throws Throwable {
        short[] shortArray0 = new short[9];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 0, 2);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test210248() throws Throwable {
        short[] shortArray0 = new short[2];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 348, (int) (short) 348);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test211249() throws Throwable {
        short[] shortArray0 = new short[5];
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) 1396);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test212250() throws Throwable {
        short[] shortArray0 = new short[7];
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) 0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test213251() throws Throwable {
        char[] charArray0 = new char[1];
        int int0 = ArrayUtils.indexOf(charArray0, 'b', (-193));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test214252() throws Throwable {
        char[] charArray0 = new char[3];
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'D', 216);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test215253() throws Throwable {
        char[] charArray0 = new char[5];
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'r', 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test216254() throws Throwable {
        char[] charArray0 = new char[5];
        charArray0[0] = 'r';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'r', 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test217255() throws Throwable {
        char[] charArray0 = new char[7];
        charArray0[1] = 'X';
        boolean boolean0 = ArrayUtils.contains(charArray0, 'X');
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test218256() throws Throwable {
        byte[] byteArray0 = new byte[9];
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-77), (int) (byte) (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test219257() throws Throwable {
        byte[] byteArray0 = new byte[6];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 0, (int) (byte) 5);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test220258() throws Throwable {
        byte[] byteArray0 = new byte[3];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 0, (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test221259() throws Throwable {
        byte[] byteArray0 = new byte[2];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 82, (int) (short) 61);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test222260() throws Throwable {
        byte[] byteArray0 = new byte[3];
        boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) 0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test223261() throws Throwable {
        double[] doubleArray0 = new double[2];
        int int0 = ArrayUtils.indexOf(doubleArray0, 2795.0, (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test224262() throws Throwable {
        double[] doubleArray0 = new double[7];
        int int0 = ArrayUtils.indexOf(doubleArray0, 2028.0240478515625, (double) (-1.0F));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test225263() throws Throwable {
        double[] doubleArray0 = new double[6];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-3658), (-1), (double) (short) 780);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test226264() throws Throwable {
        double[] doubleArray0 = new double[7];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test227265() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 1840, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test228266() throws Throwable {
        Short[] shortArray0 = new Short[2];
        Short short0 = new Short((short) (-1));
        shortArray0[0] = short0;
        shortArray0[1] = shortArray0[0];
        double[] doubleArray0 = new double[2];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) shortArray0[1], (-928));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test229267() throws Throwable {
        double[] doubleArray0 = new double[9];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1439.06591796875, 5);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test230268() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 874);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test231269() throws Throwable {
        double[] doubleArray0 = new double[1];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 2476, 0.0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test232270() throws Throwable {
        double[] doubleArray0 = new double[2];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (-458), 16.418119492548705);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test233271() throws Throwable {
        double[] doubleArray0 = new double[7];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 0, 1.0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test234272() throws Throwable {
        double[] doubleArray0 = new double[6];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, (-469.23));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test235273() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1419.0;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, (-469.23));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test236274() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = (double) 'O';
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 79.0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test237275() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 'O', (double) 'O');
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test238276() throws Throwable {
        int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F), (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test239277() throws Throwable {
        float[] floatArray0 = new float[4];
        int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test240278() throws Throwable {
        float[] floatArray0 = new float[0];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test241279() throws Throwable {
        float[] floatArray0 = new float[2];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-1), (int) (byte) (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test242280() throws Throwable {
        float[] floatArray0 = new float[7];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test243281() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 'I');
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test244282() throws Throwable {
        float[] floatArray0 = new float[3];
        boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test245283() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test246284() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2342));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test247285() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 48);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test248286() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test249287() throws Throwable {
        boolean[] booleanArray0 = new boolean[4];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test250288() throws Throwable {
        boolean[] booleanArray0 = new boolean[16];
        booleanArray0[0] = true;
        boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test251289() throws Throwable {
        char[] charArray0 = new char[0];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test252290() throws Throwable {
        char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test253291() throws Throwable {
        char[] charArray0 = new char[1];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
        assertEquals(1, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test253292() throws Throwable {
        char[] charArray0 = new char[1];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test254293() throws Throwable {
        char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'M');
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test255294() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'M');
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test256295() throws Throwable {
        Character character0 = Character.valueOf('K');
        Character[] characterArray0 = new Character[3];
        characterArray0[0] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\'');
        assertArrayEquals(new char[] { 'K', '\'', '\'' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test257296() throws Throwable {
        Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
        assertNull(characterArray0);
    }

    @Test(timeout = 4000)
    public void test258297() throws Throwable {
        long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test259298() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
        assertNotSame(longArray2, longArray1);
    }

    @Test(timeout = 4000)
    public void test260299() throws Throwable {
        Long long0 = new Long(0L);
        Long[] longArray0 = new Long[2];
        longArray0[0] = long0;
        longArray0[1] = long0;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertEquals(2, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test261300() throws Throwable {
        Long[] longArray0 = new Long[1];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
        assertEquals(1, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test261301() throws Throwable {
        Long[] longArray0 = new Long[1];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test262302() throws Throwable {
        long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1503L);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test263303() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
        assertArrayEquals(new long[] {}, longArray1);
    }

    @Test(timeout = 4000)
    public void test264304() throws Throwable {
        Long long0 = new Long((-2318L));
        Long[] longArray0 = new Long[1];
        longArray0[0] = long0;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
        assertArrayEquals(new long[] { (-2318L) }, longArray1);
    }

    @Test(timeout = 4000)
    public void test265305() throws Throwable {
        long[] longArray0 = new long[0];
        Long[] longArray1 = ArrayUtils.toObject(longArray0);
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test266306() throws Throwable {
        Long[] longArray0 = ArrayUtils.toObject((long[]) null);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test267307() throws Throwable {
        long[] longArray0 = new long[2];
        Long[] longArray1 = ArrayUtils.toObject(longArray0);
        assertEquals(2, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test268308() throws Throwable {
        int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test269309() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test270310() throws Throwable {
        Integer[] integerArray0 = new Integer[1];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 121);
        assertNotNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test270311() throws Throwable {
        Integer[] integerArray0 = new Integer[1];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 121);
        assertArrayEquals(new int[] { 121 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test271312() throws Throwable {
        int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test272313() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 121);
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test273314() throws Throwable {
        Integer integer0 = new Integer((-50));
        Integer[] integerArray0 = new Integer[1];
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 121);
        assertArrayEquals(new int[] { (-50) }, intArray0);
    }

    @Test(timeout = 4000)
    public void test274315() throws Throwable {
        int[] intArray0 = new int[9];
        Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
        assertNotNull(integerArray0);
    }

    @Test(timeout = 4000)
    public void test274316() throws Throwable {
        int[] intArray0 = new int[9];
        Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
        assertEquals(9, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test275317() throws Throwable {
        Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
        assertNull(integerArray0);
    }

    @Test(timeout = 4000)
    public void test276318() throws Throwable {
        int[] intArray0 = new int[0];
        Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
        assertEquals(0, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test277319() throws Throwable {
        Short[] shortArray0 = new Short[0];
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertArrayEquals(new short[] {}, shortArray1);
    }

    @Test(timeout = 4000)
    public void test278320() throws Throwable {
        short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test279321() throws Throwable {
        Short[] shortArray0 = new Short[6];
        Short short0 = new Short((byte) 11);
        shortArray0[0] = short0;
        shortArray0[1] = short0;
        shortArray0[2] = shortArray0[0];
        shortArray0[3] = shortArray0[0];
        shortArray0[4] = shortArray0[0];
        shortArray0[5] = short0;
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertArrayEquals(new short[] { (short) 11, (short) 11, (short) 11, (short) 11, (short) 11, (short) 11 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test280322() throws Throwable {
        short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) 1519);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test281323() throws Throwable {
        Short[] shortArray0 = new Short[0];
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) 122);
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test282324() throws Throwable {
        Short[] shortArray0 = new Short[2];
        Short short0 = new Short((short) (-1));
        shortArray0[0] = short0;
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1721));
        assertArrayEquals(new short[] { (short) (-1), (short) (-1721) }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test283325() throws Throwable {
        Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test284326() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertArrayEquals(new byte[] {}, byteArray1);
    }

    @Test(timeout = 4000)
    public void test285327() throws Throwable {
        byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test286328() throws Throwable {
        Byte[] byteArray0 = new Byte[4];
        Byte byte0 = new Byte((byte) 1);
        byteArray0[0] = byte0;
        byteArray0[1] = byte0;
        byteArray0[2] = byte0;
        byteArray0[3] = byteArray0[2];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertArrayEquals(new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) 1 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test287329() throws Throwable {
        byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) 12);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test288330() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) 83);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test289331() throws Throwable {
        Byte[] byteArray0 = new Byte[6];
        byte byte0 = (byte) 64;
        Byte byte1 = new Byte((byte) 64);
        byteArray0[0] = byte1;
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertArrayEquals(new byte[] { (byte) 64, (byte) 64, (byte) 64, (byte) 64, (byte) 64, (byte) 64 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test290332() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test291333() throws Throwable {
        Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test292334() throws Throwable {
        byte[] byteArray0 = new byte[5];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertEquals(5, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test293335() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
        assertArrayEquals(new double[] {}, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test294336() throws Throwable {
        double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test295337() throws Throwable {
        Double double0 = new Double((-1.0F));
        Double[] doubleArray0 = new Double[3];
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
        assertArrayEquals(new double[] { (-1.0), (-1.0), (-1.0) }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test296338() throws Throwable {
        double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2153.58);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test297339() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test298340() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        doubleArray0[0] = (Double) 0.0;
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1779.3632);
        assertArrayEquals(new double[] { 0.0, 1779.3632 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test299341() throws Throwable {
        Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test300342() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test301343() throws Throwable {
        float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test302344() throws Throwable {
        Float[] floatArray0 = new Float[0];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 0.0F);
        assertFalse(floatArray2.equals((Object) floatArray1));
    }

    @Test(timeout = 4000)
    public void test303345() throws Throwable {
        Float[] floatArray0 = new Float[1];
        Float float0 = new Float((double) (byte) 2);
        floatArray0[0] = float0;
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertArrayEquals(new float[] { 2.0F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test304346() throws Throwable {
        Float[] floatArray0 = new Float[0];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-4494.062F));
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test305347() throws Throwable {
        float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test306348() throws Throwable {
        Float float0 = new Float(4469.667995211789);
        Float[] floatArray0 = new Float[3];
        floatArray0[2] = float0;
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[2]);
        assertArrayEquals(new float[] { 4469.668F, 4469.668F, 4469.668F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test307349() throws Throwable {
        float[] floatArray0 = new float[4];
        Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test307350() throws Throwable {
        float[] floatArray0 = new float[4];
        Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
        assertEquals(4, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test308351() throws Throwable {
        Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test309352() throws Throwable {
        float[] floatArray0 = new float[4];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1490, 1490);
        Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
        assertEquals(0, floatArray2.length);
    }

    @Test(timeout = 4000)
    public void test310353() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test311354() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test312355() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test313356() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test314357() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[4];
        Boolean boolean0 = Boolean.valueOf(true);
        booleanArray0[0] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] { true, false, false, false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test315358() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test316359() throws Throwable {
        Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test317360() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        booleanArray0[1] = true;
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(2, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test318361() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test319362() throws Throwable {
        String[] stringArray0 = new String[6];
        boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test320363() throws Throwable {
        Float[] floatArray0 = new Float[0];
        boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test321364() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test322365() throws Throwable {
        long[] longArray0 = new long[12];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test323366() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test324367() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test325368() throws Throwable {
        int[] intArray0 = new int[1];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test326369() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test327370() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test328371() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test329372() throws Throwable {
        short[] shortArray0 = new short[3];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test330373() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test331374() throws Throwable {
        char[] charArray0 = new char[4];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test332375() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test333376() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test334377() throws Throwable {
        byte[] byteArray0 = new byte[13];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test335378() throws Throwable {
        byte[] byteArray0 = new byte[0];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test336379() throws Throwable {
        Long[] longArray0 = new Long[9];
        Object object0 = new Object();
        Object[] objectArray0 = new Object[13];
        objectArray0[1] = object0;
        // Undeclared exception!
        try {
            ArrayUtils.addAll((Object[]) longArray0, objectArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot store java.lang.Object in an array of java.lang.Long
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test337380() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertEquals(4, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test338381() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertEquals(10, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test339382() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test340383() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertEquals(12, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test341384() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertEquals(6, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test342385() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertEquals(4, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test343386() throws Throwable {
        Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) null);
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test343387() throws Throwable {
        Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) null);
        assertNotNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test344388() throws Throwable {
        String[] stringArray0 = new String[1];
        String[] stringArray1 = ArrayUtils.add(stringArray0, "java.lang.Object");
        assertEquals(2, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test345389() throws Throwable {
        String[] stringArray0 = ArrayUtils.add((String[]) null, "java.lang.Boolean");
        assertEquals(1, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test346390() throws Throwable {
        Object[] objectArray0 = ArrayUtils.add((Object[]) null, (-1), (Object) null);
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test347391() throws Throwable {
        String[] stringArray0 = new String[8];
        String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "Mac OS X");
        assertEquals(9, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test348392() throws Throwable {
        Integer integer0 = Integer.valueOf(5);
        // Undeclared exception!
        try {
            ArrayUtils.add((Object[]) null, (int) 2, (Object) integer0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 2, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test349393() throws Throwable {
        Object[] objectArray0 = new Object[6];
        Integer integer0 = new Integer(2795);
        Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) integer0);
        assertEquals(6, objectArray1.length);
    }

    @Test(timeout = 4000)
    public void test350394() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        Boolean boolean0 = Boolean.TRUE;
        booleanArray0[0] = boolean0;
        booleanArray0[1] = booleanArray0[0];
        booleanArray0[2] = boolean0;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
        assertEquals(3, booleanArray2.length);
    }

    @Test(timeout = 4000)
    public void test351395() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) 32);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test352396() throws Throwable {
        char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'j');
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test353397() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2583.511);
        assertEquals(4, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test354398() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short) (-4197));
        assertEquals(5, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test355399() throws Throwable {
        short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) 104);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test356400() throws Throwable {
        Integer[] integerArray0 = new Integer[3];
        // Undeclared exception!
        try {
            ArrayUtils.remove(integerArray0, (-356));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -356, Length: 3
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }
}
