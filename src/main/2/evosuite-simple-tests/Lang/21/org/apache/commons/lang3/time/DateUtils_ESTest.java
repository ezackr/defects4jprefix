/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 12:59:28 GMT 2024
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.apache.commons.lang3.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 1001, 5, 6, 3);
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        dateUtils_DateIterator0.hasNext();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.remove();
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMilliseconds((Date) null, 1410);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        MockDate mockDate0 = new MockDate(2);
        long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 5);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        MockDate mockDate0 = new MockDate(5, 5, 2);
        Date date0 = DateUtils.setHours(mockDate0, 1001);
        assertEquals("Fri Jun 02 00:00:00 GMT 1905", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Locale locale0 = Locale.ROOT;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, (-15));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment -15 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMilliseconds((Date) null, 1001);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setMonths(mockDate0, 5);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        MockDate mockDate0 = new MockDate(5, 1, 0, 3, 5);
        Date date0 = DateUtils.addMinutes(mockDate0, 4);
        assertEquals("Tue Jan 31 03:09:00 GMT 1905", date0.toString());
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        MockDate mockDate0 = new MockDate(2);
        long long0 = DateUtils.getFragmentInSeconds((Date) mockDate0, 1);
        assertEquals(86400L, long0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, (-1021));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment -1021 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        MockDate mockDate0 = new MockDate(3, 2, 1001, 2, 6);
        Calendar calendar0 = DateUtils.toCalendar(mockDate0);
        Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135769600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        MockDate mockDate0 = new MockDate(3, 2, 1001, 2, 6);
        Calendar calendar0 = DateUtils.toCalendar(mockDate0);
        Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        MockDate mockDate0 = new MockDate(2);
        Date date0 = DateUtils.setMinutes(mockDate0, 5);
        assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 8);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 8 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        MockDate mockDate0 = new MockDate(4, 1, 5);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Date) mockDate0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 0 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 1001);
        Date date1 = DateUtils.addMonths(date0, 1001);
        assertEquals("Sun Feb 16 00:00:00 GMT 2014", date1.toString());
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addYears((Date) null, 37);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMinutes((Date) null, 2);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        MockDate mockDate0 = new MockDate(6, 5, 5, 1, 1, 1);
        Date date0 = DateUtils.addWeeks(mockDate0, 1);
        assertEquals("Tue Jun 12 01:01:01 GMT 1906", date0.toString());
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setDays(mockDate0, 8);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        MockDate mockDate0 = new MockDate(6);
        Date date0 = DateUtils.addDays(mockDate0, 2);
        assertEquals("Sat Jan 03 00:00:00 GMT 1970", date0.toString());
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addSeconds(mockDate0, 2136);
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, date0);
        assertEquals("Fri Feb 14 20:56:57 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addSeconds(mockDate0, 2136);
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, date0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Calendar calendar0 = MockCalendar.getInstance(dateUtils0.UTC_TIME_ZONE);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMinutes(calendar0, 1001);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 1001 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncatedEquals((Calendar) null, (Calendar) null, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setSeconds((Date) null, 1001);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 6, 2, 1001, 5);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 4);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 4 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 12);
        boolean boolean0 = DateUtils.truncatedEquals(date0, date0, 12);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 12);
        boolean boolean0 = DateUtils.truncatedEquals(date0, date0, 12);
        assertEquals("Fri Feb 14 20:21:00 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setMilliseconds((Date) null, 1001);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setYears(mockDate0, 2);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        boolean boolean0 = DateUtils.isSameDay(date0, date0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, 280000000, 280000000);
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Date) mockDate0, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22));
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-22), (-22), (-22), (-22), (-22));
        Calendar calendar0 = DateUtils.toCalendar(mockDate0);
        boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(5, 5, 5);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 2);
        boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1393632000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=60,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test03741() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 2);
        boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03943() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Date) mockDate0, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04246() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04347() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test04449() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04550() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04651() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04752() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04853() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(1, 6, 6);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04954() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 0, 3);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(5, 1, 0, 0, 1, 2);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05055() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1001, 1001, 4, 1001, 0, 0);
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 2);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-27941958000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1084,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=197,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1001, 1001, 4, 1001, 0, 0);
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 2);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 5);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135769600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 5);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05259() throws Throwable {
        MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22));
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-22), (-22), (-22), (-22), (-22));
        Calendar calendar0 = DateUtils.toCalendar(mockDate0);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05360() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.parseDate((String) null, (String[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05461() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.parseDateStrictly("", (String[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05562() throws Throwable {
        String[] stringArray0 = new String[0];
        try {
            DateUtils.parseDate("^bnJ?tr}'sQb)5", stringArray0);
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Unable to parse the date: ^bnJ?tr}'sQb)5
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05663() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDate("", stringArray0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test05764() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "SZZZZ";
        // Undeclared exception!
        try {
            DateUtils.parseDateStrictly("SZZZZ", stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test05865() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        // Undeclared exception!
        try {
            DateUtils.parseDateStrictly("I 3,-G1xC-%", stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test05966() throws Throwable {
        MockDate mockDate0 = new MockDate(0);
        Date date0 = DateUtils.round((Object) mockDate0, 1);
        assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
    }

    @Test(timeout = 4000)
    public void test06067() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Date) null, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06168() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Calendar) null, 1975);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06269() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Object) null, (-863));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06370() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        // Undeclared exception!
        try {
            DateUtils.round((Object) dateUtils0, 5);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not round org.apache.commons.lang3.time.DateUtils@1
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncatedEquals((Date) null, (Date) null, 11);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06572() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) dateUtils0, 4);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not truncate org.apache.commons.lang3.time.DateUtils@1
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06673() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) null, 2874);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06774() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) mockDate0, 1617);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 1617 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06875() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 14);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test06976() throws Throwable {
        MockDate mockDate0 = new MockDate(2, 1, 4, 0, 1001);
        Date date0 = DateUtils.ceiling((Date) mockDate0, 0);
        assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
    }

    @Test(timeout = 4000)
    public void test07077() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.ceiling((Date) null, (-826));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07178() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.ceiling((Calendar) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07279() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 9, 9, 9);
        Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 9);
        Date date1 = DateUtils.ceiling((Object) date0, 9);
        assertEquals("Thu Oct 10 00:00:00 GMT 9", date1.toString());
    }

    @Test(timeout = 4000)
    public void test07380() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.ceiling((Object) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07481() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            DateUtils.ceiling(object0, 1001);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not find ceiling of for type: class java.lang.Object
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07582() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.ceiling((Object) mockGregorianCalendar0, 1901);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 1901 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07683() throws Throwable {
        MockDate mockDate0 = new MockDate(280000037, 280000037, 280000037, 280000037, 280000037);
        // Undeclared exception!
        try {
            DateUtils.ceiling((Date) mockDate0, 280000037);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Calendar value too large for accurate calculations
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07784() throws Throwable {
        MockDate mockDate0 = new MockDate((-4418));
        // Undeclared exception!
        try {
            DateUtils.round((Date) mockDate0, (-4418));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field -4418 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07885() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 13);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test07986() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 1001);
        Date date1 = DateUtils.ceiling((Object) date0, 1001);
        assertEquals("Sat Feb 01 00:00:00 GMT 2014", date1.toString());
    }

    @Test(timeout = 4000)
    public void test08087() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Date) null, 29);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08188() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) null, 5);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08289() throws Throwable {
        MockDate mockDate0 = new MockDate(3, 2, 1001, 2, 6);
        Iterator<?> iterator0 = DateUtils.iterator((Object) mockDate0, 1);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test08390() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 2, 3, 6, 4, 2);
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 2);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test08491() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 5);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test08592() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 2, 3, 6, 4, 2);
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 6);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test08693() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 9, 9, 9);
        Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 9);
        // Undeclared exception!
        try {
            DateUtils.iterator(date0, (-1412));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style -1412 is not valid.
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08794() throws Throwable {
        MockDate mockDate0 = new MockDate(3, 2, 1);
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 3);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test08895() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test08996() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09097() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) calendar0, 1594);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 1594 is not valid.
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09198() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) dateUtils0, 2);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not iterate based on org.apache.commons.lang3.time.DateUtils@1
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09299() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMinutes((Calendar) null, 2);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test093100() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 2);
        assertEquals(356L, long0);
    }

    @Test(timeout = 4000)
    public void test094101() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 3 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test095102() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 6);
        assertEquals(20L, long0);
    }

    @Test(timeout = 4000)
    public void test096103() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 7);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 7 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test097104() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 9);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 9 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test098105() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 10);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 10 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test099106() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 11);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test100107() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 12);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test101108() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 13);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test102109() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 14);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test103110() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
        boolean boolean0 = DateUtils.truncatedEquals((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1, 1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test103111() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
        boolean boolean0 = DateUtils.truncatedEquals((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1, 1);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
    }

    @Test(timeout = 4000)
    public void test104112() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        boolean boolean0 = DateUtils.truncatedEquals(calendar0, calendar0, 1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test105113() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Locale locale0 = Locale.CANADA;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE, locale0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Date date1 = DateUtils.addHours(date0, (-1));
        boolean boolean0 = DateUtils.truncatedEquals(date0, date1, 2);
        assertEquals("Thu Oct 04 23:00:00 GMT 1582", date1.toString());
    }

    @Test(timeout = 4000)
    public void test105114() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Locale locale0 = Locale.CANADA;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE, locale0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Date date1 = DateUtils.addHours(date0, (-1));
        boolean boolean0 = DateUtils.truncatedEquals(date0, date1, 2);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test106115() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(4, 4, 4);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar1, mockGregorianCalendar0);
        dateUtils_DateIterator0.next();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62030448000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=125,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
    }

    @Test(timeout = 4000)
    public void test107116() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.next();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
        }
    }
}
