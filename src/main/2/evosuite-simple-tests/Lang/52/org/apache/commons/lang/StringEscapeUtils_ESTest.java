/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 15:11:55 GMT 2024
 */
package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StringEscapeUtils_ESTest extends StringEscapeUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.escapeJava((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String string0 = StringEscapeUtils.escapeJavaScript(" \t\r\n\b");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        String string0 = StringEscapeUtils.escapeJavaScript(" \t\r\n\b");
        assertEquals(" \\t\\r\\n\\b", string0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeJavaScript((Writer) null, "1OH(w:[2zrBD30?(UT");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava("\n");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava("\n");
        assertEquals("\\n", string0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.escapeJavaScript((Writer) stringWriter0, "The Writer must not be null");
        assertEquals("The Writer must not be null", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.escapeJava((Writer) null, "YQp;IDCa&*");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava("CEO5:.M))+U>\"A59]wN");
        assertEquals("CEO5:.M))+U>\\\"A59]wN", string0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        String string0 = StringEscapeUtils.escapeJava("'xm]a=tNq+t");
        assertEquals("'xm]a=tNq+t", string0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        String string0 = "\\u000";
        String string1 = StringEscapeUtils.escapeJava(string0);
        assertEquals("\\\\u000", string1);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        String string0 = StringEscapeUtils.escapeJavaScript("''");
        assertEquals("\\'\\'", string0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        String string0 = StringEscapeUtils.unescapeJava((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeJava((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        String string0 = "\\u00W0";
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeJava(string0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Unable to parse unicode value: 00W0
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        String string0 = StringEscapeUtils.unescapeJavaScript("L\\csRA");
        assertEquals("LcsRA", string0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        String string0 = StringEscapeUtils.unescapeJavaScript("s\nRd");
        assertEquals("s\nRd", string0);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        String string0 = StringEscapeUtils.unescapeJava("po)fJ.}S5b<8lWzT!");
        assertEquals("po)fJ.}S5b<8lWzT!", string0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        String string0 = StringEscapeUtils.escapeHtml("The WritAr must not be null");
        assertEquals("The WritAr must not be null", string0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        String string0 = StringEscapeUtils.escapeHtml("The WritAr must not be null");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        String string0 = StringEscapeUtils.escapeHtml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.escapeHtml((Writer) null, (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(84);
        StringEscapeUtils.escapeHtml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        String string0 = StringEscapeUtils.unescapeHtml("The Writer must not be null");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        String string0 = StringEscapeUtils.unescapeHtml("The Writer must not be null");
        assertEquals("The Writer must not be null", string0);
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        String string0 = StringEscapeUtils.unescapeHtml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeHtml((Writer) null, "1OH(w:[2zrBD30?(UT");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeHtml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.escapeXml((Writer) stringWriter0, "UO56(X");
        assertEquals("UO56(X", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.escapeXml((Writer) null, "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.escapeXml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2933() throws Throwable {
        String string0 = StringEscapeUtils.escapeXml("O;h9!Ubi*");
        assertEquals("O;h9!Ubi*", string0);
    }

    @Test(timeout = 4000)
    public void test3034() throws Throwable {
        String string0 = StringEscapeUtils.escapeXml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3135() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeXml((Writer) stringWriter0, "GU:1,6ux/`uvzI`");
        assertEquals("GU:1,6ux/`uvzI`", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3236() throws Throwable {
        // Undeclared exception!
        try {
            StringEscapeUtils.unescapeXml((Writer) null, "GU:1,6ux/`uvzI`");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Writer must not be null.
            //
            verifyException("org.apache.commons.lang.StringEscapeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3337() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringEscapeUtils.unescapeXml((Writer) stringWriter0, (String) null);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        String string0 = StringEscapeUtils.unescapeXml("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        String string0 = StringEscapeUtils.unescapeXml((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        String string0 = StringEscapeUtils.escapeSql("710");
        assertEquals("710", string0);
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        String string0 = StringEscapeUtils.escapeSql((String) null);
        assertNull(string0);
    }
}
