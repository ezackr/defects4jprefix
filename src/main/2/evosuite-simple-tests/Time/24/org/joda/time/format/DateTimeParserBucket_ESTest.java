/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:36:08 GMT 2024
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.CANADA;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        Object object0 = dateTimeParserBucket0.saveState();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeParserBucket0.saveField(dateTimeFieldType0, "k<%mzt))qhoBT2|ceqP", locale0);
        boolean boolean0 = dateTimeParserBucket0.restoreState(object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.CANADA;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        Object object0 = dateTimeParserBucket0.saveState();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeParserBucket0.saveField(dateTimeFieldType0, "k<%mzt))qhoBT2|ceqP", locale0);
        boolean boolean0 = dateTimeParserBucket0.restoreState(object0);
        long long0 = dateTimeParserBucket0.computeMillis();
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.CANADA;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        Object object0 = dateTimeParserBucket0.saveState();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeParserBucket0.saveField(dateTimeFieldType0, "k<%mzt))qhoBT2|ceqP", locale0);
        boolean boolean0 = dateTimeParserBucket0.restoreState(object0);
        long long0 = dateTimeParserBucket0.computeMillis();
        assertEquals(28800001L, long0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.JAPAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology0, locale0, (Integer) 1);
        dateTimeParserBucket0.getChronology();
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.ITALIAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        long long0 = dateTimeParserBucket0.computeMillis(false);
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.ITALIAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        long long0 = dateTimeParserBucket0.computeMillis(false);
        assertEquals(28800001L, long0);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, fixedDateTimeZone0);
        Locale locale0 = Locale.ROOT;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, zonedChronology0, locale0, (Integer) 1);
        dateTimeParserBucket0.getPivotYear();
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1794L), gJChronology0, locale0);
        int int0 = dateTimeParserBucket0.getOffset();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.TAIWAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.TAIWAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        dateTimeParserBucket0.setOffset(1);
        assertEquals(1, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1794L), gJChronology0, locale0);
        Locale locale1 = dateTimeParserBucket0.getLocale();
        assertEquals("fr", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1794L), gJChronology0, locale0);
        Locale locale1 = dateTimeParserBucket0.getLocale();
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.TAIWAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        dateTimeParserBucket0.setPivotYear((Integer) 1);
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        // Undeclared exception!
        try {
            YearMonth.parse("7G/&3");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"7G/&3\" is malformed at \"G/&3\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1);
        boolean boolean0 = dateTimeParserBucket0.restoreState(locale0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1);
        boolean boolean0 = dateTimeParserBucket0.restoreState(locale0);
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(1, buddhistChronology0, locale0, (Integer) 1, 1);
        DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
        boolean boolean0 = dateTimeParserBucket1.restoreState(dateTimeParserBucket_SavedState0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(1, buddhistChronology0, locale0, (Integer) 1, 1);
        DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
        boolean boolean0 = dateTimeParserBucket1.restoreState(dateTimeParserBucket_SavedState0);
        assertEquals(0, dateTimeParserBucket1.getOffset());
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.US;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeParserBucket0.saveField(dateTimeFieldType0, "", locale0);
        // Undeclared exception!
        try {
            dateTimeParserBucket0.computeMillis();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value \"\" for secondOfMinute is not supported
            //
            verifyException("org.joda.time.field.BaseDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRANCE;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        dateTimeParserBucket0.saveField(dateTimeFieldType0, "mx,d:Y_;;H&Y?w^N", locale0);
        // Undeclared exception!
        try {
            dateTimeParserBucket0.computeMillis(true, "mx,d:Y_;;H&Y?w^N");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot parse \"mx,d:Y_;;H&Y?w^N\": Value \"mx,d:Y_;;H&Y?w^N\" for era is not supported
            //
            verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        Locale locale0 = Locale.CANADA;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        long long0 = dateTimeParserBucket0.computeMillis();
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        dateTimeParserBucket0.saveField(dateTimeField0, 1);
        dateTimeParserBucket0.saveField(dateTimeField0, 1);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        dateTimeParserBucket0.saveField(dateTimeField0, 1);
        dateTimeParserBucket0.saveField(dateTimeField0, 1);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        dateTimeParserBucket0.saveField(dateTimeField0, 1);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        long long0 = dateTimeParserBucket0.computeMillis();
        assertEquals((-16219498021999L), long0);
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = new Locale("v2@S", "v2@S", "v2@S");
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        long long0 = dateTimeParserBucket0.computeMillis(true, "v2@S");
        assertEquals(0, dateTimeParserBucket0.getOffset());
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Locale locale0 = new Locale("v2@S", "v2@S", "v2@S");
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        long long0 = dateTimeParserBucket0.computeMillis(true, "v2@S");
        assertEquals((-16187875622000L), long0);
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        Locale locale0 = Locale.CANADA;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        dateTimeParserBucket0.saveField(dateTimeFieldType0, 1);
        long long0 = dateTimeParserBucket0.computeMillis();
        assertEquals((-79271567999999L), long0);
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DurationField durationField0 = buddhistChronology0.eras();
        int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DurationField durationField0 = buddhistChronology0.seconds();
        DurationField durationField1 = buddhistChronology0.eras();
        int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField1);
        assertEquals(1, int0);
    }
}
