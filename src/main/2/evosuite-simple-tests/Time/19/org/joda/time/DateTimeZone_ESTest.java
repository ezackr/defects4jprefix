/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:15:07 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(58);
        String string0 = dateTimeZone0.getShortName((long) 58);
        assertEquals("+00:00:00.058", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Object object0 = dateTimeZone0.UTC.writeReplace();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.getName(3600000L);
        assertEquals("-08:00", string0);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.getName(3600000L);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.toString();
        assertEquals("America/Los_Angeles", string0);
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        Set<String> set0 = DateTimeZone.getAvailableIDs();
        assertEquals(572, set0.size());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        NameProvider nameProvider0 = DateTimeZone.getNameProvider();
        DateTimeZone.setNameProvider(nameProvider0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        Provider provider0 = DateTimeZone.getProvider();
        assertNotNull(provider0);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        assertSame(dateTimeZone1, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        int int0 = dateTimeZone0.UTC.getOffset((ReadableInstant) mutableDateTime0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        // Undeclared exception!
        try {
            DateTimeZone.setDefault((DateTimeZone) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The datetime zone must not be null
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeZone.setDefault(fixedDateTimeZone0);
        assertEquals("UTC", fixedDateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        assertEquals("America/Los_Angeles", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        // Undeclared exception!
        try {
            DateTimeZone.forID("-DmO");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"-DmO\" is malformed at \"DmO\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.058");
        assertEquals("+00:00:00.058", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.058");
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        try {
            DateTimeZone.forOffsetHours((-1262));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Offset is too large
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 45);
        assertEquals("+00:45", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        try {
            DateTimeZone.forOffsetHoursMinutes((-1004), (-1004));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Minutes out of range: -1004
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        try {
            DateTimeZone.forOffsetHoursMinutes(8092, 8092);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Minutes out of range: 8092
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        assertEquals("America/Los_Angeles", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.UTC;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3218), "VST");
        // Undeclared exception!
        try {
            DateTimeZone.forTimeZone(simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The datetime zone id 'VST' is not recognised
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "Pacific/Guadalcanal");
        // Undeclared exception!
        try {
            DateTimeZone.forTimeZone(simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The datetime zone id 'Pacific/Guadalcanal' is not recognised
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        assertEquals("-18:00", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test2632() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        assertNotNull(dateTimeZone1);
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        assertEquals("-18:00", dateTimeZone1.getID());
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2094, "org.joda.time.DateTimeZone$1");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2094, "org.joda.time.DateTimeZone$1");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        assertEquals("UTC", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        DateTimeZone.setProvider((Provider) null);
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        DateTimeZone.setNameProvider((NameProvider) null);
    }

    @Test(timeout = 4000)
    public void test3139() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
        assertEquals("+00:00:01", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test3240() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        String string0 = dateTimeZone0.getShortName(1233L, locale0);
        assertEquals("-08:00", string0);
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        String string0 = dateTimeZone0.getShortName(1233L, locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3342() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(572);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = dateTimeZone0.getName((long) 572, locale0);
        assertEquals("+00:00:00.572", string0);
    }

    @Test(timeout = 4000)
    public void test3443() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3041);
        dateTimeZone0.UTC.getOffset((ReadableInstant) null);
        assertEquals("+00:00:03.041", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test3444() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3041);
        dateTimeZone0.UTC.getOffset((ReadableInstant) null);
        assertEquals("+00:00:03.041", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test3545() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isStandardOffset(15778800000L);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        boolean boolean0 = fixedDateTimeZone0.isStandardOffset(1073741823L);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3747() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
        boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(9957600000L);
        assertEquals((-25200000), int0);
    }

    @Test(timeout = 4000)
    public void test3949() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
        assertEquals((-28378000), int0);
    }

    @Test(timeout = 4000)
    public void test4050() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Apia");
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775794L);
        assertEquals((-39600000), int0);
    }

    @Test(timeout = 4000)
    public void test4151() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
        int int0 = dateTimeZone0.getOffsetFromLocal((-1444L));
        assertEquals(39600000, int0);
    }

    @Test(timeout = 4000)
    public void test4252() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
        int int0 = cachedDateTimeZone0.getOffsetFromLocal(1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test4253() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
        int int0 = cachedDateTimeZone0.getOffsetFromLocal(1);
        assertEquals("+00:00:00.001", cachedDateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test4354() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775780L);
        assertEquals(38388000, int0);
    }

    @Test(timeout = 4000)
    public void test4455() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        // Undeclared exception!
        try {
            dateTimeZone0.adjustOffset(9223372036854775807L, true);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Adding time zone offset caused overflow
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test4556() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertLocalToUTC((-28799999L), true);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test4657() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        // Undeclared exception!
        try {
            dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Subtracting time zone offset caused overflow
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test4758() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
        long long0 = dateTimeZone0.adjustOffset((-1806748788001L), false);
        assertEquals((-1806748788001L), long0);
    }

    @Test(timeout = 4000)
    public void test4859() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("ACT");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        // Undeclared exception!
        try {
            dateTimeZone0.convertLocalToUTC((-9223372036829575809L), true);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Subtracting time zone offset caused overflow
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test4960() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Apia");
        // Undeclared exception!
        try {
            dateTimeZone0.convertLocalToUTC(9223372036854775765L, false);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Subtracting time zone offset caused overflow
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test5061() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Apia");
        // Undeclared exception!
        try {
            dateTimeZone0.convertLocalToUTC(9223372036854775765L, true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal instant due to time zone offset transition: 292278994-08-17T07:12:55.765 (Pacific/Apia)
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test5162() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        long long0 = fixedDateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 1);
        assertEquals(28800001L, long0);
    }

    @Test(timeout = 4000)
    public void test5263() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 10800000L);
        assertEquals(10800000L, long0);
    }

    @Test(timeout = 4000)
    public void test5364() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
        boolean boolean0 = dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5465() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.adjustOffset((-1762L), true);
        assertEquals((-1762L), long0);
    }
}
