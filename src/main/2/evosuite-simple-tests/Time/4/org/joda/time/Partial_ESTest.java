/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:53:29 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Partial_ESTest extends Partial_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        int[] intArray0 = new int[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not contain null: index 0
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        // Undeclared exception!
        try {
            partial0.with(dateTimeFieldType0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 0 for dayOfYear must not be smaller than 1
            //
            verifyException("org.joda.time.chrono.BaseChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        Days days0 = Days.FOUR;
        Partial partial1 = partial0.plus(days0);
        assertFalse(partial1.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        Days days0 = Days.FOUR;
        Partial partial1 = partial0.plus(days0);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
        assertEquals(0, dateTimeFieldTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        LocalTime localTime0 = new LocalTime(0L);
        Partial partial0 = new Partial(localTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        // Undeclared exception!
        try {
            partial_Property0.setCopy("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value \"\" for hourOfDay is not supported
            //
            verifyException("org.joda.time.field.BaseDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(islamicChronology0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
        // Undeclared exception!
        try {
            partial_Property0.get();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
        Partial partial0 = new Partial(localDate0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        partial_Property0.addWrapFieldToCopy(1982);
        assertEquals(14, partial_Property0.get());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Partial partial0 = new Partial();
        Partial.Property partial_Property0 = new Partial.Property(partial0, 3600);
        // Undeclared exception!
        try {
            partial_Property0.setCopy(3600);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 3600
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Partial partial0 = new Partial();
        Partial.Property partial_Property0 = new Partial.Property(partial0, (-309));
        ReadablePartial readablePartial0 = partial_Property0.getReadablePartial();
        assertEquals(0, readablePartial0.size());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        Partial partial1 = partial_Property0.getPartial();
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
        Partial partial0 = new Partial(localDate0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 3241);
        // Undeclared exception!
        try {
            partial_Property0.addToCopy(93);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 3241
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
        Partial partial0 = new Partial(localDate0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 3241);
        // Undeclared exception!
        try {
            partial_Property0.withMaximumValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 3241
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Partial partial0 = new Partial();
        Partial.Property partial_Property0 = new Partial.Property(partial0, 3600);
        // Undeclared exception!
        try {
            partial_Property0.withMinimumValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 3600
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Partial partial0 = null;
        try {
            partial0 = new Partial((DateTimeFieldType) null, 116);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field type must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        int[] intArray0 = new int[0];
        Partial partial0 = null;
        try {
            partial0 = new Partial((DateTimeFieldType[]) null, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Values array must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
        int[] intArray0 = new int[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Values array must be the same length as the types array
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
        int[] intArray0 = new int[0];
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        assertEquals(0, partial0.size());
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
        int[] intArray0 = new int[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not contain duplicate: clockhourOfDay
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        int[] intArray0 = new int[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must be in order largest-smallest: secondOfDay < clockhourOfHalfday
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        int[] intArray0 = new int[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 0 for dayOfWeek must not be smaller than 1
            //
            verifyException("org.joda.time.chrono.BaseChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
        int[] intArray0 = new int[3];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must be in order largest-smallest: hourOfDay < era
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        int[] intArray0 = new int[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not contain duplicate: era
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        int[] intArray0 = new int[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 0 for clockhourOfHalfday must not be smaller than 1
            //
            verifyException("org.joda.time.chrono.BaseChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyear();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
        int[] intArray0 = new int[5];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must be in order largest-smallest: weekyearOfCentury < weekyear
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
        int[] intArray0 = new int[3];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must be in order largest-smallest: hourOfHalfday < hourOfDay
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Partial partial0 = null;
        try {
            partial0 = new Partial((ReadablePartial) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The partial must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        Partial partial0 = new Partial();
        assertEquals(0, partial0.size());
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        Partial partial0 = new Partial();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial1 = partial0.withChronologyRetainFields(islamicChronology0);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        Partial partial0 = new Partial();
        Partial partial1 = partial0.withChronologyRetainFields((Chronology) null);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        Partial partial0 = new Partial();
        // Undeclared exception!
        try {
            partial0.with((DateTimeFieldType) null, 116);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field type must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        // Undeclared exception!
        try {
            partial0.with(dateTimeFieldType0, (-1465));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -1465 for era must not be smaller than 0
            //
            verifyException("org.joda.time.chrono.BaseChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        int[] intArray0 = new int[1];
        Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.clockhourOfHalfday();
        // Undeclared exception!
        try {
            partial0.with(dateTimeFieldType2, 0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        // Undeclared exception!
        try {
            partial0.with(dateTimeFieldType0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 0 for dayOfWeek must not be smaller than 1
            //
            verifyException("org.joda.time.chrono.BaseChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Partial partial1 = partial0.with(dateTimeFieldType0, 1);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        Partial partial1 = partial0.without(dateTimeFieldType0);
        assertSame(partial0, partial1);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        Partial partial1 = partial0.with(dateTimeFieldType0, 0);
        Partial partial2 = partial1.without(dateTimeFieldType0);
        assertTrue(partial2.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        // Undeclared exception!
        try {
            partial0.withField(dateTimeFieldType0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 0 for monthOfYear must be in the range [1,12]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        Partial partial0 = new Partial(dateTimeFieldType0, 464);
        Partial partial1 = partial0.withField(dateTimeFieldType0, 464);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Partial partial0 = new Partial(localDate0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, 1);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Partial partial0 = new Partial(localDate0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, 1);
        assertFalse(partial1.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, 0);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.with(dateTimeFieldType0, 0);
        Partial partial2 = partial1.withFieldAddWrapped(durationFieldType0, 1);
        assertNotSame(partial2, partial1);
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.with(dateTimeFieldType0, 0);
        Partial partial2 = partial1.withFieldAddWrapped(durationFieldType0, 1);
        assertFalse(partial2.equals((Object) partial1));
    }

    @Test(timeout = 4000)
    public void test4045() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.with(dateTimeFieldType0, 0);
        Partial partial2 = partial1.withFieldAddWrapped(durationFieldType0, 1);
        assertEquals(3, partial2.size());
    }

    @Test(timeout = 4000)
    public void test4146() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Partial partial1 = partial0.with(dateTimeFieldType0, 1);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial2 = partial1.withFieldAddWrapped(durationFieldType0, 0);
        assertSame(partial2, partial1);
    }

    @Test(timeout = 4000)
    public void test4247() throws Throwable {
        Partial partial0 = new Partial();
        Partial partial1 = partial0.minus((ReadablePeriod) null);
        assertSame(partial0, partial1);
    }

    @Test(timeout = 4000)
    public void test4348() throws Throwable {
        Partial partial0 = new Partial();
        Seconds seconds0 = Seconds.THREE;
        Partial partial1 = partial0.withPeriodAdded(seconds0, 0);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test4449() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        Partial partial0 = new Partial(monthDay0);
        boolean boolean0 = partial0.isMatch((ReadableInstant) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        Partial partial0 = new Partial(dateTimeFieldType0, 8);
        Instant instant0 = Instant.now();
        boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        boolean boolean0 = partial0.isMatch((ReadablePartial) monthDay0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4752() throws Throwable {
        Partial partial0 = new Partial();
        // Undeclared exception!
        try {
            partial0.isMatch((ReadablePartial) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The partial must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test4853() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Partial partial1 = partial0.with(dateTimeFieldType0, 370);
        Partial partial2 = partial1.with(dateTimeFieldType0, 0);
        boolean boolean0 = partial2.isMatch((ReadablePartial) partial1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4954() throws Throwable {
        MonthDay monthDay0 = new MonthDay();
        Partial partial0 = new Partial(monthDay0);
        partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test5055() throws Throwable {
        Partial partial0 = new Partial();
        String string0 = partial0.toString((String) null);
        assertEquals("[]", string0);
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Partial partial1 = partial0.with(dateTimeFieldType0, 0);
        DateTimeFormatter dateTimeFormatter0 = partial1.getFormatter();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test5257() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        partial0.getFormatter();
        String string0 = partial0.toString();
        assertEquals("--02-14", string0);
    }

    @Test(timeout = 4000)
    public void test5358() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        String string0 = partial0.toString();
        assertEquals("--02-14", string0);
    }

    @Test(timeout = 4000)
    public void test5459() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        Partial partial0 = new Partial(dateTimeFieldType0, 471);
        String string0 = partial0.toString();
        assertEquals("[millisOfDay=471]", string0);
    }

    @Test(timeout = 4000)
    public void test5560() throws Throwable {
        MonthDay monthDay0 = MonthDay.now();
        Partial partial0 = new Partial(monthDay0);
        String string0 = partial0.toStringList();
        assertEquals("[monthOfYear=2, dayOfMonth=14]", string0);
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        Partial partial0 = new Partial();
        // Undeclared exception!
        try {
            partial0.toString("org.joda.time.chrono.BasicFixedMonthChronology");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.joda.time.format.DateTimeFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        Partial partial0 = new Partial();
        Locale locale0 = Locale.PRC;
        // Undeclared exception!
        try {
            partial0.toString("Z91o6=E5qA", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.joda.time.format.DateTimeFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5863() throws Throwable {
        Partial partial0 = new Partial();
        Locale locale0 = Locale.JAPAN;
        String string0 = partial0.toString((String) null, locale0);
        assertEquals("[]", string0);
    }
}
