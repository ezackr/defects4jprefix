/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:42:33 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Partial_ESTest extends Partial_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
        int[] intArray0 = new int[0];
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        assertEquals(0, partial0.size());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
        assertEquals(0, dateTimeFieldTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        Partial partial1 = partial0.withChronologyRetainFields(islamicChronology0);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 44);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 44);
        assertFalse(partial1.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Hours hours0 = Hours.ONE;
        Partial partial1 = partial0.plus(hours0);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Hours hours0 = Hours.ONE;
        Partial partial1 = partial0.plus(hours0);
        assertTrue(partial1.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Partial partial1 = partial0.minus((ReadablePeriod) null);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        LocalTime localTime0 = new LocalTime(0L);
        Partial partial0 = new Partial(localTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        // Undeclared exception!
        try {
            partial_Property0.setCopy("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value \"\" for hourOfDay is not supported
            //
            verifyException("org.joda.time.field.BaseDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        int[] intArray0 = new int[6];
        Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        int int0 = partial_Property0.get();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
        Partial partial1 = partial_Property0.addWrapFieldToCopy(65);
        assertEquals(6, partial_Property0.get());
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
        Partial partial1 = partial_Property0.addWrapFieldToCopy(65);
        assertTrue(partial1.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
        Partial partial1 = partial_Property0.withMaximumValue();
        assertEquals(1, partial1.size());
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        Partial partial0 = new Partial(dateTimeFieldType0, 1136);
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        Partial partial1 = partial_Property0.getPartial();
        assertEquals(1, partial1.size());
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        int[] intArray0 = new int[4];
        Partial partial0 = new Partial(julianChronology0, (DateTimeFieldType[]) null, intArray0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1273);
        // Undeclared exception!
        try {
            partial_Property0.addToCopy(1718);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Partial partial0 = new Partial(localDateTime0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 3);
        Partial partial1 = partial_Property0.withMinimumValue();
        assertNotSame(partial0, partial1);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        Partial partial0 = null;
        try {
            partial0 = new Partial((DateTimeFieldType) null, (-101));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field type must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        int[] intArray0 = new int[0];
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        Partial partial0 = null;
        try {
            partial0 = new Partial((DateTimeFieldType[]) null, intArray0, islamicChronology0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        JulianChronology julianChronology0 = JulianChronology.getInstance();
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, julianChronology0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Values array must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        int[] intArray0 = new int[7];
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Values array must be the same length as the types array
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
        // Undeclared exception!
        try {
            partial0.with(dateTimeFieldType1, 4);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not contain duplicate: yearOfCentury and weekyearOfCentury
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        int[] intArray0 = new int[7];
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not contain null: index 0
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        int[] intArray0 = new int[7];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must be in order largest-smallest: minuteOfDay < weekyear
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
        Partial partial1 = partial0.with(dateTimeFieldType1, 4);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 18);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.year();
        Partial partial1 = partial0.with(dateTimeFieldType2, 5);
        // Undeclared exception!
        try {
            partial1.with(dateTimeFieldType1, (-2));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must not contain duplicate: weekyear and year
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
        int[] intArray0 = new int[3];
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, iSOChronology0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must be in order largest-smallest: yearOfCentury < year
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfYear();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
        dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
        dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[3];
        dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[0];
        dateTimeFieldTypeArray0[6] = dateTimeFieldTypeArray0[1];
        int[] intArray0 = new int[7];
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        Partial partial0 = null;
        try {
            partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, copticChronology0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Types array must be in order largest-smallest: dayOfWeek < dayOfYear
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 18);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
        Partial partial1 = partial0.with(dateTimeFieldType1, 18);
        assertNotSame(partial0, partial1);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Partial partial0 = null;
        try {
            partial0 = new Partial((ReadablePartial) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The partial must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Partial partial1 = partial0.withChronologyRetainFields(iSOChronology0);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        // Undeclared exception!
        try {
            partial0.with((DateTimeFieldType) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field type must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        Partial partial0 = new Partial();
        Partial partial1 = partial0.with(dateTimeFieldType0, 1);
        assertEquals(1, partial1.size());
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
        Partial partial1 = partial0.with(dateTimeFieldType1, 3);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
        Partial partial1 = partial0.with(dateTimeFieldType1, 1);
        assertNotSame(partial0, partial1);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Partial partial1 = partial0.with(dateTimeFieldType0, 1);
        assertEquals(1, partial1.size());
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Partial partial1 = partial0.without(dateTimeFieldType0);
        assertSame(partial0, partial1);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Partial partial1 = partial0.without(dateTimeFieldType0);
        assertEquals(0, partial1.size());
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        // Undeclared exception!
        try {
            partial0.withField(dateTimeFieldType0, (-852));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -852 for yearOfCentury must be in the range [0,99]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Partial partial1 = partial0.withField(dateTimeFieldType0, 1);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, 1);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, 1);
        assertFalse(partial1.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, 0);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
        int[] intArray0 = new int[9];
        DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
        Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
        Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Days days0 = Days.SEVEN;
        Partial partial1 = partial0.withPeriodAdded(days0, 0);
        assertSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Days days0 = Days.SEVEN;
        Partial partial1 = partial0.withPeriodAdded(days0, 1);
        assertFalse(partial1.equals((Object) partial0));
    }

    @Test(timeout = 4000)
    public void test4045() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Days days0 = Days.SEVEN;
        Partial partial1 = partial0.withPeriodAdded(days0, 1);
        assertNotSame(partial1, partial0);
    }

    @Test(timeout = 4000)
    public void test4146() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        DateTime dateTime0 = partial0.toDateTime((ReadableInstant) null);
        boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4247() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        boolean boolean0 = partial0.isMatch((ReadableInstant) mutableDateTime0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4348() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4449() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        // Undeclared exception!
        try {
            partial0.isMatch((ReadablePartial) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The partial must not be null
            //
            verifyException("org.joda.time.Partial", e);
        }
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        Partial partial1 = partial0.with(dateTimeFieldType0, 91);
        boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        Partial partial0 = new Partial(dateTimeFieldType0, 1, ethiopicChronology0);
        partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        assertTrue(dateTimeFormatter0.isPrinter());
    }

    @Test(timeout = 4000)
    public void test4752() throws Throwable {
        Partial partial0 = new Partial();
        String string0 = partial0.toString((String) null);
        assertEquals("[]", string0);
    }

    @Test(timeout = 4000)
    public void test4853() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = partial0.toString((String) null, locale0);
        assertEquals("[year=2006, monthOfYear=6, dayOfMonth=7, millisOfDay=44481320]", string0);
    }

    @Test(timeout = 4000)
    public void test4954() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Locale locale0 = Locale.GERMAN;
        Partial partial0 = new Partial(dateTimeFieldType0, 6, buddhistChronology0);
        partial0.toString((String) null, locale0);
        String string0 = partial0.toString();
        assertEquals("0006", string0);
    }

    @Test(timeout = 4000)
    public void test5055() throws Throwable {
        Partial partial0 = new Partial();
        // Undeclared exception!
        try {
            partial0.toString("Vh|w2kb2{.\"W9");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
            //
            verifyException("org.joda.time.format.DateTimeFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        Partial partial0 = new Partial();
        Locale locale0 = Locale.CANADA_FRENCH;
        // Undeclared exception!
        try {
            partial0.toString("[NpQ-P,ulC", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: N
            //
            verifyException("org.joda.time.format.DateTimeFormat", e);
        }
    }
}
