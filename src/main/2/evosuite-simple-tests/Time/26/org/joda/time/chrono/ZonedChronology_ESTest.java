/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:42:12 GMT 2024
 */
package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicDayOfYearDateTimeField;
import org.joda.time.chrono.BasicSingleEraDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZonedChronology_ESTest extends ZonedChronology_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        String string0 = zonedChronology0.toString();
        assertEquals("ZonedChronology[BuddhistChronology[UTC], America/Los_Angeles]", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        YearMonthDay yearMonthDay0 = new YearMonthDay(1, 1, 1);
        Interval interval0 = yearMonthDay0.toInterval();
        assertEquals((-62135482022000L), interval0.getEndMillis());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        zonedChronology0.hashCode();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, fixedDateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 1);
        assertEquals((-79271567999999L), long0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis(0L, 16, 16, 16, 16);
        assertEquals(58576016L, long0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        long long0 = zonedChronology_ZonedDurationField0.getValueAsLong((long) 1, (long) 1);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        long long0 = zonedChronology_ZonedDurationField0.getMillis((-2499L), (-2499L));
        assertEquals((-2499L), long0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.millis();
        long long0 = durationField0.getMillis(1, (long) 1);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        int int0 = zonedChronology_ZonedDurationField0.getValue(756L, 756L);
        assertEquals(756, int0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfDay();
        boolean boolean0 = dateTimeField0.isLeap((-618L));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        long long0 = dateTimeField0.remainder(1);
        assertEquals(57600001L, long0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        Locale locale0 = Locale.JAPANESE;
        String string0 = dateTimeField0.getAsText((-2147483592), locale0);
        assertEquals("-2147483592", string0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        Locale locale0 = Locale.CHINA;
        String string0 = dateTimeField0.getAsShortText(1, locale0);
        assertEquals("1", string0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
        assertNotNull(strictChronology0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.year();
        int int0 = dateTimeField0.getLeapAmount(0L);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.year();
        LocalDate localDate0 = new LocalDate((Object) null, gregorianChronology0);
        int int0 = dateTimeField0.getMinimumValue((ReadablePartial) localDate0);
        assertEquals((-292275054), int0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        int int0 = dateTimeField0.getMaximumValue((long) 1);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
        int int0 = dateTimeField0.getMinimumValue(58576016L);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        YearMonth yearMonth0 = new YearMonth(43200000L);
        dateTimeField0.getMaximumValue((ReadablePartial) yearMonth0);
        assertEquals(1, yearMonth0.getMonthOfYear());
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        YearMonth yearMonth0 = new YearMonth(43200000L);
        dateTimeField0.getMaximumValue((ReadablePartial) yearMonth0);
        assertEquals(1970, yearMonth0.getYear());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfDay();
        String string0 = dateTimeField0.getAsShortText((long) (-2294));
        assertEquals("1439", string0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        // Undeclared exception!
        try {
            dateTimeField0.set(2123L, "{/T492");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value \"{/T492\" for clockhourOfDay is not supported
            //
            verifyException("org.joda.time.field.BaseDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJMonthOfYearDateTimeField0, fixedDateTimeZone0, millisDurationField0, millisDurationField0, zonedChronology_ZonedDurationField0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = zonedChronology_ZonedDateTimeField0.getAsText((long) 1, locale0);
        assertEquals("aprile", string0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        int[] intArray0 = new int[2];
        // Undeclared exception!
        try {
            dateTimeField0.set((ReadablePartial) null, (-166), intArray0, (-166));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -166 for dayOfWeek must be in the range [1,7]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        Locale locale0 = Locale.CHINA;
        int int0 = dateTimeField0.getMaximumShortTextLength(locale0);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0);
        Locale locale0 = Locale.ENGLISH;
        int int0 = skipUndoDateTimeField0.getMaximumTextLength(locale0);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        // Undeclared exception!
        try {
            ZonedChronology.getInstance((Chronology) null, fixedDateTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must supply a chronology
            //
            verifyException("org.joda.time.chrono.ZonedChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        // Undeclared exception!
        try {
            ZonedChronology.getInstance(islamicChronology0, (DateTimeZone) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // DateTimeZone must not be null
            //
            verifyException("org.joda.time.chrono.ZonedChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
        long long0 = zonedChronology_ZonedDateTimeField0.add(30617280288L, 2147483644);
        assertEquals(7730971732080288L, long0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
        Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
        assertSame(chronology0, zonedChronology0);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        TimeZone timeZone0 = TimeZone.getTimeZone(")");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
        Chronology chronology0 = zonedChronology0.withZone((DateTimeZone) null);
        assertNotSame(chronology0, zonedChronology0);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
        Chronology chronology0 = zonedChronology0.withZone(fixedDateTimeZone0);
        assertNotSame(gJChronology0, chronology0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
        zonedChronology0.assemble(assembledChronology_Fields0);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
        BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("6$)J|L15PYg4<.FG-1");
        boolean boolean0 = zonedChronology0.equals(basicSingleEraDateTimeField0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        boolean boolean0 = zonedChronology0.equals(zonedChronology0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology1 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
        boolean boolean0 = zonedChronology0.equals(zonedChronology1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology1 = ZonedChronology.getInstance(zonedChronology0, dateTimeZone0);
        boolean boolean0 = zonedChronology0.equals(zonedChronology1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        ZonedChronology zonedChronology1 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        boolean boolean0 = zonedChronology1.equals(zonedChronology0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DurationFieldType durationFieldType0 = DurationFieldType.seconds();
        UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
        try {
            zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(unsupportedDurationField0, fixedDateTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
        }
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DurationField durationField0 = zonedChronology0.days();
        boolean boolean0 = durationField0.isPrecise();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        Period period0 = new Period((long) 1);
        assertEquals(8, period0.size());
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.FOUR;
        long long0 = gJChronology0.add((ReadablePeriod) months0, 1020L, 338);
        assertEquals(3555442801020L, long0);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Seconds seconds0 = Seconds.THREE;
        long long0 = buddhistChronology0.add((ReadablePeriod) seconds0, (-65L), 1);
        assertEquals(2935L, long0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Period period0 = new Period();
        int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (long) 1, (-2560L));
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, (-2), (-561) }, intArray0);
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, fixedDateTimeZone0);
        DurationField durationField0 = zonedChronology0.weekyears();
        long long0 = durationField0.getDifferenceAsLong(3298L, 2629746000L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong((-2499L), (-2499L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.millis();
        // Undeclared exception!
        try {
            durationField0.getDifference(1, (-9223372036854775808L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Adding time zone offset caused overflow
            //
            verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
        }
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        DurationFieldType durationFieldType0 = DurationFieldType.years();
        PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = null;
        try {
            zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(unsupportedDateTimeField0, dateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.millis();
        DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone1, durationField0, durationField0, durationField0);
        long long0 = zonedChronology_ZonedDateTimeField0.add((-3659972L), (long) 1);
        assertEquals(82740028L, long0);
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        long long0 = dateTimeField0.addWrapField(609L, (-2147483571));
        assertEquals((-172799391L), long0);
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        long long0 = dateTimeField0.addWrapField((-28801962L), (-1));
        assertEquals((-32401962L), long0);
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(decoratedDurationField0, dateTimeZone0);
        BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(islamicChronology0, zonedChronology_ZonedDurationField0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicDayOfYearDateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
        // Undeclared exception!
        try {
            zonedChronology_ZonedDateTimeField0.set((long) 1, 5);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 5 for dayOfYear is not supported: Illegal instant due to time zone offset transition: 1969-12-31T15:59:59.719 (America/Los_Angeles)
            //
            verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
        int int0 = dateTimeField0.getDifference(58576016L, (-28795904L));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        DurationFieldType durationFieldType0 = DurationFieldType.eras();
        PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
        BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(gregorianChronology0, preciseDurationField0);
        DateTimeField dateTimeField0 = LenientDateTimeField.getInstance(basicDayOfYearDateTimeField0, gregorianChronology0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
        int int0 = zonedChronology_ZonedDateTimeField0.getDifference(1, 1);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfWeek();
        long long0 = dateTimeField0.getDifferenceAsLong((-3659972L), 1);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        long long0 = dateTimeField0.getDifferenceAsLong((-754L), (-754L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfDay();
        long long0 = dateTimeField0.roundFloor(1);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.year();
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, (DurationField) null, (DurationField) null);
        long long0 = zonedChronology_ZonedDateTimeField0.roundCeiling((-2499L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.year();
        // Undeclared exception!
        try {
            dateTimeField0.getDifference(1, (-9223372036854775808L));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Adding time zone offset caused overflow
            //
            verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
        }
    }
}
