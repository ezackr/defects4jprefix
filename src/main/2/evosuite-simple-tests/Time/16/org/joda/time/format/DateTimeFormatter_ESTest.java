/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:06:40 GMT 2024
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('z');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.getChronology();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('z');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.getChronology();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("m\\geMb6");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.parseLocalTime("m\\geMb6");
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("m\\geMb6");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.parseLocalTime("m\\geMb6");
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        // Undeclared exception!
        try {
            MonthDay.parse("yR9");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"yR9\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("3");
        assertEquals((-62072496422000L), mutableDateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatter0.printTo((Writer) stringWriter0, (long) 'h');
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatter0.printTo((Writer) stringWriter0, (long) 'h');
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(3);
        assertEquals(3, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(3);
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(3);
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("taS=iJ");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) null);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("taS=iJ");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) null);
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((int) '!');
        assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((int) '!');
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((int) '!');
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((int) '!');
        assertEquals(33, (int) dateTimeFormatter2.getPivotYear());
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("u$)44R33");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadableInstant) null);
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("u$)44R33");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadableInstant) null);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0920() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.printTo((Appendable) null, (-6341L));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        CharBuffer charBuffer0 = CharBuffer.allocate(1802);
        YearMonth yearMonth0 = new YearMonth();
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) yearMonth0);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        CharBuffer charBuffer0 = CharBuffer.allocate(1802);
        YearMonth yearMonth0 = new YearMonth();
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) yearMonth0);
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        int int0 = dateTimeFormatter0.getDefaultYear();
        assertEquals(2000, int0);
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        int int0 = dateTimeFormatter0.getDefaultYear();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals((-3), int0);
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals(0L, mutableDateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1329() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('+');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.getChronolgy();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('+');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.getChronolgy();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1533() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 22, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        dateTimeFormatter0.getPivotYear();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1534() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 22, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        dateTimeFormatter0.getPivotYear();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1635() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.getZone();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1636() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.getZone();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1737() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`7-ARMNyp3 v");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1738() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`7-ARMNyp3 v");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1739() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`7-ARMNyp3 v");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1840() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1841() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1842() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isPrinter();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test1943() throws Throwable {
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(63, 63, 106);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isParser();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test1944() throws Throwable {
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(63, 63, 106);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isParser();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1945() throws Throwable {
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(63, 63, 106);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
        boolean boolean0 = dateTimeFormatter0.isParser();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2046() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isParser();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2047() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isParser();
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2048() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        boolean boolean0 = dateTimeFormatter0.isParser();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2149() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2150() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        assertSame(dateTimeFormatter1, dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test2151() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2252() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~-");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Locale locale0 = Locale.JAPANESE;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withLocale((Locale) null);
        assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test2253() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~-");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Locale locale0 = Locale.JAPANESE;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withLocale((Locale) null);
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2254() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~-");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Locale locale0 = Locale.JAPANESE;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withLocale((Locale) null);
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2355() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('q');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        Locale locale1 = (Locale) locale0.clone();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
        assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test2356() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('q');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        Locale locale1 = (Locale) locale0.clone();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
        assertEquals(2000, dateTimeFormatter2.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2357() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('q');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        Locale locale1 = (Locale) locale0.clone();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
        assertFalse(dateTimeFormatter2.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2458() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("3");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        assertSame(dateTimeFormatter2, dateTimeFormatter1);
    }

    @Test(timeout = 4000)
    public void test2459() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("3");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        assertTrue(dateTimeFormatter2.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2460() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("3");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2461() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("3");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        assertEquals(2000, dateTimeFormatter2.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2562() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        MutableDateTime mutableDateTime0 = null;
        try {
            mutableDateTime0 = new MutableDateTime("7c", iSOChronology0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"7c\" is malformed at \"c\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2663() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime("8");
        assertEquals(2, MutableDateTime.ROUND_CEILING);
    }

    @Test(timeout = 4000)
    public void test2764() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2765() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
        assertSame(dateTimeFormatter1, dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test2766() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2867() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.convert.ConverterSet");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
        assertSame(dateTimeFormatter1, dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test2868() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.convert.ConverterSet");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2869() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.convert.ConverterSet");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test2970() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        Integer integer0 = new Integer((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        assertSame(dateTimeFormatter2, dateTimeFormatter1);
    }

    @Test(timeout = 4000)
    public void test2971() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        Integer integer0 = new Integer((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        assertFalse(dateTimeFormatter2.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test2972() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        Integer integer0 = new Integer((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test2973() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1463));
        Integer integer0 = new Integer((-1463));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        assertEquals(2000, dateTimeFormatter2.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test3074() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("W#g7");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.print((ReadablePartial) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The partial must not be null
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3175() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        LocalTime localTime0 = new LocalTime((long) 'h');
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0);
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test3176() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        StringWriter stringWriter0 = new StringWriter();
        LocalTime localTime0 = new LocalTime((long) 'h');
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test3277() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`7-ARMNyp3 v");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The partial must not be null
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3378() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('q');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.print((long) 'q');
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test3379() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('q');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.print((long) 'q');
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test3480() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.print((-9223372036854775808L));
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test3481() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        dateTimeFormatter0.print((-9223372036854775808L));
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test3582() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(')');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.printTo((Writer) null, (-9223372036854775808L));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
        }
    }

    @Test(timeout = 4000)
    public void test3683() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneId0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.print((-28798991L));
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Printing not supported
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3784() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test3785() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals(28800000L, mutableDateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test3786() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals((-3), int0);
    }

    @Test(timeout = 4000)
    public void test3787() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test3888() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`7-ARMNyp3 v");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.parseInto((ReadWritableInstant) null, "`7-ARMNyp3 v", (-1075));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Instant must not be null
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3989() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test3990() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test3991() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals(28800000L, mutableDateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test3992() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertTrue(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test3993() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\u0001.g*vO7nf");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("\u0001.g*vO7nf");
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "\u0001.g*vO7nf", 2);
        assertEquals((-3), int0);
    }

    @Test(timeout = 4000)
    public void test4094() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 'w', 'w');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 5);
        assertEquals(1392380481320L, mutableDateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test4095() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 'w', 'w');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 5);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test4196() throws Throwable {
        MutableDateTime mutableDateTime0 = null;
        try {
            mutableDateTime0 = new MutableDateTime("c");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"c\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4297() throws Throwable {
        // Undeclared exception!
        try {
            LocalDateTime.parse("N]EQD=.L(j:U$@'j");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"N]EQD=.L(j:U$@'j\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test4398() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("3", "3", true, 207, 207);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        LocalDateTime.parse("3", dateTimeFormatter0);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test4399() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("3", "3", true, 207, 207);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        LocalDateTime.parse("3", dateTimeFormatter0);
        assertEquals(2000, dateTimeFormatter0.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test44100() throws Throwable {
        // Undeclared exception!
        try {
            MutableDateTime.parse("`7-ARMNyp3 v");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"`7-ARMNyp3 v\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test45101() throws Throwable {
        // Undeclared exception!
        try {
            MutableDateTime.parse("4hzB");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"4hzB\" is malformed at \"hzB\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test46102() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2147483627, 2147483627);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
        assertTrue(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test46103() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2147483627, 2147483627);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
        assertEquals(0L, dateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test46104() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2147483627, 2147483627);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test46105() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2147483627, 2147483627);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test47106() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("w", dateTimeFormatter1);
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test47107() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("w", dateTimeFormatter1);
        assertFalse(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test47108() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("w", dateTimeFormatter1);
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test47109() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("w");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("w", dateTimeFormatter1);
        assertEquals(0L, mutableDateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test48110() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.parseMutableDateTime("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test49111() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('d');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        // Undeclared exception!
        try {
            dateTimeFormatter0.parseMutableDateTime("dA5");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"dA5\" is malformed at \"A5\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test50112() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Instant must not be null", "Instant must not be null", true, 11, 11);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("-08:00:00.000");
        assertEquals(2000, dateTimeFormatter1.getDefaultYear());
    }

    @Test(timeout = 4000)
    public void test50113() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Instant must not be null", "Instant must not be null", true, 11, 11);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("-08:00:00.000");
        assertTrue(dateTimeFormatter1.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test50114() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Instant must not be null", "Instant must not be null", true, 11, 11);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("-08:00:00.000");
        assertFalse(dateTimeFormatter0.isOffsetParsed());
    }

    @Test(timeout = 4000)
    public void test50115() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Instant must not be null", "Instant must not be null", true, 11, 11);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("-08:00:00.000");
        assertEquals(28800000L, mutableDateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test51116() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("`7-A+RMNyp3 v");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
        // Undeclared exception!
        try {
            dateTimeFormatter0.parseMutableDateTime("`7-A+RMNyp3 v");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Parsing not supported
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }
}
