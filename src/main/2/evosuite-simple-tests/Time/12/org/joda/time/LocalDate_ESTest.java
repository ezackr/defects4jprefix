/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 04:15:22 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        // Undeclared exception!
        try {
            localDate0.withEra((-2147483638));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -2147483638 for era must be in the range [0,1]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = localDate0.toString((String) null, locale0);
        assertEquals("2014-02-14", string0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Interval interval0 = localDate0.toInterval();
        assertEquals(1392451200000L, interval0.getEndMillis());
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Interval interval0 = localDate0.toInterval();
        assertEquals(1392364800000L, interval0.getStartMillis());
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
        assertEquals(1392409281320L, dateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withDayOfYear(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDate0.withMonthOfYear(1618);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 1618 for monthOfYear must be in the range [1,12]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Date date0 = localDate0.toDate();
        assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Minutes minutes0 = Minutes.ZERO;
        LocalDate localDate1 = localDate0.minus(minutes0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DateMidnight dateMidnight0 = localDate0.toDateMidnight();
        assertEquals(1392364800000L, dateMidnight0.getMillis());
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withYearOfEra(959);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.withCenturyOfEra(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
        assertEquals(1392364800000L, dateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.withWeekOfWeekyear(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        int int0 = localDate0.getDayOfWeek();
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        int int0 = localDate0.getCenturyOfEra();
        assertEquals(20, int0);
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        // Undeclared exception!
        try {
            LocalDate.parse("5");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"5\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDate0.withDayOfMonth((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -1 for dayOfMonth must be in the range [1,28]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        LocalDate localDate0 = new LocalDate((-183815395200000L));
        Date date0 = localDate0.toDate();
        assertEquals("Wed Feb 13 00:00:00 GMT 3856", date0.toString());
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        // Undeclared exception!
        try {
            localDate0.withYear((-2147483638));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -2147483638 for year must be in the range [-292275054,292278993]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        int int0 = localDate0.getYearOfCentury();
        assertEquals(14, int0);
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.weekyear();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        int int0 = localDate0.getDayOfYear();
        assertEquals(45, int0);
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDate0.withYearOfCentury(Integer.MAX_VALUE);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value 2147483647 for yearOfCentury must be in the range [0,99]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
        LocalDate localDate1 = localDate_Property0.withMaximumValue();
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        LocalDate localDate0 = new LocalDate(2039L, (DateTimeZone) null);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = new LocalDate(localDate0);
        assertTrue(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        int int0 = localDate0.getWeekyear();
        assertEquals(2014, int0);
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.year();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        int int0 = localDate0.getYearOfEra();
        assertEquals(2014, int0);
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalTime localTime0 = new LocalTime();
        DateTime dateTime0 = localDate0.toDateTime(localTime0);
        assertEquals(1392409281320L, dateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.withDayOfWeek(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        int int0 = localDate0.getWeekOfWeekyear();
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
        assertEquals(1392364800000L, dateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        int int0 = localDate0.getEra();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
        Date date0 = localDate0.toDate();
        assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test03841() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test03843() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plus((ReadablePeriod) null);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test03844() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plus((ReadablePeriod) null);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test03845() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plus((ReadablePeriod) null);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test03846() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plus((ReadablePeriod) null);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test03847() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plus((ReadablePeriod) null);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test03948() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test03949() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test03950() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withWeekyear(1);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test03951() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withWeekyear(1);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test03952() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withWeekyear(1);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test03953() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withWeekyear(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test03954() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withWeekyear(1);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test03955() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withWeekyear(1);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test04056() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        assertNotNull(copticChronology0);
    }

    @Test(timeout = 4000)
    public void test04057() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        assertEquals(1, CopticChronology.AM);
    }

    @Test(timeout = 4000)
    public void test04058() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertNotNull(fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test04059() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertEquals("UTC", fixedDateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test04060() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertTrue(fixedDateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test04061() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertEquals("UTC", fixedDateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test04062() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = null;
        try {
            localDate0 = new LocalDate(copticChronology0, fixedDateTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No partial converter found for type: org.joda.time.chrono.CopticChronology
            //
            verifyException("org.joda.time.convert.ConverterManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test04163() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test04164() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04165() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test04166() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04267() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        assertNotNull(ethiopicChronology0);
    }

    @Test(timeout = 4000)
    public void test04268() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        assertEquals(1, EthiopicChronology.EE);
    }

    @Test(timeout = 4000)
    public void test04269() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test04270() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04271() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
        assertEquals(1, EthiopicChronology.EE);
    }

    @Test(timeout = 4000)
    public void test04272() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
        LocalDate.Property localDate_Property0 = localDate0.era();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test04273() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
        LocalDate.Property localDate_Property0 = localDate0.era();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04274() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
        LocalDate.Property localDate_Property0 = localDate0.era();
        assertEquals(1, EthiopicChronology.EE);
    }

    @Test(timeout = 4000)
    public void test04275() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
        LocalDate.Property localDate_Property0 = localDate0.era();
        // Undeclared exception!
        try {
            localDate_Property0.roundHalfCeilingCopy();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
            //
            verifyException("org.joda.time.chrono.LimitChronology", e);
        }
    }

    @Test(timeout = 4000)
    public void test04376() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test04377() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04378() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test04379() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04380() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(698);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test04381() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(698);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test04382() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(698);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test04383() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(698);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test04384() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(698);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04385() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(698);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test04486() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test04487() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04488() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test04489() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test04490() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        // Undeclared exception!
        try {
            localDate_Property0.setCopy("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value \"\" for yearOfEra is not supported
            //
            verifyException("org.joda.time.field.BaseDateTimeField", e);
        }
    }

    @Test(timeout = 4000)
    public void test04591() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test04592() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        assertEquals("+00:00:01.900", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test04593() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test04594() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        assertEquals("+00:00:01.900", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test04595() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test04596() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertEquals("+00:00:01.900", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test04597() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test04598() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertEquals("+00:00:01.900", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test04599() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test045100() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test045101() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals("+00:00:01.900", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test045102() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test045103() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals("+00:00:01.900", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test045104() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test045105() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test045106() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test045107() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test045108() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertEquals("+00:00:01.900", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test045109() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test045110() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertEquals("+00:00:01.900", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test045111() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test045112() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test046113() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test046114() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test046115() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        assertNotNull(buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test046116() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test046117() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        assertNotNull(dateTimeField0);
    }

    @Test(timeout = 4000)
    public void test046118() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test046119() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test046120() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test046121() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test046122() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        LocalDate localDate1 = localDate_Property0.getLocalDate();
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test046123() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        LocalDate localDate1 = localDate_Property0.getLocalDate();
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test046124() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        LocalDate localDate1 = localDate_Property0.getLocalDate();
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test046125() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        LocalDate localDate1 = localDate_Property0.getLocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test046126() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        LocalDate localDate1 = localDate_Property0.getLocalDate();
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test046127() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
        LocalDate localDate1 = localDate_Property0.getLocalDate();
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test047128() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test047129() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test047130() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test047131() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test047132() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test047133() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test047134() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test047135() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test047136() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test047137() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test047138() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test047139() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test047140() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test047141() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test047142() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test047143() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test047144() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test047145() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test047146() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test047147() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test047148() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test047149() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test047150() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test047151() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test047152() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test047153() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test047154() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test047155() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test047156() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test047157() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test047158() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test047159() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test047160() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test047161() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test047162() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test047163() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test047164() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test047165() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test047166() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test047167() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test047168() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test047169() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test047170() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test047171() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test047172() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test047173() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test047174() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test047175() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test047176() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test047177() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test047178() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test047179() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test047180() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test047181() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test047182() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test047183() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test047184() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test048185() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test048186() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test048187() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test048188() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test048189() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test048190() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test048191() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test048192() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test048193() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test049194() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test049195() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test049196() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test049197() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test049198() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test049199() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test049200() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test049201() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test049202() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test050203() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test050204() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test050205() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test050206() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test050207() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test050208() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test050209() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test050210() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test050211() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test050212() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test050213() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test050214() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test050215() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test050216() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test050217() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test050218() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test050219() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test050220() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test050221() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test050222() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test050223() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test050224() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test050225() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test051226() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test051227() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test051228() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test051229() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test051230() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        Chronology chronology0 = localDate_Property0.getChronology();
        assertNotNull(chronology0);
    }

    @Test(timeout = 4000)
    public void test051231() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        Chronology chronology0 = localDate_Property0.getChronology();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test052232() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test052233() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        assertEquals("-00:00:00.253", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test052234() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        assertEquals("-00:00:00.253", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test052235() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test052236() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test052237() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertEquals("-00:00:00.253", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test052238() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertEquals("-00:00:00.253", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test052239() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test052240() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test052241() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test052242() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals("-00:00:00.253", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test052243() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals("-00:00:00.253", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test052244() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test052245() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test052246() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test052247() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test052248() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test052249() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test052250() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertEquals("-00:00:00.253", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test052251() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertEquals("-00:00:00.253", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test052252() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test052253() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test052254() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-253));
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
        LocalDate localDate1 = localDate_Property0.addToCopy((-253));
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test053255() throws Throwable {
        // Undeclared exception!
        try {
            LocalDate.now((DateTimeZone) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Zone must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test054256() throws Throwable {
        // Undeclared exception!
        try {
            LocalDate.now((Chronology) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Chronology must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test055257() throws Throwable {
        // Undeclared exception!
        try {
            LocalDate.fromCalendarFields((Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The calendar must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test056258() throws Throwable {
        // Undeclared exception!
        try {
            LocalDate.fromDateFields((Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test057259() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test057260() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test057261() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDate0.getField(1596);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Invalid index: 1596
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test058262() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test058263() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test058264() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        // Undeclared exception!
        try {
            localDate0.getValue(1054);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Invalid index: 1054
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test059265() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test059266() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test059267() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        // Undeclared exception!
        try {
            localDate0.get((DateTimeFieldType) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The DateTimeFieldType must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test060268() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test060269() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test060270() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        assertNotNull(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test060271() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        assertEquals("secondOfMinute", dateTimeFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test060272() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        assertEquals("secondOfMinute", dateTimeFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test060273() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        // Undeclared exception!
        try {
            localDate0.get(dateTimeFieldType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Field 'secondOfMinute' is not supported
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test061274() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test061275() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test061276() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test061277() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test062278() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test062279() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test062280() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test062281() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test063282() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test063283() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test063284() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        assertNotNull(days0);
    }

    @Test(timeout = 4000)
    public void test063285() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        assertEquals(1, days0.size());
    }

    @Test(timeout = 4000)
    public void test063286() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        assertEquals(5, days0.getDays());
    }

    @Test(timeout = 4000)
    public void test063287() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test063288() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test063289() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test063290() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test063291() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test063292() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertEquals(1, days0.size());
    }

    @Test(timeout = 4000)
    public void test063293() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertEquals(5, days0.getDays());
    }

    @Test(timeout = 4000)
    public void test063294() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        Days days0 = Days.FIVE;
        LocalDate localDate1 = localDate0.minus(days0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test064295() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test064296() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        assertEquals("America/Los_Angeles", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test064297() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        assertEquals("America/Los_Angeles", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test064298() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test064299() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        assertEquals("America/Los_Angeles", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test064300() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        assertEquals("America/Los_Angeles", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test064301() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test064302() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        boolean boolean0 = localDate0.equals(localDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test064303() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        boolean boolean0 = localDate0.equals(localDate0);
        assertEquals("America/Los_Angeles", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test064304() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        boolean boolean0 = localDate0.equals(localDate0);
        assertEquals("America/Los_Angeles", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test064305() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        boolean boolean0 = localDate0.equals(localDate0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test065306() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test065307() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test065308() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        assertNotNull(iSOChronology0);
    }

    @Test(timeout = 4000)
    public void test065309() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        boolean boolean0 = localDate0.equals(iSOChronology0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test065310() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        boolean boolean0 = localDate0.equals(iSOChronology0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test066311() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test066312() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test066313() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.hashCode();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test066314() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.hashCode();
        localDate0.hashCode();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test067315() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test067316() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test067317() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        int int0 = localDate0.compareTo((ReadablePartial) localDate0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test067318() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        int int0 = localDate0.compareTo((ReadablePartial) localDate0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test068319() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test068320() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test068321() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDate0.compareTo((ReadablePartial) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.base.AbstractPartial", e);
        }
    }

    @Test(timeout = 4000)
    public void test069322() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test069323() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test069324() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test069325() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test069326() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test069327() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test069328() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test069329() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test069330() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        int int0 = localDate0.compareTo((ReadablePartial) localDate1);
        assertFalse(localDate0.equals((Object) localDate1));
    }

    @Test(timeout = 4000)
    public void test069331() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        int int0 = localDate0.compareTo((ReadablePartial) localDate1);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test069332() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        int int0 = localDate0.compareTo((ReadablePartial) localDate1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test069333() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        int int0 = localDate0.compareTo((ReadablePartial) localDate1);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test069334() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        int int0 = localDate0.compareTo((ReadablePartial) localDate1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test069335() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        int int0 = localDate0.compareTo((ReadablePartial) localDate1);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test069336() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusDays((-324));
        int int0 = localDate0.compareTo((ReadablePartial) localDate1);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test070337() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test070338() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test070339() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        assertNotNull(buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test070340() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test070341() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
        assertNotNull(localTime0);
    }

    @Test(timeout = 4000)
    public void test070342() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
        assertEquals(4, localTime0.size());
    }

    @Test(timeout = 4000)
    public void test070343() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test070344() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
        // Undeclared exception!
        try {
            localDate0.toLocalDateTime(localTime0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The chronology of the time does not match
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test071345() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test071346() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test071347() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDate0.toLocalDateTime((LocalTime) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The time must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test072348() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test072349() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test072350() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalTime localTime0 = new LocalTime();
        assertNotNull(localTime0);
    }

    @Test(timeout = 4000)
    public void test072351() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalTime localTime0 = new LocalTime();
        assertEquals(4, localTime0.size());
    }

    @Test(timeout = 4000)
    public void test072352() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalTime localTime0 = new LocalTime();
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        assertNotNull(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test072353() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalTime localTime0 = new LocalTime();
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test072354() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalTime localTime0 = new LocalTime();
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        assertEquals(4, localTime0.size());
    }

    @Test(timeout = 4000)
    public void test072355() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalTime localTime0 = new LocalTime();
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        assertEquals(4, localDateTime0.size());
    }

    @Test(timeout = 4000)
    public void test073356() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test073357() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test073358() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
        assertNotNull(dateTime0);
    }

    @Test(timeout = 4000)
    public void test073359() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test073360() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
        assertEquals(1392409281320L, dateTime0.getMillis());
    }

    @Test(timeout = 4000)
    public void test074361() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test074362() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test074363() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        assertNotNull(buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test074364() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test074365() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        assertNotNull(lenientChronology0);
    }

    @Test(timeout = 4000)
    public void test074366() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test074367() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        assertNotNull(localTime0);
    }

    @Test(timeout = 4000)
    public void test074368() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        assertEquals(4, localTime0.size());
    }

    @Test(timeout = 4000)
    public void test074369() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        assertEquals(1, BuddhistChronology.BE);
    }

    @Test(timeout = 4000)
    public void test074370() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertNotNull(fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test074371() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertEquals("UTC", fixedDateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test074372() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertEquals("UTC", fixedDateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test074373() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertTrue(fixedDateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test074374() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        LocalTime localTime0 = LocalTime.now((Chronology) lenientChronology0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        // Undeclared exception!
        try {
            localDate0.toDateTime(localTime0, (DateTimeZone) fixedDateTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The chronology of the time does not match
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test075375() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test075376() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test075377() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields(localDate0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test075378() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields(localDate0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test075379() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields(localDate0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test075380() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields(localDate0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test075381() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields(localDate0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test076382() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test076383() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test076384() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test076385() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test076386() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test076387() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test076388() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test077389() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test077390() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test077391() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        assertNotNull(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test077392() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        assertEquals("hourOfDay", dateTimeFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test077393() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        assertEquals("hourOfDay", dateTimeFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test077394() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        // Undeclared exception!
        try {
            localDate0.withField(dateTimeFieldType0, (-932));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Field 'hourOfDay' is not supported
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test078395() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test078396() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test078397() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        // Undeclared exception!
        try {
            localDate0.withField((DateTimeFieldType) null, (-236));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Field must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test079398() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test079399() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test079400() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        assertNotNull(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test079401() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        assertEquals("centuryOfEra", dateTimeFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test079402() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        assertEquals("centuryOfEra", dateTimeFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test079403() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        // Undeclared exception!
        try {
            localDate0.withField(dateTimeFieldType0, (-932));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -932 for centuryOfEra must be in the range [0,2922789]
            //
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test080404() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test080405() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test080406() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        assertNotNull(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test080407() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        assertEquals("months", durationFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test080408() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        assertEquals("months", durationFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test080409() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test080410() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test080411() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test080412() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test080413() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
        assertEquals("months", durationFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test080414() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
        assertEquals("months", durationFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test080415() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test081416() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test081417() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test081418() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        // Undeclared exception!
        try {
            localDate0.withFieldAdded((DurationFieldType) null, (-715));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Field must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test082419() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test082420() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test082421() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
        assertNotNull(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test082422() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
        assertEquals("eras", durationFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test082423() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
        assertEquals("eras", durationFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test082424() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
        // Undeclared exception!
        try {
            localDate0.withFieldAdded(durationFieldType0, 329);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Field 'eras' is not supported
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test083425() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test083426() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test083427() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        assertNotNull(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test083428() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        assertEquals("centuries", durationFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test083429() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        assertEquals("centuries", durationFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test083430() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test083431() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test083432() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test083433() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test083434() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test083435() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertEquals("centuries", durationFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test083436() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertEquals("centuries", durationFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test083437() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1494));
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test084438() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test084439() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test084440() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        assertNotNull(periodType0);
    }

    @Test(timeout = 4000)
    public void test084441() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        assertEquals("Weeks", periodType0.getName());
    }

    @Test(timeout = 4000)
    public void test084442() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        assertEquals(1, periodType0.size());
    }

    @Test(timeout = 4000)
    public void test084443() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        assertNotNull(period0);
    }

    @Test(timeout = 4000)
    public void test084444() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        assertEquals("Weeks", periodType0.getName());
    }

    @Test(timeout = 4000)
    public void test084445() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        assertEquals(1, periodType0.size());
    }

    @Test(timeout = 4000)
    public void test084446() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test084447() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test084448() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test084449() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test084450() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
        assertEquals("Weeks", periodType0.getName());
    }

    @Test(timeout = 4000)
    public void test084451() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
        assertEquals(1, periodType0.size());
    }

    @Test(timeout = 4000)
    public void test084452() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        PeriodType periodType0 = PeriodType.weeks();
        Period period0 = new Period((long) 1, periodType0);
        LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test085453() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test085454() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test085455() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears((-1));
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test085456() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears((-1));
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test085457() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears((-1));
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test085458() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears((-1));
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test085459() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears((-1));
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test085460() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears((-1));
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test086461() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test086462() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test086463() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test086464() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test086465() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test086466() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test086467() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusYears(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test087468() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test087469() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test087470() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(1);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test087471() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(1);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test087472() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(1);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test087473() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test087474() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(1);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test087475() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(1);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test088476() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test088477() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test088478() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test088479() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test088480() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test088481() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test088482() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusMonths(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test089483() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test089484() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test089485() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plusWeeks(1);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test089486() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plusWeeks(1);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test089487() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plusWeeks(1);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test089488() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plusWeeks(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test089489() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plusWeeks(1);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test089490() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.plusWeeks(1);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test090491() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test090492() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test090493() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusWeeks(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test090494() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusWeeks(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test090495() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusWeeks(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test090496() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusWeeks(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test090497() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusWeeks(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test091498() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test091499() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test091500() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusDays(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test091501() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusDays(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test091502() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusDays(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test091503() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusDays(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test091504() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.plusDays(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test092505() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test092506() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test092507() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusYears(1);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test092508() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusYears(1);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test092509() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusYears(1);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test092510() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusYears(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test092511() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusYears(1);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test092512() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusYears(1);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test093513() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test093514() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test093515() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusYears(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test093516() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusYears(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test093517() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusYears(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test093518() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusYears(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test093519() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusYears(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test094520() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test094521() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test094522() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusMonths((-107));
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test094523() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusMonths((-107));
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test094524() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusMonths((-107));
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test094525() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusMonths((-107));
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test094526() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusMonths((-107));
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test094527() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusMonths((-107));
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test095528() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test095529() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test095530() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusMonths(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test095531() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusMonths(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test095532() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusMonths(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test095533() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusMonths(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test095534() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusMonths(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test096535() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test096536() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test096537() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(1);
        assertFalse(localDate1.equals((Object) localDate0));
    }

    @Test(timeout = 4000)
    public void test096538() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(1);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test096539() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(1);
        assertNotSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test096540() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(1);
        assertNotSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test096541() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(1);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test096542() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(1);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test097543() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test097544() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test097545() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test097546() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test097547() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test097548() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test097549() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.minusWeeks(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test098550() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test098551() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test098552() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusDays(0);
        assertNotNull(localDate1);
    }

    @Test(timeout = 4000)
    public void test098553() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusDays(0);
        assertSame(localDate0, localDate1);
    }

    @Test(timeout = 4000)
    public void test098554() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusDays(0);
        assertSame(localDate1, localDate0);
    }

    @Test(timeout = 4000)
    public void test098555() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusDays(0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test098556() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.minusDays(0);
        assertEquals(3, localDate1.size());
    }

    @Test(timeout = 4000)
    public void test099557() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test099558() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test099559() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        assertNotNull(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test099560() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test099561() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test099562() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        // Undeclared exception!
        try {
            localDate0.property(dateTimeFieldType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Field 'clockhourOfDay' is not supported
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test100563() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test100564() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test100565() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        // Undeclared exception!
        try {
            localDate0.property((DateTimeFieldType) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The DateTimeFieldType must not be null
            //
            verifyException("org.joda.time.LocalDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test101566() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test101567() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test101568() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        assertNotNull(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test101569() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        assertEquals("dayOfMonth", dateTimeFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test101570() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        assertEquals("dayOfMonth", dateTimeFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test101571() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        assertNotNull(localDate_Property0);
    }

    @Test(timeout = 4000)
    public void test101572() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test101573() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        assertEquals("dayOfMonth", dateTimeFieldType0.toString());
    }

    @Test(timeout = 4000)
    public void test101574() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        assertEquals("dayOfMonth", dateTimeFieldType0.getName());
    }

    @Test(timeout = 4000)
    public void test102575() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test102576() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test102577() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        // Undeclared exception!
        try {
            localDate0.toString("org.joda.time.MutableInterval");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
            //
            verifyException("org.joda.time.format.DateTimeFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test103578() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test103579() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test103580() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        String string0 = localDate0.toString((String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test103581() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        String string0 = localDate0.toString((String) null);
        assertEquals("2014-02-14", string0);
    }

    @Test(timeout = 4000)
    public void test103582() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        String string0 = localDate0.toString((String) null);
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test104583() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test104584() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        assertEquals(3, localDate0.size());
    }

    @Test(timeout = 4000)
    public void test104585() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test104586() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test104587() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test104588() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test104589() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test104590() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test104591() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test104592() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        try {
            localDate0.toString("9~Am5BQn./Bf", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
            //
            verifyException("org.joda.time.format.DateTimeFormat", e);
        }
    }
}
