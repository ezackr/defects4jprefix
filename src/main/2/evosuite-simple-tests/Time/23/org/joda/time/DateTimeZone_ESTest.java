/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:33:23 GMT 2024
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeZone.forOffsetHours(17887500);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateTimeZone.forOffsetMillis(1);
        DateTimeZone.forOffsetMillis(1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        dateTimeZone0.getShortName((-1167L), locale0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(112);
        Locale locale0 = Locale.CANADA_FRENCH;
        dateTimeZone0.getShortName((long) 112, locale0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        DateTimeZone.forOffsetHours(0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getName(49845248L);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DateTimeZone.forOffsetMillis(0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.adjustOffset(5106L, false);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        fixedDateTimeZone0.getOffset((long) 238);
        fixedDateTimeZone0.toString();
        fixedDateTimeZone0.convertUTCToLocal(238);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getShortName(582L);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.US;
        dateTimeZone0.getName(152L, locale0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DateMidnight dateMidnight0 = new DateMidnight(137L);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(9223372036854775743L, true, 9223372036854775743L);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC((-2881L), true);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BuddhistChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(977L, false);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
        DateTimeZone.setDefault(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        NameProvider nameProvider0 = DateTimeZone.getNameProvider();
        DateTimeZone.setNameProvider(nameProvider0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        DateTimeZone.forOffsetMillis((-130));
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        DateTimeZone.forOffsetHours((-20));
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        DateTimeZone.getAvailableIDs();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        DateTimeZone.forID("E/LT");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone.setDefault(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        fixedDateTimeZone0.isStandardOffset(0L);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        DateTimeZone.setDefault((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        DateTimeZone.getDefault();
        DateTimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Provider provider0 = DateTimeZone.getProvider();
        DateTimeZone.setProvider(provider0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        DateTimeZone.setProvider((Provider) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDateTime localDateTime0 = new LocalDateTime(2053L, dateTimeZone0);
        dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(564, 564);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        DateTimeZone.forID("UTC");
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 10800000L);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.adjustOffset(49349744L, true);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone1.UTC.isFixed();
        Locale locale0 = Locale.ENGLISH;
        dateTimeZone0.UTC.getNameKey((-172L));
        dateTimeZone0.getOffsetFromLocal((-172L));
        dateTimeZone0.getShortName((long) (-28800000));
        dateTimeZone1.nextTransition((-172L));
        DateTimeZone.getDefault();
        Integer integer0 = new Integer((-28800000));
        DateTimeZone.forID("-08:00");
        LocalDateTime localDateTime0 = new LocalDateTime(9972000000L, dateTimeZone1);
        dateTimeZone1.isLocalDateTimeGap(localDateTime0);
        dateTimeZone0.getStandardOffset(886L);
        dateTimeZone1.previousTransition(3600768L);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, (-1L));
        Locale locale0 = Locale.CANADA_FRENCH;
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getOffsetFromLocal(581L);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1753);
        dateTimeZone0.getName((long) 1753);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("EET");
        dateTimeZone0.getOffsetFromLocal(2052L);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("EET");
        dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 58);
        DateTimeZone.setDefault(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        DateTimeZone.forID((String) null);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        DateTimeZone.forID("+vV=w|\"8pC*B&iq9");
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("EET");
        dateTimeZone0.getOffsetFromLocal((-9223372036854775780L));
        dateTimeZone0.convertLocalToUTC((-9223372036854775780L), false);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        DateTimeZone.forID("+00:06");
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        DateTimeZone.forID("-EAT");
        Locale locale0 = Locale.GERMAN;
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(567, "Fk|;Bn;ga;");
        DateTimeZone.forTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.UTC;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(9223372036854775743L, false);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(9223372036854775743L, true);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        uTCProvider0.getAvailableIDs();
        DateTimeZone.setProvider(uTCProvider0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(53, "AET");
        ZoneId zoneId0 = simpleTimeZone0.toZoneId();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        fixedDateTimeZone0.UTC.getOffset((ReadableInstant) null);
        DateTimeZone.setDefault(fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        DateTimeZone.forID("+00:00");
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        DateTimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateMidnight dateMidnight0 = new DateMidnight(137L);
        dateTimeZone0.UTC.getOffset((ReadableInstant) dateMidnight0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.adjustOffset((-9223372036829575809L), true);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        DateTimeZone.forTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        DateTimeZone.forOffsetMillis(1000);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.isStandardOffset((-766623600001L));
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        DateTimeZone.setNameProvider((NameProvider) null);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Calcutta");
        CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
        cachedDateTimeZone0.getOffsetFromLocal(9223372036854775782L);
    }
}
