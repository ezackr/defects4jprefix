/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 00:05:29 GMT 2024
 */
package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.setCodec((ObjectCodec) null);
        assertNull(treeTraversingParser0.getCurrentName());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.withArray(".aMf");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        Version version0 = treeTraversingParser0.version();
        assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        try {
            treeTraversingParser0.getFloatValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        try {
            treeTraversingParser0.getNumberValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        // Undeclared exception!
        try {
            treeTraversingParser0.readValueAsTree();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No ObjectCodec defined for parser, needed for deserialization
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        boolean boolean0 = treeTraversingParser0.hasTextCharacters();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        // Undeclared exception!
        try {
            treeTraversingParser0.getTextLength();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        int int0 = treeTraversingParser0.getTextOffset();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        boolean boolean0 = treeTraversingParser0.isClosed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
        assertEquals((short) 0, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        Object object0 = treeTraversingParser0.getCurrentValue();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        // Undeclared exception!
        try {
            treeTraversingParser0._handleEOF();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Internal error: this code path should never get executed
            //
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
        assertEquals((-1L), jsonLocation0.getByteOffset());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        int int0 = treeTraversingParser0.getIntValue();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        // Undeclared exception!
        try {
            treeTraversingParser0.getTextCharacters();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        try {
            treeTraversingParser0.getDecimalValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        try {
            treeTraversingParser0.getLongValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        double double0 = treeTraversingParser0.getDoubleValue();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.close();
        assertTrue(treeTraversingParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.nextTextValue();
        treeTraversingParser0.getText();
        assertTrue(treeTraversingParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
        assertEquals("[", string0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        arrayNode0.add((JsonNode) arrayNode0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        assertTrue(treeTraversingParser0.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putObject("mY[p");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        assertTrue(treeTraversingParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0._startContainer = true;
        treeTraversingParser0.nextToken();
        assertEquals(4, treeTraversingParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.putArray("");
        arrayNode0.insertObject(427);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextTextValue();
        assertTrue(treeTraversingParser0.isExpectedStartObjectToken());
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode((JsonNodeFactory) null, hashMap0);
        hashMap0.put("", objectNode0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.nextFieldName();
        assertTrue(treeTraversingParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        try {
            treeTraversingParser0.getNumberType();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, cannot use numeric value accessors
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        POJONode pOJONode0 = new POJONode((Object) null);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(pOJONode0);
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, objectMapper0);
        JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
        assertEquals(0, jsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.skipChildren();
        assertEquals(JsonToken.END_OBJECT, treeTraversingParser0.getCurrentToken());
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        POJONode pOJONode0 = new POJONode((Object) null);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(pOJONode0);
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, objectMapper0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.skipChildren();
        assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        String string0 = treeTraversingParser0.currentName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.getCurrentName();
        assertTrue(treeTraversingParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.overrideCurrentName("$j&+}Dr");
        assertTrue(treeTraversingParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.overrideCurrentName("$j&+}Dr");
        assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.close();
        String string0 = treeTraversingParser0.getText();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
        String string0 = treeTraversingParser0.nextTextValue();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        IntNode intNode0 = new IntNode(36);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
        treeTraversingParser0.nextTextValue();
        String string0 = treeTraversingParser0.getText();
        assertEquals("36", string0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        byte[] byteArray0 = new byte[2];
        BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
        assertEquals("AAA=", string0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        byte[] byteArray0 = new byte[2];
        BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
        TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser1.nextToken();
        FloatNode floatNode0 = new FloatNode(99.4F);
        NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor) treeTraversingParser0._nodeCursor;
        NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(floatNode0, nodeCursor_RootCursor0);
        treeTraversingParser1._nodeCursor = (NodeCursor) nodeCursor_ArrayCursor0;
        String string0 = treeTraversingParser1.getText();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
        assertEquals(JsonParser.NumberType.BIG_DECIMAL, jsonParser_NumberType0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        BigDecimal bigDecimal0 = new BigDecimal(0.0);
        DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.close();
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextBooleanValue();
        treeTraversingParser0.nextToken();
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ValueNode valueNode0 = jsonNodeFactory0.rawValueNode((RawValue) null);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        DoubleNode doubleNode0 = DoubleNode.valueOf(1959.0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
        treeTraversingParser0.close();
        boolean boolean0 = treeTraversingParser0.isNaN();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        DoubleNode doubleNode0 = DoubleNode.valueOf(1959.0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        TextNode textNode0 = new TextNode("[rKJ-Z+a}C(Q05hKJv");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
        try {
            treeTraversingParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot access contents of TextNode as binary due to broken Base64 encoding: Illegal character '[' (code 0x5b) in base64 content
            //
            verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        // Undeclared exception!
        try {
            treeTraversingParser0.readBinaryValue((OutputStream) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        int int0 = treeTraversingParser0.readBinaryValue((OutputStream) pipedOutputStream0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.close();
        byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
        assertNull(byteArray0);
    }
}
